<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Northwoods.Go.Layout</name>
    </assembly>
    <members>
        <member name="T:Northwoods.Go.Layout.GoLayoutDirection">
            <summary>
            This enumeration specifies the general direction in which the automatic
            layout algorithm will position nodes.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutDirection.Right">
            <summary>
            Start on the left side and proceed toward the right.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutDirection.Down">
            <summary>
            Start at the top and proceed downwards.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutDirection.Left">
            <summary>
            Start at the right side and proceed toward the left.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutDirection.Up">
            <summary>
            Start at the bottom and proceed upwards.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutProgressEventHandler">
            <summary>
            Represents methods that handle <see cref="T:Northwoods.Go.Layout.GoLayoutProgressEventArgs"/>.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutProgressEventArgs">
            <summary>
            Holds information for the <see cref="E:Northwoods.Go.Layout.GoLayout.Progress"/> event.
            </summary>
            <remarks>
            This class passes ratio done and an optional message to <see cref="E:Northwoods.Go.Layout.GoLayout.Progress"/>
            event handlers.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutProgressEventArgs.#ctor(System.Single,System.String)">
            <summary>
            This constructor creates an <c>EventArgs</c> with no
            particular progress information.
            </summary>
            <param name="done"></param>
            <param name="msg"></param>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutProgressEventArgs.Progress">
            <summary>
            Gets or sets the ratio that <see cref="M:Northwoods.Go.Layout.GoLayout.PerformLayout"/> is done.
            </summary>
            <value>
            This is a single float between zero and one.  The default value is zero.
            </value>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutProgressEventArgs.Message">
            <summary>
            Gets or sets an optional message string that describes the current state
            of the call to <see cref="M:Northwoods.Go.Layout.GoLayout.PerformLayout"/>.
            </summary>
            <value>
            This defaults to null.
            </value>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayout">
            <summary>
            GoLayout provides a common super-class for auto-layout algorithms.
            The key aspects of an auto-layout algorithm are an input <see cref="T:Northwoods.Go.GoDocument"/>
            and a PerformLayout method.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayout.#ctor">
            <summary>
            Constructs a layout performer with null values for its network, and document.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayout.PerformLayout">
            <summary>
            Performs auto-layout.  You should set the <see cref="P:Northwoods.Go.Layout.GoLayout.Document"/>
            property before calling this method.
            </summary>
            <remarks>
            This method is overridden by 
            sub-classes to provide a particular kind of auto-layout algorithm.
            Occasionally during this method there may be <see cref="E:Northwoods.Go.Layout.GoLayout.Progress"/>
            events indicating how much of the layout has been done.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayout.OnProgress(Northwoods.Go.Layout.GoLayoutProgressEventArgs)">
            <summary>
            Invoke all Progress event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayout.RaiseProgress(System.Single,System.String)">
            <summary>
            Call <see cref="M:Northwoods.Go.Layout.GoLayout.OnProgress(Northwoods.Go.Layout.GoLayoutProgressEventArgs)"/> with an appropriate <see cref="T:Northwoods.Go.Layout.GoLayoutProgressEventArgs"/>.
            </summary>
            <param name="done">a ratio between 0 and 1</param>
            <param name="msg">an optional message string describing the state of the layout algorithm</param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayout.RaiseProgress(System.Single)">
            <summary>
            Call <see cref="M:Northwoods.Go.Layout.GoLayout.OnProgress(Northwoods.Go.Layout.GoLayoutProgressEventArgs)"/> with an empty message string.
            </summary>
            <param name="done">a ratio between 0 and 1</param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayout.RemoveNetwork">
            <summary>
            Removes the <see cref="T:Northwoods.Go.Layout.IGoLayoutNetwork"/> that the layout will be performed on.
            </summary>
            <remarks>
            This is called by the <see cref="P:Northwoods.Go.Layout.GoLayout.Document"/> setter to remove any old network
            that is associated with this layout.
            The implementation of <see cref="M:Northwoods.Go.Layout.GoLayout.PerformLayout"/> should automatically create
            a new network appropriate for the layout algorithm if needed.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayout.Version">
            <summary>
            Return the version of GoLayout being used.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayout.VersionName">
            <summary>
            Return the name of the version of GoLayout being used.
            </summary>
        </member>
        <member name="E:Northwoods.Go.Layout.GoLayout.Progress">
            <summary>
            The Progress event is raised at various times during the <see cref="M:Northwoods.Go.Layout.GoLayout.PerformLayout"/>
            routine to indicate progress.
            In particular, a Progress event should be raised at the start of the layout 
            with a progress of 0.0 and at the end of the layout with a progress of 1.0.
            Other calls with progress values should be layout routine specific.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayout.Document">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.GoDocument"/> that the layout will be performed on.
            </summary>
            <value>
            The initial value is null.
            Changing this value will also call <see cref="M:Northwoods.Go.Layout.GoLayout.RemoveNetwork"/>.
            </value>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayout.View">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.GoView"/> whose thread is used
            to run document-updating code and <see cref="E:Northwoods.Go.Layout.GoLayout.Progress"/> events.
            </summary>
            <remarks>
            Automatic layout does not make use of any threads.  But if your application
            calls <see cref="M:Northwoods.Go.Layout.GoLayout.PerformLayout"/> in a worker thread, you can have
            <see cref="M:Northwoods.Go.Layout.GoLayout.PerformLayout"/> call update the positions of nodes and the
            paths of links in this Control's thread.
            The document changes that happen are more efficiently and (depending on your
            application) more safely performed in the thread handling events for your GoView.
            <see cref="E:Northwoods.Go.Layout.GoLayout.Progress"/> event handlers will also be called in the view's thread.
            At this time this property is only used for Windows Forms.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutForceDirected">
            <summary>
            GoLayoutForceDirected provides an auto-layout algorithm for
            graphs which utilizes a force-directed method.
            </summary>
            <remarks>
            The graph is viewed as
            a system of bodies with forces acting between the bodies.  The algorithm
            seeks a configuration of the bodies with locally minimal energy, i.e.,
            a position such that the sum of the forces on each body is zero.
            </remarks>
            <example>
            Typical usage:
            <code>
            GoDocument doc = goView1.Document;
            doc.StartTransaction();
            GoLayoutForceDirected layout = new GoLayoutForceDirected();
            layout.Document = doc;
            // ...maybe set other properties...
            layout.PerformLayout();
            doc.FinishTransaction("layout");
            </code>
            To lay out only a portion of a document, you will need to construct
            a <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork"/>, initialize it with just the
            nodes and links that you want to use, and set the <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirected.Network"/>
            property.
            <code>
            GoDocument doc = goView1.Document;
            doc.StartTransaction();
            GoLayoutForceDirected layout = new GoLayoutForceDirected();
            layout.Document = doc;
            layout.Network = layout.CreateNetwork();
            // if you want to start off with the network representing the complete document,
            // and then remove the nodes (or links) that you don't want:
            layout.Network.AddNodesAndLinksFromCollection(doc, true);
            foreach (GoObject obj in doc) {
              if (...obj is a node that you want to exclude from the layout...) {
                layout.Network.DeleteNode(obj);  // there is also a DeleteLink method
              }
            }
            // ...maybe set other properties...
            layout.PerformLayout();
            doc.FinishTransaction("layout");
            </code>
            Read the GoLayout User Guide for more details.
            </example>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirected.#ctor">
            <summary>
            Constucts a ForceDirected layout class with null network, document.
            PerformLayout() will be a no-op until the document has been set.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirected.#ctor(Northwoods.Go.Layout.GoLayoutForceDirected)">
            <summary>
            Make a copy of a <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirected"/>, copying most of the
            important properties except for the <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirected.Network"/>.
            </summary>
            <param name="layout"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirected.RemoveNetwork">
            <summary>
            Set <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirected.Network"/> to null.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirected.CreateNetwork">
            <summary>
            Allocate a <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirected.PerformLayout">
            <summary>
            Performs force-directed auto-layout.
            </summary>
            <remarks>
            This method can be overridden to customize the layout algorithm,
            but care should be taken to ensure that each node and link in the
            input network are properly initialized and terminated.
            If <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirected.Network"/> is null, one is automatically allocated
            and initialized with the graph that is in the <see cref="P:Northwoods.Go.Layout.GoLayout.Document"/>.
            After all of the computations are completed, this calls
            <see cref="M:Northwoods.Go.Layout.GoLayoutForceDirected.LayoutNodesAndLinks"/> in order to commit the positions
            of all of the nodes.
            No undo/redo transaction is started or finished by this method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirected.NeedsClusterLayout">
            <summary>
            Determines whether a clustering layout should be done before the regular force-directed layout.
            </summary>
            <returns></returns>
            <remarks>
            <para>
            A clustering layout is useful when the graph is somewhat tree-like.
            </para>
            <para>
            For compatibility with older behavior,
            this does not examine the graph structure, but only at the positions of the nodes.
            By default this looks at the first few nodes in the <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirected.Network"/>.
            If several of their <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.Bounds"/> intersect,
            this will return true; otherwise this will return false.
            Hence for a network whose nodes are already "spread out",
            no cluster layout will occur.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirected.ComputeClusterLayoutIterations(System.Int32,System.Int32)">
            <summary>
            Determine how many additional force-directed layout iterations should occur for this clustered network.
            </summary>
            <param name="level">the recursion depth for clustered layout</param>
            <param name="maxiter"></param>
            <returns>a non-negative number that will be temporarily added to <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirected.MaxIterations"/></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirected.ArrangeConnectedGraphs(System.Collections.IEnumerator,Northwoods.Go.Layout.GoLayoutForceDirectedNetwork)">
            <summary>
            During a clustered layout, position each separate graph network so that they do not overlap each other.
            </summary>
            <param name="subnets">an <c>IEnumerator</c> iterating over a number of <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork"/>,
            each containing a connected graph; this is the result of calling <see cref="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.SplitIntoSubNetworks"/></param>
            <param name="singletons">a <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork"/> containing only unconnected individual nodes</param>
            <remarks>
            <para>
            There may be separate component graphs (without any links between them) within the original network.
            The <paramref name="subnets"/> enumerator will iterate over a number of <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork"/>s,
            each containing a connected (sub)graph.
            If the original network is connected, i.e. if there is at least one path of
            undirected links from each node in the original <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirected.Network"/> to every other node,
            then there will be only a single <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork"/>
            for the enumerator, and the <paramref name="singletons"/> network will be empty.
            </para>
            <para>
            This method places each separately-laid-out graph in different non-overlapping locations.
            By default this ignores <see cref="M:Northwoods.Go.Layout.GoLayoutForceDirected.IsFixed(Northwoods.Go.Layout.GoLayoutForceDirectedNode)"/>, because it may move "fixed" nodes to
            ensure disconnected subgraphs do not overlap.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirected.AddComments(Northwoods.Go.Layout.GoLayoutForceDirectedNode)">
            <summary>
            Find associated objects to be positioned along with the
            <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedNode"/>.<see cref="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.GoObject"/>.
            </summary>
            <param name="n"></param>
            <remarks>
            This method is called for each node in the network, when <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirected.Comments"/> is true.
            The standard behavior is to look for <see cref="T:Northwoods.Go.GoBalloon"/> objects that refer to
            the force-directed node's <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.GoObject"/>.
            You may want to override this method in order to customize how
            any associated objects are found and how a new <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedNode"/>
            and <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedLink"/>
            are added to the network to represent the balloon comment.
            This method sets the new node's <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.Charge"/>
            to the value of <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirected.DefaultCommentElectricalCharge"/>, and sets the new link's
            <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirectedLink.Length"/> to the value of
            <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirected.DefaultCommentSpringLength"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirected.GetNodeDistance(Northwoods.Go.Layout.GoLayoutForceDirectedNode,Northwoods.Go.Layout.GoLayoutForceDirectedNode)">
            <summary>
            Returns the distance between two nodes.
            The default implementation considers the shortest distance between the two nodes.
            If the nodes correspond to top-level Go objects, the width and height of the
            GoObject is factored into the distance between the nodes.  If the nodes do not
            correspond to top-level Go objects, then the nodes implicitly have a width and
            height of zero, and the distance is calculated.
            </summary>
            <param name="nodeA"></param>
            <param name="nodeB"></param>
            <returns>Returns the distance between two nodes.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirected.SpringStiffness(Northwoods.Go.Layout.GoLayoutForceDirectedLink)">
            <summary>
            Returns the stiffness of the spring representing the GoLayoutForceDirectedLink link.  The
            to and from nodes of link L are acted upon by a force of magnitude
            <c>SpringStiffness(L) * (GetNodeDistance(L.from, L.to) - SpringLength(L))</c>.
            </summary>
            <param name="link"></param>
            <returns>Returns the stiffness of the spring representing link,
            normally the value of <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirected.DefaultSpringStiffness"/>,
            unless the value of <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirectedLink.Stiffness"/> had already been set,
            in which case it just returns that value.</returns>
            <remarks>
            Very small positive numbers are normal.
            Values larger than that tend to cause "jittery" behavior that makes it hard or impossible to settle down,
            since no stable state can be found.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirected.SpringLength(Northwoods.Go.Layout.GoLayoutForceDirectedLink)">
            <summary>
            Returns the length of the spring representing the GoLayoutForceDirectedLink link.  The
            to and from nodes of a link L are acted upon by a force of magnitude
            <c>SpringStiffness(L) * (GetNodeDistance(L.from, L.to) - SpringLength(L))</c>.
            </summary>
            <param name="link"></param>
            <returns>Returns the length of the spring representing link, normally the value of <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirected.DefaultSpringLength"/>,
            unless the value of <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirectedLink.Length"/> had already been set,
            in which case it just returns that value.</returns>
            <remarks>
            If your nodes are large, you may need to increase this value,
            so that many nodes aren't forced to be packed in close to each other.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirected.ElectricalCharge(Northwoods.Go.Layout.GoLayoutForceDirectedNode)">
            <summary>
            Returns the charge of the point representing the GoLayoutForceDirectedNode node.  A node U
            and a node V are acted upon by a force of magnitude
             <c>(ElectricalCharge(U) * ElectricalCharge(V)) / (GetNodeDistance(U,V) * GetNodeDistance(U,V))</c>.
            A node U is acted upon by forces in the X and Y directions of magnitude
             <c>ElectricalFieldX(U.position) * ElectricalCharge(U)</c> and
             <c>ElectricalFieldY(U.position) * ElectricalCharge(U)</c>.
            </summary>
            <param name="node"></param>
            <returns>Returns the charge of the node,
            normally the value of <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirected.DefaultElectricalCharge"/>,
            unless the value of <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.Charge"/> had already been set,
            in which case it just returns that value.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirected.ElectricalFieldX(System.Drawing.PointF)">
            <summary>
            Returns the electrical field in the X direction
            acting on a node at the logical point PointF xy.  A node U
            is acted upon by a force in the X direction of magnitude
             <c>ElectricalFieldX(U.position) * ElectricalCharge(U)</c>.
            </summary>
            <param name="xy"></param>
            <returns>Returns the electrical field in the X direction, normally zero</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirected.ElectricalFieldY(System.Drawing.PointF)">
            <summary>
            Returns the electrical field in the Y direction
            acting on a node at the logical point <c>PointF</c> xy.  A node U
            is acted upon by a force in the Y direction of magnitude
             <c>ElectricalFieldY(U.position) * ElectricalCharge(U)</c>.
            </summary>
            <param name="xy"></param>
            <returns>Returns the electrical field in the Y direction, normally zero</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirected.GravitationalMass(Northwoods.Go.Layout.GoLayoutForceDirectedNode)">
            <summary>
            The function GravitationalMass returns the mass of the point
            representing the GoLayoutForceDirectedNode node.  A node U
            is acted upon by forces in the X and Y directions of magnitude
             <c>GravitationalFieldX(U.position) * GravitationalMass(U)</c> and
             <c>GravitationalFieldY(U.position) * GravitationalMass(U)</c>.
            </summary>
            <param name="node"></param>
            <returns>Returns the mass of node,
            normally the value of <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirected.DefaultGravitationalMass"/>,
            unless the value of <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.Mass"/> had already been set,
            in which case it just returns that value.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirected.GravitationalFieldX(System.Drawing.PointF)">
            <summary>
            The function GravitationalFieldX returns the gravitational field
            in the X direction acting on a node at the logical point <c>PointF</c> xy.  A node U
            is acted upon by a force in the X direction of magnitude
             <c>GravitationalFieldX(U.position) * GravitationalMass(U)</c>.
            </summary>
            <param name="xy"></param>
            <returns>Returns the gravitational field in the X direction at point xy, normally zero.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirected.GravitationalFieldY(System.Drawing.PointF)">
            <summary>
            The function GravitationalFieldY returns the gravitational field
            in the Y direction acting on a node at the logical point <c>PointF</c> xy.  A node U
            is acted upon by a force in the Y direction of magnitude
             <c>GravitationalFieldY(U.position) * GravitationalMass(U)</c>.
            </summary>
            <param name="xy"></param>
            <returns>Returns the gravitational field in the Y direction at point xy, normally zero</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirected.IsFixed(Northwoods.Go.Layout.GoLayoutForceDirectedNode)">
            <summary>
            This predicate returns true if the node should not be moved
            by the layout algorithm but still have an effect on nearby and connected nodes.
            The default implementation returns <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.IsFixed"/>.
            </summary>
            <param name="node"></param>
            <returns>Returns true if node should not be moved by the layout algorithm</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirected.UpdatePositions">
            <summary>
            Peforms one iteration of the ForceDirected algorithm and updates the positions of
            the <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedNode"/>s (but not the document's nodes).
            </summary>
            <returns>Returns true if additional iterations are needed to find a solution.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirected.LayoutNodesAndLinks">
            <summary>
            Updates the physical location of "real" nodes and links to reflect
            the layout.
            </summary>
            <remarks>
            Although this method does not start or finish an undo manager
            transaction, it is compliant with undo and redo by calling
            <see cref="M:Northwoods.Go.GoDocument.RaiseChanging(System.Int32,System.Int32,System.Object)"/> and <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            with a hint of <see cref="F:Northwoods.Go.GoDocument.AllArranged"/>.
            This also updates the <see cref="P:Northwoods.Go.Layout.GoLayout.Document"/>'s <see cref="P:Northwoods.Go.GoDocument.TopLeft"/>
            and <see cref="P:Northwoods.Go.GoDocument.Size"/> properties to account for objects that
            have moved and potentially increased the extent of the document.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirected.Network">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork"/> that the layout will be performed on.
            </summary>
            <value>
            The initial value is null.
            This is automatically set to null when the <see cref="P:Northwoods.Go.Layout.GoLayout.Document"/> property changes.
            </value>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirected.ArrangementSpacing">
            <summary>
            Gets or sets the space between which <see cref="M:Northwoods.Go.Layout.GoLayoutForceDirected.ArrangeConnectedGraphs(System.Collections.IEnumerator,Northwoods.Go.Layout.GoLayoutForceDirectedNetwork)"/> will position the connected graphs
            that together compose the network.
            </summary>
            <value>
            This defaults to the SizeF(100, 100).
            </value>
            <remarks>
            These distances are used during a clustered layout; afterwards the normal force-directed layout
            will likely cause the size of any space between connected graphs to change, perhaps considerably.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirected.SetsPortSpots">
            <summary>
            Gets or sets whether the <see cref="T:Northwoods.Go.GoPort"/>.<see cref="P:Northwoods.Go.GoPort.FromSpot"/> and <see cref="P:Northwoods.Go.GoPort.ToSpot"/>
            of every single-port node should be set to <c>GoObject.NoSpot</c>.
            </summary>
            <value>The default value is true</value>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirected.Comments">
            <summary>
            Gets or sets whether <see cref="M:Northwoods.Go.Layout.GoLayoutForceDirected.AddComments(Northwoods.Go.Layout.GoLayoutForceDirectedNode)"/> should find all <see cref="T:Northwoods.Go.GoBalloon"/> comments
            whose anchors are nodes represented in the <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirected.Network"/> and add <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedNode"/>s
            representing those balloon comments as nodes in the network.
            </summary>
            <value>The default value is true</value>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirected.MaxIterations">
            <summary>
            Gets or sets the maximum number of iterations to perform when doing the
            force directed auto layout.
            </summary>
            <value>The value must be non-negative.  The initial value is 100.</value>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirected.CurrentIteration">
            <summary>
            Gets the current iteration count, valid during a call to <see cref="M:Northwoods.Go.Layout.GoLayoutForceDirected.PerformLayout"/>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirected.Epsilon">
            <summary>
            Gets or sets approximately how far some node must move in order for the iterations to continue.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirected.InfinityDistance">
            <summary>
            Gets or sets a threshold for the distance beyond which the electrical charge forces may be ignored.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirected.RandomNumberGenerator">
            <summary>
            Gets or sets the random number generator used to give an initial push between objects
            that are located at the same position.
            </summary>
            <value>
            Initially this is null, which causes a new <c>System.Random</c> to be used.
            </value>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirected.DefaultSpringStiffness">
            <summary>
            Gets or sets the value returned by <see cref="M:Northwoods.Go.Layout.GoLayoutForceDirected.SpringStiffness(Northwoods.Go.Layout.GoLayoutForceDirectedLink)"/>.
            </summary>
            <value>The value is initially 0.05f.</value>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirected.DefaultSpringLength">
            <summary>
            Gets or sets the value returned by <see cref="M:Northwoods.Go.Layout.GoLayoutForceDirected.SpringLength(Northwoods.Go.Layout.GoLayoutForceDirectedLink)"/>.
            </summary>
            <value>The value is initially 50.0f.</value>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirected.DefaultElectricalCharge">
            <summary>
            Gets or sets the value returned by <see cref="M:Northwoods.Go.Layout.GoLayoutForceDirected.ElectricalCharge(Northwoods.Go.Layout.GoLayoutForceDirectedNode)"/>.
            </summary>
            <value>The value is initially 150.0f.</value>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirected.DefaultGravitationalMass">
            <summary>
            Gets or sets the value returned by <see cref="M:Northwoods.Go.Layout.GoLayoutForceDirected.GravitationalMass(Northwoods.Go.Layout.GoLayoutForceDirectedNode)"/>.
            </summary>
            <value>The value is initially 0.0f.</value>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirected.DefaultCommentSpringLength">
            <summary>
            Gets or sets the value returned by <see cref="M:Northwoods.Go.Layout.GoLayoutForceDirected.SpringLength(Northwoods.Go.Layout.GoLayoutForceDirectedLink)"/>.
            </summary>
            <value>The value is initially 20.0f.</value>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirected.DefaultCommentElectricalCharge">
            <summary>
            Gets or sets the value returned by <see cref="M:Northwoods.Go.Layout.GoLayoutForceDirected.ElectricalCharge(Northwoods.Go.Layout.GoLayoutForceDirectedNode)"/>.
            </summary>
            <value>The value is initially 25.0f.</value>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork">
            <summary>
            This provides an abstract view of a <see cref="T:Northwoods.Go.IGoCollection"/> as a
            network (graph) of nodes and directed links.  These nodes and links correspond to
            <see cref="T:Northwoods.Go.GoObject"/>s provided in the <see cref="T:Northwoods.Go.IGoCollection"/>.
            This class provides a framework for manipulating the
            state of nodes and links without modifying the structure of the original document.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.IGoLayoutNetwork">
            <summary>
            For efficiency each kind of <see cref="T:Northwoods.Go.Layout.GoLayout"/> can have its own kind of
            <see cref="T:Northwoods.Go.Layout.IGoLayoutNetwork"/> holding the <see cref="T:Northwoods.Go.Layout.IGoLayoutNetworkNode"/>s
            and <see cref="T:Northwoods.Go.Layout.IGoLayoutNetworkLink"/>s corresponding to <see cref="T:Northwoods.Go.GoObject"/>s
            (including <see cref="T:Northwoods.Go.IGoNode"/>s and <see cref="T:Northwoods.Go.IGoLink"/>s) that will be
            laid out according to the particular <see cref="T:Northwoods.Go.Layout.GoLayout"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.IGoLayoutNetwork.AddNodesAndLinksFromCollection(Northwoods.Go.IGoCollection,System.Boolean)">
            <summary>
            Adds the objects in an <see cref="T:Northwoods.Go.IGoCollection"/> to the network.
            </summary>
            <param name="collection"></param>
            <param name="onlytruenodes">
            If true, only those objects that implement <see cref="T:Northwoods.Go.IGoNode"/> will get
            <see cref="T:Northwoods.Go.Layout.IGoLayoutNetworkNode"/>s created for them.
            If false, each (non-link) object in the collection will be represented by a
            <see cref="T:Northwoods.Go.Layout.IGoLayoutNetworkNode"/>.
            If you want the layout to ignore groups such as <see cref="T:Northwoods.Go.GoComment"/>s
            in your graph, provide a value of true here.
            </param>
        </member>
        <member name="M:Northwoods.Go.Layout.IGoLayoutNetwork.GetNodesAndLinks(Northwoods.Go.IGoCollection)">
            <summary>
            Retrieve all of the <see cref="T:Northwoods.Go.GoObject"/> nodes and links from the
            <see cref="T:Northwoods.Go.Layout.IGoLayoutNetworkNode"/>s and <see cref="T:Northwoods.Go.Layout.IGoLayoutNetworkLink"/>s
            that are in this network, by adding them to the given <paramref name="coll"/>.
            </summary>
            <param name="coll">
            An <see cref="T:Northwoods.Go.IGoCollection"/>; if null, the method allocates
            and returns a <see cref="T:Northwoods.Go.GoSelection"/>.
            </param>
            <returns>
            An <see cref="T:Northwoods.Go.IGoCollection"/> of all of the <see cref="T:Northwoods.Go.GoObject"/>s that
            correspond to <see cref="T:Northwoods.Go.Layout.IGoLayoutNetworkNode"/>s and <see cref="T:Northwoods.Go.Layout.IGoLayoutNetworkLink"/>s.
            </returns>
            <remarks>
            If you pass a value for <pararef name="coll"/>, we recommend using a <see cref="T:Northwoods.Go.GoSelection"/>
            instead of a <see cref="T:Northwoods.Go.GoCollection"/>, since <see cref="T:Northwoods.Go.GoSelection"/> has
            more efficient lookup for avoiding duplicates.
            A <see cref="T:Northwoods.Go.GoSelection"/> is also handy for easily moving all those objects
            by calling <see cref="M:Northwoods.Go.GoView.MoveSelection(Northwoods.Go.GoSelection,System.Drawing.SizeF,System.Boolean)"/>.
            You can determine the bounding rectangle for a collection of nodes and links
            by calling the static/shared method
            <see cref="T:Northwoods.Go.GoDocument"/>.<see cref="M:Northwoods.Go.GoDocument.ComputeBounds(Northwoods.Go.IGoCollection,Northwoods.Go.GoView)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.IGoLayoutNetwork.AddNode(Northwoods.Go.GoObject)">
            <summary>
            Add an <see cref="T:Northwoods.Go.Layout.IGoLayoutNetworkNode"/> corresponding to a <see cref="T:Northwoods.Go.GoObject"/> to this network.
            </summary>
            <param name="node">a <see cref="T:Northwoods.Go.GoObject"/>, usually one that implements <see cref="T:Northwoods.Go.IGoNode"/></param>
            <returns><see cref="T:Northwoods.Go.Layout.IGoLayoutNetworkNode"/></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.IGoLayoutNetwork.DeleteNode(Northwoods.Go.GoObject)">
            <summary>
            Remove any <see cref="T:Northwoods.Go.Layout.IGoLayoutNetworkNode"/> corresponding to a <see cref="T:Northwoods.Go.GoObject"/> from this network.
            </summary>
            <param name="node">a <see cref="T:Northwoods.Go.GoObject"/>, usually one that implements <see cref="T:Northwoods.Go.IGoNode"/></param>
        </member>
        <member name="M:Northwoods.Go.Layout.IGoLayoutNetwork.FindNode(Northwoods.Go.GoObject)">
            <summary>
            See if there is any <see cref="T:Northwoods.Go.Layout.IGoLayoutNetworkNode"/> corresponding to a <see cref="T:Northwoods.Go.GoObject"/> in this network.
            </summary>
            <param name="obj">a <see cref="T:Northwoods.Go.GoObject"/>, usually one that implements <see cref="T:Northwoods.Go.IGoNode"/></param>
            <returns><see cref="T:Northwoods.Go.Layout.IGoLayoutNetworkNode"/>, or null if not found</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.IGoLayoutNetwork.AddLink(Northwoods.Go.IGoLink)">
            <summary>
            Add an <see cref="T:Northwoods.Go.Layout.IGoLayoutNetworkLink"/> corresponding to a <see cref="T:Northwoods.Go.GoObject"/> to this network.
            </summary>
            <param name="ilink">a <see cref="T:Northwoods.Go.GoObject"/> that implements <see cref="T:Northwoods.Go.IGoLink"/></param>
            <returns><see cref="T:Northwoods.Go.Layout.IGoLayoutNetworkLink"/></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.IGoLayoutNetwork.DeleteLink(Northwoods.Go.IGoLink)">
            <summary>
            Remove any <see cref="T:Northwoods.Go.Layout.IGoLayoutNetworkLink"/> corresponding to a <see cref="T:Northwoods.Go.GoObject"/> from this network.
            </summary>
            <param name="ilink">a <see cref="T:Northwoods.Go.GoObject"/> that implements <see cref="T:Northwoods.Go.IGoLink"/></param>
        </member>
        <member name="M:Northwoods.Go.Layout.IGoLayoutNetwork.FindLink(Northwoods.Go.GoObject)">
            <summary>
            See if there is any <see cref="T:Northwoods.Go.Layout.IGoLayoutNetworkLink"/> corresponding to a <see cref="T:Northwoods.Go.GoObject"/> in this network.
            </summary>
            <param name="obj">a <see cref="T:Northwoods.Go.GoObject"/> that implements <see cref="T:Northwoods.Go.IGoLink"/></param>
            <returns><see cref="T:Northwoods.Go.Layout.IGoLayoutNetworkLink"/>, or null if not found</returns>
        </member>
        <member name="P:Northwoods.Go.Layout.IGoLayoutNetwork.NodeCount">
            <summary>
            Gets the number of nodes in this network.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.IGoLayoutNetwork.LinkCount">
            <summary>
            Gets the number of links in this network.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.IGoLayoutNetwork.Nodes">
            <summary>
            Support enumerating all of the <see cref="T:Northwoods.Go.Layout.IGoLayoutNetworkNode"/>s in this network.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.IGoLayoutNetwork.Links">
            <summary>
            Support enumerating all of the <see cref="T:Northwoods.Go.Layout.IGoLayoutNetworkLink"/>s in this network.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.#ctor">
            <summary>
            Constructs an empty network.
            </summary>
            <remarks>
            Use this default constructor to create an empty network.
            Call <see cref="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.AddNodesAndLinksFromCollection(Northwoods.Go.IGoCollection,System.Boolean)"/> to automatically add
            network nodes and links, or call <see cref="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.AddNode(Northwoods.Go.GoObject)"/> and <see cref="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.LinkNodes(Northwoods.Go.Layout.GoLayoutForceDirectedNode,Northwoods.Go.Layout.GoLayoutForceDirectedNode,Northwoods.Go.GoObject)"/>
            explicitly to have more detailed control over the exact graph that is laid out.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.#ctor(Northwoods.Go.IGoCollection)">
            <summary>
            Constructs a network from a collection of GoObjects, by also calling
            <c>AddNodesAndLinksFromCollection(collection, true)</c>
            </summary>
            <param name="collection">the <see cref="T:Northwoods.Go.IGoCollection"/> containing the <see cref="T:Northwoods.Go.GoObject"/>s to add to the network.</param>
            <remarks>
            If you want an automatic layout of all the objects in a collection,
            you'll want to do something like the following code:
            <code>
            GoLayout... layout = new GoLayout...();
            layout.Document = ...document...;
            layout.Network = layout.CreateNetwork();
            layout.Network.AddNodesAndLinksFromCollection(...collection..., false);
            ...maybe set other properties...
            layout.PerformLayout();
            </code>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.CreateNetworkNode">
            <summary>
            Allocate a new instance of <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedNode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.CreateNetworkLink">
            <summary>
            Allocate a new instance of <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedLink"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.AddNodesAndLinksFromCollection(Northwoods.Go.IGoCollection,System.Boolean)">
            <summary>
            Adds the objects in an IGoCollection to the network.
            </summary>
            <param name="collection"></param>
            <param name="onlytruenodes">
            If true, only those objects that implement <see cref="T:Northwoods.Go.IGoNode"/> will get
            <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedNode"/>s created for them.
            If false, each (non-link) object in the collection will be represented by a
            <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedNode"/>.
            If you want the layout to ignore groups such as <see cref="T:Northwoods.Go.GoComment"/>s
            in your graph, provide a value of true here.
            </param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.RemoveAllNodesAndLinks">
            <summary>
            Removes all nodes and links from the network, resulting in an empty network.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.AddNode(Northwoods.Go.Layout.GoLayoutForceDirectedNode)">
            <summary>
            Adds a <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedNode"/> to the Network.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.AddNode(Northwoods.Go.GoObject)">
            <summary>
            This convenience method makes sure there is a <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedNode"/>
            in this network corresponding to a <see cref="T:Northwoods.Go.GoObject"/>.
            </summary>
            <param name="node">a GoObject, normally an instance of a subclass of GoNode</param>
            <returns>a <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedNode"/> in this network</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.DeleteNode(Northwoods.Go.Layout.GoLayoutForceDirectedNode)">
            <summary>
            Deletes the input node from the network.
            </summary>
            <param name="node"></param>
            <remarks>
            This function also deletes all links to or from the node.
            Performs a no-op if the node is not in the network.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.DeleteNode(Northwoods.Go.GoObject)">
            <summary>
            This convenience method removes any <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedNode"/>
            corresponding to a <see cref="T:Northwoods.Go.GoObject"/>.
            </summary>
            <param name="node">a GoObject</param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.FindNode(Northwoods.Go.GoObject)">
            <summary>
            Returns the GoLayoutForceDirectedNode which was constructed for the GoObject.
            </summary>
            <param name="obj"></param>
            <returns>Returns the Network GoLayoutForceDirectedNode associated with the go object or null
            if no such node exists.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.AddLink(Northwoods.Go.Layout.GoLayoutForceDirectedLink)">
            <summary>
            Adds a GoLayoutForceDirectedLink to the network.
            Although this method is provided for completeness,
            <see cref="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.LinkNodes(Northwoods.Go.Layout.GoLayoutForceDirectedNode,Northwoods.Go.Layout.GoLayoutForceDirectedNode,Northwoods.Go.GoObject)"/> provides a more efficient manner of linking
            nodes already in the network.
            </summary>
            <param name="link"></param>
            <remarks>
            This adds the link to its <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirectedLink.ToNode"/>'s
            source links list, and to its <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirectedLink.FromNode"/>'s
            destination links list.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.AddLink(Northwoods.Go.IGoLink)">
            <summary>
            This convenience method takes a <see cref="T:Northwoods.Go.GoObject"/> implementing <see cref="T:Northwoods.Go.IGoLink"/>,
            and returns a <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedLink"/> that has been added to this network.
            </summary>
            <param name="ilink"></param>
            <returns>a <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedLink"/> in this network</returns>
            <remarks>
            If <see cref="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.FindLink(Northwoods.Go.GoObject)"/> returns null, this method creates a new <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedLink"/>,
            makes sure the <see cref="P:Northwoods.Go.IGoLink.FromNode"/> and <see cref="P:Northwoods.Go.IGoLink.ToNode"/> have
            corresponding <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedNode"/>s in the network, and adds the link itself
            to the network.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.DeleteLink(Northwoods.Go.Layout.GoLayoutForceDirectedLink)">
            <summary>
            Deletes the input link from the network.
            </summary>
            <param name="link"></param>
            <remarks>
            Also removes the link from its to node's predecessor list
            and from its from node's successor list.
            Performs a no-op if the link is not in the network.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.DeleteLink(Northwoods.Go.IGoLink)">
            <summary>
            This convenience method makes sure a <see cref="T:Northwoods.Go.GoObject"/> implementing <see cref="T:Northwoods.Go.IGoLink"/>
            does not have a <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedLink"/> in this network.
            </summary>
            <param name="ilink"></param>
            <remarks>
            This just calls <see cref="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.DeleteLink(Northwoods.Go.Layout.GoLayoutForceDirectedLink)"/> if
            <see cref="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.FindLink(Northwoods.Go.GoObject)"/> finds a <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedLink"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.FindLink(Northwoods.Go.GoObject)">
            <summary>
            Returns the GoLayoutForceDirectedLink which was constructed for the GoObject.
            </summary>
            <param name="obj"></param>
            <returns>Returns the Network GoLayoutForceDirectedLink which was constructed with the obj or
            null if no such link exists.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.LinkNodes(Northwoods.Go.Layout.GoLayoutForceDirectedNode,Northwoods.Go.Layout.GoLayoutForceDirectedNode,Northwoods.Go.GoObject)">
            <summary>
            Links two nodes already in the network and returns the created link.
            </summary>
            <param name="fromNode"></param>
            <param name="toNode"></param>
            <param name="obj"> the GoObject to which the created link should correspond (may be null)</param>
            <returns>Returns the link created when fromNode and toNode are linked.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.ReverseLink(Northwoods.Go.Layout.GoLayoutForceDirectedLink)">
            <summary>
            Reverses the direction of a link in the network.
            </summary>
            <param name="link"></param>
            <remarks>
            This calls <see cref="M:Northwoods.Go.Layout.GoLayoutForceDirectedLink.ReverseLink"/> and also adjusts the
            source links and destination links of both connected nodes.
            If either <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirectedLink.FromNode"/> or 
            <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirectedLink.ToNode"/> are null, this method does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.DeleteSelfLinks">
            <summary>
            Deletes all links whose "to node" and "from node" are the same node.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.DeleteArtificialNodes">
            <summary>
            Delete all nodes and links that have no <see cref="T:Northwoods.Go.GoObject"/>
            associated with them.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.SplitIntoSubNetworks">
            <summary>
            Modify this network by splitting it up into separate subnetworks,
            each of which has all of its nodes connected to each other, but not
            to any nodes in any other subnetworks.
            </summary>
            <returns>
            An <c>IEnumerator</c> of networks,
            sorted in order of decreasing <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.NodeCount"/>.
            </returns>
            <remarks>
            This method will first delete from this network all artifical nodes and
            all links that do not connect two different nodes.
            Afterwards, this original network may be empty or may contain all of the
            singleton <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedNode"/>s, each of which had no
            <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedLink"/>s connecting it to any other nodes.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.GetNodesAndLinks(Northwoods.Go.IGoCollection)">
            <summary>
            Retrieve all of the <see cref="T:Northwoods.Go.GoObject"/> nodes and links from the
            <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedNode"/>s and <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedLink"/>s
            that are in this network, by adding them to the given <paramref name="coll"/>.
            </summary>
            <param name="coll">
            An <see cref="T:Northwoods.Go.IGoCollection"/>; if null, the method allocates
            and returns a <see cref="T:Northwoods.Go.GoSelection"/>.
            </param>
            <returns>
            An <see cref="T:Northwoods.Go.IGoCollection"/> of all of the <see cref="T:Northwoods.Go.GoObject"/>s that
            correspond to <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedNode"/>s and <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedLink"/>s.
            </returns>
            <remarks>
            If you pass a value for <pararef name="coll"/>, we recommend using a <see cref="T:Northwoods.Go.GoSelection"/>
            instead of a <see cref="T:Northwoods.Go.GoCollection"/>, since <see cref="T:Northwoods.Go.GoSelection"/> has
            more efficient lookup for avoiding duplicates.
            A <see cref="T:Northwoods.Go.GoSelection"/> is also handy for easily moving all those objects
            by calling <see cref="M:Northwoods.Go.GoView.MoveSelection(Northwoods.Go.GoSelection,System.Drawing.SizeF,System.Boolean)"/>.
            You can determine the bounding rectangle for a collection of nodes and links
            by calling the static/shared method
            <see cref="T:Northwoods.Go.GoDocument"/>.<see cref="M:Northwoods.Go.GoDocument.ComputeBounds(Northwoods.Go.IGoCollection,Northwoods.Go.GoView)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.NodeCount">
            <summary>
            Gets the number of Nodes in the Network.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.LinkCount">
            <summary>
            Gets the number of Links in the Network.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.GoObjToNodeMap">
            <summary>
            Gets the Hashtable that maps GoObjects to Nodes
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.GoObjToLinkMap">
            <summary>
            Gets the Hashtable that maps GoObjects to Links
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.Nodes">
            <summary>
            Gets an enumerator for the network's nodes.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.Links">
            <summary>
            Gets an enumerator for the network's links.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.Layout">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirected"/> in which this
            network is being used.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.NodeArrayList">
            <summary>
            This partly implements an <c>ArrayList</c> of <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkNode"/>s.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.NodeArrayList.#ctor">
            <summary>
            Construct an empty list.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.NodeArrayList.Contains(Northwoods.Go.Layout.GoLayoutForceDirectedNode)">
            <summary>
            True if the item is in the list.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.NodeArrayList.IndexOf(Northwoods.Go.Layout.GoLayoutForceDirectedNode)">
            <summary>
            Find the zero-based position of an item in the list, or -1 if not present.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.NodeArrayList.Add(Northwoods.Go.Layout.GoLayoutForceDirectedNode)">
            <summary>
            Add an item to the end of the list.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.NodeArrayList.RemoveAt(System.Int32)">
            <summary>
            Remove an item from the list that is at a particular zero-based index.
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.NodeArrayList.GetEnumerator">
            <summary>
            Support enumerating the items in this list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.NodeArrayList.ToArray">
            <summary>
            Copy references to this list's items into an array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.NodeArrayList.Sort(System.Collections.IComparer)">
            <summary>
            Sort the list according to the given <b>IComparer</b>.
            </summary>
            <param name="cmp"></param>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.NodeArrayList.Count">
            <summary>
            Gets the number of items in the list.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.NodeArrayList.Item(System.Int32)">
            <summary>
            This supports accessing items by zero-based index.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.LinkArrayList">
            <summary>
            This partly implements an <c>ArrayList</c> of <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkNode"/>s.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.LinkArrayList.#ctor">
            <summary>
            Construct an empty list.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.LinkArrayList.Contains(Northwoods.Go.Layout.GoLayoutForceDirectedLink)">
            <summary>
            True if the item is in the list.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.LinkArrayList.IndexOf(Northwoods.Go.Layout.GoLayoutForceDirectedLink)">
            <summary>
            Find the zero-based position of an item in the list, or -1 if not present.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.LinkArrayList.Add(Northwoods.Go.Layout.GoLayoutForceDirectedLink)">
            <summary>
            Add an item to the end of the list.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.LinkArrayList.RemoveAt(System.Int32)">
            <summary>
            Remove an item from the list that is at a particular zero-based index.
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.LinkArrayList.GetEnumerator">
            <summary>
            Support enumerating the items in this list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.LinkArrayList.ToArray">
            <summary>
            Copy references to this list's items into an array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.LinkArrayList.Sort(System.Collections.IComparer)">
            <summary>
            Sort the list according to the given <b>IComparer</b>.
            </summary>
            <param name="cmp"></param>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.LinkArrayList.Count">
            <summary>
            Gets the number of items in the list.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.LinkArrayList.Item(System.Int32)">
            <summary>
            This supports accessing items by zero-based index.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.NodeEnumerator">
            <summary>
            NodeEnumerator implements both <c>IEnumerator</c> and <c>IEnumerable</c>.
            It should be used to enumerate through all the Nodes.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.NodeEnumerator.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the Nodes.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.NodeEnumerator.MoveNext">
            <summary>
            Advance the enumerator to the next GoLayoutForceDirectedNode.
            </summary>
            <returns>True if there is a next GoLayoutForceDirectedNode; false if it has finished iterating over the collection.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.NodeEnumerator.Reset">
            <summary>
            Reset the enumerator to its original position.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.NodeEnumerator.Current">
            <summary>
             Gets the current node in the collection of nodes.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.LinkEnumerator">
            <summary>
            LinkEnumerator implements both <c>IEnumerator</c> and <c>IEnumerable</c>.
            It should be used to enumerate through all the Links.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.LinkEnumerator.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the Links
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.LinkEnumerator.MoveNext">
            <summary>
            Advance the enumerator to the next GoLayoutForceDirectedLink.
            </summary>
            <returns>True if there is a next GoLayoutForceDirectedLink; false if it has finished iterating over the collection.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.LinkEnumerator.Reset">
            <summary>
            Reset the enumerator to its original position.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNetwork.LinkEnumerator.Current">
            <summary>
             Gets the current node in the collection of links.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutForceDirectedLink">
            <summary>
            Holds auto-layout specific link data.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.IGoLayoutNetworkLink">
            <summary>
            Each kind of <see cref="T:Northwoods.Go.Layout.IGoLayoutNetwork"/> will have links that implement this interface.
            </summary>
            <remarks>
            These classes are not <see cref="T:Northwoods.Go.GoObject"/>s, but they do implement <see cref="T:Northwoods.Go.IGoLink"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedLink.OnPortChanged(Northwoods.Go.IGoPort,System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)">
            <summary>
            Don't need to do anything.
            </summary>
            <param name="port"></param>
            <param name="subhint"></param>
            <param name="oldI"></param>
            <param name="oldVal"></param>
            <param name="oldRect"></param>
            <param name="newI"></param>
            <param name="newVal"></param>
            <param name="newRect"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedLink.Unlink">
            <summary>
            Remove this network link from the network.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedLink.ReverseLink">
            <summary>
            Reverses the link; i.e., exchanges the from and to nodes.
            </summary>
            <remarks>
            Setting this property does not modify any <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedNode"/>
            by adding or removing a link to its <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.SourceLinksList"/>
            or <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.DestinationLinksList"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedLink.CommitPosition">
            <summary>
            Commits the position of the link to the corresponding GoObject.
            </summary>
            <remarks>
            By default this does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedLink.GetOtherNode(Northwoods.Go.IGoNode)">
            <summary>
            Finds and returns the link's node other than n.  Returns null if
            n is neither the from node or to node.
            </summary>
            <param name="n"></param>
            <returns>Finds and returns the link's node other than n.  Returns null if
            n is neither the from node or to node.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedLink.GetOtherPort(Northwoods.Go.IGoPort)">
            <summary>
            Finds and returns the link's port other than p.  Returns null if
            p is neither the from port or to port.
            </summary>
            <param name="p"></param>
            <returns>Finds and returns the link's port other than p.  Returns null if
            p is neither the from port or to port.</returns>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedLink.GoObject">
            <summary>
            Gets or sets this link's associated GoObject.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedLink.Network">
            <summary>
            Gets or sets the network that this link is part of.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedLink.FromNode">
            <summary>
            Gets this link's From GoLayoutForceDirectedNode.
            </summary>
            <remarks>
            Setting this property does not modify the <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedNode"/>
            by adding a link to its <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.DestinationLinksList"/>
            or removing it from another node's list.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedLink.FromPort">
            <summary>
            Gets this link's From GoLayoutForceDirectedNode.
            </summary>
            <remarks>
            Setting this property does not modify the <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedNode"/>
            by adding a link to its <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.DestinationLinksList"/>
            or removing it from another node's list.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedLink.ToNode">
            <summary>
            Gets or sets the To GoLayoutForceDirectedNode for this link.
            </summary>
            <remarks>
            Setting this property does not modify the <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedNode"/>
            by adding a link to its <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.SourceLinksList"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedLink.ToPort">
            <summary>
            Gets or sets the To GoLayoutForceDirectedNode for the link.
            </summary>
            <remarks>
            Setting this property does not modify the <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedNode"/>
            by adding a link to its <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.SourceLinksList"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedLink.Stroke">
            <summary>
            Gets the GoStroke associated with the Network GoLayoutForceDirectedLink.
            This may be needed by the algorithm to add bends to the link.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedLink.UserObject">
            <summary>
            Gets or Sets an Object associated with the link
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedLink.UserFlags">
            <summary>
            Gets or Sets an integer associated with the link
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedLink.Stiffness">
            <summary>
            stiffness of the link; see the <see cref="M:Northwoods.Go.Layout.GoLayoutForceDirected.SpringStiffness(Northwoods.Go.Layout.GoLayoutForceDirectedLink)"/> method
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedLink.Length">
            <summary>
            length of the link; see the <see cref="M:Northwoods.Go.Layout.GoLayoutForceDirected.SpringLength(Northwoods.Go.Layout.GoLayoutForceDirectedLink)"/> method
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutForceDirectedNode">
            <summary>
            Holds auto-layout specific node data.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.IGoLayoutNetworkNode">
            <summary>
            Each kind of <see cref="T:Northwoods.Go.Layout.IGoLayoutNetwork"/> will have nodes that implement this interface.
            </summary>
            <remarks>
            These classes are not <see cref="T:Northwoods.Go.GoObject"/>s, but they do implement <see cref="T:Northwoods.Go.IGoNode"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNode.AddSourceLink(Northwoods.Go.Layout.GoLayoutForceDirectedLink)">
            <summary>
            Adds a <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedLink"/> to the list predecessors
            (i.e., the link will be coming into this node).
            </summary>
            <param name="sourceLink"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNode.DeleteSourceLink(Northwoods.Go.Layout.GoLayoutForceDirectedLink)">
            <summary>
            Deletes a <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedLink"/> from the list of predecessors
            (i.e., the link was to this node).
            </summary>
            <param name="sourceLink"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNode.AddDestinationLink(Northwoods.Go.Layout.GoLayoutForceDirectedLink)">
            <summary>
            Adds a <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedLink"/> to the list successors
            (i.e., the link will be going out from this node).
            </summary>
            <param name="destinationLink"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNode.DeleteDestinationLink(Northwoods.Go.Layout.GoLayoutForceDirectedLink)">
            <summary>
            Deletes a <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedLink"/> from the list of successors
            (i.e., the link was going out from this node).
            </summary>
            <param name="destinationLink"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutForceDirectedNode.CommitPosition">
            <summary>
            Moves the corresponding GoObject to the center point of the node in the
            document.
            </summary>
            <remarks>
            To make the most common cases look right, the object's <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.GoObject"/>.<c>SelectionObject</c>
            is centered.  Thus iconic nodes will have the center of the icon be positioned
            according to the <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.Center"/> of this GoLayoutForceDirectedNode, ignoring any labels.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.GoObject">
            <summary>
            Gets or sets the GoObject associated with this network node.
            </summary>
            <remarks>
            Setting this value to an object will also set the <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.Center"/>
            property to that object's <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.GoObject"/>.<c>SelectionObject</c> center position.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.Network">
            <summary>
            Gets or sets the network that this node is part of.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.SourceLinksList">
            <summary>
            Returns the list of predecessor links (i.e., the links are coming into this node).
            </summary>
            <value>
            An <c>GoLayoutForceDirectedNetwork.LinkArrayList</c> of <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedLink"/>s.
            This list should not be modified directly; use <see cref="M:Northwoods.Go.Layout.GoLayoutForceDirectedNode.AddSourceLink(Northwoods.Go.Layout.GoLayoutForceDirectedLink)"/>
            and <see cref="M:Northwoods.Go.Layout.GoLayoutForceDirectedNode.DeleteSourceLink(Northwoods.Go.Layout.GoLayoutForceDirectedLink)"/> instead.
            </value>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.DestinationLinksList">
            <summary>
            Returns the list of successor links (i.e., the links are going out from this node).
            </summary>
            <value>
            An <c>GoLayoutForceDirectedNetwork.LinkArrayList</c> of <see cref="T:Northwoods.Go.Layout.GoLayoutForceDirectedLink"/>s.
            This list should not be modified directly; use <see cref="M:Northwoods.Go.Layout.GoLayoutForceDirectedNode.AddDestinationLink(Northwoods.Go.Layout.GoLayoutForceDirectedLink)"/>
            and <see cref="M:Northwoods.Go.Layout.GoLayoutForceDirectedNode.DeleteDestinationLink(Northwoods.Go.Layout.GoLayoutForceDirectedLink)"/> instead.
            </value>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.Center">
            <summary>
            Gets or sets the Center Point of this node.
            </summary>
            <remarks>
            Setting this property does not modify any <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.GoObject"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.Position"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.Position">
            <summary>
            Gets or sets the Position (top-left corner) of this node.
            </summary>
            <remarks>
            Setting this property does not modify any <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.GoObject"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.Center"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.Focus">
            <summary>
            Gets or sets the offset of the <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.Center"/> from the
            <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.Bounds"/><c>.Position</c>.
            </summary>
            <remarks>
            Setting this property does not modify any <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.GoObject"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.Bounds">
            <summary>
            Gets or sets the Bounds of this node.
            </summary>
            <remarks>
            Setting this property does not modify any <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.GoObject"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.Size">
            <summary>
            Gets the <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.Bounds"/><c>.Size</c>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.Width">
            <summary>
            Gets the <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.Bounds"/><c>.Width</c>.
            </summary>
            <remarks>
            This is always the horizontal distance reserved for this node.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.Height">
            <summary>
            Gets the <see cref="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.Bounds"/><c>.Height</c>.
            </summary>
            <remarks>
            This is always the vertical distance reserved for this node.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.UserObject">
            <summary>
            Gets or sets an Object associated with the node
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.UserFlags">
            <summary>
            Gets or sets the node's flags
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.Sources">
            <summary>
            Gets an enumerator over all of the nodes that have links coming into this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all nodes that have ports that have any
            destination links coming into any port of this node.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoNode.Sources"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.Destinations">
            <summary>
            Gets an enumerator over all of the nodes that have links going out of this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all nodes that have ports that have any
            source links going out of any port of this node.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoNode.Destinations"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.Nodes">
            <summary>
            Gets an enumerator over all of the nodes that are connected to this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all nodes that have ports that have any
            links connected to any port of this node.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoNode.Sources"/>
            <seealso cref="P:Northwoods.Go.IGoNode.Destinations"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.SourceLinks">
            <summary>
            Gets an enumerator over all of the links coming into this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all links that come into
            any port of this node.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoNode.SourceLinks"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.SourceLinksCount">
            <summary>
            Gets the number of links going into this node.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.DestinationLinks">
            <summary>
            Gets an enumerator over all of the links going out of this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all links that go out of
            any port of this node.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoNode.DestinationLinks"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.DestinationLinksCount">
            <summary>
            Gets the number of links coming out of this node.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.Links">
            <summary>
            Gets an enumerator over all of the links going out of or coming into this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all links that are connected to
            port of this node.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoNode.SourceLinks"/>
            <seealso cref="P:Northwoods.Go.IGoNode.DestinationLinks"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.LinksCount">
            <summary>
            Gets the number of links connected to this node.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.IsFixed">
            <summary>
            whether <see cref="M:Northwoods.Go.Layout.GoLayoutForceDirected.IsFixed(Northwoods.Go.Layout.GoLayoutForceDirectedNode)"/> should return true
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.ForceX">
            <summary>
            cumulative force on the node in the X-direction
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.ForceY">
            <summary>
            cumulative force on the node in the Y-direction
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.Charge">
            <summary>
            charge of the node.  See the <see cref="M:Northwoods.Go.Layout.GoLayoutForceDirected.ElectricalCharge(Northwoods.Go.Layout.GoLayoutForceDirectedNode)"/> method
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutForceDirectedNode.Mass">
            <summary>
            mass of the node.  See the <see cref="M:Northwoods.Go.Layout.GoLayoutForceDirected.GravitationalMass(Northwoods.Go.Layout.GoLayoutForceDirectedNode)"/> method
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphCycleRemove">
            <summary>
            This enumeration controls how <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.RemoveCycles"/> changes the graph
            to make sure it contains no cycles or loops.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutLayeredDigraphCycleRemove.DepthFirst">
            <summary>
            Remove cycles using <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.DepthFirstSearchCycleRemoval"/>
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutLayeredDigraphCycleRemove.Greedy">
            <summary>
            Remove cycles using <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.GreedyCycleRemoval"/>
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphLayering">
            <summary>
            This enumeration controls how <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.AssignLayers"/>
            assigns each node of the graph to a layer.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutLayeredDigraphLayering.OptimalLinkLength">
            <summary>
            Assign layers using <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.OptimalLinkLengthLayering"/>
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutLayeredDigraphLayering.LongestPathSink">
            <summary>
            Assign layers using <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.LongestPathSinkLayering"/>
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutLayeredDigraphLayering.LongestPathSource">
            <summary>
            Assign layers using <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.LongestPathSourceLayering"/>
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphInitIndices">
            <summary>
            This enumeration controls how <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.InitializeIndices"/>
            determines the array of indices for each layer.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutLayeredDigraphInitIndices.DepthFirstOut">
            <summary>
            Initialize using <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.DepthFirstOutInitializeIndices"/>
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutLayeredDigraphInitIndices.DepthFirstIn">
            <summary>
            Initialize using <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.DepthFirstInInitializeIndices"/>
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutLayeredDigraphInitIndices.Naive">
            <summary>
            Initialize using <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.NaiveInitializeIndices"/>
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphAggressive">
            <summary>
            This enumeration controls how much effort <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.ReduceCrossings"/>
            puts into trying to look for link crossings.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutLayeredDigraphAggressive.None">
            <summary>
            The fastest, but poorest, crossing reduction algorithm
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutLayeredDigraphAggressive.Less">
            <summary>
            The faster, less agressive crossing reduction algorithm
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutLayeredDigraphAggressive.More">
            <summary>
            The slower, more agressive crossing reduction algorithm
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphPack">
            <summary>
            These enumerated values can be bitwise combined as values for
            the <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraph.PackOption"/> property, which 
            controls how much and what kinds of effort <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.StraightenAndPack"/> makes.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutLayeredDigraphPack.None">
            <summary>
            Do minimal work in <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.StraightenAndPack"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutLayeredDigraphPack.Expand">
            <summary>
            This option gives more chances for <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.StraightenAndPack"/>
            to improve the layout of the network, but is very expensive in time for large networks.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutLayeredDigraphPack.Straighten">
            <summary>
            This option tries to have <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.StraightenAndPack"/>
            straighten many of the links that cross layers.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutLayeredDigraphPack.Median">
            <summary>
            This option tries to have <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.StraightenAndPack"/>
            center groups of nodes based on their relationships with nodes in other layers.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutLayeredDigraphPack.All">
            <summary>
            Enable all options for the <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.StraightenAndPack"/> method.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutLayeredDigraph">
            <summary>
            GoLayoutLayeredDigraph provides an auto-layout for layered drawings
            of directed graphs.
            </summary>
            <remarks>
            The method uses a hierarchical approach
            for creating drawings of digraphs with nodes arranged in layers.
            The layout algorithm consists of four-major steps: Cycle Removal,
            Layer Assignment, Crossing Reduction, and Straightening and Packing.
            </remarks>
            <example>
            Typical usage:
            <code>
            GoDocument doc = goView1.Document;
            doc.StartTransaction();
            GoLayoutLayeredDigraph layout = new GoLayoutLayeredDigraph();
            layout.Document = doc;
            layout.DirectionOption = GoLayoutDirection.Down;
            layout.ColumnSpacing = 15;
            layout.LayerSpacing = 10;
            // ...maybe set other properties...
            layout.PerformLayout();
            doc.FinishTransaction("layout");
            </code>
            To lay out only a portion of a document, you will need to construct
            a <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork"/>, initialize it with just the
            nodes and links that you want to use, and set the <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraph.Network"/>
            property.
            <code>
            GoDocument doc = goView1.Document;
            doc.StartTransaction();
            GoLayoutLayeredDigraph layout = new GoLayoutLayeredDigraph();
            layout.Document = doc;
            layout.Network = layout.CreateNetwork();
            // if you want to start off with the network representing the complete document,
            // and then remove the nodes (or links) that you don't want:
            layout.Network.AddNodesAndLinksFromCollection(doc, true);
            foreach (GoObject obj in doc) {
              if (...obj is a node that you want to exclude from the layout...) {
                layout.Network.DeleteNode(obj);  // there is also a DeleteLink method
              }
            }
            layout.DirectionOption = GoLayoutDirection.Down;
            layout.ColumnSpacing = 15;
            layout.LayerSpacing = 10;
            // ...maybe set other properties...
            layout.PerformLayout();
            doc.FinishTransaction("layout");
            </code>
            Read the GoLayout User Guide for more details.
            </example>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.#ctor">
            <summary>
            Constructs a LayeredDigraph with null network and document.
            PerformLayout() will be a no-op until the network has been set.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.#ctor(Northwoods.Go.Layout.GoLayoutLayeredDigraph)">
            <summary>
            Make a copy of a <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraph"/>, copying most of the
            important properties except for the <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraph.Network"/>.
            </summary>
            <param name="layout"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.RemoveNetwork">
            <summary>
            Set <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraph.Network"/> to null.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.CreateNetwork">
            <summary>
            Allocate a <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.PerformLayout">
            <summary>
            Performs a layered-digraph auto-layout.
            </summary>
            <remarks>
            If <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraph.Network"/> is null, one is automatically allocated
            and initialized with the graph that is in the <see cref="P:Northwoods.Go.Layout.GoLayout.Document"/>.
            After all of the computations are completed, this calls
            <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.LayoutNodesAndLinks"/> in order to commit the positions
            of all of the nodes.
            No undo/redo transaction is started or finished by this method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.LinkMinLength(Northwoods.Go.Layout.GoLayoutLayeredDigraphLink)">
            <summary>
            The function LinkMinLength returns the minimum length of the
            link represented by the GoLayoutLayeredDigraphLink link.
            The default implementation gives multi-links a minimum length of 2,
            and all other links a minimum length of 1.
            This function can be overridden to provide "fine-tuning" of the layout.
            </summary>
            <param name="link"></param>
            <returns>Returns the minimum length of the link represented by link</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.LinkLengthWeight(Northwoods.Go.Layout.GoLayoutLayeredDigraphLink)">
            <summary>
            The function LinkLengthWeight returns the weight of the link
            represented by the GoLayoutLayeredDigraphLink link.  This weight is used by
            OptimalLinkLengthLayering to minimize weighted link lengths.
            The default implementation gives all links a length weight of 1.
            This function can be overridden to provide "fine-tuning" of the layout.
            </summary>
            <param name="link"></param>
            <returns>Returns the weight of the link represented by link</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.LinkStraightenWeight(Northwoods.Go.Layout.GoLayoutLayeredDigraphLink)">
            <summary>
            The function LinkStraightenWeight returns the weight of the link
            represented by the GoLayoutLayeredDigraphLink link.  This weight is used by
            the straightening methods to give priority straightening to those links
            with higher weights.
            The default implementation gives links between two "real" nodes a weight of 1,
            links between a "real" node and an "artifical" node a weight of 4,
            and links between two "artificial" nodes a weight of 8.
            This function can be overridden to provide "fine-tuning" of the layout.
            </summary>
            <param name="link"></param>
            <returns>Returns the weight of the link represented by link</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.NodeMinLayerSpace(Northwoods.Go.Layout.GoLayoutLayeredDigraphNode,System.Boolean)">
            <summary>
            This function returns the minimum space reserved for this node from the center point
            for the "depth" of the layer that it is in.
            </summary>
            <param name="node"></param>
            <param name="topleft">whether to return the distance from the <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Position"/>
            to the <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Center"/>, or from the <b>Center</b>
            to the bottom or right side of the <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Bounds"/></param>
            <returns>Returns the minimum space reserved above and below this node, in document coordinates</returns>
            <remarks>
            The default implementation returns 0 for nodes that do not
            correspond to top-level Go objects.  For nodes that do correspond
            to top-level Go objects, the layer space is determined by the
            width or height of the object depending on the <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraph.DirectionOption"/>.
            By default this adds 10 to the space, to account for port end segment lengths.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.NodeMinColumnSpace(Northwoods.Go.Layout.GoLayoutLayeredDigraphNode,System.Boolean)">
            <summary>
            The function NodeMinColumnSpace returns the minimum space
            reserved to either side of this node.
            The default implementation returns 0 for nodes that do not
            correspond to top-level Go objects.  For nodes that do correspond
            to top-level Go objects, the column space is determined by the
            width and height of the object divided by the <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraph.ColumnSpacing"/>.
            Note: all sub-classes that override this method should ensure that
            nodes that do not correspond to top-level Go objects have a minimum
            column space of 0.
            This function can be overridden to provide "fine-tuning" of the layout.
            </summary>
            <param name="node"></param>
            <param name="topleft">whether to return the distance from the <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Position"/>
            to the <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Center"/>, or from the <b>Center</b>
            to the bottom or right side of the <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Bounds"/></param>
            <returns>Returns the minimum space reserved to either side of the center of this node, in units of <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraph.ColumnSpacing"/></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.SaveLayout">
            <summary>
            The function SaveLayout stores the layer, column, and index of all
            nodes in an array of integers.
            </summary>
            <returns>Returns an integer array representation of the current layout</returns>
            <remarks>See also <seealso cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.RestoreLayout(System.Int32[])"/></remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.RestoreLayout(System.Int32[])">
            <summary>
            The function RestoreLayout restores the layer, column, and index of all
            nodes from an array of integers.
            </summary>
            <param name="layout"></param>
            <remarks>See also <seealso cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.SaveLayout"/></remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.CrossingMatrix(System.Int32,System.Int32)">
            <summary>
            Computes the crossing matrix between the unfixedLayer and its adjacent layers.
            The direction argument indicates which adjacent layers should be taken into
            consideration when computing the crossing matrix:
            <code>
            direction == 0  --  use unfixedLayer - 1 and unfixedLayer + 1
            direction > 0  --  use unfixedLayer - 1 (sweeping away from layer 0)
            direction &lt; 0  --  use unfixedLayer + 1 (sweeping towards layer 0)
            </code>
            The resulting integer array can be used as follows:
            if index1 and index2 are the indices corresponding to two nodes on the
            unfixedLayer and crossmat is the crossing matrix, then
            <c>crossmat[index1 * indices[unfixedLayer] + index2]</c>
            is the number of crossing that occur if the node corresponding to index1 is
            placed to the left of the node corresponding to index2.  If <c>index1 == index2</c>,
            then <c>crossmat[index1 * indices[unfixedLayer] + index2]</c> is the number of crossings
            between links to and from the node corresponding to index1.
            </summary>
            <param name="unfixedLayer"></param>
            <param name="direction"></param>
            <returns>Returns the crossing matrix</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.CountCrossings">
            <summary>
            Returns the total number of crossings in the network.
            Internal method used by <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.ReduceCrossings"/>.
            </summary>
            <returns>Returns the total number of crossings in the network.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.Bends(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Computes the bends between the unfixedLayer and its adjacent layers.
            The "bend" between a node U and a node V connected by a link L is calcluated by
            <c>abs((U.column + L.portFromColOffset) - (V.column + L.portToColOffset))</c>
            The "weighted bend" between a node U and a node V connected by link L is calculated by
            <c>abs((U.column + L.portFromColOffset) - (V.column + L.portToColOffset)) * LinkStraightenWeight(L)</c>
            The LinkStraightenWeight attempts to give higher priority to links between
            "artificial" nodes; i.e., long links in the final layout will be straighter.
            The direction argument indicates which adjacent layers should be taken into
            consideration when computing the crossing matrix:
            <c>direction == 0  --  use unfixedLayer - 1 and unfixedLayer + 1</c>
            <c>direction > 0  --  use unfixedLayer - 1 (sweeping away from layer 0)</c>
            <c>direction &lt; 0  --  use unfixedLayer + 1 (sweepeing towards layer 0)</c>
            </summary>
            <param name="unfixedLayer"></param>
            <param name="direction"></param>
            <param name="weighted"></param>
            <returns>Returns the bends between the unfixedLayer and its adjacent layers.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.CountBends(System.Boolean)">
            <summary>
            Returns the total number of bends in the network.
            The "bend" between a node U and a node V connected by a link L is calcluated by
            <c>abs((U.column + L.portFromColOffset) - (V.column + L.portToColOffset))</c>
            The "weighted bend" between a node U and a node V connected by link L is calculated by
            <c>abs((U.column + L.portFromColOffset) - (V.column + L.portToColOffset)) * LinkStraightenWeight(L)</c>
            The LinkStraightenWeight attempts to give higher priority to links between
            "artificial" nodes; i.e., long links in the final layout will be straighter.
            </summary>
            <param name="weighted"></param>
            <returns>Returns the total number of bends in the network.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.Normalize">
            <summary>
            Adjusts the columns of all nodes such that the leftmost column will be
            column 0 and maxColumn is updated appropriately.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.Barycenters(System.Int32,System.Int32)">
            <summary>
            Computes the array of barycenters (average) columns for the nodes in the 
            unfixedLayer based on the columns of predecessors (direction &lt; 0),
            successors (direction > 0), or both predecessors and successors (direction == 0)
            Elements without a defined barycenter will have an entry of -1.
            </summary>
            <param name="unfixedLayer"></param>
            <param name="direction"></param>
            <returns>Returns the array of barycenters (average) columns for the nodes in
            the unfixedLayer</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.Medians(System.Int32,System.Int32)">
            <summary>
            Computes the array of median columns for the nodes in the
            unfixedLayer based on the columns of predecessors (direction &lt; 0),
            successors (direction > 0), or both predecessors and successors (direction == 0).
            Elements without a defined median will have an entry of -1.
            </summary>
            <param name="unfixedLayer"></param>
            <param name="direction"></param>
            <returns>Returns the array of median columns for the nodes in
            the unfixedLayer</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.TightComponent(Northwoods.Go.Layout.GoLayoutLayeredDigraphNode,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Uses a depth first search algorithm to set the component of all nodes in a component.
            The forward and backward bools indicate the direction to use for a
            directed depth first search from node.
            **Unset functions only set the component and recurse on nodes whose component is currently
            set to the unset value.
            Tight** functions only set the component and recurse on nodes which are "tight",
            in the sense that the nodes are separated by a link which corresponds to the
            minumum link length of the link between the two nodes.
            </summary>
            <param name="node"></param>
            <param name="component"></param>
            <param name="forward"></param>
            <param name="backward"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.TightComponentUnset(Northwoods.Go.Layout.GoLayoutLayeredDigraphNode,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Uses a depth first search algorithm to set the component of all nodes in a component.
            Tight** functions only set the component and recurse on nodes which are "tight",
            in the sense that the nodes are separated by a link which corresponds to the
            minumum link length of the link between the two nodes.
            **Unset functions only set the component and recurse on nodes whose component is currently
            set to the unset value.
            The forward and backward bools indicate the direction to use for a
            directed depth first search from node.
            </summary>
            <param name="node"></param>
            <param name="component"></param>
            <param name="unset"></param>
            <param name="forward"></param>
            <param name="backward"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.SetComponents(Northwoods.Go.Layout.GoLayoutLayeredDigraphNode,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Uses a depth first search algorithm to set the component of all nodes in a component.
            The forward and backward bools indicate the direction to use for a
            directed depth first search from node.
            </summary>
            <param name="node"></param>
            <param name="component"></param>
            <param name="forward"></param>
            <param name="backward"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.ComponentUnset(Northwoods.Go.Layout.GoLayoutLayeredDigraphNode,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Uses a depth first search algorithm to set the component of all nodes in a component.
            **Unset functions only set the component and recurse on nodes whose component is currently
            set to the unset value.
            The forward and backward bools indicate the direction to use for a
            directed depth first search from node.
            </summary>
            <param name="node"></param>
            <param name="component"></param>
            <param name="unset"></param>
            <param name="forward"></param>
            <param name="backward"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.RemoveCycles">
            <summary>
            Removes cycles from the input network by reversing some number of links.
            </summary>
            <remarks>
            By default this just calls <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.GreedyCycleRemoval"/>
            or <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.DepthFirstSearchCycleRemoval"/>, as appropriate
            given the value of <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraph.CycleRemoveOption"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.GreedyCycleRemoval">
            <summary>
            Removes cycles from the input network using a Greedy-Cycle-Removal algorithm.
            The idea is to induce an order on all nodes
            in the network (U1, U2, U3, ..., Uk) such that for the majority of links L = (Ui, Uj)
            it is true that i &lt; j.  All links L = (Ui, Uj) such that i > j are reversed.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.GreedyCycleRemovalFindNode(Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork)">
            <summary>
            Finds a valid node in the network.
            Returns null if no valid node exists.
            Used by GreedyCycleRemoval.
            </summary>
            <param name="network"></param>
            <returns>Returns a valid node in the network or null if no valid nodes exist</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.GreedyCycleRemovalFindSink(Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork)">
            <summary>
            Finds a sink node in the network.  A node is considered a sink node if it is
            valid and all of its predecessors are invalid.  A valid node with no predecessors
            is vacously a sink.
            Returns null if no valid sink node exists.
            Used by GreedyCycleRemoval.
            </summary>
            <param name="network"></param>
            <returns>Returns a sink node in the network, or null if no valid sink node exists</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.GreedyCycleRemovalFindSource(Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork)">
            <summary>
            Finds a source node in the network.  A node is considered a sink node if it is
            valid and all of its successors are invalid.  A valid node with no successors
            is vacously a source.
            Returns null if no valid source node exists.
            Used by GreedyCycleRemoval.
            </summary>
            <param name="network"></param>
            <returns>Returns a source node in the network or null if no sources exist</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.GreedyCycleRemovalFindNodeMaxDegDiff(Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork)">
            <summary>
            Finds a valid node in the network that maximizes outdeg - indeg.
            The degree difference is computed using valid successors and predecessors.
            Returns null if no valid node exists.
            Used by GreedyCycleRemoval.
            </summary>
            <param name="network"></param>
            <returns>Returns a valid node in the network that maximized outdeg-indeg or null
            if no valid node exists</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.DepthFirstSearchCycleRemoval">
            <summary>
            Removes cycles from the input network using a depth first search.
            A link not in the depth first forest is reversed if the from-node was discovered
            and finished by the depth first search after the to-node was discovered but before
            the to-node was finished.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.DepthFirstSearchCycleRemovalVisit(Northwoods.Go.Layout.GoLayoutLayeredDigraphNode)">
            <summary>
            Peforms the recursive step of the depth first search on node.
            Updates the discover and finish time of node.
            Updates the forest flag of followed links.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.AssignLayers">
            <summary>
            Assigns every node in the input network to a layer.
            The layering satisfies the following:
            if L is a link from node U to node V,
            then U.layer &gt; V.layer;
            further, U.layer - V.layer &gt;= LinkMinLength(L).
            This method can be overridden to customize how nodes are assigned layers.
            </summary>
            <remarks>
            By default this just calls <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.LongestPathSinkLayering"/>,
            <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.LongestPathSourceLayering"/>, or
            <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.OptimalLinkLengthLayering"/> as appropriate given
            the <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraph.LayeringOption"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.LongestPathSinkLayering">
            <summary>
            Assigns every node in the input network to a layer.
            In addition to the requirements described in AssignLayers(),
            LongestPathSinkLayering ensures that every sink appears in layer 0
            and every node is as close to a sink as possible.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.LongestPathSinkLayeringLength(Northwoods.Go.Layout.GoLayoutLayeredDigraphNode)">
            <summary>
            Computes the length of the longest path from node to a sink node and sets the
            layer of node to that length.
            Returns the length of the longest path from node to a sink node.
            </summary>
            <param name="node"></param>
            <returns>Returns the length of the longest path from node to a sink node.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.LongestPathSourceLayering">
            <summary>
            Assigns every node in the input network to a layer.
            In addition to the requirements described in <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.AssignLayers"/>,
            LongestPathSourceLayering ensures that every source appears in layer maxLayer
            and every node is as close to a source as possible.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.LongestPathSourceLayeringLength(Northwoods.Go.Layout.GoLayoutLayeredDigraphNode)">
            <summary>
            Computes the length of the longest path from node to a source node and sets the
            layer of node to that length.
            Returns the length of the longest path from node to a source node.
            </summary>
            <param name="node"></param>
            <returns>Returns the length of the longest path from node to a source node.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.OptimalLinkLengthLayering">
            <summary>
            Assigns every node in the input network to a layer.
            In addition to the requirements described in AssignLayers(),
            OptimalLinkLengthLayering ensures that nodes are set in layers
            to minimize the total weighted link length.
            Hence, OptimalLinkLengthLayering minimizes the sum
            (U.layer - V.layer) * LinkLengthWeight(L)
            over all links L = (U,V).
            </summary>
            <remarks>See also <seealso cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.LinkMinLength(Northwoods.Go.Layout.GoLayoutLayeredDigraphLink)"/>
            and <seealso cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.LinkLengthWeight(Northwoods.Go.Layout.GoLayoutLayeredDigraphLink)"/></remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.OptimalLinkLengthLayeringDepthFirstSearch(Northwoods.Go.Layout.GoLayoutLayeredDigraphNode)">
            <summary>
            Peforms the depth first search of the network.
            After traversing all decendents, the node is "pull"-ed into
            the appropriate layer.
            </summary>
            <param name="node"></param>
            <seealso cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.OptimalLinkLengthLayeringPull(Northwoods.Go.Layout.GoLayoutLayeredDigraphNode)"/>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.OptimalLinkLengthLayeringPull(Northwoods.Go.Layout.GoLayoutLayeredDigraphNode)">
            <summary>
            Attempts to move node and it's tight component to a higher layer.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.OptimalLinkLengthLayeringPush(Northwoods.Go.Layout.GoLayoutLayeredDigraphNode)">
            <summary>
            Attempts to move node and it's tight component to a lower layer.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.MakeProper">
            <summary>
            Converts the input network into a proper digraph; i.e., artificial nodes and links
            are introduced into the network such that every link is between nodes in adjacent
            layers.  This has the effect of breaking up long links into a sequence of artificial
            nodes.
            </summary>
            <remarks>
            This method must not change the layer of any existing node, nor add or remove any layers.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.InitializeIndices">
            <summary>
            Assigns every node in the input network an index number,
            such that nodes in the same layer will be labeled with
            consecutive indices in left to right order.
            All consecutive layout operations will preserve or update
            the indices.
            In addition, the indices array is initialized such that
            indices[layer] indicates the number of nodes in the layer.
            Finally, the variables minIndexLayer and maxIndexLayer record
            the layers that correspond to the minimum and maximum nodes
            in a layer.
            </summary>
            <remarks>
            By default this will just call <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.NaiveInitializeIndices"/>,
            <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.DepthFirstOutInitializeIndices"/>, or
            <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.DepthFirstInInitializeIndices"/>, as appropriate
            given the value of <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraph.InitializeOption"/>.
            This method must not change the layer of any existing node, nor add or remove any layers.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.NaiveInitializeIndices">
            <summary>
            Assigns every node in the input network an index number,
            such that nodes in the same layer will be labeled with
            consecutive indices in left to right order.
            Uses a naive implementation that assigns indices to nodes as they
            are encountered in a sweep of the network.  Because of the way
            networks are stored, this has the effect of initialy placing all
            "artificial" nodes to the right of all "real" nodes.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.DepthFirstOutInitializeIndices">
            <summary>
            Assigns every node in the input network an index number,
            such that nodes in the same layer will be labeled with 
            consecutive indices in left to right order.
            Uses a depth first "outward" (i.e., following links from "from-node" to "to-node")
            traversal of the network, assigning indices to nodes as they are discovered.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.DepthFirstOutInitializeIndicesVisit(Northwoods.Go.Layout.GoLayoutLayeredDigraphNode)">
            <summary>
            Assigns node the appropriate index and updates the indices array.
            Implements the recursive portion of a depth first search.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.DepthFirstInInitializeIndices">
            <summary>
            Assigns every node in the input network an index number,
            such that nodes in the same layer will be labeled with
            consecutive indices in left to right order.
            Uses a depth first "inward" (i.e., following links from "to-node" to "from-node")
            traversal of the network, assigning indices to nodes as they are discovered.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.DepthFirstInInitializeIndicesVisit(Northwoods.Go.Layout.GoLayoutLayeredDigraphNode)">
            <summary>
            Assigns node the appropriate index and updates the indices array.
            Implements the recursive portion of a depth first search.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.InitializeColumns">
            <summary>
            Assigns every node in the input network a column number,
            such that nodes in the same layer will be labeled with
            increasing indices in left to right order.
            </summary>
            <remarks>
            In addition, a node U is assigned to a column such that
            2 * MinColumnSpace(U) + 1 columns are "allocated" to node U,
            and no two nodes have overlapping "allocations" of columns.
            All consecutive layout operations will preserve or update
            the columns.
            This method can be overridden to customize the layout algorithm.
            This method must not change the layer of any existing node, nor add or remove any layers.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.ReduceCrossings">
            <summary>
            Reorders nodes within layers to reduce the total number of link
            crossings in the network.
            There are many, many possible implementations of this function.
            Basically, some iteration of MedianBarycenterCrossingReduction
            and AdjacentExchangeCrossingReductionBendStraighten
            sweeping back and forth over the layers is needed.
            The default implementation has performed favorably on a large number
            of networks, but other options are available.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.MedianBarycenterCrossingReduction(System.Int32,System.Int32)">
            <summary>
            Reorders nodes within the unfixedLayer to reduce the number of link crossings between
            the unfixedLayer and its adjacent layers.  The direction argument indicates which of the
            adjacent layers should be taken into consideration when reducing the number of crossings.
            <c>direction == 0  --  use unfixedLayer - 1 and unfixedLayer + 1</c>
            <c>direction > 0  --  use unfixedLayer - 1 (sweeping away from layer 0)</c>
            <c>direction &lt; 0  --  use unfixedLayer + 1 (sweepeing towards layer 0)</c>
            The idea is to calculate the median and barycenter for each node in the unfixedLayer,
            and to sort the nodes in the unfixedLayer by their median and barycenter values.
            Returns true if some change was made to the layer.
            </summary>
            <param name="unfixedLayer"></param>
            <param name="direction"></param>
            <returns>Returns true if some change was made to the layer and false otherwise.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.AdjacentExchangeCrossingReductionBendStraighten(System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Adjusts the columns of nodes within the unfixedLayer to simultaneously reduce the
            number of link crossings and the number of "bends" between the unfixedLayer and its
            adjacent layers between the unfixedLayer and its adjacent layers.
            The directionCR argument indicates which of the adjacent layers should be taken
            into consideration when reducing the number of link crossings.
            <code>
            direction == 0  --  use unfixedLayer - 1 and unfixedLayer + 1
            direction > 0  --  use unfixedLayer - 1 (sweeping away from layer 0)
            direction &lt; 0  --  use unfixedLayer + 1 (sweepeing towards layer 0)
            </code>
            The directionBS argument indicates which of the adjacent layers should be taken
            into consideration when reducing the number of bends.
            <code>
            direction == 0  --  use unfixedLayer - 1 and unfixedLayer + 1
            direction > 0  --  use unfixedLayer - 1 (sweeping away from layer 0)
            direction &lt; 0  --  use unfixedLayer + 1 (sweepeing towards layer 0)
            </code>
            The "weighted bend" between a node U and a node V connected by link L is calculated by
            <c>abs((U.column + L.portFromColOffset) - (V.column + L.portToColOffset)) * LinkStraightenWeight(L)</c>
            The LinkStraightenWeight attempts to give higher priority to links between
            "artificial" nodes; i.e., long links in the final layout will be straighter.
            The idea is to use a bubble-sort technique to exchange adjacent nodes whenever
            doing so reduces the number of link crossings or the number of bends.
            This function is used in both crossing reduction and bend straightening.
            Returns true if some change was made to the layer.
            </summary>
            <param name="unfixedLayer">the layer to be reordered</param>
            <param name="directionCR">indicates which adjacent layers should be taken into consideration when calculating the crossing matrix</param>
            <param name="straighten">indicates whether or not to reorder to nodes to straighten links</param>
            <param name="directionBS">indicates which adjacent layers should be taken into consideration when calculating the bends of a link</param>
            <returns>Returns true if some change was made to the layer and false otherwise.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.StraightenAndPack">
            <summary>
            Adjusts the columns of nodes in the network to produce a layout which reduces
            the number of bends and is tightly packed.
            </summary>
            <remarks>
            The behavior is controlled by the <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraph.PackOption"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.BendStraighten(System.Int32,System.Int32)">
            <summary>
            Adjusts the columns of nodes within the unfixedLayer to reduce the number of "bends"
            between the unfixedLayer and its adjacent layers.  The direction argument indicates
            which of the adjacent layers should be taken into consideration when reducing the number
            of bends.
            The "weighted bend" between a node U and a node V connected by link L is calculated by
            <c>abs((U.column + L.portFromColOffset) - (V.column + L.portToColOffset)) * LinkStraightenWeight(L)</c>
            The LinkStraightenWeight attempts to give higher priority to links between
            "artificial" nodes; i.e., long links in the final layout will be straighter.
            The idea is to iterate the ShiftBendStraighten and adjacentExchangeBendStraighten
            methods until no improvements are made.
            </summary>
            <param name="unfixedLayer"></param>
            <param name="direction"></param>
            <returns>Returns true if an improvement was made.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.ShiftBendStraighten(System.Int32,System.Int32)">
            <summary>
            Adjusts the columns of nodes within the unfixedLayer to reduce the number of "bends"
            between the unfixedLayer and its adjacent layers.  The direction argument indicates
            which of the adjacent layers should be taken into consideration when reducing the number
            of bends.
            The "weighted bend" between a node U and a node V connected by link L is calculated by
            <c>abs((U.column + L.portFromColOffset) - (V.column + L.portToColOffset)) * LinkStraightenWeight(L)</c>
            The LinkStraightenWeight attempts to give higher priority to links between
            "artificial" nodes; i.e., long links in the final layout will be straighter.
            The idea is shift nodes to the left and to the right to reduce the bends
            ensuring that no two nodes have overlapping "allocations" of columns.
            Return true if some change was made to the layer.
            </summary>
            <param name="unfixedLayer"></param>
            <param name="direction"></param>
            <returns>Return true if some change was made to the layer and false otherwise.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.MedianStraighten(System.Int32,System.Int32)">
            <summary>
            Adjusts the columns of nodes within the unfixedLayer in order to move nodes towards
            their median columns.  The direction argument indicates which of the adjacent layers
            should be taken into consideration when computing the median column.
            The idea is shift nodes to the left and to the right to move nodes towards their
            median columns, ensuring that no two nodes have overlapping "allocations" of columns.
            Returns true if some change was made to the layer.
            </summary>
            <param name="unfixedLayer"></param>
            <param name="direction"></param>
            <returns>Returns true if some change was made to the layer and false otherwise.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.Pack">
            <summary>
            Adjusts the columns of nodes in the network to produce a layout which is tightly packed.
            The idea is that columns which are "un-allocated" through all layers can be eliminated
            and the nodes can be shifted into that space.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.PackAux(System.Int32,System.Int32)">
            <summary>
            Attempts to remove the argument column by shifting columns into from the argument direction.
              direction > 0 -- columns > argument column are shifted
              direction &lt; 0 -- columns &lt; argument column are shifted
            Returns true if the argument column was removed.
            </summary>
            <param name="column"></param>
            <param name="direction"></param>
            <returns>Returns true if the argument column was removed and false otherwise.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.TightPack">
            <summary>
            Adjusts the columns of nodes in the network to produce a layout which is tightly packed.
            The idea is that two adjacent columns can be "merged" if each layer has at most one of
            the two columns "allocated" to a node.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.TightPackAux(System.Int32,System.Int32)">
            <summary>
            Attempts to augment the argument column by merging columns into from the argument direction.
            direction > 0 -- columns > the argument column are shifted
            direction &lt; 0 -- columns &lt; the argument column are shifted
            Returns true if the argument column was changed.
            </summary>
            <param name="column"></param>
            <param name="direction"></param>
            <returns>Returns true if the argument column was changed and false otherwise.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.ComponentPack(System.Int32)">
            <summary>
            Adjusts the columns of nodes in the network to produce a layout which is tightly packed.
            The idea is that the network can be fragmented from a given column in the following way:
            all nodes "behind" the column are placed into a single component, and the remainder of
            the network is divided into connected components.  Each of these new components can be
            examined, and those that can be merged with the given column do so.
            </summary>
            <param name="direction"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.ComponentPackAux(System.Int32,System.Int32)">
            <summary>
            Attempts to augment the argument column by merging components into from the argument direction.
            direction > 0 -- columns > the argument column are shifted
            direction &lt; 0 -- columns &lt; the argument column are shifted
            Returns true if the argument column was changed.
            </summary>
            <param name="column"></param>
            <param name="direction"></param>
            <returns>Returns true if the argument column was changed and false otherwise.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.LayoutNodesAndLinks">
            <summary>
            Updates the physical location of "real" nodes and links to reflect
            the layout.
            </summary>
            <remarks>
            One reason to override this method would be to take advantage of
            added functionality of sub-classes of IGoLink, for example, a sub-class
            that tracked bend points and allowed them to be repositioned
            by the application.
            See also <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.LayoutNodes"/>
            and <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.LayoutLinks"/>.
            Although this method does not start or finish an undo manager
            transaction, it is compliant with undo and redo by calling
            <see cref="M:Northwoods.Go.GoDocument.RaiseChanging(System.Int32,System.Int32,System.Object)"/> and <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            with a hint of <see cref="F:Northwoods.Go.GoDocument.AllArranged"/>.
            This also updates the <see cref="P:Northwoods.Go.Layout.GoLayout.Document"/>'s <see cref="P:Northwoods.Go.GoDocument.TopLeft"/>
            and <see cref="P:Northwoods.Go.GoDocument.Size"/> properties to account for objects that
            have moved and potentially increased the extent of the document.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.LayoutNodes">
            <summary>
            Lays out the nodes.  Called by <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.LayoutNodesAndLinks"/>
            </summary>
            <remarks>
            See also <seealso cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.LayoutNodesAndLinks"/>
            and <seealso cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.LayoutLinks"/>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.LayoutLinks">
            <summary>
            Routes the links.  Called by <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.LayoutNodesAndLinks"/>
            </summary>
            <remarks>
            See also <seealso cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.LayoutNodesAndLinks"/>
            and <seealso cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.LayoutNodes"/>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.AvoidOrthogonalOverlaps">
            <summary>
            Try to avoid overlapping segments of Orthogonal links.
            </summary>
            <remarks>
            This is called as part of <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.LayoutLinks"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.GetIndices">
            <summary>
            Returns the indices array.
            </summary>
            <value>
            The value must not be modified.
            </value>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraph.Network">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork"/> that the layout will be performed on.
            </summary>
            <value>
            The initial value is null.
            This is automatically set to null when the <see cref="P:Northwoods.Go.Layout.GoLayout.Document"/> property changes.
            </value>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraph.LayerSpacing">
            <summary>
            Gets or sets the size of each layer
            </summary>
            <value>The value must be positive.  It defaults to 25.</value>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraph.ColumnSpacing">
            <summary>
            Gets or sets the size of each column
            </summary>
            <value>The value must be positive.  It defaults to 25.</value>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraph.DirectionOption">
            <summary>
            Gets or sets which Direction Option is being used.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraph.ArrangementOrigin">
            <summary>
            Gets or sets the top-left corner point at which <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.LayoutNodes"/> will position the nodes.
            </summary>
            <value>
            This defaults to (0, 0).
            </value>
            <remarks>
            This X,Y offset is added to the computed location for a node when <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.LayoutNodes"/>
            assigns the <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode"/>.<see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Center"/> property.
            The actual nodes may have <c>Bounds</c> that extend to values less than this origin, depending on the node sizes
            and relationship of the <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Center"/> with the <c>GoObject.Center</c>
            as determined by <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.CommitPosition"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraph.CycleRemoveOption">
            <summary>
            Gets or sets which cycle removal option is being used.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraph.LayeringOption">
            <summary>
            Gets or sets which layering option is being used.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraph.InitializeOption">
            <summary>
            Gets or sets which indices initialization option is being used.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraph.Iterations">
            <summary>
            Gets or sets the number of iterations are to be done.
            </summary>
            <value>The value must be non-negative.  The default value is 4.</value>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraph.AggressiveOption">
            <summary>
            Gets or sets which Aggressive Option is being used to look for link crossings.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraph.PackOption">
            <summary>
            Gets or sets the options used by <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.StraightenAndPack"/>.
            </summary>
            <value>is a bitwise combination of <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphPack"/> values</value>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraph.SetsPortSpots">
            <summary>
            Gets or sets whether the <see cref="T:Northwoods.Go.GoPort"/>.<see cref="P:Northwoods.Go.GoPort.FromSpot"/> and <see cref="P:Northwoods.Go.GoPort.ToSpot"/>
            of every single-port node should be set to values appropriate for the given <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraph.DirectionOption"/>.
            </summary>
            <value>The default value is true</value>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraph.MaxLayer">
            <summary>
            Gets the largest layer value.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraph.MaxIndex">
            <summary>
            Gets the largest index value.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraph.MaxColumn">
            <summary>
            Gets the largest column value.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraph.MinIndexLayer">
            <summary>
            Gets the smallest index layer
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraph.MaxIndexLayer">
            <summary>
            Gets the largest index layer.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork">
            <summary>
            This provides an abstract view of a <see cref="T:Northwoods.Go.IGoCollection"/> as a
            network (graph) of nodes and directed links.  These nodes and links correspond to
            <see cref="T:Northwoods.Go.GoObject"/>s provided in the <see cref="T:Northwoods.Go.IGoCollection"/>.
            This class provides a framework for manipulating the
            state of nodes and links without modifying the structure of the original document.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.#ctor">
            <summary>
            Constructs an empty network.
            </summary>
            <remarks>
            Use this default constructor to create an empty network.
            Call <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.AddNodesAndLinksFromCollection(Northwoods.Go.IGoCollection,System.Boolean)"/> to automatically add
            network nodes and links, or call <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.AddNode(Northwoods.Go.GoObject)"/> and <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.LinkNodes(Northwoods.Go.Layout.GoLayoutLayeredDigraphNode,Northwoods.Go.Layout.GoLayoutLayeredDigraphNode,Northwoods.Go.GoObject)"/>
            explicitly to have more detailed control over the exact graph that is laid out.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.#ctor(Northwoods.Go.IGoCollection)">
            <summary>
            Constructs a network from a collection of GoObjects, by also calling
            <c>AddNodesAndLinksFromCollection(collection, true)</c>
            </summary>
            <param name="collection">the <see cref="T:Northwoods.Go.IGoCollection"/> containing the <see cref="T:Northwoods.Go.GoObject"/>s to add to the network.</param>
            <remarks>
            If you want an automatic layout of all the objects in a collection,
            you'll want to do something like the following code:
            <code>
            GoLayout... layout = new GoLayout...();
            layout.Document = ...document...;
            layout.Network = layout.CreateNetwork();
            layout.Network.AddNodesAndLinksFromCollection(...collection..., false);
            ...maybe set other properties...
            layout.PerformLayout();
            </code>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.CreateNetworkNode">
            <summary>
            Allocate a new instance of <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.CreateNetworkLink">
            <summary>
            Allocate a new instance of <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.AddNodesAndLinksFromCollection(Northwoods.Go.IGoCollection,System.Boolean)">
            <summary>
            Adds the objects in an IGoCollection to the network.
            </summary>
            <param name="collection"></param>
            <param name="onlytruenodes">
            If true, only those objects that implement <see cref="T:Northwoods.Go.IGoNode"/> will get
            <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode"/>s created for them.
            If false, each (non-link) object in the collection will be represented by a
            <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode"/>.
            If you want the layout to ignore groups such as <see cref="T:Northwoods.Go.GoComment"/>s
            in your graph, provide a value of true here.
            </param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.RemoveAllNodesAndLinks">
            <summary>
            Removes all nodes and links from the network, resulting in an empty network.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.AddNode(Northwoods.Go.Layout.GoLayoutLayeredDigraphNode)">
            <summary>
            Adds a <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode"/> to the Network.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.AddNode(Northwoods.Go.GoObject)">
            <summary>
            This convenience method makes sure there is a <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode"/>
            in this network corresponding to a <see cref="T:Northwoods.Go.GoObject"/>.
            </summary>
            <param name="node">a GoObject, normally an instance of a subclass of GoNode</param>
            <returns>a <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode"/> in this network</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.DeleteNode(Northwoods.Go.Layout.GoLayoutLayeredDigraphNode)">
            <summary>
            Deletes the input node from the network.
            </summary>
            <param name="node"></param>
            <remarks>
            This function also deletes all links to or from the node.
            Performs a no-op if the node is not in the network.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.DeleteNode(Northwoods.Go.GoObject)">
            <summary>
            This convenience method removes any <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode"/>
            corresponding to a <see cref="T:Northwoods.Go.GoObject"/>.
            </summary>
            <param name="node">a GoObject</param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.FindNode(Northwoods.Go.GoObject)">
            <summary>
            Returns the GoLayoutLayeredDigraphNode which was constructed for the GoObject.
            </summary>
            <param name="obj"></param>
            <returns>Returns the Network GoLayoutLayeredDigraphNode associated with the go object or null
            if no such node exists.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.AddLink(Northwoods.Go.Layout.GoLayoutLayeredDigraphLink)">
            <summary>
            Adds a GoLayoutLayeredDigraphLink to the network.
            Although this method is provided for completeness,
            <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.LinkNodes(Northwoods.Go.Layout.GoLayoutLayeredDigraphNode,Northwoods.Go.Layout.GoLayoutLayeredDigraphNode,Northwoods.Go.GoObject)"/> provides a more efficient manner of linking
            nodes already in the network.
            </summary>
            <param name="link"></param>
            <remarks>
            This adds the link to its <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink.ToNode"/>'s
            source links list, and to its <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink.FromNode"/>'s
            destination links list.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.AddLink(Northwoods.Go.IGoLink)">
            <summary>
            This convenience method takes a <see cref="T:Northwoods.Go.GoObject"/> implementing <see cref="T:Northwoods.Go.IGoLink"/>,
            and returns a <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink"/> that has been added to this network.
            </summary>
            <param name="ilink"></param>
            <returns>a <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink"/> in this network</returns>
            <remarks>
            If <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.FindLink(Northwoods.Go.GoObject)"/> returns null, this method creates a new <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink"/>,
            makes sure the <see cref="P:Northwoods.Go.IGoLink.FromNode"/> and <see cref="P:Northwoods.Go.IGoLink.ToNode"/> have
            corresponding <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode"/>s in the network, and adds the link itself
            to the network.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.DeleteLink(Northwoods.Go.Layout.GoLayoutLayeredDigraphLink)">
            <summary>
            Deletes the input link from the network.
            </summary>
            <param name="link"></param>
            <remarks>
            Also removes the link from its to node's predecessor list
            and from its from node's successor list.
            Performs a no-op if the link is not in the network.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.DeleteLink(Northwoods.Go.IGoLink)">
            <summary>
            This convenience method makes sure a <see cref="T:Northwoods.Go.GoObject"/> implementing <see cref="T:Northwoods.Go.IGoLink"/>
            does not have a <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink"/> in this network.
            </summary>
            <param name="ilink"></param>
            <remarks>
            This just calls <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.DeleteLink(Northwoods.Go.Layout.GoLayoutLayeredDigraphLink)"/> if
            <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.FindLink(Northwoods.Go.GoObject)"/> finds a <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.FindLink(Northwoods.Go.GoObject)">
            <summary>
            Returns the GoLayoutLayeredDigraphLink which was constructed for the GoObject.
            </summary>
            <param name="obj"></param>
            <returns>Returns the Network GoLayoutLayeredDigraphLink which was constructed with the obj or
            null if no such link exists.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.LinkNodes(Northwoods.Go.Layout.GoLayoutLayeredDigraphNode,Northwoods.Go.Layout.GoLayoutLayeredDigraphNode,Northwoods.Go.GoObject)">
            <summary>
            Links two nodes already in the network and returns the created link.
            </summary>
            <param name="fromNode"></param>
            <param name="toNode"></param>
            <param name="obj"> the GoObject to which the created link should correspond (may be null)</param>
            <returns>Returns the link created when fromNode and toNode are linked.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.ReverseLink(Northwoods.Go.Layout.GoLayoutLayeredDigraphLink)">
            <summary>
            Reverses the direction of a link in the network.
            </summary>
            <param name="link"></param>
            <remarks>
            This calls <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink.ReverseLink"/> and also adjusts the
            source links and destination links of both connected nodes.
            If either <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink.FromNode"/> or 
            <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink.ToNode"/> are null, this method does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.DeleteSelfLinks">
            <summary>
            Deletes all links whose "to node" and "from node" are the same node.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.DeleteArtificialNodes">
            <summary>
            Delete all nodes and links that have no <see cref="T:Northwoods.Go.GoObject"/>
            associated with them.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.SplitIntoSubNetworks">
            <summary>
            Modify this network by splitting it up into separate subnetworks,
            each of which has all of its nodes connected to each other, but not
            to any nodes in any other subnetworks.
            </summary>
            <returns>
            An <c>IEnumerator</c> of networks,
            sorted in order of decreasing <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.NodeCount"/>.
            </returns>
            <remarks>
            This method will first delete from this network all artifical nodes and
            all links that do not connect two different nodes.
            Afterwards, this original network may be empty or may contain all of the
            singleton <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode"/>s, each of which had no
            <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink"/>s connecting it to any other nodes.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.GetNodesAndLinks(Northwoods.Go.IGoCollection)">
            <summary>
            Retrieve all of the <see cref="T:Northwoods.Go.GoObject"/> nodes and links from the
            <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode"/>s and <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink"/>s
            that are in this network, by adding them to the given <paramref name="coll"/>.
            </summary>
            <param name="coll">
            An <see cref="T:Northwoods.Go.IGoCollection"/>; if null, the method allocates
            and returns a <see cref="T:Northwoods.Go.GoSelection"/>.
            </param>
            <returns>
            An <see cref="T:Northwoods.Go.IGoCollection"/> of all of the <see cref="T:Northwoods.Go.GoObject"/>s that
            correspond to <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode"/>s and <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink"/>s.
            </returns>
            <remarks>
            If you pass a value for <pararef name="coll"/>, we recommend using a <see cref="T:Northwoods.Go.GoSelection"/>
            instead of a <see cref="T:Northwoods.Go.GoCollection"/>, since <see cref="T:Northwoods.Go.GoSelection"/> has
            more efficient lookup for avoiding duplicates.
            A <see cref="T:Northwoods.Go.GoSelection"/> is also handy for easily moving all those objects
            by calling <see cref="M:Northwoods.Go.GoView.MoveSelection(Northwoods.Go.GoSelection,System.Drawing.SizeF,System.Boolean)"/>.
            You can determine the bounding rectangle for a collection of nodes and links
            by calling the static/shared method
            <see cref="T:Northwoods.Go.GoDocument"/>.<see cref="M:Northwoods.Go.GoDocument.ComputeBounds(Northwoods.Go.IGoCollection,Northwoods.Go.GoView)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.NodeCount">
            <summary>
            Gets the number of Nodes in the Network.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.LinkCount">
            <summary>
            Gets the number of Links in the Network.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.GoObjToNodeMap">
            <summary>
            Gets the Hashtable that maps GoObjects to Nodes
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.GoObjToLinkMap">
            <summary>
            Gets the Hashtable that maps GoObjects to Links
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.Nodes">
            <summary>
            Gets an enumerator for the network's nodes.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.Links">
            <summary>
            Gets an enumerator for the network's links.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.Layout">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraph"/> in which this
            network is being used.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.NodeArrayList">
            <summary>
            This partly implements an <c>ArrayList</c> of <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkNode"/>s.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.NodeArrayList.#ctor">
            <summary>
            Construct an empty list.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.NodeArrayList.Contains(Northwoods.Go.Layout.GoLayoutLayeredDigraphNode)">
            <summary>
            True if the item is in the list.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.NodeArrayList.IndexOf(Northwoods.Go.Layout.GoLayoutLayeredDigraphNode)">
            <summary>
            Find the zero-based position of an item in the list, or -1 if not present.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.NodeArrayList.Add(Northwoods.Go.Layout.GoLayoutLayeredDigraphNode)">
            <summary>
            Add an item to the end of the list.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.NodeArrayList.RemoveAt(System.Int32)">
            <summary>
            Remove an item from the list that is at a particular zero-based index.
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.NodeArrayList.GetEnumerator">
            <summary>
            Support enumerating the items in this list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.NodeArrayList.ToArray">
            <summary>
            Copy references to this list's items into an array.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.NodeArrayList.Count">
            <summary>
            Gets the number of items in the list.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.NodeArrayList.Item(System.Int32)">
            <summary>
            This supports accessing items by zero-based index.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.LinkArrayList">
            <summary>
            This partly implements an <c>ArrayList</c> of <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkNode"/>s.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.LinkArrayList.#ctor">
            <summary>
            Construct an empty list.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.LinkArrayList.Contains(Northwoods.Go.Layout.GoLayoutLayeredDigraphLink)">
            <summary>
            True if the item is in the list.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.LinkArrayList.IndexOf(Northwoods.Go.Layout.GoLayoutLayeredDigraphLink)">
            <summary>
            Find the zero-based position of an item in the list, or -1 if not present.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.LinkArrayList.Add(Northwoods.Go.Layout.GoLayoutLayeredDigraphLink)">
            <summary>
            Add an item to the end of the list.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.LinkArrayList.RemoveAt(System.Int32)">
            <summary>
            Remove an item from the list that is at a particular zero-based index.
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.LinkArrayList.GetEnumerator">
            <summary>
            Support enumerating the items in this list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.LinkArrayList.ToArray">
            <summary>
            Copy references to this list's items into an array.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.LinkArrayList.Count">
            <summary>
            Gets the number of items in the list.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.LinkArrayList.Item(System.Int32)">
            <summary>
            This supports accessing items by zero-based index.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.NodeEnumerator">
            <summary>
            NodeEnumerator implements both <c>IEnumerator</c> and <c>IEnumerable</c>.
            It should be used to enumerate through all the Nodes.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.NodeEnumerator.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the Nodes.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.NodeEnumerator.MoveNext">
            <summary>
            Advance the enumerator to the next GoLayoutLayeredDigraphNode.
            </summary>
            <returns>True if there is a next GoLayoutLayeredDigraphNode; false if it has finished iterating over the collection.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.NodeEnumerator.Reset">
            <summary>
            Reset the enumerator to its original position.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.NodeEnumerator.Current">
            <summary>
             Gets the current node in the collection of nodes.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.LinkEnumerator">
            <summary>
            LinkEnumerator implements both <c>IEnumerator</c> and <c>IEnumerable</c>.
            It should be used to enumerate through all the Links.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.LinkEnumerator.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the Links
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.LinkEnumerator.MoveNext">
            <summary>
            Advance the enumerator to the next GoLayoutLayeredDigraphLink.
            </summary>
            <returns>True if there is a next GoLayoutLayeredDigraphLink; false if it has finished iterating over the collection.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.LinkEnumerator.Reset">
            <summary>
            Reset the enumerator to its original position.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNetwork.LinkEnumerator.Current">
            <summary>
             Gets the current node in the collection of links.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink">
            <summary>
            Holds auto-layout specific link data.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink.OnPortChanged(Northwoods.Go.IGoPort,System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)">
            <summary>
            Don't need to do anything.
            </summary>
            <param name="port"></param>
            <param name="subhint"></param>
            <param name="oldI"></param>
            <param name="oldVal"></param>
            <param name="oldRect"></param>
            <param name="newI"></param>
            <param name="newVal"></param>
            <param name="newRect"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink.Unlink">
            <summary>
            Remove this network link from the network.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink.ReverseLink">
            <summary>
            Reverses the link; i.e., exchanges the from and to nodes.
            </summary>
            <remarks>
            Setting this property does not modify any <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode"/>
            by adding or removing a link to its <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.SourceLinksList"/>
            or <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.DestinationLinksList"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink.CommitPosition">
            <summary>
            Commits the position of the link to the corresponding GoObject.
            </summary>
            <remarks>
            By default this does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink.GetOtherNode(Northwoods.Go.IGoNode)">
            <summary>
            Finds and returns the link's node other than n.  Returns null if
            n is neither the from node or to node.
            </summary>
            <param name="n"></param>
            <returns>Finds and returns the link's node other than n.  Returns null if
            n is neither the from node or to node.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink.GetOtherPort(Northwoods.Go.IGoPort)">
            <summary>
            Finds and returns the link's port other than p.  Returns null if
            p is neither the from port or to port.
            </summary>
            <param name="p"></param>
            <returns>Finds and returns the link's port other than p.  Returns null if
            p is neither the from port or to port.</returns>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink.GoObject">
            <summary>
            Gets or sets this link's associated GoObject.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink.Network">
            <summary>
            Gets or sets the network that this link is part of.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink.FromNode">
            <summary>
            Gets this link's From GoLayoutLayeredDigraphNode.
            </summary>
            <remarks>
            Setting this property does not modify the <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode"/>
            by adding a link to its <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.DestinationLinksList"/>
            or removing it from another node's list.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink.FromPort">
            <summary>
            Gets this link's From GoLayoutLayeredDigraphNode.
            </summary>
            <remarks>
            Setting this property does not modify the <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode"/>
            by adding a link to its <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.DestinationLinksList"/>
            or removing it from another node's list.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink.ToNode">
            <summary>
            Gets or sets the To GoLayoutLayeredDigraphNode for this link.
            </summary>
            <remarks>
            Setting this property does not modify the <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode"/>
            by adding a link to its <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.SourceLinksList"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink.ToPort">
            <summary>
            Gets or sets the To GoLayoutLayeredDigraphNode for the link.
            </summary>
            <remarks>
            Setting this property does not modify the <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode"/>
            by adding a link to its <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.SourceLinksList"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink.Stroke">
            <summary>
            Gets the GoStroke associated with the Network GoLayoutLayeredDigraphLink.
            This may be needed by the algorithm to add bends to the link.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink.UserObject">
            <summary>
            Gets or Sets an Object associated with the link
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink.UserFlags">
            <summary>
            Gets or Sets an integer associated with the link
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink.Valid">
            <summary>
            true if the link is part of the proper digraph; see <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.MakeProper"/> for details
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink.Rev">
            <summary>
            true if the link was reversed during cycle removal
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink.Forest">
            <summary>
            true if the link is part of depth first forest; used in <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.DepthFirstSearchCycleRemoval"/>
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink.PortFromPos">
            <summary>
            location of the port at the from node of the link; allows the crossing matrix to correctly calculate the crossings for nodes with multiple ports
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink.PortToPos">
            <summary>
            location of the port at the to node of the link; allows the crossing matrix to correctly calculate the crossings for nodes with multiple ports
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink.PortFromColOffset">
            <summary>
            approximate column offset of the from port of the link from the from node column used in straightening
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink.PortToColOffset">
            <summary>
            approximate column offset of the to port of the link from the to node column used in straightening
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode">
            <summary>
            Holds auto-layout specific node data.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.AddSourceLink(Northwoods.Go.Layout.GoLayoutLayeredDigraphLink)">
            <summary>
            Adds a <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink"/> to the list predecessors
            (i.e., the link will be coming into this node).
            </summary>
            <param name="sourceLink"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.DeleteSourceLink(Northwoods.Go.Layout.GoLayoutLayeredDigraphLink)">
            <summary>
            Deletes a <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink"/> from the list of predecessors
            (i.e., the link was to this node).
            </summary>
            <param name="sourceLink"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.AddDestinationLink(Northwoods.Go.Layout.GoLayoutLayeredDigraphLink)">
            <summary>
            Adds a <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink"/> to the list successors
            (i.e., the link will be going out from this node).
            </summary>
            <param name="destinationLink"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.DeleteDestinationLink(Northwoods.Go.Layout.GoLayoutLayeredDigraphLink)">
            <summary>
            Deletes a <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink"/> from the list of successors
            (i.e., the link was going out from this node).
            </summary>
            <param name="destinationLink"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.CommitPosition">
            <summary>
            Moves the corresponding GoObject to the center point of the node in the
            document.
            </summary>
            <remarks>
            To make the most common cases look right, the object's <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.GoObject"/>.<c>SelectionObject</c>
            is centered.  Thus iconic nodes will have the center of the icon be positioned
            according to the <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Center"/> of this GoLayoutLayeredDigraphNode, ignoring any labels.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.GoObject">
            <summary>
            Gets or sets the GoObject associated with this network node.
            </summary>
            <remarks>
            Setting this value to an object will also set the <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Center"/>
            property to that object's <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.GoObject"/>.<c>SelectionObject</c> center position.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Network">
            <summary>
            Gets or sets the network that this node is part of.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.SourceLinksList">
            <summary>
            Returns the list of predecessor links (i.e., the links are coming into this node).
            </summary>
            <value>
            An <c>GoLayoutLayeredDigraphNetwork.LinkArrayList</c> of <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink"/>s.
            This list should not be modified directly; use <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.AddSourceLink(Northwoods.Go.Layout.GoLayoutLayeredDigraphLink)"/>
            and <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.DeleteSourceLink(Northwoods.Go.Layout.GoLayoutLayeredDigraphLink)"/> instead.
            </value>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.DestinationLinksList">
            <summary>
            Returns the list of successor links (i.e., the links are going out from this node).
            </summary>
            <value>
            An <c>GoLayoutLayeredDigraphNetwork.LinkArrayList</c> of <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphLink"/>s.
            This list should not be modified directly; use <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.AddDestinationLink(Northwoods.Go.Layout.GoLayoutLayeredDigraphLink)"/>
            and <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.DeleteDestinationLink(Northwoods.Go.Layout.GoLayoutLayeredDigraphLink)"/> instead.
            </value>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Center">
            <summary>
            Gets or sets the Center Point of this node.
            </summary>
            <remarks>
            Setting this property does not modify any <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.GoObject"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Position"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Position">
            <summary>
            Gets or sets the Position (top-left corner) of this node.
            </summary>
            <remarks>
            Setting this property does not modify any <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.GoObject"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Center"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Focus">
            <summary>
            Gets or sets the offset of the <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Center"/> from the
            <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Bounds"/><c>.Position</c>.
            </summary>
            <value>
            The focus must be inside the <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Bounds"/>.
            </value>
            <remarks>
            Setting this property does not modify any <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.GoObject"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Bounds">
            <summary>
            Gets or sets the Bounds of this node.
            </summary>
            <value>
            The height and width must be non-negative, of course.
            But the bounds also need to contain the <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Focus"/>.
            </value>
            <remarks>
            Setting this property does not modify any <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.GoObject"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Size">
            <summary>
            Gets the <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Bounds"/><c>.Size</c>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Width">
            <summary>
            Gets the <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Bounds"/><c>.Width</c>.
            </summary>
            <remarks>
            This is always the horizontal distance reserved for this node.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Height">
            <summary>
            Gets the <see cref="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Bounds"/><c>.Height</c>.
            </summary>
            <remarks>
            This is always the vertical distance reserved for this node.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.UserObject">
            <summary>
            Gets or sets an Object associated with the node
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.UserFlags">
            <summary>
            Gets or sets the node's flags
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Sources">
            <summary>
            Gets an enumerator over all of the nodes that have links coming into this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all nodes that have ports that have any
            destination links coming into any port of this node.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoNode.Sources"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Destinations">
            <summary>
            Gets an enumerator over all of the nodes that have links going out of this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all nodes that have ports that have any
            source links going out of any port of this node.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoNode.Destinations"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Nodes">
            <summary>
            Gets an enumerator over all of the nodes that are connected to this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all nodes that have ports that have any
            links connected to any port of this node.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoNode.Sources"/>
            <seealso cref="P:Northwoods.Go.IGoNode.Destinations"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.SourceLinks">
            <summary>
            Gets an enumerator over all of the links coming into this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all links that come into
            any port of this node.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoNode.SourceLinks"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.SourceLinksCount">
            <summary>
            Gets the number of links going into this node.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.DestinationLinks">
            <summary>
            Gets an enumerator over all of the links going out of this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all links that go out of
            any port of this node.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoNode.DestinationLinks"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.DestinationLinksCount">
            <summary>
            Gets the number of links coming out of this node.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Links">
            <summary>
            Gets an enumerator over all of the links going out of or coming into this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all links that are connected to
            port of this node.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoNode.SourceLinks"/>
            <seealso cref="P:Northwoods.Go.IGoNode.DestinationLinks"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.LinksCount">
            <summary>
            Gets the number of links connected to this node.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Layer">
            <summary>
            the layer to which the node is assigned; see <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.AssignLayers"/> for details
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Column">
            <summary>
            the column to which the node is assigned; see <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.InitializeColumns"/> for details
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Index">
            <summary>
            the index to which the node is assigned; see <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.InitializeIndices"/> for details
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Valid">
            <summary>
            a flag; used in <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.GreedyCycleRemoval"/>
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Discover">
            <summary>
            time of discovery in depth first search; used in
            <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.DepthFirstSearchCycleRemoval"/>
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Finish">
            <summary>
            time of finishing in depth first search; used in
            <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.DepthFirstSearchCycleRemoval"/>
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Component">
            <summary>
            the connected component to which the node is assigned; used by
            <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.OptimalLinkLengthLayering"/> and
            <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.ComponentPack(System.Int32)"/>
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode.Near">
            <summary>
            another <see cref="T:Northwoods.Go.Layout.GoLayoutLayeredDigraphNode"/> in the same layer
            that this node should be near; used by <see cref="M:Northwoods.Go.Layout.GoLayoutLayeredDigraph.CrossingMatrix(System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutLicenseProvider">
            <summary>
            This is an internal class used to implement licensing.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
            <summary>
            This method implements licensing.
            </summary>
            <param name="context"></param>
            <param name="type"></param>
            <param name="instance"></param>
            <param name="allowExceptions"></param>
            <returns></returns>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutNetwork">
            <summary>
            This provides an abstract view of a <see cref="T:Northwoods.Go.IGoCollection"/> as a
            network (graph) of nodes and directed links.  These nodes and links correspond to
            <see cref="T:Northwoods.Go.GoObject"/>s provided in the <see cref="T:Northwoods.Go.IGoCollection"/>.
            This class provides a framework for manipulating the
            state of nodes and links without modifying the structure of the original document.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.#ctor">
            <summary>
            Constructs an empty network.
            </summary>
            <remarks>
            Use this default constructor to create an empty network.
            Call <see cref="M:Northwoods.Go.Layout.GoLayoutNetwork.AddNodesAndLinksFromCollection(Northwoods.Go.IGoCollection,System.Boolean)"/> to automatically add
            network nodes and links, or call <see cref="M:Northwoods.Go.Layout.GoLayoutNetwork.AddNode(Northwoods.Go.GoObject)"/> and <see cref="M:Northwoods.Go.Layout.GoLayoutNetwork.LinkNodes(Northwoods.Go.Layout.GoLayoutNetworkNode,Northwoods.Go.Layout.GoLayoutNetworkNode,Northwoods.Go.GoObject)"/>
            explicitly to have more detailed control over the exact graph that is laid out.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.#ctor(Northwoods.Go.IGoCollection)">
            <summary>
            Constructs a network from a collection of GoObjects, by also calling
            <c>AddNodesAndLinksFromCollection(collection, true)</c>
            </summary>
            <param name="collection">the <see cref="T:Northwoods.Go.IGoCollection"/> containing the <see cref="T:Northwoods.Go.GoObject"/>s to add to the network.</param>
            <remarks>
            If you want an automatic layout of all the objects in a collection,
            you'll want to do something like the following code:
            <code>
            GoLayout... layout = new GoLayout...();
            layout.Document = ...document...;
            layout.Network = layout.CreateNetwork();
            layout.Network.AddNodesAndLinksFromCollection(...collection..., false);
            ...maybe set other properties...
            layout.PerformLayout();
            </code>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.CreateNetworkNode">
            <summary>
            Allocate a new instance of <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkNode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.CreateNetworkLink">
            <summary>
            Allocate a new instance of <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkLink"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.AddNodesAndLinksFromCollection(Northwoods.Go.IGoCollection,System.Boolean)">
            <summary>
            Adds the objects in an IGoCollection to the network.
            </summary>
            <param name="collection"></param>
            <param name="onlytruenodes">
            If true, only those objects that implement <see cref="T:Northwoods.Go.IGoNode"/> will get
            <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkNode"/>s created for them.
            If false, each (non-link) object in the collection will be represented by a
            <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkNode"/>.
            If you want the layout to ignore groups such as <see cref="T:Northwoods.Go.GoComment"/>s
            in your graph, provide a value of true here.
            </param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.RemoveAllNodesAndLinks">
            <summary>
            Removes all nodes and links from the network, resulting in an empty network.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.AddNode(Northwoods.Go.Layout.GoLayoutNetworkNode)">
            <summary>
            Adds a <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkNode"/> to the Network.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.AddNode(Northwoods.Go.GoObject)">
            <summary>
            This convenience method makes sure there is a <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkNode"/>
            in this network corresponding to a <see cref="T:Northwoods.Go.GoObject"/>.
            </summary>
            <param name="node">a GoObject, normally an instance of a subclass of GoNode</param>
            <returns>a <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkNode"/> in this network</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.DeleteNode(Northwoods.Go.Layout.GoLayoutNetworkNode)">
            <summary>
            Deletes the input node from the network.
            </summary>
            <param name="node"></param>
            <remarks>
            This function also deletes all links to or from the node.
            Performs a no-op if the node is not in the network.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.DeleteNode(Northwoods.Go.GoObject)">
            <summary>
            This convenience method removes any <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkNode"/>
            corresponding to a <see cref="T:Northwoods.Go.GoObject"/>.
            </summary>
            <param name="node">a GoObject</param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.FindNode(Northwoods.Go.GoObject)">
            <summary>
            Returns the GoLayoutNetworkNode which was constructed for the GoObject.
            </summary>
            <param name="obj"></param>
            <returns>Returns the Network GoLayoutNetworkNode associated with the go object or null
            if no such node exists.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.AddLink(Northwoods.Go.Layout.GoLayoutNetworkLink)">
            <summary>
            Adds a GoLayoutNetworkLink to the network.
            Although this method is provided for completeness,
            <see cref="M:Northwoods.Go.Layout.GoLayoutNetwork.LinkNodes(Northwoods.Go.Layout.GoLayoutNetworkNode,Northwoods.Go.Layout.GoLayoutNetworkNode,Northwoods.Go.GoObject)"/> provides a more efficient manner of linking
            nodes already in the network.
            </summary>
            <param name="link"></param>
            <remarks>
            This adds the link to its <see cref="P:Northwoods.Go.Layout.GoLayoutNetworkLink.ToNode"/>'s
            source links list, and to its <see cref="P:Northwoods.Go.Layout.GoLayoutNetworkLink.FromNode"/>'s
            destination links list.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.AddLink(Northwoods.Go.IGoLink)">
            <summary>
            This convenience method takes a <see cref="T:Northwoods.Go.GoObject"/> implementing <see cref="T:Northwoods.Go.IGoLink"/>,
            and returns a <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkLink"/> that has been added to this network.
            </summary>
            <param name="ilink"></param>
            <returns>a <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkLink"/> in this network</returns>
            <remarks>
            If <see cref="M:Northwoods.Go.Layout.GoLayoutNetwork.FindLink(Northwoods.Go.GoObject)"/> returns null, this method creates a new <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkLink"/>,
            makes sure the <see cref="P:Northwoods.Go.IGoLink.FromNode"/> and <see cref="P:Northwoods.Go.IGoLink.ToNode"/> have
            corresponding <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkNode"/>s in the network, and adds the link itself
            to the network.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.DeleteLink(Northwoods.Go.Layout.GoLayoutNetworkLink)">
            <summary>
            Deletes the input link from the network.
            </summary>
            <param name="link"></param>
            <remarks>
            Also removes the link from its to node's predecessor list
            and from its from node's successor list.
            Performs a no-op if the link is not in the network.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.DeleteLink(Northwoods.Go.IGoLink)">
            <summary>
            This convenience method makes sure a <see cref="T:Northwoods.Go.GoObject"/> implementing <see cref="T:Northwoods.Go.IGoLink"/>
            does not have a <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkLink"/> in this network.
            </summary>
            <param name="ilink"></param>
            <remarks>
            This just calls <see cref="M:Northwoods.Go.Layout.GoLayoutNetwork.DeleteLink(Northwoods.Go.Layout.GoLayoutNetworkLink)"/> if
            <see cref="M:Northwoods.Go.Layout.GoLayoutNetwork.FindLink(Northwoods.Go.GoObject)"/> finds a <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkLink"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.FindLink(Northwoods.Go.GoObject)">
            <summary>
            Returns the GoLayoutNetworkLink which was constructed for the GoObject.
            </summary>
            <param name="obj"></param>
            <returns>Returns the Network GoLayoutNetworkLink which was constructed with the obj or
            null if no such link exists.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.LinkNodes(Northwoods.Go.Layout.GoLayoutNetworkNode,Northwoods.Go.Layout.GoLayoutNetworkNode,Northwoods.Go.GoObject)">
            <summary>
            Links two nodes already in the network and returns the created link.
            </summary>
            <param name="fromNode"></param>
            <param name="toNode"></param>
            <param name="obj"> the GoObject to which the created link should correspond (may be null)</param>
            <returns>Returns the link created when fromNode and toNode are linked.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.ReverseLink(Northwoods.Go.Layout.GoLayoutNetworkLink)">
            <summary>
            Reverses the direction of a link in the network.
            </summary>
            <param name="link"></param>
            <remarks>
            This calls <see cref="M:Northwoods.Go.Layout.GoLayoutNetworkLink.ReverseLink"/> and also adjusts the
            source links and destination links of both connected nodes.
            If either <see cref="P:Northwoods.Go.Layout.GoLayoutNetworkLink.FromNode"/> or 
            <see cref="P:Northwoods.Go.Layout.GoLayoutNetworkLink.ToNode"/> are null, this method does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.DeleteSelfLinks">
            <summary>
            Deletes all links whose "to node" and "from node" are the same node.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.DeleteArtificialNodes">
            <summary>
            Delete all nodes and links that have no <see cref="T:Northwoods.Go.GoObject"/>
            associated with them.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.SplitIntoSubNetworks">
            <summary>
            Modify this network by splitting it up into separate subnetworks,
            each of which has all of its nodes connected to each other, but not
            to any nodes in any other subnetworks.
            </summary>
            <returns>
            An <c>IEnumerator</c> of networks,
            sorted in order of decreasing <see cref="P:Northwoods.Go.Layout.GoLayoutNetwork.NodeCount"/>.
            </returns>
            <remarks>
            This method will first delete from this network all artifical nodes and
            all links that do not connect two different nodes.
            Afterwards, this original network may be empty or may contain all of the
            singleton <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkNode"/>s, each of which had no
            <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkLink"/>s connecting it to any other nodes.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.GetNodesAndLinks(Northwoods.Go.IGoCollection)">
            <summary>
            Retrieve all of the <see cref="T:Northwoods.Go.GoObject"/> nodes and links from the
            <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkNode"/>s and <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkLink"/>s
            that are in this network, by adding them to the given <paramref name="coll"/>.
            </summary>
            <param name="coll">
            An <see cref="T:Northwoods.Go.IGoCollection"/>; if null, the method allocates
            and returns a <see cref="T:Northwoods.Go.GoSelection"/>.
            </param>
            <returns>
            An <see cref="T:Northwoods.Go.IGoCollection"/> of all of the <see cref="T:Northwoods.Go.GoObject"/>s that
            correspond to <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkNode"/>s and <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkLink"/>s.
            </returns>
            <remarks>
            If you pass a value for <pararef name="coll"/>, we recommend using a <see cref="T:Northwoods.Go.GoSelection"/>
            instead of a <see cref="T:Northwoods.Go.GoCollection"/>, since <see cref="T:Northwoods.Go.GoSelection"/> has
            more efficient lookup for avoiding duplicates.
            A <see cref="T:Northwoods.Go.GoSelection"/> is also handy for easily moving all those objects
            by calling <see cref="M:Northwoods.Go.GoView.MoveSelection(Northwoods.Go.GoSelection,System.Drawing.SizeF,System.Boolean)"/>.
            You can determine the bounding rectangle for a collection of nodes and links
            by calling the static/shared method
            <see cref="T:Northwoods.Go.GoDocument"/>.<see cref="M:Northwoods.Go.GoDocument.ComputeBounds(Northwoods.Go.IGoCollection,Northwoods.Go.GoView)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetwork.NodeCount">
            <summary>
            Gets the number of Nodes in the Network.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetwork.LinkCount">
            <summary>
            Gets the number of Links in the Network.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetwork.GoObjToNodeMap">
            <summary>
            Gets the Hashtable that maps GoObjects to Nodes
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetwork.GoObjToLinkMap">
            <summary>
            Gets the Hashtable that maps GoObjects to Links
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetwork.Nodes">
            <summary>
            Gets an enumerator for the network's nodes.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetwork.Links">
            <summary>
            Gets an enumerator for the network's links.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetwork.Layout">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.Layout.GoLayout"/> in which this
            network is being used.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutNetwork.NodeArrayList">
            <summary>
            This partly implements an <c>ArrayList</c> of <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkNode"/>s.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.NodeArrayList.#ctor">
            <summary>
            Construct an empty list.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.NodeArrayList.Contains(Northwoods.Go.Layout.GoLayoutNetworkNode)">
            <summary>
            True if the item is in the list.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.NodeArrayList.IndexOf(Northwoods.Go.Layout.GoLayoutNetworkNode)">
            <summary>
            Find the zero-based position of an item in the list, or -1 if not present.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.NodeArrayList.Add(Northwoods.Go.Layout.GoLayoutNetworkNode)">
            <summary>
            Add an item to the end of the list.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.NodeArrayList.RemoveAt(System.Int32)">
            <summary>
            Remove an item from the list that is at a particular zero-based index.
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.NodeArrayList.GetEnumerator">
            <summary>
            Support enumerating the items in this list.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetwork.NodeArrayList.Count">
            <summary>
            Gets the number of items in the list.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetwork.NodeArrayList.Item(System.Int32)">
            <summary>
            This supports accessing items by zero-based index.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutNetwork.LinkArrayList">
            <summary>
            This partly implements an <c>ArrayList</c> of <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkNode"/>s.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.LinkArrayList.#ctor">
            <summary>
            Construct an empty list.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.LinkArrayList.Contains(Northwoods.Go.Layout.GoLayoutNetworkLink)">
            <summary>
            True if the item is in the list.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.LinkArrayList.IndexOf(Northwoods.Go.Layout.GoLayoutNetworkLink)">
            <summary>
            Find the zero-based position of an item in the list, or -1 if not present.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.LinkArrayList.Add(Northwoods.Go.Layout.GoLayoutNetworkLink)">
            <summary>
            Add an item to the end of the list.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.LinkArrayList.RemoveAt(System.Int32)">
            <summary>
            Remove an item from the list that is at a particular zero-based index.
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.LinkArrayList.GetEnumerator">
            <summary>
            Support enumerating the items in this list.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetwork.LinkArrayList.Count">
            <summary>
            Gets the number of items in the list.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetwork.LinkArrayList.Item(System.Int32)">
            <summary>
            This supports accessing items by zero-based index.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutNetwork.NodeEnumerator">
            <summary>
            NodeEnumerator implements both <c>IEnumerator</c> and <c>IEnumerable</c>.
            It should be used to enumerate through all the Nodes.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.NodeEnumerator.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the Nodes.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.NodeEnumerator.MoveNext">
            <summary>
            Advance the enumerator to the next GoLayoutNetworkNode.
            </summary>
            <returns>True if there is a next GoLayoutNetworkNode; false if it has finished iterating over the collection.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.NodeEnumerator.Reset">
            <summary>
            Reset the enumerator to its original position.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetwork.NodeEnumerator.Current">
            <summary>
             Gets the current node in the collection of nodes.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutNetwork.LinkEnumerator">
            <summary>
            LinkEnumerator implements both <c>IEnumerator</c> and <c>IEnumerable</c>.
            It should be used to enumerate through all the Links.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.LinkEnumerator.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the Links
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.LinkEnumerator.MoveNext">
            <summary>
            Advance the enumerator to the next GoLayoutNetworkLink.
            </summary>
            <returns>True if there is a next GoLayoutNetworkLink; false if it has finished iterating over the collection.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetwork.LinkEnumerator.Reset">
            <summary>
            Reset the enumerator to its original position.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetwork.LinkEnumerator.Current">
            <summary>
             Gets the current node in the collection of links.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutNetworkLink">
            <summary>
            Holds auto-layout specific link data.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetworkLink.OnPortChanged(Northwoods.Go.IGoPort,System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)">
            <summary>
            Don't need to do anything.
            </summary>
            <param name="port"></param>
            <param name="subhint"></param>
            <param name="oldI"></param>
            <param name="oldVal"></param>
            <param name="oldRect"></param>
            <param name="newI"></param>
            <param name="newVal"></param>
            <param name="newRect"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetworkLink.Unlink">
            <summary>
            Remove this network link from the network.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetworkLink.ReverseLink">
            <summary>
            Reverses the link; i.e., exchanges the from and to nodes.
            </summary>
            <remarks>
            Setting this property does not modify any <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkNode"/>
            by adding or removing a link to its <see cref="P:Northwoods.Go.Layout.GoLayoutNetworkNode.SourceLinksList"/>
            or <see cref="P:Northwoods.Go.Layout.GoLayoutNetworkNode.DestinationLinksList"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetworkLink.CommitPosition">
            <summary>
            Commits the position of the link to the corresponding GoObject.
            </summary>
            <remarks>
            By default this does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetworkLink.GetOtherNode(Northwoods.Go.IGoNode)">
            <summary>
            Finds and returns the link's node other than n.  Returns null if
            n is neither the from node or to node.
            </summary>
            <param name="n"></param>
            <returns>Finds and returns the link's node other than n.  Returns null if
            n is neither the from node or to node.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetworkLink.GetOtherPort(Northwoods.Go.IGoPort)">
            <summary>
            Finds and returns the link's port other than p.  Returns null if
            p is neither the from port or to port.
            </summary>
            <param name="p"></param>
            <returns>Finds and returns the link's port other than p.  Returns null if
            p is neither the from port or to port.</returns>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetworkLink.GoObject">
            <summary>
            Gets or sets this link's associated GoObject.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetworkLink.Network">
            <summary>
            Gets or sets the network that this link is part of.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetworkLink.FromNode">
            <summary>
            Gets this link's From GoLayoutNetworkNode.
            </summary>
            <remarks>
            Setting this property does not modify the <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkNode"/>
            by adding a link to its <see cref="P:Northwoods.Go.Layout.GoLayoutNetworkNode.DestinationLinksList"/>
            or removing it from another node's list.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetworkLink.FromPort">
            <summary>
            Gets this link's From GoLayoutNetworkNode.
            </summary>
            <remarks>
            Setting this property does not modify the <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkNode"/>
            by adding a link to its <see cref="P:Northwoods.Go.Layout.GoLayoutNetworkNode.DestinationLinksList"/>
            or removing it from another node's list.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetworkLink.ToNode">
            <summary>
            Gets or sets the To GoLayoutNetworkNode for this link.
            </summary>
            <remarks>
            Setting this property does not modify the <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkNode"/>
            by adding a link to its <see cref="P:Northwoods.Go.Layout.GoLayoutNetworkNode.SourceLinksList"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetworkLink.ToPort">
            <summary>
            Gets or sets the To GoLayoutNetworkNode for the link.
            </summary>
            <remarks>
            Setting this property does not modify the <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkNode"/>
            by adding a link to its <see cref="P:Northwoods.Go.Layout.GoLayoutNetworkNode.SourceLinksList"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetworkLink.Stroke">
            <summary>
            Gets the GoStroke associated with the Network GoLayoutNetworkLink.
            This may be needed by the algorithm to add bends to the link.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetworkLink.UserObject">
            <summary>
            Gets or Sets an Object associated with the link
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetworkLink.UserFlags">
            <summary>
            Gets or Sets an integer associated with the link
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutNetworkNode">
            <summary>
            Holds auto-layout specific node data.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetworkNode.AddSourceLink(Northwoods.Go.Layout.GoLayoutNetworkLink)">
            <summary>
            Adds a <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkLink"/> to the list predecessors
            (i.e., the link will be coming into this node).
            </summary>
            <param name="sourceLink"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetworkNode.DeleteSourceLink(Northwoods.Go.Layout.GoLayoutNetworkLink)">
            <summary>
            Deletes a <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkLink"/> from the list of predecessors
            (i.e., the link was to this node).
            </summary>
            <param name="sourceLink"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetworkNode.AddDestinationLink(Northwoods.Go.Layout.GoLayoutNetworkLink)">
            <summary>
            Adds a <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkLink"/> to the list successors
            (i.e., the link will be going out from this node).
            </summary>
            <param name="destinationLink"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetworkNode.DeleteDestinationLink(Northwoods.Go.Layout.GoLayoutNetworkLink)">
            <summary>
            Deletes a <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkLink"/> from the list of successors
            (i.e., the link was going out from this node).
            </summary>
            <param name="destinationLink"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutNetworkNode.CommitPosition">
            <summary>
            Moves the corresponding GoObject to the center point of the node in the
            document.
            </summary>
            <remarks>
            To make the most common cases look right, the object's <see cref="P:Northwoods.Go.Layout.GoLayoutNetworkNode.GoObject"/>.<c>SelectionObject</c>
            is centered.  Thus iconic nodes will have the center of the icon be positioned
            according to the <see cref="P:Northwoods.Go.Layout.GoLayoutNetworkNode.Center"/> of this GoLayoutNetworkNode, ignoring any labels.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetworkNode.GoObject">
            <summary>
            Gets or sets the GoObject associated with this network node.
            </summary>
            <remarks>
            Setting this value to an object will also set the <see cref="P:Northwoods.Go.Layout.GoLayoutNetworkNode.Center"/>
            property to that object's <see cref="P:Northwoods.Go.Layout.GoLayoutNetworkNode.GoObject"/>.<c>SelectionObject</c> center position.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetworkNode.Network">
            <summary>
            Gets or sets the network that this node is part of.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetworkNode.SourceLinksList">
            <summary>
            Returns the list of predecessor links (i.e., the links are coming into this node).
            </summary>
            <value>
            An <c>GoLayoutNetwork.LinkArrayList</c> of <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkLink"/>s.
            This list should not be modified directly; use <see cref="M:Northwoods.Go.Layout.GoLayoutNetworkNode.AddSourceLink(Northwoods.Go.Layout.GoLayoutNetworkLink)"/>
            and <see cref="M:Northwoods.Go.Layout.GoLayoutNetworkNode.DeleteSourceLink(Northwoods.Go.Layout.GoLayoutNetworkLink)"/> instead.
            </value>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetworkNode.DestinationLinksList">
            <summary>
            Returns the list of successor links (i.e., the links are going out from this node).
            </summary>
            <value>
            An <c>GoLayoutNetwork.LinkArrayList</c> of <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkLink"/>s.
            This list should not be modified directly; use <see cref="M:Northwoods.Go.Layout.GoLayoutNetworkNode.AddDestinationLink(Northwoods.Go.Layout.GoLayoutNetworkLink)"/>
            and <see cref="M:Northwoods.Go.Layout.GoLayoutNetworkNode.DeleteDestinationLink(Northwoods.Go.Layout.GoLayoutNetworkLink)"/> instead.
            </value>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetworkNode.Center">
            <summary>
            Gets or sets the Center Point of this node.
            </summary>
            <remarks>
            Setting this property does not modify any <see cref="P:Northwoods.Go.Layout.GoLayoutNetworkNode.GoObject"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.Layout.GoLayoutNetworkNode.Position"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetworkNode.Position">
            <summary>
            Gets or sets the Position (top-left corner) of this node.
            </summary>
            <remarks>
            Setting this property does not modify any <see cref="P:Northwoods.Go.Layout.GoLayoutNetworkNode.GoObject"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.Layout.GoLayoutNetworkNode.Center"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetworkNode.Focus">
            <summary>
            Gets or sets the offset of the <see cref="P:Northwoods.Go.Layout.GoLayoutNetworkNode.Center"/> from the
            <see cref="P:Northwoods.Go.Layout.GoLayoutNetworkNode.Bounds"/><c>.Position</c>.
            </summary>
            <remarks>
            Setting this property does not modify any <see cref="P:Northwoods.Go.Layout.GoLayoutNetworkNode.GoObject"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetworkNode.Bounds">
            <summary>
            Gets or sets the Bounds of this node.
            </summary>
            <remarks>
            Setting this property does not modify any <see cref="P:Northwoods.Go.Layout.GoLayoutNetworkNode.GoObject"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetworkNode.Size">
            <summary>
            Gets the <see cref="P:Northwoods.Go.Layout.GoLayoutNetworkNode.Bounds"/><c>.Size</c>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetworkNode.Width">
            <summary>
            Gets the <see cref="P:Northwoods.Go.Layout.GoLayoutNetworkNode.Bounds"/><c>.Width</c>.
            </summary>
            <remarks>
            This is always the horizontal distance reserved for this node.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetworkNode.Height">
            <summary>
            Gets the <see cref="P:Northwoods.Go.Layout.GoLayoutNetworkNode.Bounds"/><c>.Height</c>.
            </summary>
            <remarks>
            This is always the vertical distance reserved for this node.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetworkNode.UserObject">
            <summary>
            Gets or sets an Object associated with the node
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetworkNode.UserFlags">
            <summary>
            Gets or sets the node's flags
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetworkNode.Sources">
            <summary>
            Gets an enumerator over all of the nodes that have links coming into this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all nodes that have ports that have any
            destination links coming into any port of this node.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoNode.Sources"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetworkNode.Destinations">
            <summary>
            Gets an enumerator over all of the nodes that have links going out of this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all nodes that have ports that have any
            source links going out of any port of this node.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoNode.Destinations"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetworkNode.Nodes">
            <summary>
            Gets an enumerator over all of the nodes that are connected to this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all nodes that have ports that have any
            links connected to any port of this node.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoNode.Sources"/>
            <seealso cref="P:Northwoods.Go.IGoNode.Destinations"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetworkNode.SourceLinks">
            <summary>
            Gets an enumerator over all of the links coming into this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all links that come into
            any port of this node.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoNode.SourceLinks"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetworkNode.SourceLinksCount">
            <summary>
            Gets the number of links going into this node.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetworkNode.DestinationLinks">
            <summary>
            Gets an enumerator over all of the links going out of this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all links that go out of
            any port of this node.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoNode.DestinationLinks"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetworkNode.DestinationLinksCount">
            <summary>
            Gets the number of links coming out of this node.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetworkNode.Links">
            <summary>
            Gets an enumerator over all of the links going out of or coming into this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all links that are connected to
            port of this node.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoNode.SourceLinks"/>
            <seealso cref="P:Northwoods.Go.IGoNode.DestinationLinks"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutNetworkNode.LinksCount">
            <summary>
            Gets the number of links connected to this node.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutRandom">
            <summary>
            GoLayoutRandom provides an auto-layout algorithm which randomly
            positions nodes in the document.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutRandom.#ctor">
            <summary>
            Constructs a Random Layout with null values for it's Network and Document.
            PerformLayout() will be a no-op until the document has been set. 
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutRandom.RemoveNetwork">
            <summary>
            Set <see cref="P:Northwoods.Go.Layout.GoLayoutRandom.Network"/> to null.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutRandom.PerformLayout">
            <summary>
            Performs random positioning auto-layout.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutRandom.IsFixed(Northwoods.Go.Layout.GoLayoutNetworkNode)">
            <summary>
            The function IsFixed returns true if the node should not be moved
            by the layout algorithm.
            The default implementation returns false on all inputs.
            This function can be overridden to "fix" particular nodes.
            </summary>
            <param name="node"></param>
            <returns>Returns whether or not node is immovable.</returns>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutRandom.Network">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.Layout.GoLayoutNetwork"/> that the layout will be performed on.
            </summary>
            <value>
            The initial value is null.
            This is automatically set to null when the <see cref="P:Northwoods.Go.Layout.GoLayout.Document"/> property changes.
            </value>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutRandom.MinX">
            <summary>
            Gets and Sets the minimum allowed x value for a node.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutRandom.MaxX">
            <summary>
            Gets and Sets the maximum allowed x value for a node.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutRandom.MinY">
            <summary>
            Gets and Sets the minimum allowed y value for a node.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutRandom.MaxY">
            <summary>
            Gets and Sets the maximum allowed y value for a node.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutTree">
            <summary>
            Position nodes in a tree-like arrangement.
            </summary>
            <example>
            Typical usage:
            <code>
            GoDocument doc = goView1.Document;
            doc.StartTransaction();
            GoLayoutTree layout = new GoLayoutTree();
            layout.Document = doc;
            layout.Angle = 90;
            layout.NodeSpacing = 15;
            layout.LayerSpacing = 40;
            // ...maybe set other properties, such as those of layout.AlternateDefaults ...
            layout.PerformLayout();
            doc.FinishTransaction("layout");
            </code>
            To lay out only a portion of a document, you will need to construct
            a <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNetwork"/>, initialize it with just the
            nodes and links that you want to use, and set the <see cref="P:Northwoods.Go.Layout.GoLayoutTree.Network"/>
            property.
            <code>
            GoDocument doc = goView1.Document;
            doc.StartTransaction();
            GoLayoutTree layout = new GoLayoutTree();
            layout.Document = doc;
            layout.Network = layout.CreateNetwork();
            // if you want to start off with the network representing the complete document,
            // and then remove the nodes (or links) that you don't want:
            layout.Network.AddNodesAndLinksFromCollection(doc, true);
            foreach (GoObject obj in doc) {
              if (...obj is a node that you want to exclude from the layout...) {
                layout.Network.DeleteNode(obj);  // there is also a DeleteLink method
              }
            }
            layout.Angle = 90;
            layout.NodeSpacing = 15;
            layout.LayerSpacing = 40;
            // ...maybe set other properties...
            layout.PerformLayout();
            doc.FinishTransaction("layout");
            </code>
            Read the GoLayout User Guide for more details.
            </example>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTree.#ctor">
            <summary>
            Construct a layout with the default values.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTree.#ctor(Northwoods.Go.Layout.GoLayoutTree)">
            <summary>
            Make a copy of a <see cref="T:Northwoods.Go.Layout.GoLayoutTree"/>, copying most of the
            important properties except for the <see cref="P:Northwoods.Go.Layout.GoLayoutTree.Network"/> and <see cref="P:Northwoods.Go.Layout.GoLayoutTree.Roots"/>.
            </summary>
            <param name="layout"></param>
            <remarks>
            This copies the inheritable properties from the argument layout's
            <see cref="P:Northwoods.Go.Layout.GoLayoutTree.RootDefaults"/> and the <see cref="P:Northwoods.Go.Layout.GoLayoutTree.AlternateDefaults"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTree.RemoveNetwork">
            <summary>
            Set <see cref="P:Northwoods.Go.Layout.GoLayoutTree.Network"/> to null.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTree.CreateNetwork">
            <summary>
            Allocate a <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNetwork"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTree.PerformLayout">
            <summary>
            Do a tree layout.
            </summary>
            <remarks>
            <para>
            You must set the <see cref="P:Northwoods.Go.Layout.GoLayout.Document"/> property first.
            </para>
            <para>
            If you are re-using this <c>GoLayoutTree</c> with the same document,
            you should <see cref="P:Northwoods.Go.Layout.GoLayoutTree.Network"/> to null or a new <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNetwork"/>.
            </para>
            <para>
            If you are re-using the same <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNetwork"/> too,
            you should set the <see cref="P:Northwoods.Go.Layout.GoLayoutTree.Roots"/> properties, either
            by clearing it and letting <see cref="M:Northwoods.Go.Layout.GoLayoutTree.FindRoots"/> do its job,
            or by specifying all the <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/>s that
            are the roots of your trees.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTree.CreateTrees">
            <summary>
            This method is responsible for initializing all of the <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/>s,
            setting <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Initialized"/>, <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Level"/>,
            <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Parent"/>, and <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Children"/>,
            and making sure <see cref="P:Northwoods.Go.Layout.GoLayoutTree.Roots"/>
            has at least one suitable <see cref="T:Northwoods.Go.GoObject"/> in it.
            </summary>
            <remarks>
            This will call <see cref="M:Northwoods.Go.Layout.GoLayoutTree.FindRoots"/> if <see cref="P:Northwoods.Go.Layout.GoLayoutTree.Roots"/> is empty.
            Then it will iterate over the roots, calling <see cref="M:Northwoods.Go.Layout.GoLayoutTree.WalkTree(Northwoods.Go.Layout.GoLayoutTreeNode)"/> on each one.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTree.FindRoots">
            <summary>
            This method is responsible for finding all of the root nodes.
            </summary>
            <remarks>
            When you have not already added the roots to the <see cref="P:Northwoods.Go.Layout.GoLayoutTree.Roots"/> collection, this will choose a root node.
            The choice might not be what you want, so we recommend that you specify the <see cref="P:Northwoods.Go.Layout.GoLayoutTree.Roots"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTree.WalkTree(Northwoods.Go.Layout.GoLayoutTreeNode)">
            <summary>
            Traverse the <see cref="P:Northwoods.Go.Layout.GoLayoutTree.Network"/> and assign the <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/>.<see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Parent"/>,
            <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Level"/>, and <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Children"/> properties.
            </summary>
            <param name="n"></param>
            <remarks>
            This method should walk the tree recursively.
            The standard implementation gracefully handles shared nodes, including cyclical references.
            However, there can only be one <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Parent"/> per node.
            If a node is declared to be the child of multiple nodes, it is not guaranteed which
            node wins as the parent node.
            If any of the children of this node are in the <see cref="P:Northwoods.Go.Layout.GoLayoutTree.Roots"/> collection,
            they are removed from that collection.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTree.InitializeTreeNodeValues(Northwoods.Go.Layout.GoLayoutTreeNode)">
            <summary>
            Assign initial property values for a <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/>.
            </summary>
            <param name="n"></param>
            <remarks>
            The values may be inherited, so this method is called while
            propagating values from the root nodes.
            This method should not walk the tree, since it is called for each
            <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/> in a depth-first manner starting at a root.
            You probably do not need to override this method,
            but if you do you should call first either the base method
            or <see cref="M:Northwoods.Go.Layout.GoLayoutTreeNode.CopyInheritedPropertiesFrom(Northwoods.Go.Layout.GoLayoutTreeNode)"/>, since they
            assign most of the <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/> property values
            used to influence the layout.
            Informational properties such as <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.DescendentCount"/>
            and <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.MaxGenerationCount"/> will not yet have been initialized
            by the time this method is called.
            It is more common to override <see cref="M:Northwoods.Go.Layout.GoLayoutTree.AssignTreeNodeValues(Northwoods.Go.Layout.GoLayoutTreeNode)"/> in order to
            modify a property or two to customize the layout at that node.
            </remarks>
            <seealso cref="M:Northwoods.Go.Layout.GoLayoutTree.AssignTreeNodeValues(Northwoods.Go.Layout.GoLayoutTreeNode)"/>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTree.AssignTreeNodeValues(Northwoods.Go.Layout.GoLayoutTreeNode)">
            <summary>
            Assign final property values for a <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/>.
            </summary>
            <param name="n"></param>
            <remarks>
            This method is commonly overidden in order to provide
            tree layout properties for particular nodes.
            This method is called after values have been inherited from other
            <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/>s, so you can examine and modify the
            values of related tree nodes.
            This method should not walk the tree, since it is called for each
            <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/> in a depth-first manner starting at a root.
            </remarks>
            <seealso cref="M:Northwoods.Go.Layout.GoLayoutTree.InitializeTreeNodeValues(Northwoods.Go.Layout.GoLayoutTreeNode)"/>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTree.SortTreeNodeChildren(Northwoods.Go.Layout.GoLayoutTreeNode)">
            <summary>
            Sort the <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Children"/> of a node.
            </summary>
            <param name="n"></param>
            <remarks>
            This method should not walk the tree, since it is called for each
            <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/> in a breadth-first manner starting at a root.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTree.AddComments(Northwoods.Go.Layout.GoLayoutTreeNode)">
            <summary>
            Find associated objects to be positioned along with the
            <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/>.<see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.GoObject"/>.
            </summary>
            <param name="n"></param>
            <remarks>
            This looks for <see cref="T:Northwoods.Go.GoBalloon"/> objects that refer to
            the tree node's <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.GoObject"/>.
            You may want to override this method in order to customize how
            any associated objects are found and how
            the node's <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Bounds"/>
            are set to reserve space for those associated objects.
            This method should not walk the tree, since it is called for each
            <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/> in an indeterminate order.
            </remarks>
            <seealso cref="M:Northwoods.Go.Layout.GoLayoutTree.LayoutComments(Northwoods.Go.Layout.GoLayoutTreeNode)"/>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTree.LayoutComments(Northwoods.Go.Layout.GoLayoutTreeNode)">
            <summary>
            Position any <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Comments"/> around the
            <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.GoObject"/>.
            </summary>
            <param name="n"></param>
            <remarks>
            This method should not walk the tree, since it is called for each
            <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/> in an indeterminate order.
            </remarks>
            <seealso cref="M:Northwoods.Go.Layout.GoLayoutTree.AddComments(Northwoods.Go.Layout.GoLayoutTreeNode)"/>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTree.LayoutTree(Northwoods.Go.Layout.GoLayoutTreeNode)">
            <summary>
            Recursively lay out a subtree starting with the given parent node.
            </summary>
            <param name="n"></param>
            <remarks>
            This method should walk the tree recursively.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTree.ArrangeTrees">
            <summary>
            Position each separate tree.
            </summary>
            <remarks>
            This is called after each tree has been laid out and thus each subtree bounds are known.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTree.LayoutNodesAndLinks">
            <summary>
            Call <see cref="M:Northwoods.Go.Layout.GoLayoutTreeNode.CommitPosition"/> to position each node,
            call <see cref="M:Northwoods.Go.Layout.GoLayoutTree.LayoutComments(Northwoods.Go.Layout.GoLayoutTreeNode)"/>, and then call
            <see cref="M:Northwoods.Go.Layout.GoLayoutTreeLink.CommitPosition"/> to route the links.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTree.SetPortSpots(Northwoods.Go.Layout.GoLayoutTreeNode)">
            <summary>
            Assign port spots for single-port nodes,
            if <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.SetsPortSpot"/> or <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.SetsChildPortSpot"/>
            is true, according to the value of <see cref="P:Northwoods.Go.Layout.GoLayoutTree.PortSpot"/> or <see cref="P:Northwoods.Go.Layout.GoLayoutTree.ChildPortSpot"/>.
            </summary>
            <remarks>
            This iterates over all of the <see cref="T:Northwoods.Go.Layout.GoLayoutTreeLink"/>s in the network,
            finds the corresponding <see cref="T:Northwoods.Go.GoPort"/>, and assigns their <see cref="P:Northwoods.Go.GoPort.FromSpot"/> and/or
            <see cref="P:Northwoods.Go.GoPort.ToSpot"/> property if the <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.SetsPortSpot"/> and/or
            <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.SetsChildPortSpot"/> properties are true,
            and if the port's node only has a single port.
            The spot values are given by <see cref="P:Northwoods.Go.Layout.GoLayoutTree.PortSpot"/>
            and <see cref="P:Northwoods.Go.Layout.GoLayoutTree.ChildPortSpot"/> respectively, unless the value is <see cref="F:Northwoods.Go.GoObject.NoSpot"/>.
            In the latter case the actual spot is determined by the <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Angle"/>
            of the parent node (the <see cref="P:Northwoods.Go.Layout.GoLayoutTreeLink.FromNode"/>).
            For example, when the angle is zero, the tree grows deeper toward the right.
            So the <see cref="P:Northwoods.Go.GoPort.FromSpot"/> will be set to <c>GoObject.MiddleRight</c>, and the
            <see cref="P:Northwoods.Go.GoPort.ToSpot"/> will be set to <c>GoObject.MiddleLeft</c>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTree.Network">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNetwork"/> that the layout will be performed on.
            </summary>
            <value>
            The initial value is null.
            This is automatically set to null when the <see cref="P:Northwoods.Go.Layout.GoLayout.Document"/> property changes.
            Setting this property to null will also clear the <see cref="P:Northwoods.Go.Layout.GoLayoutTree.Roots"/> collection.
            </value>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTree.Roots">
            <summary>
            Gets or sets an <see cref="T:Northwoods.Go.IGoCollection"/> of root <see cref="T:Northwoods.Go.GoObject"/>s.
            </summary>
            <value>
            Initially this will be an empty collection.
            If the <see cref="P:Northwoods.Go.Layout.GoLayoutTree.Path"/> is either <see cref="F:Northwoods.Go.Layout.GoLayoutTreePath.Destination"/> or
            <see cref="F:Northwoods.Go.Layout.GoLayoutTreePath.Source"/>, <see cref="M:Northwoods.Go.Layout.GoLayoutTree.FindRoots"/> can easily
            determine all of the tree roots by searching the whole network.
            Otherwise, you should explicitly initialize this collection.
            </value>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTree.Path">
            <summary>
            Gets or sets how the tree should be constructed from the
            <see cref="T:Northwoods.Go.Layout.GoLayoutTreeLink"/>s connecting <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/>s.
            </summary>
            <value>
            The default value is <see cref="T:Northwoods.Go.Layout.GoLayoutTreePath"/>.<see cref="F:Northwoods.Go.Layout.GoLayoutTreePath.Destination"/>.
            </value>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTree.Style">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.Layout.GoLayoutTreeStyle"/> for the resulting trees.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.Go.Layout.GoLayoutTreeStyle.Layered"/>.
            </value>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTree.Arrangement">
            <summary>
            Gets or sets how <see cref="M:Northwoods.Go.Layout.GoLayoutTree.ArrangeTrees"/> should lay out the separate trees.
            </summary>
            <value>
            The default value is <see cref="T:Northwoods.Go.Layout.GoLayoutTreeArrangement"/>.<see cref="F:Northwoods.Go.Layout.GoLayoutTreeArrangement.Vertical"/>.
            </value>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTree.ArrangementOrigin">
            <summary>
            Gets or sets the point at which <see cref="M:Northwoods.Go.Layout.GoLayoutTree.ArrangeTrees"/> will position the trees.
            </summary>
            <value>
            This defaults to the PointF(10, 10).
            </value>
            <remarks>
            This property is ignored if <see cref="P:Northwoods.Go.Layout.GoLayoutTree.Arrangement"/> is <see cref="F:Northwoods.Go.Layout.GoLayoutTreeArrangement.FixedRoots"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTree.ArrangementSpacing">
            <summary>
            Gets or sets the space between which <see cref="M:Northwoods.Go.Layout.GoLayoutTree.ArrangeTrees"/> will position the trees.
            </summary>
            <value>
            This defaults to the SizeF(10, 10).
            </value>
            <remarks>
            This property is ignored if <see cref="P:Northwoods.Go.Layout.GoLayoutTree.Arrangement"/> is <see cref="F:Northwoods.Go.Layout.GoLayoutTreeArrangement.FixedRoots"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTree.RootDefaults">
            <summary>
            Gets the object holding the default values for root <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/>s.
            </summary>
            <remarks>
            The values for the following inheritable properties are actually stored in this object:
            <see cref="P:Northwoods.Go.Layout.GoLayoutTree.Sorting"/>, <see cref="P:Northwoods.Go.Layout.GoLayoutTree.Comparer"/>, <see cref="P:Northwoods.Go.Layout.GoLayoutTree.Angle"/>,
            <see cref="P:Northwoods.Go.Layout.GoLayoutTree.Alignment"/>, <see cref="P:Northwoods.Go.Layout.GoLayoutTree.NodeIndent"/>, <see cref="P:Northwoods.Go.Layout.GoLayoutTree.NodeSpacing"/>, <see cref="P:Northwoods.Go.Layout.GoLayoutTree.LayerSpacing"/>, <see cref="P:Northwoods.Go.Layout.GoLayoutTree.Compaction"/>,
            <see cref="P:Northwoods.Go.Layout.GoLayoutTree.BreadthLimit"/>, <see cref="P:Northwoods.Go.Layout.GoLayoutTree.RowSpacing"/>, <see cref="P:Northwoods.Go.Layout.GoLayoutTree.RowIndent"/>,
            <see cref="P:Northwoods.Go.Layout.GoLayoutTree.CommentSpacing"/>, <see cref="P:Northwoods.Go.Layout.GoLayoutTree.CommentMargin"/>,
            <see cref="P:Northwoods.Go.Layout.GoLayoutTree.SetsPortSpot"/>, <see cref="P:Northwoods.Go.Layout.GoLayoutTree.PortSpot"/>, <see cref="P:Northwoods.Go.Layout.GoLayoutTree.SetsChildPortSpot"/>, <see cref="P:Northwoods.Go.Layout.GoLayoutTree.ChildPortSpot"/>.
            The other properties of this <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/> are ignored.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTree.AlternateDefaults">
            <summary>
            Gets the object holding the default values for alternate layer <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/>s,
            used when the <see cref="P:Northwoods.Go.Layout.GoLayoutTree.Style"/> is <see cref="F:Northwoods.Go.Layout.GoLayoutTreeStyle.Alternating"/>
            or <see cref="F:Northwoods.Go.Layout.GoLayoutTreeStyle.LastParents"/>.
            </summary>
            <remarks>
            See the list of inheritable properties in the remarks for <see cref="P:Northwoods.Go.Layout.GoLayoutTree.RootDefaults"/>.
            The other properties of this <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/> are ignored.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTree.Sorting">
            <summary>
            Gets or sets the default <see cref="T:Northwoods.Go.Layout.GoLayoutTreeSorting"/> policy.
            </summary>
            <value>
            The default is <see cref="F:Northwoods.Go.Layout.GoLayoutTreeSorting.Forwards"/>.
            </value>
            <remarks>
            This just gets or sets the <see cref="P:Northwoods.Go.Layout.GoLayoutTree.RootDefaults"/>'s property of the same name.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTree.Comparer">
            <summary>
            Gets or sets the default <c>IComparer</c> used for sorting.
            </summary>
            <value>
            The default comparer assumes each <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/>.<see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.GoObject"/>
            is a <see cref="T:Northwoods.Go.IGoLabeledPart"/> and compares their <see cref="P:Northwoods.Go.IGoLabeledPart.Text"/> values.
            </value>
            <remarks>
            This just gets or sets the <see cref="P:Northwoods.Go.Layout.GoLayoutTree.RootDefaults"/>'s property of the same name.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTree.Angle">
            <summary>
            Gets or sets the default direction for tree growth.
            </summary>
            <value>
            The default value is 0; the value must be one of: 0, 90, 180, 270.
            These values are in degrees, where 0 is along the positive X axis,
            and where 90 is along the positive Y axis.
            </value>
            <remarks>
            This just gets or sets the <see cref="P:Northwoods.Go.Layout.GoLayoutTree.RootDefaults"/>'s property of the same name.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTree.Alignment">
            <summary>
            Gets or sets the default alignment of parents relative to their children.
            </summary>
            <value>
            The default value is <see cref="T:Northwoods.Go.Layout.GoLayoutTreeAlignment"/>.<see cref="F:Northwoods.Go.Layout.GoLayoutTreeAlignment.CenterChildren"/>.
            </value>
            <remarks>
            This just gets or sets the <see cref="P:Northwoods.Go.Layout.GoLayoutTree.RootDefaults"/>'s property of the same name.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTree.NodeIndent">
            <summary>
            Gets or sets the default indentation of the first child.
            </summary>
            <value>
            The default value is zero.  The value should be non-negative.
            </value>
            <remarks>
            <para>
            This property is only sensible when the <see cref="P:Northwoods.Go.Layout.GoLayoutTree.Alignment"/>
            is <see cref="F:Northwoods.Go.Layout.GoLayoutTreeAlignment.Start"/> or <see cref="F:Northwoods.Go.Layout.GoLayoutTreeAlignment.End"/>.
            Having a positive value is useful if you want to reserve space
            at the start of the row of children for some reason.
            For example, if you want to pretend the parent node is infinitely deep,
            you can set this to be the breadth of the parent node.
            </para>
            <para>
            This just gets or sets the <see cref="P:Northwoods.Go.Layout.GoLayoutTree.RootDefaults"/>'s property of the same name.
            </para>
            </remarks>
            <seealso cref="P:Northwoods.Go.Layout.GoLayoutTree.RowIndent"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTree.NodeSpacing">
            <summary>
            Gets or sets the distance between child nodes.
            </summary>
            <value>
            The default value is 20.
            A negative value causes sibling nodes to overlap.
            </value>
            <remarks>
            This just gets or sets the <see cref="P:Northwoods.Go.Layout.GoLayoutTree.RootDefaults"/>'s property of the same name.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTree.LayerSpacing">
            <summary>
            Gets or sets the distance between a parent node and its children.
            </summary>
            <value>
            The default value is 50.
            </value>
            <remarks>
            <para>
            This is the distance between a parent node and its first row
            of children, in case there are multiple rows of its children.
            The <see cref="P:Northwoods.Go.Layout.GoLayoutTree.RowSpacing"/> property determines the distance
            between rows of children.
            Negative values may cause children to overlap with the parent.
            </para>
            <para>
            This just gets or sets the <see cref="P:Northwoods.Go.Layout.GoLayoutTree.RootDefaults"/>'s property of the same name.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTree.Compaction">
            <summary>
            Gets or sets how closely to pack the child nodes of a subtree.
            </summary>
            <value>
            The default value is <see cref="T:Northwoods.Go.Layout.GoLayoutTreeCompaction"/>.<see cref="F:Northwoods.Go.Layout.GoLayoutTreeCompaction.Block"/>.
            </value>
            <remarks>
            This just gets or sets the <see cref="P:Northwoods.Go.Layout.GoLayoutTree.RootDefaults"/>'s property of the same name.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTree.BreadthLimit">
            <summary>
            Gets or sets a limit on how broad a tree should be.
            </summary>
            <value>
            A value of zero (the default) means there is no limit;
            a positive value specifies a limit.
            The default value is zero.
            </value>
            <remarks>
            <para>
            This property is just a suggested constraint on how
            broadly the tree will be laid out.
            When there isn't enough breadth for all of the children of a node,
            the children are placed in as many rows as needed to try to stay
            within the given breadth limit.
            If the value is too small, since this layout algorithm
            does not modify the size or shape of any node, the nodes will
            just be laid out in a line, one per row, and the breadth is
            determined by the broadest node.
            The distance between rows is specified by <see cref="P:Northwoods.Go.Layout.GoLayoutTree.RowSpacing"/>.
            To make room for the links that go around earlier rows to get to
            later rows, when the alignment is not a "center" alignment, the
            <see cref="P:Northwoods.Go.Layout.GoLayoutTree.RowIndent"/> property specifies that space at the
            start of each row.
            </para>
            <para>
            This just gets or sets the <see cref="P:Northwoods.Go.Layout.GoLayoutTree.RootDefaults"/>'s property of the same name.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTree.RowSpacing">
            <summary>
            Gets or sets the distance between rows of children.
            </summary>
            <value>
            The default value is 25.
            </value>
            <remarks>
            <para>
            This property is only used when there is more than one
            row of children for a given parent node.
            <see cref="P:Northwoods.Go.Layout.GoLayoutTree.LayerSpacing"/> determines the distance between
            the parent node and its first row of child nodes.
            </para>
            <para>
            This just gets or sets the <see cref="P:Northwoods.Go.Layout.GoLayoutTree.RootDefaults"/>'s property of the same name.
            </para>
            </remarks>
            <seealso cref="P:Northwoods.Go.Layout.GoLayoutTree.BreadthLimit"/>
            <seealso cref="P:Northwoods.Go.Layout.GoLayoutTree.RowIndent"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTree.RowIndent">
            <summary>
            Gets or sets the default indentation of the first child of each row,
            if the <see cref="P:Northwoods.Go.Layout.GoLayoutTree.Alignment"/> is not a "Center" alignment.
            </summary>
            <value>
            The default value is 10.  The value should be non-negative.
            </value>
            <remarks>
            <para>
            This is used to leave room for the links that connect a parent node
            with the child nodes that are in additional rows.
            </para>
            <para>
            This just gets or sets the <see cref="P:Northwoods.Go.Layout.GoLayoutTree.RootDefaults"/>'s property of the same name.
            </para>
            </remarks>
            <seealso cref="P:Northwoods.Go.Layout.GoLayoutTree.BreadthLimit"/>
            <seealso cref="P:Northwoods.Go.Layout.GoLayoutTree.RowIndent"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTree.CommentSpacing">
            <summary>
            Gets or sets the distance between comments.
            </summary>
            <value>
            The default value is 10.
            </value>
            <remarks>
            <para>
            This is used by <see cref="M:Northwoods.Go.Layout.GoLayoutTree.AddComments(Northwoods.Go.Layout.GoLayoutTreeNode)"/> and <see cref="M:Northwoods.Go.Layout.GoLayoutTree.LayoutComments(Northwoods.Go.Layout.GoLayoutTreeNode)"/>.
            </para>
            <para>
            This just gets or sets the <see cref="P:Northwoods.Go.Layout.GoLayoutTree.RootDefaults"/>'s property of the same name.
            </para>
            </remarks>
            <seealso cref="P:Northwoods.Go.Layout.GoLayoutTree.CommentMargin"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTree.CommentMargin">
            <summary>
            Gets or sets the distance between a node and its comments.
            </summary>
            <value>
            The default value is 20.
            </value>
            <remarks>
            <para>
            This is used by <see cref="M:Northwoods.Go.Layout.GoLayoutTree.AddComments(Northwoods.Go.Layout.GoLayoutTreeNode)"/> and <see cref="M:Northwoods.Go.Layout.GoLayoutTree.LayoutComments(Northwoods.Go.Layout.GoLayoutTreeNode)"/>.
            </para>
            <para>
            This just gets or sets the <see cref="P:Northwoods.Go.Layout.GoLayoutTree.RootDefaults"/>'s property of the same name.
            </para>
            </remarks>
            <seealso cref="P:Northwoods.Go.Layout.GoLayoutTree.CommentSpacing"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTree.SetsPortSpot">
            <summary>
            Gets or sets whether <see cref="M:Northwoods.Go.Layout.GoLayoutTree.SetPortSpots(Northwoods.Go.Layout.GoLayoutTreeNode)"/> should set the
            <see cref="P:Northwoods.Go.GoPort.FromSpot"/> for this parent node port.
            </summary>
            <value>
            The default value is true -- this may modify the spot of the port of this node, the parent,
            if the node has only a single port.
            </value>
            <remarks>
            <para>
            This inherited property is initialized in the <see cref="M:Northwoods.Go.Layout.GoLayoutTree.InitializeTreeNodeValues(Northwoods.Go.Layout.GoLayoutTreeNode)"/> method.
            The spot used depends on the value of <see cref="P:Northwoods.Go.Layout.GoLayoutTree.PortSpot"/>.
            </para>
            <para>
            This just gets or sets the <see cref="P:Northwoods.Go.Layout.GoLayoutTree.RootDefaults"/>'s property of the same name.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTree.PortSpot">
            <summary>
            Gets or sets the spot that this node's <see cref="T:Northwoods.Go.GoPort"/> gets as its <see cref="P:Northwoods.Go.GoPort.FromSpot"/>.
            </summary>
            <value>The default value is <see cref="F:Northwoods.Go.GoObject.NoSpot"/>.</value>
            <remarks>
            <para>
            This inherited property is initialized in the <see cref="M:Northwoods.Go.Layout.GoLayoutTree.InitializeTreeNodeValues(Northwoods.Go.Layout.GoLayoutTreeNode)"/> method.
            A value of <c>GoObject.NoSpot</c> will cause <see cref="M:Northwoods.Go.Layout.GoLayoutTree.SetPortSpots(Northwoods.Go.Layout.GoLayoutTreeNode)"/>
            to assign a <see cref="P:Northwoods.Go.GoPort.FromSpot"/> based on the parent node's
            <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Angle"/>.
            If the value is other than <c>NoSpot</c>, it is just assigned.
            When <see cref="P:Northwoods.Go.Layout.GoLayoutTree.Path"/> is <see cref="F:Northwoods.Go.Layout.GoLayoutTreePath.Source"/>,
            the <see cref="T:Northwoods.Go.GoPort"/>'s <see cref="P:Northwoods.Go.GoPort.ToSpot"/> is set instead of the <see cref="P:Northwoods.Go.GoPort.FromSpot"/>.
            </para>
            <para>
            This just gets or sets the <see cref="P:Northwoods.Go.Layout.GoLayoutTree.RootDefaults"/>'s property of the same name.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTree.SetsChildPortSpot">
            <summary>
            Gets or sets whether <see cref="M:Northwoods.Go.Layout.GoLayoutTree.SetPortSpots(Northwoods.Go.Layout.GoLayoutTreeNode)"/> should set the
            <see cref="P:Northwoods.Go.GoPort.ToSpot"/> for each child node port.
            </summary>
            <value>
            The default value is true -- this may modify the spots of the ports of the children nodes,
            if the node has only a single port.
            </value>
            <remarks>
            <para>
            This inherited property is initialized in the <see cref="M:Northwoods.Go.Layout.GoLayoutTree.InitializeTreeNodeValues(Northwoods.Go.Layout.GoLayoutTreeNode)"/> method.
            The spot used depends on the value of <see cref="P:Northwoods.Go.Layout.GoLayoutTree.ChildPortSpot"/>.
            </para>
            <para>
            This just gets or sets the <see cref="P:Northwoods.Go.Layout.GoLayoutTree.RootDefaults"/>'s property of the same name.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTree.ChildPortSpot">
            <summary>
            Gets or sets the spot that children nodes' <see cref="T:Northwoods.Go.GoPort"/>s get as their <see cref="P:Northwoods.Go.GoPort.ToSpot"/>.
            </summary>
            <value>The default value is <see cref="F:Northwoods.Go.GoObject.NoSpot"/>.</value>
            <remarks>
            <para>
            This inherited property is initialized in the <see cref="M:Northwoods.Go.Layout.GoLayoutTree.InitializeTreeNodeValues(Northwoods.Go.Layout.GoLayoutTreeNode)"/> method.
            A value of <c>GoObject.NoSpot</c> will cause <see cref="M:Northwoods.Go.Layout.GoLayoutTree.SetPortSpots(Northwoods.Go.Layout.GoLayoutTreeNode)"/>
            to assign a <see cref="P:Northwoods.Go.GoPort.ToSpot"/> based on the parent node's
            <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Angle"/>.
            If the value is other than <c>NoSpot</c>, it is just assigned.
            When <see cref="P:Northwoods.Go.Layout.GoLayoutTree.Path"/> is <see cref="F:Northwoods.Go.Layout.GoLayoutTreePath.Source"/>,
            the <see cref="T:Northwoods.Go.GoPort"/>'s <see cref="P:Northwoods.Go.GoPort.FromSpot"/> is set instead of the <see cref="P:Northwoods.Go.GoPort.ToSpot"/>.
            </para>
            <para>
            This just gets or sets the <see cref="P:Northwoods.Go.Layout.GoLayoutTree.RootDefaults"/>'s property of the same name.
            </para>
            </remarks>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutTreePath">
            <summary>
            This enumeration specifies how to build a tree from the <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNetwork"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutTreePath.Destination">
            <summary>
            The children of a <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/> are its <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Destinations"/>,
            the collection of connected <see cref="T:Northwoods.Go.Layout.GoLayoutTreeLink"/>.<see cref="P:Northwoods.Go.Layout.GoLayoutTreeLink.ToNode"/>s.
            </summary>
            <remarks>
            The tree roots are those <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/>s that have a zero <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.SourceLinksCount"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutTreePath.Source">
            <summary>
            The children of a <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/> are its <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Sources"/>,
            the collection of connected <see cref="T:Northwoods.Go.Layout.GoLayoutTreeLink"/>.<see cref="P:Northwoods.Go.Layout.GoLayoutTreeLink.FromNode"/>s.
            </summary>
            <remarks>
            The tree roots are those <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/>s that have a zero <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.DestinationLinksCount"/>.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutTreeSorting">
            <summary>
            This enumeration specifies whether to sort the children of a node,
            and in what order to position them.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutTreeSorting.Forwards">
            <summary>
            Lay out each child in the order in which they were found.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutTreeSorting.Reverse">
            <summary>
            Lay out each child in reverse order from which they were found.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutTreeSorting.Ascending">
            <summary>
            Lay out each child according to the sort order given by <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Comparer"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutTreeSorting.Descending">
            <summary>
            Lay out each child in reverse sort order given by <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Comparer"/>.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutTreeAlignment">
            <summary>
            This enumeration specifies how to position a parent <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/>
            relative to its children.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutTreeAlignment.CenterSubtrees">
            <summary>
            The parent is centered at the middle of the range of its child subtrees.
            </summary>
            <remarks>
            When there is a breadth limit that causes there to be multiple rows,
            the links that extend from the parent to those children in rows past
            the first one may cross over the nodes that are in earlier rows.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutTreeAlignment.CenterChildren">
            <summary>
            The parent is centered at the middle of the range of its immediate child nodes.
            </summary>
            <remarks>
            When there is a breadth limit that causes there to be multiple rows,
            the links that extend from the parent to those children in rows past
            the first one may cross over the nodes that are in earlier rows.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutTreeAlignment.Start">
            <summary>
            The parent is positioned near the first of its children.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutTreeAlignment.End">
            <summary>
            The parent is positioned near the last of its children.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutTreeCompaction">
            <summary>
            This enumeration specifies how closely packed the children of a node should be.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutTreeCompaction.None">
            <summary>
            Only simple placement of children next to each other, as determined by their subtree breadth.
            </summary>
            <remarks>
            For any node, there will not be another node at any depth occupying the same breadth position,
            unless there are multiple rows.  In other words, if there is no breadth limit resulting in
            multiple rows, with this compaction mode it is as if every node were infinitely deep.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutTreeCompaction.Block">
            <summary>
            A simple fitting of subtrees.
            </summary>
            <remarks>
            This mode produces more compact trees -- often nicer looking too.
            Nodes will not overlap each other, unless you have negative values
            for some of the spacing properties.
            However it is possible when the links are orthogonally styled that
            occasionally the subtrees will be placed so close together that some
            links may overlap the links or even the nodes of other subtrees.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutTreeStyle">
            <summary>
            This enumeration identifies the general style in which the nodes are laid out.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutTreeStyle.Layered">
            <summary>
            The normal tree style, where all of the children of each <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/> are lined up
            horizontally or vertically.
            </summary>
            <remarks>
            Each <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/> gets its properties from its parent node.
            <see cref="P:Northwoods.Go.Layout.GoLayoutTree.RootDefaults"/> is used for all default <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/> property values;
            <see cref="P:Northwoods.Go.Layout.GoLayoutTree.AlternateDefaults"/> is ignored.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutTreeStyle.LastParents">
            <summary>
            Just like the standard layered style, except that the nodes with children but no grandchildren
            have alternate properties.
            </summary>
            <remarks>
            Each <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/> gets its properties from its parent node.
            However, for those nodes whose <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.MaxGenerationCount"/> is 1,
            in other words when it has children but no grandchildren,
            the properties are copied from the <see cref="P:Northwoods.Go.Layout.GoLayoutTree.AlternateDefaults"/>.
            If the tree only has two levels, the root node gets the <see cref="P:Northwoods.Go.Layout.GoLayoutTree.RootDefaults"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutTreeStyle.Alternating">
            <summary>
            Alternate layers of the tree have different properties, typically including the angle.
            </summary>
            <remarks>
            Each <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/> gets its properties from its "grand-parent" node.
            The root nodes get their defaults from <see cref="P:Northwoods.Go.Layout.GoLayoutTree.RootDefaults"/>;
            the immediate children of root nodes get their defaults from <see cref="P:Northwoods.Go.Layout.GoLayoutTree.AlternateDefaults"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutTreeStyle.RootOnly">
            <summary>
            All of the nodes get the alternate properties, except the root node gets the default properties.
            </summary>
            <remarks>
            The root node gets the <see cref="P:Northwoods.Go.Layout.GoLayoutTree.RootDefaults"/> properties,
            the root node's children get the <see cref="P:Northwoods.Go.Layout.GoLayoutTree.AlternateDefaults"/> properties,
            and all of the rest of the <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/>s get their properties from their parent node.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutTreeArrangement">
            <summary>
            This enumeration specifies how to position the resulting trees in the document.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutTreeArrangement.Vertical">
            <summary>
            Position each tree in a non-overlapping fashion by increasing Y coordinates,
            starting at the <see cref="P:Northwoods.Go.Layout.GoLayoutTree.ArrangementOrigin"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutTreeArrangement.Horizontal">
            <summary>
            Position each tree in a non-overlapping fashion by increasing X coordinates,
            starting at the <see cref="P:Northwoods.Go.Layout.GoLayoutTree.ArrangementOrigin"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layout.GoLayoutTreeArrangement.FixedRoots">
            <summary>
            Do not move each root node, but position all of their descendents relative to their root.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutTreeNetwork">
            <summary>
            This provides an abstract view of a <see cref="T:Northwoods.Go.IGoCollection"/> as a
            network (graph) of nodes and directed links.  These nodes and links correspond to
            <see cref="T:Northwoods.Go.GoObject"/>s provided in the <see cref="T:Northwoods.Go.IGoCollection"/>.
            This class provides a framework for manipulating the
            state of nodes and links without modifying the structure of the original document.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.#ctor">
            <summary>
            Constructs an empty network.
            </summary>
            <remarks>
            Use this default constructor to create an empty network.
            Call <see cref="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.AddNodesAndLinksFromCollection(Northwoods.Go.IGoCollection,System.Boolean)"/> to automatically add
            network nodes and links, or call <see cref="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.AddNode(Northwoods.Go.GoObject)"/> and <see cref="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.LinkNodes(Northwoods.Go.Layout.GoLayoutTreeNode,Northwoods.Go.Layout.GoLayoutTreeNode,Northwoods.Go.GoObject)"/>
            explicitly to have more detailed control over the exact graph that is laid out.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.#ctor(Northwoods.Go.IGoCollection)">
            <summary>
            Constructs a network from a collection of GoObjects, by also calling
            <c>AddNodesAndLinksFromCollection(collection, true)</c>
            </summary>
            <param name="collection">the <see cref="T:Northwoods.Go.IGoCollection"/> containing the <see cref="T:Northwoods.Go.GoObject"/>s to add to the network.</param>
            <remarks>
            If you want an automatic layout of all the objects in a collection,
            you'll want to do something like the following code:
            <code>
            GoLayout... layout = new GoLayout...();
            layout.Document = ...document...;
            layout.Network = layout.CreateNetwork();
            layout.Network.AddNodesAndLinksFromCollection(...collection..., false);
            ...maybe set other properties...
            layout.PerformLayout();
            </code>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.CreateNetworkNode">
            <summary>
            Allocate a new instance of <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.CreateNetworkLink">
            <summary>
            Allocate a new instance of <see cref="T:Northwoods.Go.Layout.GoLayoutTreeLink"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.AddNodesAndLinksFromCollection(Northwoods.Go.IGoCollection,System.Boolean)">
            <summary>
            Adds the objects in an IGoCollection to the network.
            </summary>
            <param name="collection"></param>
            <param name="onlytruenodes">
            If true, only those objects that implement <see cref="T:Northwoods.Go.IGoNode"/> will get
            <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/>s created for them.
            If false, each (non-link) object in the collection will be represented by a
            <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/>.
            If you want the layout to ignore groups such as <see cref="T:Northwoods.Go.GoComment"/>s
            in your graph, provide a value of true here.
            </param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.RemoveAllNodesAndLinks">
            <summary>
            Removes all nodes and links from the network, resulting in an empty network.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.AddNode(Northwoods.Go.Layout.GoLayoutTreeNode)">
            <summary>
            Adds a <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/> to the Network.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.AddNode(Northwoods.Go.GoObject)">
            <summary>
            This convenience method makes sure there is a <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/>
            in this network corresponding to a <see cref="T:Northwoods.Go.GoObject"/>.
            </summary>
            <param name="node">a GoObject, normally an instance of a subclass of GoNode</param>
            <returns>a <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/> in this network</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.DeleteNode(Northwoods.Go.Layout.GoLayoutTreeNode)">
            <summary>
            Deletes the input node from the network.
            </summary>
            <param name="node"></param>
            <remarks>
            This function also deletes all links to or from the node.
            Performs a no-op if the node is not in the network.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.DeleteNode(Northwoods.Go.GoObject)">
            <summary>
            This convenience method removes any <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/>
            corresponding to a <see cref="T:Northwoods.Go.GoObject"/>.
            </summary>
            <param name="node">a GoObject</param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.FindNode(Northwoods.Go.GoObject)">
            <summary>
            Returns the GoLayoutTreeNode which was constructed for the GoObject.
            </summary>
            <param name="obj"></param>
            <returns>Returns the Network GoLayoutTreeNode associated with the go object or null
            if no such node exists.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.AddLink(Northwoods.Go.Layout.GoLayoutTreeLink)">
            <summary>
            Adds a GoLayoutTreeLink to the network.
            Although this method is provided for completeness,
            <see cref="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.LinkNodes(Northwoods.Go.Layout.GoLayoutTreeNode,Northwoods.Go.Layout.GoLayoutTreeNode,Northwoods.Go.GoObject)"/> provides a more efficient manner of linking
            nodes already in the network.
            </summary>
            <param name="link"></param>
            <remarks>
            This adds the link to its <see cref="P:Northwoods.Go.Layout.GoLayoutTreeLink.ToNode"/>'s
            source links list, and to its <see cref="P:Northwoods.Go.Layout.GoLayoutTreeLink.FromNode"/>'s
            destination links list.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.AddLink(Northwoods.Go.IGoLink)">
            <summary>
            This convenience method takes a <see cref="T:Northwoods.Go.GoObject"/> implementing <see cref="T:Northwoods.Go.IGoLink"/>,
            and returns a <see cref="T:Northwoods.Go.Layout.GoLayoutTreeLink"/> that has been added to this network.
            </summary>
            <param name="ilink"></param>
            <returns>a <see cref="T:Northwoods.Go.Layout.GoLayoutTreeLink"/> in this network</returns>
            <remarks>
            If <see cref="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.FindLink(Northwoods.Go.GoObject)"/> returns null, this method creates a new <see cref="T:Northwoods.Go.Layout.GoLayoutTreeLink"/>,
            makes sure the <see cref="P:Northwoods.Go.IGoLink.FromNode"/> and <see cref="P:Northwoods.Go.IGoLink.ToNode"/> have
            corresponding <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/>s in the network, and adds the link itself
            to the network.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.DeleteLink(Northwoods.Go.Layout.GoLayoutTreeLink)">
            <summary>
            Deletes the input link from the network.
            </summary>
            <param name="link"></param>
            <remarks>
            Also removes the link from its to node's predecessor list
            and from its from node's successor list.
            Performs a no-op if the link is not in the network.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.DeleteLink(Northwoods.Go.IGoLink)">
            <summary>
            This convenience method makes sure a <see cref="T:Northwoods.Go.GoObject"/> implementing <see cref="T:Northwoods.Go.IGoLink"/>
            does not have a <see cref="T:Northwoods.Go.Layout.GoLayoutTreeLink"/> in this network.
            </summary>
            <param name="ilink"></param>
            <remarks>
            This just calls <see cref="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.DeleteLink(Northwoods.Go.Layout.GoLayoutTreeLink)"/> if
            <see cref="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.FindLink(Northwoods.Go.GoObject)"/> finds a <see cref="T:Northwoods.Go.Layout.GoLayoutTreeLink"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.FindLink(Northwoods.Go.GoObject)">
            <summary>
            Returns the GoLayoutTreeLink which was constructed for the GoObject.
            </summary>
            <param name="obj"></param>
            <returns>Returns the Network GoLayoutTreeLink which was constructed with the obj or
            null if no such link exists.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.LinkNodes(Northwoods.Go.Layout.GoLayoutTreeNode,Northwoods.Go.Layout.GoLayoutTreeNode,Northwoods.Go.GoObject)">
            <summary>
            Links two nodes already in the network and returns the created link.
            </summary>
            <param name="fromNode"></param>
            <param name="toNode"></param>
            <param name="obj"> the GoObject to which the created link should correspond (may be null)</param>
            <returns>Returns the link created when fromNode and toNode are linked.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.ReverseLink(Northwoods.Go.Layout.GoLayoutTreeLink)">
            <summary>
            Reverses the direction of a link in the network.
            </summary>
            <param name="link"></param>
            <remarks>
            This calls <see cref="M:Northwoods.Go.Layout.GoLayoutTreeLink.ReverseLink"/> and also adjusts the
            source links and destination links of both connected nodes.
            If either <see cref="P:Northwoods.Go.Layout.GoLayoutTreeLink.FromNode"/> or 
            <see cref="P:Northwoods.Go.Layout.GoLayoutTreeLink.ToNode"/> are null, this method does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.DeleteSelfLinks">
            <summary>
            Deletes all links whose "to node" and "from node" are the same node.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.DeleteArtificialNodes">
            <summary>
            Delete all nodes and links that have no <see cref="T:Northwoods.Go.GoObject"/>
            associated with them.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.SplitIntoSubNetworks">
            <summary>
            Modify this network by splitting it up into separate subnetworks,
            each of which has all of its nodes connected to each other, but not
            to any nodes in any other subnetworks.
            </summary>
            <returns>
            An <c>IEnumerator</c> of networks,
            sorted in order of decreasing <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNetwork.NodeCount"/>.
            </returns>
            <remarks>
            This method will first delete from this network all artifical nodes and
            all links that do not connect two different nodes.
            Afterwards, this original network may be empty or may contain all of the
            singleton <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/>s, each of which had no
            <see cref="T:Northwoods.Go.Layout.GoLayoutTreeLink"/>s connecting it to any other nodes.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.GetNodesAndLinks(Northwoods.Go.IGoCollection)">
            <summary>
            Retrieve all of the <see cref="T:Northwoods.Go.GoObject"/> nodes and links from the
            <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/>s and <see cref="T:Northwoods.Go.Layout.GoLayoutTreeLink"/>s
            that are in this network, by adding them to the given <paramref name="coll"/>.
            </summary>
            <param name="coll">
            An <see cref="T:Northwoods.Go.IGoCollection"/>; if null, the method allocates
            and returns a <see cref="T:Northwoods.Go.GoSelection"/>.
            </param>
            <returns>
            An <see cref="T:Northwoods.Go.IGoCollection"/> of all of the <see cref="T:Northwoods.Go.GoObject"/>s that
            correspond to <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/>s and <see cref="T:Northwoods.Go.Layout.GoLayoutTreeLink"/>s.
            </returns>
            <remarks>
            If you pass a value for <pararef name="coll"/>, we recommend using a <see cref="T:Northwoods.Go.GoSelection"/>
            instead of a <see cref="T:Northwoods.Go.GoCollection"/>, since <see cref="T:Northwoods.Go.GoSelection"/> has
            more efficient lookup for avoiding duplicates.
            A <see cref="T:Northwoods.Go.GoSelection"/> is also handy for easily moving all those objects
            by calling <see cref="M:Northwoods.Go.GoView.MoveSelection(Northwoods.Go.GoSelection,System.Drawing.SizeF,System.Boolean)"/>.
            You can determine the bounding rectangle for a collection of nodes and links
            by calling the static/shared method
            <see cref="T:Northwoods.Go.GoDocument"/>.<see cref="M:Northwoods.Go.GoDocument.ComputeBounds(Northwoods.Go.IGoCollection,Northwoods.Go.GoView)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNetwork.NodeCount">
            <summary>
            Gets the number of Nodes in the Network.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNetwork.LinkCount">
            <summary>
            Gets the number of Links in the Network.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNetwork.GoObjToNodeMap">
            <summary>
            Gets the Hashtable that maps GoObjects to Nodes
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNetwork.GoObjToLinkMap">
            <summary>
            Gets the Hashtable that maps GoObjects to Links
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNetwork.Nodes">
            <summary>
            Gets an enumerator for the network's nodes.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNetwork.Links">
            <summary>
            Gets an enumerator for the network's links.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNetwork.Layout">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.Layout.GoLayoutTree"/> in which this
            network is being used.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutTreeNetwork.NodeArrayList">
            <summary>
            This partly implements an <c>ArrayList</c> of <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkNode"/>s.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.NodeArrayList.#ctor">
            <summary>
            Construct an empty list.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.NodeArrayList.Contains(Northwoods.Go.Layout.GoLayoutTreeNode)">
            <summary>
            True if the item is in the list.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.NodeArrayList.IndexOf(Northwoods.Go.Layout.GoLayoutTreeNode)">
            <summary>
            Find the zero-based position of an item in the list, or -1 if not present.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.NodeArrayList.Add(Northwoods.Go.Layout.GoLayoutTreeNode)">
            <summary>
            Add an item to the end of the list.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.NodeArrayList.RemoveAt(System.Int32)">
            <summary>
            Remove an item from the list that is at a particular zero-based index.
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.NodeArrayList.GetEnumerator">
            <summary>
            Support enumerating the items in this list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.NodeArrayList.ToArray">
            <summary>
            Copy references to this list's items into an array.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNetwork.NodeArrayList.Count">
            <summary>
            Gets the number of items in the list.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNetwork.NodeArrayList.Item(System.Int32)">
            <summary>
            This supports accessing items by zero-based index.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutTreeNetwork.LinkArrayList">
            <summary>
            This partly implements an <c>ArrayList</c> of <see cref="T:Northwoods.Go.Layout.GoLayoutNetworkNode"/>s.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.LinkArrayList.#ctor">
            <summary>
            Construct an empty list.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.LinkArrayList.Contains(Northwoods.Go.Layout.GoLayoutTreeLink)">
            <summary>
            True if the item is in the list.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.LinkArrayList.IndexOf(Northwoods.Go.Layout.GoLayoutTreeLink)">
            <summary>
            Find the zero-based position of an item in the list, or -1 if not present.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.LinkArrayList.Add(Northwoods.Go.Layout.GoLayoutTreeLink)">
            <summary>
            Add an item to the end of the list.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.LinkArrayList.RemoveAt(System.Int32)">
            <summary>
            Remove an item from the list that is at a particular zero-based index.
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.LinkArrayList.GetEnumerator">
            <summary>
            Support enumerating the items in this list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.LinkArrayList.ToArray">
            <summary>
            Copy references to this list's items into an array.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNetwork.LinkArrayList.Count">
            <summary>
            Gets the number of items in the list.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNetwork.LinkArrayList.Item(System.Int32)">
            <summary>
            This supports accessing items by zero-based index.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutTreeNetwork.NodeEnumerator">
            <summary>
            NodeEnumerator implements both <c>IEnumerator</c> and <c>IEnumerable</c>.
            It should be used to enumerate through all the Nodes.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.NodeEnumerator.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the Nodes.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.NodeEnumerator.MoveNext">
            <summary>
            Advance the enumerator to the next GoLayoutTreeNode.
            </summary>
            <returns>True if there is a next GoLayoutTreeNode; false if it has finished iterating over the collection.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.NodeEnumerator.Reset">
            <summary>
            Reset the enumerator to its original position.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNetwork.NodeEnumerator.Current">
            <summary>
             Gets the current node in the collection of nodes.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutTreeNetwork.LinkEnumerator">
            <summary>
            LinkEnumerator implements both <c>IEnumerator</c> and <c>IEnumerable</c>.
            It should be used to enumerate through all the Links.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.LinkEnumerator.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the Links
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.LinkEnumerator.MoveNext">
            <summary>
            Advance the enumerator to the next GoLayoutTreeLink.
            </summary>
            <returns>True if there is a next GoLayoutTreeLink; false if it has finished iterating over the collection.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNetwork.LinkEnumerator.Reset">
            <summary>
            Reset the enumerator to its original position.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNetwork.LinkEnumerator.Current">
            <summary>
             Gets the current node in the collection of links.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutTreeLink">
            <summary>
            Holds auto-layout specific link data.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeLink.OnPortChanged(Northwoods.Go.IGoPort,System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)">
            <summary>
            Don't need to do anything.
            </summary>
            <param name="port"></param>
            <param name="subhint"></param>
            <param name="oldI"></param>
            <param name="oldVal"></param>
            <param name="oldRect"></param>
            <param name="newI"></param>
            <param name="newVal"></param>
            <param name="newRect"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeLink.Unlink">
            <summary>
            Remove this network link from the network.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeLink.ReverseLink">
            <summary>
            Reverses the link; i.e., exchanges the from and to nodes.
            </summary>
            <remarks>
            Setting this property does not modify any <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/>
            by adding or removing a link to its <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.SourceLinksList"/>
            or <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.DestinationLinksList"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeLink.CommitPosition">
            <summary>
            Commits the position of the link to the corresponding GoObject.
            </summary>
            <remarks>
            By default this does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeLink.GetOtherNode(Northwoods.Go.IGoNode)">
            <summary>
            Finds and returns the link's node other than n.  Returns null if
            n is neither the from node or to node.
            </summary>
            <param name="n"></param>
            <returns>Finds and returns the link's node other than n.  Returns null if
            n is neither the from node or to node.</returns>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeLink.GetOtherPort(Northwoods.Go.IGoPort)">
            <summary>
            Finds and returns the link's port other than p.  Returns null if
            p is neither the from port or to port.
            </summary>
            <param name="p"></param>
            <returns>Finds and returns the link's port other than p.  Returns null if
            p is neither the from port or to port.</returns>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeLink.GoObject">
            <summary>
            Gets or sets this link's associated GoObject.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeLink.Network">
            <summary>
            Gets or sets the network that this link is part of.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeLink.FromNode">
            <summary>
            Gets this link's From GoLayoutTreeNode.
            </summary>
            <remarks>
            Setting this property does not modify the <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/>
            by adding a link to its <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.DestinationLinksList"/>
            or removing it from another node's list.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeLink.FromPort">
            <summary>
            Gets this link's From GoLayoutTreeNode.
            </summary>
            <remarks>
            Setting this property does not modify the <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/>
            by adding a link to its <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.DestinationLinksList"/>
            or removing it from another node's list.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeLink.ToNode">
            <summary>
            Gets or sets the To GoLayoutTreeNode for this link.
            </summary>
            <remarks>
            Setting this property does not modify the <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/>
            by adding a link to its <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.SourceLinksList"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeLink.ToPort">
            <summary>
            Gets or sets the To GoLayoutTreeNode for the link.
            </summary>
            <remarks>
            Setting this property does not modify the <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/>
            by adding a link to its <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.SourceLinksList"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeLink.Stroke">
            <summary>
            Gets the GoStroke associated with the Network GoLayoutTreeLink.
            This may be needed by the algorithm to add bends to the link.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeLink.UserObject">
            <summary>
            Gets or Sets an Object associated with the link
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeLink.UserFlags">
            <summary>
            Gets or Sets an integer associated with the link
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeLink.RelativePoint">
            <summary>
            Gets or sets a point, relative to the parent node,
            that may be useful in routing this link.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layout.GoLayoutTreeNode">
            <summary>
            Holds auto-layout specific node data.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNode.AddSourceLink(Northwoods.Go.Layout.GoLayoutTreeLink)">
            <summary>
            Adds a <see cref="T:Northwoods.Go.Layout.GoLayoutTreeLink"/> to the list predecessors
            (i.e., the link will be coming into this node).
            </summary>
            <param name="sourceLink"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNode.DeleteSourceLink(Northwoods.Go.Layout.GoLayoutTreeLink)">
            <summary>
            Deletes a <see cref="T:Northwoods.Go.Layout.GoLayoutTreeLink"/> from the list of predecessors
            (i.e., the link was to this node).
            </summary>
            <param name="sourceLink"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNode.AddDestinationLink(Northwoods.Go.Layout.GoLayoutTreeLink)">
            <summary>
            Adds a <see cref="T:Northwoods.Go.Layout.GoLayoutTreeLink"/> to the list successors
            (i.e., the link will be going out from this node).
            </summary>
            <param name="destinationLink"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNode.DeleteDestinationLink(Northwoods.Go.Layout.GoLayoutTreeLink)">
            <summary>
            Deletes a <see cref="T:Northwoods.Go.Layout.GoLayoutTreeLink"/> from the list of successors
            (i.e., the link was going out from this node).
            </summary>
            <param name="destinationLink"></param>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNode.CommitPosition">
            <summary>
            Moves the corresponding GoObject to the center point of the node in the
            document.
            </summary>
            <remarks>
            To make the most common cases look right, the object's <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.GoObject"/>.<c>SelectionObject</c>
            is centered.  Thus iconic nodes will have the center of the icon be positioned
            according to the <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Center"/> of this GoLayoutTreeNode, ignoring any labels.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layout.GoLayoutTreeNode.CopyInheritedPropertiesFrom(Northwoods.Go.Layout.GoLayoutTreeNode)">
            <summary>
            This method just copies inheritable properties from
            another <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/>.
            </summary>
            <param name="n"></param>
            <remarks>
            The properties include:
            <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Sorting"/>
            <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Comparer"/>
            <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Angle"/>
            <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Alignment"/>
            <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.NodeIndent"/>
            <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.NodeSpacing"/>
            <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.LayerSpacing"/>
            <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Compaction"/>
            <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.BreadthLimit"/>
            <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.RowSpacing"/>
            <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.RowIndent"/>
            <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.CommentSpacing"/>
            <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.CommentMargin"/>
            <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.SetsPortSpot"/>
            <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.PortSpot"/>
            <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.SetsChildPortSpot"/>
            <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.ChildPortSpot"/>
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.GoObject">
            <summary>
            Gets or sets the GoObject associated with this network node.
            </summary>
            <remarks>
            Setting this value to an object will also set the <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Center"/>
            property to that object's <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.GoObject"/>.<c>SelectionObject</c> center position.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.Network">
            <summary>
            Gets or sets the network that this node is part of.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.SourceLinksList">
            <summary>
            Returns the list of predecessor links (i.e., the links are coming into this node).
            </summary>
            <value>
            An <c>GoLayoutTreeNetwork.LinkArrayList</c> of <see cref="T:Northwoods.Go.Layout.GoLayoutTreeLink"/>s.
            This list should not be modified directly; use <see cref="M:Northwoods.Go.Layout.GoLayoutTreeNode.AddSourceLink(Northwoods.Go.Layout.GoLayoutTreeLink)"/>
            and <see cref="M:Northwoods.Go.Layout.GoLayoutTreeNode.DeleteSourceLink(Northwoods.Go.Layout.GoLayoutTreeLink)"/> instead.
            </value>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.DestinationLinksList">
            <summary>
            Returns the list of successor links (i.e., the links are going out from this node).
            </summary>
            <value>
            An <c>GoLayoutTreeNetwork.LinkArrayList</c> of <see cref="T:Northwoods.Go.Layout.GoLayoutTreeLink"/>s.
            This list should not be modified directly; use <see cref="M:Northwoods.Go.Layout.GoLayoutTreeNode.AddDestinationLink(Northwoods.Go.Layout.GoLayoutTreeLink)"/>
            and <see cref="M:Northwoods.Go.Layout.GoLayoutTreeNode.DeleteDestinationLink(Northwoods.Go.Layout.GoLayoutTreeLink)"/> instead.
            </value>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.Center">
            <summary>
            Gets or sets the Center Point of this node.
            </summary>
            <remarks>
            Setting this property does not modify any <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.GoObject"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Position"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.Position">
            <summary>
            Gets or sets the Position (top-left corner) of this node.
            </summary>
            <remarks>
            Setting this property does not modify any <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.GoObject"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Center"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.Focus">
            <summary>
            Gets or sets the offset of the <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Center"/> from the
            <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Bounds"/><c>.Position</c>.
            </summary>
            <remarks>
            Setting this property does not modify any <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.GoObject"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.Bounds">
            <summary>
            Gets or sets the Bounds of this node.
            </summary>
            <remarks>
            Setting this property does not modify any <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.GoObject"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.Size">
            <summary>
            Gets the <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Bounds"/><c>.Size</c>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.Width">
            <summary>
            Gets the <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Bounds"/><c>.Width</c>.
            </summary>
            <remarks>
            This is always the horizontal distance reserved for this node.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.Height">
            <summary>
            Gets the <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Bounds"/><c>.Height</c>.
            </summary>
            <remarks>
            This is always the vertical distance reserved for this node.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.UserObject">
            <summary>
            Gets or sets an Object associated with the node
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.UserFlags">
            <summary>
            Gets or sets the node's flags
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.Sources">
            <summary>
            Gets an enumerator over all of the nodes that have links coming into this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all nodes that have ports that have any
            destination links coming into any port of this node.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoNode.Sources"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.Destinations">
            <summary>
            Gets an enumerator over all of the nodes that have links going out of this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all nodes that have ports that have any
            source links going out of any port of this node.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoNode.Destinations"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.Nodes">
            <summary>
            Gets an enumerator over all of the nodes that are connected to this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all nodes that have ports that have any
            links connected to any port of this node.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoNode.Sources"/>
            <seealso cref="P:Northwoods.Go.IGoNode.Destinations"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.SourceLinks">
            <summary>
            Gets an enumerator over all of the links coming into this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all links that come into
            any port of this node.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoNode.SourceLinks"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.SourceLinksCount">
            <summary>
            Gets the number of links going into this node.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.DestinationLinks">
            <summary>
            Gets an enumerator over all of the links going out of this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all links that go out of
            any port of this node.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoNode.DestinationLinks"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.DestinationLinksCount">
            <summary>
            Gets the number of links coming out of this node.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.Links">
            <summary>
            Gets an enumerator over all of the links going out of or coming into this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all links that are connected to
            port of this node.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoNode.SourceLinks"/>
            <seealso cref="P:Northwoods.Go.IGoNode.DestinationLinks"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.LinksCount">
            <summary>
            Gets the number of links connected to this node.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.Initialized">
            <summary>
            Gets or sets whether this node has been initialized as part of <see cref="M:Northwoods.Go.Layout.GoLayoutTree.CreateTrees"/>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.Parent">
            <summary>
            Gets or sets the logical parent for this node.
            </summary>
            <remarks>
            This structural property is computed in <see cref="M:Northwoods.Go.Layout.GoLayoutTree.WalkTree(Northwoods.Go.Layout.GoLayoutTreeNode)"/>.
            You probably should not be setting this property.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.Children">
            <summary>
            Gets or sets the array of logical children for this node.
            </summary>
            <remarks>
            This structural property is computed in <see cref="M:Northwoods.Go.Layout.GoLayoutTree.WalkTree(Northwoods.Go.Layout.GoLayoutTreeNode)"/>.
            You probably should not be setting this property.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.ChildrenCount">
            <summary>
            Gets the number of immediate children that this node has.
            </summary>
            <seealso cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Children"/>
            <seealso cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.DescendentCount"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.Level">
            <summary>
            Gets the number of single-parent ancestors this node has.
            </summary>
            <remarks>
            This could also be interpreted as which layer this node is in.
            A root node will have a value of zero.
            This informational property is computed in <see cref="M:Northwoods.Go.Layout.GoLayoutTree.WalkTree(Northwoods.Go.Layout.GoLayoutTreeNode)"/>.
            You probably should not be setting this property.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.DescendentCount">
            <summary>
            Gets the number of descendents this node has.
            </summary>
            <remarks>
            For a leaf node, this will be zero.
            This informational property is computed as part of the <see cref="M:Northwoods.Go.Layout.GoLayoutTree.InitializeTreeNodeValues(Northwoods.Go.Layout.GoLayoutTreeNode)"/> pass.
            You probably should not be setting this property.
            </remarks>
            <seealso cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.ChildrenCount"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.MaxChildrenCount">
            <summary>
            Gets the maximum number of children of any descendent of this node.
            </summary>
            <remarks>
            For a leaf node, this will be zero.
            This informational property is computed as part of the <see cref="M:Northwoods.Go.Layout.GoLayoutTree.InitializeTreeNodeValues(Northwoods.Go.Layout.GoLayoutTreeNode)"/> pass.
            You probably should not be setting this property.
            </remarks>
            <seealso cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.MaxGenerationCount"/>
            <seealso cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.ChildrenCount"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.MaxGenerationCount">
            <summary>
            Gets the maximum depth of the subtrees below this node.
            </summary>
            <remarks>
            For a leaf node, this will be zero.
            This informational property is computed as part of the <see cref="M:Northwoods.Go.Layout.GoLayoutTree.InitializeTreeNodeValues(Northwoods.Go.Layout.GoLayoutTreeNode)"/> pass.
            You probably should not be setting this property.
            </remarks>
            <seealso cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.MaxChildrenCount"/>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.RelativePosition">
            <summary>
            Gets or sets the position of this node relative to its parent node.
            </summary>
            <remarks>
            This informational property is computed by <see cref="M:Northwoods.Go.Layout.GoLayoutTree.LayoutTree(Northwoods.Go.Layout.GoLayoutTreeNode)"/>.
            You probably should not be setting this property.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.SubtreeSize">
            <summary>
            Gets or sets the size of the subtree (including all descendents) parented by this node.
            </summary>
            <remarks>
            This informational property is computed by <see cref="M:Northwoods.Go.Layout.GoLayoutTree.LayoutTree(Northwoods.Go.Layout.GoLayoutTreeNode)"/>.
            Of course if there are no children, this is just the same as <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Size"/>.
            You probably should not be setting this property.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.SubtreeOffset">
            <summary>
            Gets or sets the offset of this parent node relative to its whole subtree.
            </summary>
            <remarks>
            This informational property is computed by <see cref="M:Northwoods.Go.Layout.GoLayoutTree.LayoutTree(Northwoods.Go.Layout.GoLayoutTreeNode)"/>.
            Of course if there are no children, this is just zero by zero.
            You probably should not be setting this property.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.Comments">
            <summary>
            Gets or sets a collection of <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.GoObject"/>s that will be
            positioned near the node.
            </summary>
            <value>
            The default value is null.
            </value>
            <remarks>
            These objects should not have their own <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/>s
            to be laid out.  Typically these will be instances of <see cref="T:Northwoods.Go.GoBalloon"/>.
            This collection should be allocated and initialized in <see cref="M:Northwoods.Go.Layout.GoLayoutTree.AddComments(Northwoods.Go.Layout.GoLayoutTreeNode)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.Sorting">
            <summary>
            Gets or sets whether and in what order the children should be sorted.
            </summary>
            <value>
            The default value is <see cref="T:Northwoods.Go.Layout.GoLayoutTreeSorting"/>.<see cref="F:Northwoods.Go.Layout.GoLayoutTreeSorting.Forwards"/>.
            </value>
            <remarks>
            This inherited property is initialized in the <see cref="M:Northwoods.Go.Layout.GoLayoutTree.InitializeTreeNodeValues(Northwoods.Go.Layout.GoLayoutTreeNode)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.Comparer">
            <summary>
            Gets or sets how the children should be sorted.
            </summary>
            <remarks>
            This inherited property is initialized in the <see cref="M:Northwoods.Go.Layout.GoLayoutTree.InitializeTreeNodeValues(Northwoods.Go.Layout.GoLayoutTreeNode)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.Angle">
            <summary>
            Gets or sets the actual absolute angle at which this node should grow.
            </summary>
            <value>
            The default value is zero, meaning that general tree growth should proceed rightwards along the X axis.
            </value>
            <remarks>
            This inherited property is initialized in the <see cref="M:Northwoods.Go.Layout.GoLayoutTree.InitializeTreeNodeValues(Northwoods.Go.Layout.GoLayoutTreeNode)"/> method.
            By default this is the same as the <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Angle"/> of the parent <see cref="T:Northwoods.Go.Layout.GoLayoutTreeNode"/>.
            However, after the initial propagation of property values, perhaps in
            an override of <see cref="T:Northwoods.Go.Layout.GoLayoutTree"/>.<see cref="M:Northwoods.Go.Layout.GoLayoutTree.AssignTreeNodeValues(Northwoods.Go.Layout.GoLayoutTreeNode)"/>,
            you could just set this property to specify the angle at which this node grows
            it subtrees.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.Alignment">
            <summary>
            Gets or sets how this parent node should be aligned relative to its children.
            </summary>
            <value>
            The default value is <see cref="T:Northwoods.Go.Layout.GoLayoutTreeAlignment"/>.<see cref="F:Northwoods.Go.Layout.GoLayoutTreeAlignment.CenterChildren"/>.
            </value>
            <remarks>
            This inherited property is initialized in the <see cref="M:Northwoods.Go.Layout.GoLayoutTree.InitializeTreeNodeValues(Northwoods.Go.Layout.GoLayoutTreeNode)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.NodeIndent">
            <summary>
            Gets or sets the distance the first child should be indented.
            </summary>
            <value>
            The default value is zero.  The value should be non-negative.
            </value>
            <remarks>
            This inherited property is initialized in the <see cref="M:Northwoods.Go.Layout.GoLayoutTree.InitializeTreeNodeValues(Northwoods.Go.Layout.GoLayoutTreeNode)"/> method.
            This property is only sensible when the <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Alignment"/>
            is <see cref="F:Northwoods.Go.Layout.GoLayoutTreeAlignment.Start"/> or <see cref="F:Northwoods.Go.Layout.GoLayoutTreeAlignment.End"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.NodeSpacing">
            <summary>
            Gets or sets the distance between child nodes.
            </summary>
            <value>
            The default value is 20.
            A negative value causes sibling nodes to overlap.
            </value>
            <remarks>
            This inherited property is initialized in the <see cref="M:Northwoods.Go.Layout.GoLayoutTree.InitializeTreeNodeValues(Northwoods.Go.Layout.GoLayoutTreeNode)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.LayerSpacing">
            <summary>
            Gets or sets the distance there should be between this node and its layer of children.
            </summary>
            <value>
            The default value is 50.
            Negative values may cause children to overlap with the parent.
            </value>
            <remarks>
            This inherited property is initialized in the <see cref="M:Northwoods.Go.Layout.GoLayoutTree.InitializeTreeNodeValues(Northwoods.Go.Layout.GoLayoutTreeNode)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.Compaction">
            <summary>
            Gets or sets how the children of this node should be packed together.
            </summary>
            <value>
            The default value is <see cref="T:Northwoods.Go.Layout.GoLayoutTreeCompaction"/>.<see cref="F:Northwoods.Go.Layout.GoLayoutTreeCompaction.Block"/>.
            </value>
            <remarks>
            This inherited property is initialized in the <see cref="M:Northwoods.Go.Layout.GoLayoutTree.InitializeTreeNodeValues(Northwoods.Go.Layout.GoLayoutTreeNode)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.BreadthLimit">
            <summary>
            Gets or sets how broad a node and its descendents should be.
            </summary>
            <value>
            By default this is zero.  A value of zero imposes no limit;
            a positive value will specify a limit for the total width of this subtree.
            </value>
            <remarks>
            This inherited property is initialized in the <see cref="M:Northwoods.Go.Layout.GoLayoutTree.InitializeTreeNodeValues(Northwoods.Go.Layout.GoLayoutTreeNode)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.RowSpacing">
            <summary>
            Gets or sets the distance between rows within one layer, all sharing the same parent.
            </summary>
            <value>
            The default value is 25.
            Negative values may cause nodes to overlap.
            </value>
            <remarks>
            This inherited property is initialized in the <see cref="M:Northwoods.Go.Layout.GoLayoutTree.InitializeTreeNodeValues(Northwoods.Go.Layout.GoLayoutTreeNode)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.RowIndent">
            <summary>
            Gets or sets the distance the first child of each row should be indented.
            </summary>
            <value>
            The default value is 10.  The value should be non-negative.
            </value>
            <remarks>
            This inherited property is initialized in the <see cref="M:Northwoods.Go.Layout.GoLayoutTree.InitializeTreeNodeValues(Northwoods.Go.Layout.GoLayoutTreeNode)"/> method.
            This property is only used when the <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.BreadthLimit"/> is positive,
            and some initial space needs to be reserved in each row of nodes for the links
            that are routed around those rows.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.CommentSpacing">
            <summary>
            Gets or sets the space to leave between consecutive comments.
            </summary>
            <value>
            The default value is 10.
            Negative values may cause comments to overlap.
            </value>
            <remarks>
            This inherited property is initialized in the <see cref="M:Northwoods.Go.Layout.GoLayoutTree.InitializeTreeNodeValues(Northwoods.Go.Layout.GoLayoutTreeNode)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.CommentMargin">
            <summary>
            Gets or sets the space to leave between the node and the comments.
            </summary>
            <value>
            The default value is 20.
            Negative values may cause comments to overlap with the node.
            </value>
            <remarks>
            This inherited property is initialized in the <see cref="M:Northwoods.Go.Layout.GoLayoutTree.InitializeTreeNodeValues(Northwoods.Go.Layout.GoLayoutTreeNode)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.SetsPortSpot">
            <summary>
            Gets or sets whether <see cref="M:Northwoods.Go.Layout.GoLayoutTree.SetPortSpots(Northwoods.Go.Layout.GoLayoutTreeNode)"/> should set the
            <see cref="P:Northwoods.Go.GoPort.FromSpot"/> for this parent node port.
            </summary>
            <value>
            The default value is true -- this may modify the spot of the port of this node, the parent,
            if the node has only a single port.
            </value>
            <remarks>
            This inherited property is initialized in the <see cref="M:Northwoods.Go.Layout.GoLayoutTree.InitializeTreeNodeValues(Northwoods.Go.Layout.GoLayoutTreeNode)"/> method.
            The spot used depends on the value of <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.PortSpot"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.PortSpot">
            <summary>
            Gets or sets the spot that this node's <see cref="T:Northwoods.Go.GoPort"/> gets as its <see cref="P:Northwoods.Go.GoPort.FromSpot"/>,
            if <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.SetsPortSpot"/> is true and the node has only a single port.
            </summary>
            <value>The default value is <c>GoObject.NoSpot</c>.</value>
            <remarks>
            This inherited property is initialized in the <see cref="M:Northwoods.Go.Layout.GoLayoutTree.InitializeTreeNodeValues(Northwoods.Go.Layout.GoLayoutTreeNode)"/> method.
            A value of <c>GoObject.NoSpot</c> will cause <see cref="M:Northwoods.Go.Layout.GoLayoutTree.SetPortSpots(Northwoods.Go.Layout.GoLayoutTreeNode)"/>
            to assign a <see cref="P:Northwoods.Go.GoPort.FromSpot"/> based on the parent node's
            <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Angle"/>.
            If the value is other than <c>NoSpot</c>, it is just assigned.
            When <see cref="P:Northwoods.Go.Layout.GoLayoutTree.Path"/> is <see cref="F:Northwoods.Go.Layout.GoLayoutTreePath.Source"/>,
            the <see cref="T:Northwoods.Go.GoPort"/>'s <see cref="P:Northwoods.Go.GoPort.ToSpot"/> is set instead of the <see cref="P:Northwoods.Go.GoPort.FromSpot"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.SetsChildPortSpot">
            <summary>
            Gets or sets whether <see cref="M:Northwoods.Go.Layout.GoLayoutTree.SetPortSpots(Northwoods.Go.Layout.GoLayoutTreeNode)"/> should set the
            <see cref="P:Northwoods.Go.GoPort.ToSpot"/> for each child node port.
            </summary>
            <value>
            The default value is true -- this may modify the spots of the ports of the children nodes,
            if the node has only a single port.
            </value>
            <remarks>
            This inherited property is initialized in the <see cref="M:Northwoods.Go.Layout.GoLayoutTree.InitializeTreeNodeValues(Northwoods.Go.Layout.GoLayoutTreeNode)"/> method.
            The spot used depends on the value of <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.ChildPortSpot"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.ChildPortSpot">
            <summary>
            Gets or sets the spot that children nodes' <see cref="T:Northwoods.Go.GoPort"/>s get as their <see cref="P:Northwoods.Go.GoPort.ToSpot"/>,
            if <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.SetsChildPortSpot"/> is true and the node has only a single port.
            </summary>
            <value>The default value is <c>GoObject.NoSpot</c>.</value>
            <remarks>
            This inherited property is initialized in the <see cref="M:Northwoods.Go.Layout.GoLayoutTree.InitializeTreeNodeValues(Northwoods.Go.Layout.GoLayoutTreeNode)"/> method.
            A value of <c>GoObject.NoSpot</c> will cause <see cref="M:Northwoods.Go.Layout.GoLayoutTree.SetPortSpots(Northwoods.Go.Layout.GoLayoutTreeNode)"/>
            to assign a <see cref="P:Northwoods.Go.GoPort.ToSpot"/> based on the parent node's
            <see cref="P:Northwoods.Go.Layout.GoLayoutTreeNode.Angle"/>.
            If the value is other than <c>NoSpot</c>, it is just assigned.
            When <see cref="P:Northwoods.Go.Layout.GoLayoutTree.Path"/> is <see cref="F:Northwoods.Go.Layout.GoLayoutTreePath.Source"/>,
            the <see cref="T:Northwoods.Go.GoPort"/>'s <see cref="P:Northwoods.Go.GoPort.FromSpot"/> is set instead of the <see cref="P:Northwoods.Go.GoPort.ToSpot"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layout.GoLayoutTreeNode.InternalFlags">
            <summary>
            (Unsupported)
            </summary>
        </member>
    </members>
</doc>

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Northwoods.Go.Xml</name>
    </assembly>
    <members>
        <member name="T:Northwoods.Go.Xml.GoXmlBindingFlags">
            <summary>
            These flags describe characteristics of an attribute-property binding
            use by <see cref="T:Northwoods.Go.Xml.GoXmlBindingTransformer"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Xml.GoXmlBindingFlags.Default">
            <summary>
            The normal binding of an attribute with a property.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Xml.GoXmlBindingFlags.NoGet">
            <summary>
            Do not get this object property; the XML attribute is not generated.
            </summary>
            <remarks>
            Presumably the property is write-only.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.Xml.GoXmlBindingFlags.NoSet">
            <summary>
            Do not set the object property when consuming XML.
            </summary>
            <remarks>
            Presumably the property is read-only.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.Xml.GoXmlBindingFlags.DefinesShared">
            <summary>
            The object property value is a reference;
            when reading XML, the attribute value should be a unique identifier
            that will be associated with the property value.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Xml.GoXmlBindingFlags.RethrowsExceptions">
            <summary>
            If a property getter or setter throws an exception, instead of ignoring it, rethrow it.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Xml.GoXmlBindingTransformer">
             <summary>
             This class implements a <see cref="T:Northwoods.Go.Xml.GoXmlTransformer"/> with which you can easily
             declare a binding between XML attributes and <see cref="T:Northwoods.Go.GoObject"/> properties,
             and which automatically makes a copy of a <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.Prototype"/> object
             when consuming an XML element for this transformer.
             </summary>
             <remarks>
             <para>
             Use this kind of transformer when you have complete control over the XML schema
             that you want to read and write and can follow the conventions established by this class.
             </para>
             <para>
             The following two transformers are similar to the SimpleXmlTransformBasicNode
             and SimpleXmlTransformLink transformer subclasses defined in the remarks for the
             <see cref="T:Northwoods.Go.Xml.GoXmlTransformer"/> documentation.  For each <c>GoXmlBindingTransformer</c>
             you need to specify an element name, create a prototype object, and add bindings
             between attribute names and property names.
             </para>
             <code>
             // create a prototype node that is copied when consuming a "node" element
             GoBasicNode bn = new GoBasicNode();
             bn.LabelSpot = GoObject.Middle;
             bn.Text = "";
             
             // ElementName is "node"; Prototype is this GoBasicNode
             GoXmlBindingTransformer bt1 = new GoXmlBindingTransformer("node", bn);
             
             // generates attributes for all named ports, for GoBasicNode just "Port",
             // to define their id's without generating separate elements for the ports
             bt1.HandlesNamedPorts = true;
             
             // read/write three attributes for each node, each attribute's value given by a property
             // note that the property can be a "path" of property names separated by periods,
             // when the desired value is not an immediate property on the object (the GoBasicNode in this case)
             bt1.AddBinding("label", "Text");
             bt1.AddBinding("color", "Shape.BrushColor");
             // typically the Location property is last, in case any of the previous
             // properties cause a change in node size and thus in the node's Location
             bt1.AddBinding("loc", "Location");
             
             // register this transformer for GoBasicNodes and the element name "node"
             readerorwriter.AddTransformer(bt1);
            
             // create a prototype link
             GoLabeledLink ll = new GoLabeledLink();
             GoText lab = new GoText();
             lab.Selectable = false;
             ll.MidLabel = lab;
             
             // ElementName is "link"; Prototype is this GoLabeledLink
             GoXmlBindingTransformer bt2 = new GoXmlBindingTransformer("link", ll);
             
             // read/write three attributes for each link, including the two ports and the MidLabel's string
             bt2.AddBinding("from", "FromPort");
             bt2.AddBinding("to", "ToPort");
             bt2.AddBinding("label", "MidLabel.Text");
             
             // register this transformer for GoLabeledLinks and the element name "link"
             readerorwriter.AddTransformer(bt2);
             </code>
             <para>
             These two transformers produce an XML document such as:
             <code>
             &lt;graph&gt;
               &lt;node Port="0" label="Linen" color="-331546" loc="112 195" /&gt;
               &lt;node Port="1" label="DarkKhaki" color="-4343957" loc="221 155" /&gt;
               &lt;node Port="2" label="LightSteelBlue" color="-5192482" loc="237 221" /&gt;
               &lt;node Port="3" label="DeepSkyBlue" color="-16728065" loc="146 288" /&gt;
               &lt;link from="0" to="1" label="zeroone" /&gt;
               &lt;link from="1" to="2" label="onetwo" /&gt;
               &lt;link from="2" to="3" label="twothree" /&gt;
               &lt;link from="0" to="3" label="zerothree" /&gt;
               &lt;/graph&gt;
             </code>
             Note that the ports get unique identifiers, not the nodes,
             because <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.HandlesNamedPorts"/> is true.
             If you also want the nodes to get unique identifiers,
             you can set <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.IdAttributeUsedForSharedObjects"/> to true.
             Neither identifier is at all related to an <see cref="T:Northwoods.Go.IGoIdentifiablePart"/>.<see cref="P:Northwoods.Go.IGoIdentifiablePart.PartID"/>.
             </para>
             <para>
             As special cases, there are two property names that provide special behavior.
             For the <see cref="T:Northwoods.Go.GoStroke"/>, <see cref="T:Northwoods.Go.GoLabeledLink"/>, <see cref="T:Northwoods.Go.GoPolygon"/>,
             and <see cref="T:Northwoods.Go.GoDrawing"/> classes, you can bind to the "Points" property
             in order to get or set the array of points used to define those shapes.
             The "Points" property is not treated specially for objects of any other type.
             </para>
             <para>
             Also as a special case for node classes, the "TreeParentNode" property binding is handled as a reference
             to another node, where the other node is considered to be the "parent" node in a tree-structured diagram.
             This supports the definition of XML that only has elements for nodes, with an implicit link from a
             "parent" node to the node whose element includes the attribute corresponding to the "TreeParentNode" property.
             The <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.TreeLinkPrototype"/> property of this transformer provides a link that is copied when
             consuming such an element.  The "TreeParentNode" property is not treated specially for
             objects that are not instances of <c>IGoNode</c>.
             </para>
             <para>If you define a property binding using the special "TreeParentNode" property name,
             <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.TreeStructured"/> should not be true,
             because <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.TreeStructured"/> denotes nested XML elements,
             not the use of an attribute that refers to a node.
             It also does not make sense to have more than one attribute/property binding
             using the special "TreeParentNode" property name.
             </para>
             <code>
             // create a prototype node that is copied when consuming a "node" element
             GoBasicNode bn = new GoBasicNode();
             bn.LabelSpot = GoObject.Middle;
             bn.Text = "";
             
             // ElementName is "node"; Prototype is this GoBasicNode
             GoXmlBindingTransformer bt1 = new GoXmlBindingTransformer("node", bn);
             
             // all nodes get an "id" attribute
             bt1.IdAttributeUsedForSharedObjects = true;
             
             // read/write three attributes for each node, each attribute's value given by a property
             // note that the property can be a "path" of property names separated by periods,
             // when the desired value is not an immediate property on the object (the GoBasicNode in this case)
             bt1.AddBinding("label", "Text");
             bt1.AddBinding("color", "Shape.BrushColor");
             // typically the Location property is last, in case any of the previous
             // properties cause a change in node size and thus in the node's Location
             bt1.AddBinding("loc", "Location");
             
             // use the special "TreeParentNode" pseudo-property to indicate that the "parent"
             // attribute should be a reference to the node's parent node, if any
             bt1.AddBinding("parent", "TreeParentNode");
             // create a prototype link to connect a parent node to this transformer's node
             GoLink ll = new GoLink();
             ll.ToArrow = true;
             ll.Pen = new Pen(Color.Blue, 2);
             bt1.TreeLinkPrototype = ll;
             
             // register this transformer for GoBasicNodes and the element name "node"
             readerorwriter.AddTransformer(bt1);
             </code>
             <para>
             This single transformer for <c>GoBasicNode</c> produces an XML document such as:
             <code>
             &lt;graph&gt;
               &lt;node id="0" label="Crimson" color="-2354116" loc="102 196" /&gt;
               &lt;node id="1" label="DarkCyan" color="-16741493" loc="210 157" parent="0" /&gt;
               &lt;node id="2" label="PaleGoldenrod" color="-1120086" loc="226 219" parent="0" /&gt;
               &lt;node id="3" label="Silver" color="-4144960" loc="343 254" parent="2" /&gt;
               &lt;node id="4" label="Purple" color="-8388480" loc="344 189" parent="2" /&gt;
             &lt;/graph&gt;
             </code>
             Note that the nodes have identifiers, not the ports.  These identifiers are not at all
             related to an <see cref="T:Northwoods.Go.IGoIdentifiablePart"/>.<see cref="P:Northwoods.Go.IGoIdentifiablePart.PartID"/>.
             You can control which ports are used at each node in a tree diagram by setting
             the <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.TreeParentNodePortPath"/> and <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.TreeChildNodePortPath"/>
             properties of the transformer.
             You can also control whether links go from the parent node to the child node,
             or vice-versa, by setting the <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.TreeLinksToChildren"/> property.
             </para>
             <para>
             <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/> and <see cref="T:Northwoods.Go.Xml.GoXmlReader"/> also make special provision
             for a root that is a <see cref="T:Northwoods.Go.GoDocument"/> whose Type is associated with a
             <c>GoXmlBindingTransformer</c>.  When writing, the <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.ElementName"/>
             is used as the <see cref="P:Northwoods.Go.Xml.GoXmlWriter.RootElementName"/>.  When reading,
             if there is no <see cref="P:Northwoods.Go.Xml.GoXmlReader.RootObject"/>, the <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.Prototype"/>
             is copied to be the <see cref="P:Northwoods.Go.Xml.GoXmlReader.RootObject"/>.  This makes it easy to bind
             <see cref="T:Northwoods.Go.GoDocument"/> properties with XML root attributes.  However most of the other
             properties of transformers, such as <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.TreeStructured"/>
             or the other tree-related properties, are ignored when applied to the root object.
             </para>
             <para>
             Bindings are inherited from transformers in the same manner that their corresponding Types
             inherit properties.  So if you define a transformer for a Type <c>C</c> with a binding for
             the <c>CProp</c> property, and if you define a transformer for the Type <c>D</c> that inherits
             from <c>C</c>, the elements generated or consumed for instances of Type <c>D</c> will
             automatically include an attribute for the <c>CProp</c> property.
             </para>
             <para>
             The binding mechanism uses reflection, so your application will need permission to use reflection.
             Using reflection is also slower than the equivalent functionality implemented as regular code
             that you implement in overrides of <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.GenerateAttributes(System.Object)"/> and
             <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.ConsumeAttributes(System.Object)"/>.
             </para>
             </remarks>
             <seealso cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.TreeStructured"/>
        </member>
        <member name="T:Northwoods.Go.Xml.GoXmlTransformer">
            <summary>
            This abstract class holds methods called by <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>
            and <see cref="T:Northwoods.Go.Xml.GoXmlReader"/>,
            used to generate or parse XML for objects of a particular class.
            </summary>
            <remarks>
            <para>
            When you define transformers for your application's object classes,
            you will want to inherit from this class.
            This provides standard implementations for all of the
            <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/> methods, which basically just call the
            same method on the base type's transformer.
            </para>
            <para>
            To make it easier to access the <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.Writer"/>'s and
            <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.Reader"/>'s properties and methods,
            a number of their properties and methods are provided here also,
            whose implementations just delegate to the writer or reader.
            An instance of this class can only be used for one <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>
            or <see cref="T:Northwoods.Go.Xml.GoXmlReader"/> at a time, not for both at once.
            </para>
            </remarks>
            <example>
            This continues the examples given with the description of <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>
            and <see cref="T:Northwoods.Go.Xml.GoXmlReader"/>,
            defining simple transformers for <c>GoBasicNode</c> and <c>GoLabeledLink</c>.
            <code>
              public class SimpleXmlTransformBasicNode : GoXmlTransformer {
                public SimpleXmlTransformBasicNode() {
                  this.TransformerType = typeof(GoBasicNode); 
                  this.ElementName = "node";
                  this.IdAttributeUsedForSharedObjects = true;
                }
            
                public override void GenerateAttributes(Object obj) {
                  base.GenerateAttributes(obj);
                  GoBasicNode n = (GoBasicNode)obj;
                  WriteAttrVal("label", n.Text);
                  WriteAttrVal("shapebounds", n.SelectionObject.Bounds);
                }
                
                public override Object Allocate() {
                  GoBasicNode n = new GoBasicNode();
                  // you might want to do other common initialization here
                  return n;
                }
                public override void ConsumeAttributes(Object obj) {
                  base.ConsumeAttributes(obj);
                  GoBasicNode n = (GoBasicNode)obj;
                  n.Text = StringAttr("label", "");
                  n.SelectionObject.Bounds = RectangleFAttr("shapebounds", new RectangleF(100, 100, 40, 50));
                }
              }
              
              public class SimpleXmlTransformLink : GoXmlTransformer {
                public SimpleXmlTransformLink() {
                  this.TransformerType = typeof(GoLabeledLink);
                  this.ElementName = "link";
                }
                
                public override void GenerateAttributes(Object obj) {
                  base.GenerateAttributes(obj);
                  GoLabeledLink link = (GoLabeledLink)obj;
                  GoNode n = link.FromNode as GoNode;
                  WriteAttrVal("from", this.Writer.FindShared(n));
                  n = link.ToNode as GoNode;
                  WriteAttrVal("to", this.Writer.FindShared(n));
                  GoText lab = link.MidLabel as GoText;
                  if (lab != null)
                    WriteAttrVal("label", lab.Text);
                }
                
                public override Object Allocate() {
                  GoLabeledLink ll = new GoLabeledLink();
                  GoText lab = new GoText();
                  lab.Selectable = false;
                  ll.MidLabel = lab;
                  // you might want to do other common initialization here
                  return ll;
                }
                public override void ConsumeAttributes(Object obj) {
                  base.ConsumeAttributes(obj);
                  GoLabeledLink link = (GoLabeledLink)obj;
                  String fromid = StringAttr("from", null);
                  GoBasicNode from = this.Reader.FindShared(fromid) as GoBasicNode;
                  if (from != null) {
                    link.FromPort = from.Port;
                  }
                  String toid = StringAttr("to", null);
                  GoBasicNode to = this.Reader.FindShared(toid) as GoBasicNode;
                  if (to != null) {
                    link.ToPort = to.Port;
                  }
                  GoText lab = link.MidLabel as GoText;
                  if (lab != null &amp;&amp; IsAttrPresent("label")) {
                    lab.Text = StringAttr("label", lab.Text);
                  }
                }
              }
            </code>
            </example>
        </member>
        <member name="T:Northwoods.Go.Xml.IGoXmlTransformer">
            <summary>
            This interface represents the methods that <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/> or <see cref="T:Northwoods.Go.Xml.GoXmlReader"/>
            will call to generate or consume XML for an arbitrary type of object.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Xml.IGoXmlTransformer.SkipGeneration(System.Object)">
            <summary>
            Return true if the <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/> should not generate XML for an object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Xml.IGoXmlTransformer.GenerateDefinitions(System.Object)">
            <summary>
            This method is called in a first pass over the objects,
            remembering any shared objects and perhaps rendering definition elements for those shared objects.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.Go.Xml.IGoXmlTransformer.GenerateElement(System.Object)">
            <summary>
            Start an element for an object.
            </summary>
            <param name="obj"></param>
            <returns>true if an element was started</returns>
        </member>
        <member name="M:Northwoods.Go.Xml.IGoXmlTransformer.GenerateAttributes(System.Object)">
            <summary>
            Generate attributes for the current element, helping to render an object.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.Go.Xml.IGoXmlTransformer.GenerateBody(System.Object)">
            <summary>
            Generate text and/or nested elements that render an object, after all
            calls to <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.GenerateAttributes(System.Object)"/>.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.Go.Xml.IGoXmlTransformer.GenerateElementFinish(System.Object)">
            <summary>
            Finish the generation of elements started by <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.GenerateElement(System.Object)"/>,
            after all calls to <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.GenerateBody(System.Object)"/>.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.Go.Xml.IGoXmlTransformer.Allocate">
            <summary>
            Construct an object, given the current state of the <see cref="T:Northwoods.Go.Xml.GoXmlReader"/>.
            </summary>
            <returns>an object, or null if the current element does not require creating an object</returns>
        </member>
        <member name="M:Northwoods.Go.Xml.IGoXmlTransformer.ConsumeAttributes(System.Object)">
            <summary>
            Use attribute values to further initialize the object constructed by <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.Allocate"/>.
            </summary>
            <param name="obj">the object constructed by <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.Allocate"/></param>
        </member>
        <member name="M:Northwoods.Go.Xml.IGoXmlTransformer.ConsumeBody(System.Object)">
            <summary>
            Read any text or elements contained in the current element to continue building the object,
            after all calls to <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.ConsumeAttributes(System.Object)"/>.
            </summary>
            <param name="obj">the object constructed by <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.Allocate"/></param>
        </member>
        <member name="M:Northwoods.Go.Xml.IGoXmlTransformer.ConsumeChild(System.Object,System.Object)">
            <summary>
            Process a child object constructed by having consumed a child element of this body,
            as part of the implementation of a <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.ConsumeBody(System.Object)"/>.
            </summary>
            <param name="parent"></param>
            <param name="child"></param>
        </member>
        <member name="M:Northwoods.Go.Xml.IGoXmlTransformer.ConsumeObjectFinish(System.Object)">
            <summary>
            Finish any initialization of the object allocated by <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.Allocate"/>,
            whose attributes have been read and whose body has been traversed and any child objects consumed.
            </summary>
            <param name="obj">the object constructed by <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.Allocate"/></param>
        </member>
        <member name="M:Northwoods.Go.Xml.IGoXmlTransformer.UpdateReference(System.Object,System.String,System.Object)">
            <summary>
            Update the property named by <paramref name="prop"/> in the given object
            to the <paramref name="referred"/> object.
            </summary>
            <param name="obj">an object being constructed, with a reference property that was delayed and now needs updating</param>
            <param name="prop">the name of the reference property belonging to <paramref name="obj"/> that needs to be updated</param>
            <param name="referred">the object that the property should be referring to; if the object was not found,
            the string that was used as the search key</param>
        </member>
        <member name="P:Northwoods.Go.Xml.IGoXmlTransformer.Writer">
            <summary>
            Gets or sets which <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/> is using this transformer.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Xml.IGoXmlTransformer.Reader">
            <summary>
            Gets or sets which <see cref="T:Northwoods.Go.Xml.GoXmlReader"/> is using this transformer.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Xml.IGoXmlTransformer.TransformerType">
            <summary>
            Gets or sets the <c>Type</c> for which these transformer methods apply.
            </summary>
            <remarks>
            This will be used for both writing/generation and reading/consumption.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Xml.IGoXmlTransformer.ElementName">
            <summary>
            Gets or sets the element name for this transformer.
            </summary>
            <remarks>
            This will be used for both writing/generation and reading/consumption.
            The name should be a local name -- it should not have any prefix and colon embedded in it.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.#ctor">
            <summary>
            Construct a transformer that has no <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.Writer"/> yet.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.SkipGeneration(System.Object)">
            <summary>
            Return true if the <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.Writer"/> should not generate XML for an object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <remarks>
            This is called by <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlWriter.DefineObject(System.Object)"/>
            and by <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateObject(System.Object)"/>.
            By default this calls <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.SkipGeneration(System.Object)"/> on the <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.InheritsFromTransformer"/>,
            to allow another specific transformer to implement this behavior,
            or else calls <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlWriter.InvokeSkipGeneration(System.Type,System.Object)"/>,
            to allow this <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.TransformerType"/>'s base <c>Type</c> to provide a default behavior.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.GenerateDefinitions(System.Object)">
            <summary>
            Generate elements for the definitions section of the document, rendering any shared objects
            that this object needs to refer to.
            </summary>
            <param name="obj">the object being generated</param>
            <remarks>
            This is called by <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlWriter.DefineObject(System.Object)"/>.
            If <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.IdAttributeUsedForSharedObjects"/> is true,
            this first associates an identifier with the given <paramref name="obj"/>
            by calling <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlWriter.MakeShared(System.Object)"/>
            This method then calls <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.GenerateDefinitions(System.Object)"/> on the <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.InheritsFromTransformer"/>,
            to allow another specific transformer to implement this behavior,
            or else calls <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlWriter.InvokeGenerateDefinitions(System.Type,System.Object)"/>,
            to allow this <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.TransformerType"/>'s base <c>Type</c> to provide a default behavior.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.GenerateElement(System.Object)">
            <summary>
            Start producing an XML element for a given object.
            </summary>
            <param name="obj">the object being generated</param>
            <returns>true if it started an element</returns>
            <remarks>
            This is called by <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateObject(System.Object)"/>.
            By default this starts an element named by <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.ElementName"/>, if it is non-null.
            If <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.ElementName"/> is null, this calls <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.GenerateElement(System.Object)"/> on the <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.InheritsFromTransformer"/>,
            to allow another specific transformer to implement this behavior,
            or else calls <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlWriter.InvokeGenerateElement(System.Type,System.Object)"/>,
            to allow this <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.TransformerType"/>'s base <c>Type</c> to provide a default behavior.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.GenerateAttributes(System.Object)">
            <summary>
            Generate attributes for the current element, helping to render an object.
            </summary>
            <param name="obj">the object being generated</param>
            <remarks>
            <para>
            You will typically override this method to call methods such as <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.WriteAttrVal(System.String,System.String)"/>
            or <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.WriteAttrVal(System.String,System.Single)"/> to read property values and set them on the object <paramref name="obj"/>
            being initialized.  The set of attributes usually matches those consumed in an override of
            <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.ConsumeAttributes(System.Object)"/>.
            </para>
            <para>
            This is called by <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateObject(System.Object)"/>.
            If <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.IdAttributeUsedForSharedObjects"/> is true,
            this method also sees if <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlWriter.FindShared(System.Object)"/>
            has an identifier associated with the given <paramref name="obj"/>.
            If so, this writes out an "id" attribute with that identifier string.
            This method then calls <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.GenerateAttributes(System.Object)"/> on the <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.InheritsFromTransformer"/>,
            to allow another specific transformer to implement this behavior,
            or else calls <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlWriter.InvokeGenerateAttributes(System.Type,System.Object)"/>,
            to allow this <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.TransformerType"/>'s base <c>Type</c> to provide a default behavior.
            </para>
            <para>
            You should not try to define any "xmlns" namespaces.
            Instead, you can define the default namespace for the root element
            by setting <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="P:Northwoods.Go.Xml.GoXmlWriter.DefaultNamespace"/>,
            and you can define namespaces and their prefixes by calling <see cref="M:Northwoods.Go.Xml.GoXmlWriter.SetNamespaceUri(System.String,System.String)"/>
            before XML generation.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.GenerateBody(System.Object)">
            <summary>
            Generate any nested elements that are part of the rendering of an object.
            </summary>
            <param name="obj">the object being generated</param>
            <remarks>
            This is called by <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateObject(System.Object)"/>.
            By default this calls <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.GenerateBody(System.Object)"/> on the <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.InheritsFromTransformer"/>,
            to allow another specific transformer to implement this behavior,
            or else calls <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlWriter.InvokeGenerateBody(System.Type,System.Object)"/>,
            to allow this <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.TransformerType"/>'s base <c>Type</c> to provide a default behavior.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.GenerateElementFinish(System.Object)">
            <summary>
            Finish generating any elements that were started by <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.GenerateElement(System.Object)"/>.
            </summary>
            <param name="obj">the object being generated</param>
            <remarks>
            This is called by <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateObject(System.Object)"/>.
            By default this calls <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.GenerateElementFinish(System.Object)"/> on the <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.InheritsFromTransformer"/>,
            to allow another specific transformer to implement this behavior,
            or else calls <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlWriter.InvokeGenerateElementFinish(System.Type,System.Object)"/>,
            to allow this <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.TransformerType"/>'s base <c>Type</c> to provide a default behavior.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.Allocate">
            <summary>
            Override this method to construct a new object for the current XML element.
            </summary>
            <returns>
            An object of type <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.TransformerType"/>, or null if no object
            needs to be created for the current element.
            </returns>
            <remarks>
            This is called by <see cref="T:Northwoods.Go.Xml.GoXmlReader"/>.<see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeObject"/>.
            By default this returns a new instance of <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.TransformerType"/>,
            if that property is not null and represents a class.
            This should be overridden to construct an object.
            The construction may need to use the values of some attributes on the current XML element
            in order to decide what to construct or which constructor to call.
            If this is called by a nested call to <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeObject"/>
            within an implementation of <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.ConsumeBody(System.Object)"/>, then the
            <see cref="P:Northwoods.Go.Xml.GoXmlReaderWriterBase.ParentObject"/> property will refer to the object for
            which the body is being consumed.
            The <see cref="P:Northwoods.Go.Xml.GoXmlReaderWriterBase.ParentObject"/> can be used to find and return an
            existing child of the parent object, rather than constructing a new object as the child.
            Note that unlike the other implementations of <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/> methods,
            this method does not default to calling <see cref="M:Northwoods.Go.Xml.GoXmlReader.InvokeAllocate"/> on
            the base <c>Type</c>, since that is unlikely to create an instance of the desired type.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.ConsumeAttributes(System.Object)">
            <summary>
            Consume attributes for the current element, helping to initialize most of the object's properties.
            </summary>
            <param name="obj">the object being constructed</param>
            <remarks>
            <para>
            </para>
            You will typically override this method to call methods such as <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.StringAttr(System.String,System.String)"/>
            or <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.SingleAttr(System.String,System.Single)"/> to read property values and set them on the object <paramref name="obj"/>
            being initialized.  The set of attributes usually matches those generated in an override of
            <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.GenerateAttributes(System.Object)"/>, although sometimes some of the attributes are needed in
            the override of <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.Allocate"/>.
            <para>
            This is called by <see cref="T:Northwoods.Go.Xml.GoXmlReader"/>.<see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeObject"/>.
            By default this calls <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.ConsumeAttributes(System.Object)"/> on the <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.InheritsFromTransformer"/>,
            to allow another specific transformer to implement this behavior,
            or else calls <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlReader.InvokeConsumeAttributes(System.Type,System.Object)"/>,
            to allow this <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.TransformerType"/>'s base <c>Type</c> to provide a default behavior.
            If <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.IdAttributeUsedForSharedObjects"/> is true,
            this method also looks at the "id" attribute and, if present, will associate that
            identifier with the given <paramref name="obj"/> by calling
            <see cref="T:Northwoods.Go.Xml.GoXmlReader"/>.<see cref="M:Northwoods.Go.Xml.GoXmlReader.MakeShared(System.String,System.Object)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.ConsumeBody(System.Object)">
            <summary>
            Consume elements that help define more details or parts of an object.
            </summary>
            <param name="obj"></param>
            <remarks>
            <para>
            If you want to read child (nested) XML elements and have transformer(s)
            defined for those kinds of elements, it is sufficient to set
            <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.BodyConsumesChildElements"/> to true and to override
            <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.ConsumeChild(System.Object,System.Object)"/> to add those child objects to the parent object.
            For more sophisticated parsing/traversing of the child XML elements, you may
            want to override this method to do what you need.
            </para>
            <para>
            This is called by <see cref="T:Northwoods.Go.Xml.GoXmlReader"/>.<see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeObject"/>.
            If <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.BodyConsumesChildElements"/> is true, this method
            iterates through the child elements of this XML node, calls
            <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeObject"/> on each one, and then passes the resulting
            object to <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.ConsumeChild(System.Object,System.Object)"/>.
            If <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.XmlReader"/> is available, because <see cref="P:Northwoods.Go.Xml.GoXmlReader.UseDOM"/>
            is false, this method keeps reading until it encounters an <c>EndElement</c> XML node.
            Otherwise, if we are traversing a DOM, this method enumerates each of the
            <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.ReaderNode"/>'s XML <c>ChildNodes</c>.
            If <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.BodyConsumesChildElements"/> is false,
            this calls <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.ConsumeBody(System.Object)"/> on the <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.InheritsFromTransformer"/>,
            to allow another specific transformer to implement this behavior,
            or else calls <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlReader.InvokeConsumeBody(System.Type,System.Object)"/>,
            to allow this <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.TransformerType"/>'s base <c>Type</c> to provide a default behavior.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.ConsumeChild(System.Object,System.Object)">
            <summary>
            When <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.BodyConsumesChildElements"/> is true,
            <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.ConsumeBody(System.Object)"/> will call <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeObject"/>
            on each child XML element and pass the resulting object to this method.
            </summary>
            <param name="parent">the result of an earlier call to <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.Allocate"/>
            that was passed to a call to <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.ConsumeBody(System.Object)"/></param>
            <param name="child">the result of the call to <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeObject"/>; may be null</param>
            <remarks>
            <para>
            Typically you would override this method to add the child to the parent in
            the appropriate manner, or perhaps to set a property of the parent to refer
            to the child object.
            Note that this method will not get called by <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.ConsumeBody(System.Object)"/> unless
            <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.BodyConsumesChildElements"/> is true or unless some
            transformer's implementation of <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.ConsumeBody(System.Object)"/> does so.
            </para>
            <para>
            This is called by the standard implementation of <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.ConsumeBody(System.Object)"/>.
            By default this calls <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.ConsumeChild(System.Object,System.Object)"/> on the <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.InheritsFromTransformer"/>,
            to allow another specific transformer to implement this behavior,
            or else calls <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlReader.InvokeConsumeChild(System.Type,System.Object,System.Object)"/>,
            to allow this <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.TransformerType"/>'s base <c>Type</c> to provide a default behavior.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.ConsumeObjectFinish(System.Object)">
            <summary>
            Finish building the object for the current element.
            </summary>
            <param name="obj">the object being constructed</param>
            <remarks>
            This is called by <see cref="T:Northwoods.Go.Xml.GoXmlReader"/>.<see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeObject"/>.
            By default this calls <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.ConsumeObjectFinish(System.Object)"/> on the <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.InheritsFromTransformer"/>,
            to allow another specific transformer to implement this behavior,
            or else calls <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlReader.InvokeConsumeObjectFinish(System.Type,System.Object)"/>,
            to allow this <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.TransformerType"/>'s base <c>Type</c> to provide a default behavior.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.UpdateReference(System.Object,System.String,System.Object)">
            <summary>
            Fix up a reference property whose value was delayed until the referred-to-object
            became available.
            </summary>
            <param name="obj">
            The object that contains an unresolved reference
            </param>
            <param name="prop">
            a <c>String</c> that the names the property or somehow identifies which
            reference in the object given by <paramref name="obj"/> needs to be
            updated with the correct reference given by <paramref name="referred"/>
            </param>
            <param name="referred">
            an <c>Object</c> that is the result of a call to
            <see cref="T:Northwoods.Go.Xml.GoXmlReader"/>.<see cref="M:Northwoods.Go.Xml.GoXmlReader.FindShared(System.String)"/>, or if that
            call returned null, the <c>String</c> which was the reference string passed
            to the earlier call to <see cref="T:Northwoods.Go.Xml.GoXmlReader"/>.<see cref="M:Northwoods.Go.Xml.GoXmlReader.AddDelayedRef(System.Object,System.String,System.String)"/>.
            </param>
            <remarks>
            This is called from <see cref="T:Northwoods.Go.Xml.GoXmlReader"/>.<see cref="M:Northwoods.Go.Xml.GoXmlReader.ProcessDelayedObjects"/>.
            By default this calls <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.UpdateReference(System.Object,System.String,System.Object)"/> on the <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.InheritsFromTransformer"/>,
            to allow another specific transformer to implement this behavior,
            or else calls <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlReader.InvokeUpdateReference(System.Type,System.Object,System.String,System.Object)"/>,
            to allow this <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.TransformerType"/>'s base <c>Type</c> to provide a default behavior.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.WriteStartElement(System.String)">
            <summary>
            Start a new XML element, with the name given by <paramref name="name"/>.
            </summary>
            <param name="name">the local name for the element; must not be null</param>
            <remarks>
            You need to make a corresponding call to <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.WriteEndElement"/>
            when you are finished writing this element.
            If we are constructing a DOM instead of writing to a stream,
            this sets <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.WriterElement"/> to be the newly started <c>XmlElement</c>.
            </remarks>
            <seealso cref="M:Northwoods.Go.Xml.GoXmlWriter.WriteStartElement(System.String)"/>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.WriteStartElement(System.String,System.String,System.String)">
            <summary>
            Start a new XML element, with the name given by <paramref name="name"/>,
            and with an optional <paramref name="prefix"/> and an optional namespace <paramref name="uri"/>.
            </summary>
            <param name="prefix"></param>
            <param name="name">the local name for the element; must not be null</param>
            <param name="uri"></param>
            <remarks>
            You need to make a corresponding call to <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.WriteEndElement"/>
            when you are finished writing this element.
            If we are constructing a DOM instead of writing to a stream,
            this sets <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.WriterElement"/> to be the newly started <c>XmlElement</c>.
            </remarks>
            <seealso cref="M:Northwoods.Go.Xml.GoXmlWriter.WriteStartElement(System.String,System.String,System.String)"/>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.WriteEndElement">
            <summary>
            Finish the current XML element started by a call to <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.WriteStartElement(System.String)"/>.
            </summary>
            <remarks>
            If we are constructing a DOM instead of writing to a stream,
            this sets the <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.WriterElement"/> to be the <c>ParentNode</c> assuming
            it is an <c>XmlElement</c>.
            </remarks>
            <seealso cref="M:Northwoods.Go.Xml.GoXmlWriter.WriteEndElement"/>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.WriteTextBody(System.String)">
            <summary>
            Write out a string as the body of an element.
            </summary>
            <param name="s">the text to be written</param>
            <remarks>
            This method will write to the <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.XmlWriter"/> if it
            is available or else it will create an XML text node in the <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.WriterElement"/>.
            </remarks>
            <seealso cref="M:Northwoods.Go.Xml.GoXmlWriter.WriteTextBody(System.String)"/>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.WriteAttrRef(System.String,System.Object)">
            <summary>
            Write an attribute of the name <paramref name="name"/> with a
            string representation for the reference to the object <paramref name="val"/>.
            </summary>
            <param name="name">the attribute name</param>
            <param name="val">the object for which we write a string reference</param>
            <returns>a string representing a reference to that object</returns>
            <remarks>
            This converts the object reference to a string by calling
            <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlWriter.MakeShared(System.Object)"/>
            and then writes the attribute by calling
            <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlWriter.WriteAttrVal(System.String,System.String)"/>.
            </remarks>
            <seealso cref="M:Northwoods.Go.Xml.GoXmlTransformer.WriteAttrVal(System.String,System.String)"/>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.WriteAttrVal(System.String,System.String)">
            <summary>
            Write an attribute of the name <paramref name="name"/> with a
            string representation for the value <paramref name="val"/>.
            </summary>
            <param name="name">the attribute name, or null to just convert the value to a string and return it</param>
            <param name="val">the value to write</param>
            <returns>the value converted to a string</returns>
            <remarks>
            This writes the attribute by calling <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlWriter.WriteAttrVal(System.String,System.String)"/>.
            </remarks>
            <seealso cref="M:Northwoods.Go.Xml.GoXmlWriter.WriteAttrVal(System.String,System.String)"/>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.WriteAttrVal(System.String,System.Int32)">
            <summary>
            Write an attribute of the name <paramref name="name"/> with a
            string representation for the value <paramref name="val"/>.
            </summary>
            <param name="name">the attribute name, or null to just convert the value to a string and return it</param>
            <param name="val">the value to write</param>
            <returns>the value converted to a string</returns>
            <remarks>
            <para>
            This converts the object reference to a string and then writes the attribute by calling
            <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlWriter.WriteAttrVal(System.String,System.String)"/>.
            </para>
            <para>
            You can use this method to just convert a value to a string by passing null as the attribute name.
            You can convert a string back to a value by calling <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.Int32FromString(System.String,System.Int32)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.WriteAttrVal(System.String,System.Single)">
            <summary>
            Write an attribute of the name <paramref name="name"/> with a
            string representation for the value <paramref name="val"/>.
            </summary>
            <param name="name">the attribute name, or null to just convert the value to a string and return it</param>
            <param name="val">the value to write</param>
            <returns>the value converted to a string</returns>
            <remarks>
            <para>
            This converts the object reference to a string and then writes the attribute by calling
            <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlWriter.WriteAttrVal(System.String,System.String)"/>.
            </para>
            <para>
            You can use this method to just convert a value to a string by passing null as the attribute name.
            You can convert a string back to a value by calling <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.SingleFromString(System.String,System.Single)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.WriteAttrVal(System.String,System.Boolean)">
            <summary>
            Write an attribute of the name <paramref name="name"/> with a
            string representation for the value <paramref name="val"/>.
            </summary>
            <param name="name">the attribute name, or null to just convert the value to a string and return it</param>
            <param name="val">the value to write</param>
            <returns>the value converted to a string</returns>
            <remarks>
            <para>
            This converts the object reference to a string and then writes the attribute by calling
            <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlWriter.WriteAttrVal(System.String,System.String)"/>.
            </para>
            <para>
            You can use this method to just convert a value to a string by passing null as the attribute name.
            You can convert a string back to a value by calling <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.BooleanFromString(System.String,System.Boolean)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.WriteAttrVal(System.String,System.Drawing.PointF)">
            <summary>
            Write an attribute of the name <paramref name="name"/> with a
            string representation for the value <paramref name="val"/>.
            </summary>
            <param name="name">the attribute name, or null to just convert the value to a string and return it</param>
            <param name="val">the value to write</param>
            <returns>the value converted to a string</returns>
            <remarks>
            <para>
            This converts the object reference to a string and then writes the attribute by calling
            <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlWriter.WriteAttrVal(System.String,System.String)"/>.
            </para>
            <para>
            You can use this method to just convert a value to a string by passing null as the attribute name.
            You can convert a string back to a value by calling <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.PointFFromString(System.String,System.Drawing.PointF)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.WriteAttrVal(System.String,System.Drawing.SizeF)">
            <summary>
            Write an attribute of the name <paramref name="name"/> with a
            string representation for the value <paramref name="val"/>.
            </summary>
            <param name="name">the attribute name, or null to just convert the value to a string and return it</param>
            <param name="val">the value to write</param>
            <returns>the value converted to a string</returns>
            <remarks>
            <para>
            This converts the object reference to a string and then writes the attribute by calling
            <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlWriter.WriteAttrVal(System.String,System.String)"/>.
            </para>
            <para>
            You can use this method to just convert a value to a string by passing null as the attribute name.
            You can convert a string back to a value by calling <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.SizeFFromString(System.String,System.Drawing.SizeF)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.WriteAttrVal(System.String,System.Drawing.RectangleF)">
            <summary>
            Write an attribute of the name <paramref name="name"/> with a
            string representation for the value <paramref name="val"/>.
            </summary>
            <param name="name">the attribute name, or null to just convert the value to a string and return it</param>
            <param name="val">the value to write</param>
            <returns>the value converted to a string</returns>
            <remarks>
            <para>
            This converts the object reference to a string and then writes the attribute by calling
            <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlWriter.WriteAttrVal(System.String,System.String)"/>.
            </para>
            <para>
            You can use this method to just convert a value to a string by passing null as the attribute name.
            You can convert a string back to a value by calling <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.RectangleFFromString(System.String,System.Drawing.RectangleF)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.WriteAttrVal(System.String,System.Drawing.Color)">
            <summary>
            Write an attribute of the name <paramref name="name"/> with a
            string representation for the value <paramref name="val"/>.
            </summary>
            <param name="name">the attribute name, or null to just convert the value to a string and return it</param>
            <param name="val">the value to write</param>
            <returns>the value converted to a string</returns>
            <remarks>
            <para>
            This converts the object reference to a string and then writes the attribute by calling
            <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlWriter.WriteAttrVal(System.String,System.String)"/>.
            </para>
            <para>
            You can use this method to just convert a value to a string by passing null as the attribute name.
            You can convert a string back to a value by calling <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.ColorFromString(System.String,System.Drawing.Color)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.WriteAttrVal(System.String,System.Type)">
            <summary>
            Write an attribute of the name <paramref name="name"/> with a
            string representation for the value <paramref name="val"/>.
            </summary>
            <param name="name">the attribute name, or null to just convert the value to a string and return it</param>
            <param name="val">the value to write</param>
            <returns>the value converted to a string</returns>
            <remarks>
            <para>
            This converts the object reference to a string and then writes the attribute by calling
            <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlWriter.WriteAttrVal(System.String,System.String)"/>.
            </para>
            <para>
            You can use this method to just convert a value to a string by passing null as the attribute name.
            You can convert a string back to a value by calling <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.TypeFromString(System.String,System.Type)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.WriteAttrVal(System.String,System.Int32[])">
            <summary>
            Write an attribute of the name <paramref name="name"/> with a
            string representation for the value <paramref name="val"/>.
            </summary>
            <param name="name">the attribute name, or null to just convert the value to a string and return it</param>
            <param name="val">the value to write</param>
            <returns>the value converted to a string</returns>
            <remarks>
            <para>
            This converts the object reference to a string and then writes the attribute by calling
            <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlWriter.WriteAttrVal(System.String,System.String)"/>.
            </para>
            <para>
            You can use this method to just convert a value to a string by passing null as the attribute name.
            You can convert a string back to a value by calling <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.Int32ArrayFromString(System.String,System.Int32[])"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.WriteAttrVal(System.String,System.Single[])">
            <summary>
            Write an attribute of the name <paramref name="name"/> with a
            string representation for the value <paramref name="val"/>.
            </summary>
            <param name="name">the attribute name, or null to just convert the value to a string and return it</param>
            <param name="val">the value to write</param>
            <returns>the value converted to a string</returns>
            <remarks>
            <para>
            This converts the object reference to a string and then writes the attribute by calling
            <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlWriter.WriteAttrVal(System.String,System.String)"/>.
            </para>
            <para>
            You can use this method to just convert a value to a string by passing null as the attribute name.
            You can convert a string back to a value by calling <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.SingleArrayFromString(System.String,System.Single[])"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.WriteAttrVal(System.String,System.Drawing.PointF[])">
            <summary>
            Write an attribute of the name <paramref name="name"/> with a
            string representation for the value <paramref name="val"/>.
            </summary>
            <param name="name">the attribute name, or null to just convert the value to a string and return it</param>
            <param name="val">the value to write</param>
            <returns>the value converted to a string</returns>
            <remarks>
            <para>
            This converts the object reference to a string and then writes the attribute by calling
            <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlWriter.WriteAttrVal(System.String,System.String)"/>.
            </para>
            <para>
            You can use this method to just convert a value to a string by passing null as the attribute name.
            You can convert a string back to a value by calling <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.PointFArrayFromString(System.String,System.Drawing.PointF[])"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.WriteAttrVal(System.String,System.Drawing.Color[])">
            <summary>
            Write an attribute of the name <paramref name="name"/> with a
            string representation for the value <paramref name="val"/>.
            </summary>
            <param name="name">the attribute name, or null to just convert the value to a string and return it</param>
            <param name="val">the value to write</param>
            <returns>the value converted to a string</returns>
            <remarks>
            <para>
            This converts the object reference to a string and then writes the attribute by calling
            <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlWriter.WriteAttrVal(System.String,System.String)"/>.
            </para>
            <para>
            You can use this method to just convert a value to a string by passing null as the attribute name.
            You can convert a string back to a value by calling <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.ColorArrayFromString(System.String,System.Drawing.Color[])"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.ReadTextBody">
            <summary>
            Read in a string that is the body of an element.
            </summary>
            <returns></returns>
            <remarks>
            This just calls <see cref="T:Northwoods.Go.Xml.GoXmlReader"/>.<see cref="M:Northwoods.Go.Xml.GoXmlReader.ReadTextBody"/>.
            </remarks>
            <seealso cref="M:Northwoods.Go.Xml.GoXmlReader.ReadTextBody"/>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.IsAttrPresent(System.String)">
            <summary>
            This predicate returns true if the given attribute name is present
            in the current element when reading.
            </summary>
            <param name="name"></param>
            <returns></returns>
            <seealso cref="M:Northwoods.Go.Xml.GoXmlReader.ReadAttrVal(System.String)"/>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.RefAttr(System.String,System.Object)">
            <summary>
            Find a shared object referenced by a given attribute.
            </summary>
            <param name="name">the name of the attribute</param>
            <param name="def">the default value to return if the attribute is not present</param>
            <returns>
            An object found in the table of shared object, indexed by the value of the attribute.
            If the attribute's value is the string "null" or if its value is not found in the
            shared object table, this method returns null/Nothing.
            If the attribute is not present, this method returns the value of <paramref name="def"/>.
            </returns>
            <seealso cref="M:Northwoods.Go.Xml.GoXmlTransformer.StringAttr(System.String,System.String)"/>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.StringAttr(System.String,System.String)">
            <summary>
            Return an attribute's string value.
            </summary>
            <param name="name">the name of the attribute</param>
            <param name="def">the default value to return if the attribute is not present</param>
            <returns>
            The value of the attribute named by <paramref name="name"/>;
            if the attribute is not present, this method returns the value of <paramref name="def"/>.
            </returns>
            <seealso cref="M:Northwoods.Go.Xml.GoXmlReader.ReadAttrVal(System.String)"/>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.Int32Attr(System.String,System.Int32)">
            <summary>
            Read an attribute's string value as an integer.
            </summary>
            <param name="name">the name of the attribute</param>
            <param name="def">the default value to return if the attribute is not present or there is a parsing error</param>
            <returns>the result of calling <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.Int32FromString(System.String,System.Int32)"/></returns>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.Int32FromString(System.String,System.Int32)">
            <summary>
            Parse a string value as an integer.
            </summary>
            <param name="str">the string to parse</param>
            <param name="def">the default value to return if the string is null or there is a syntax or range error</param>
            <returns>
            An integer parsed from the string <paramref name="str"/>;
            if there is a parsing exception, this method returns the value of <paramref name="def"/>.
            </returns>
            <remarks>
            You can convert a value to a string by calling <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.WriteAttrVal(System.String,System.Int32)"/>
            and passing null as the first argument (the attribute name).
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.SingleAttr(System.String,System.Single)">
            <summary>
            Read an attribute's string value as a single float.
            </summary>
            <param name="name">the name of the attribute</param>
            <param name="def">the default value to return if the attribute is not present or there is a parsing error</param>
            <returns>the result of calling <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.SingleFromString(System.String,System.Single)"/></returns>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.SingleFromString(System.String,System.Single)">
            <summary>
            Parse a string value as a single float.
            </summary>
            <param name="str">the string to parse</param>
            <param name="def">the default value to return if the string is null or there is a syntax or range error</param>
            <returns>
            A single float parsed from the string <paramref name="str"/>;
            if there is a parsing exception, this method returns the value of <paramref name="def"/>.
            </returns>
            <remarks>
            You can convert a value to a string by calling <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.WriteAttrVal(System.String,System.Single)"/>
            and passing null as the first argument (the attribute name).
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.BooleanAttr(System.String,System.Boolean)">
            <summary>
            Read an attribute's string value as a boolean.
            </summary>
            <param name="name">the name of the attribute</param>
            <param name="def">the default value to return if the attribute is not present or there is a parsing error</param>
            <returns>the result of calling <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.BooleanFromString(System.String,System.Boolean)"/></returns>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.BooleanFromString(System.String,System.Boolean)">
            <summary>
            Parse a string value as a boolean.
            </summary>
            <param name="str">the string to parse</param>
            <param name="def">the default value to return if the string is null or there is a syntax or range error</param>
            <returns>
            A boolean parsed from the string <paramref name="str"/>;
            if there is a parsing exception, this method returns the value of <paramref name="def"/>.
            </returns>
            <remarks>
            You can convert a value to a string by calling <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.WriteAttrVal(System.String,System.Boolean)"/>
            and passing null as the first argument (the attribute name).
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.PointFAttr(System.String,System.Drawing.PointF)">
            <summary>
            Read an attribute's string value as a <c>PointF</c>.
            </summary>
            <param name="name">the name of the attribute</param>
            <param name="def">the default value to return if the attribute is not present or there is a parsing error</param>
            <returns>the result of calling <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.PointFFromString(System.String,System.Drawing.PointF)"/></returns>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.PointFFromString(System.String,System.Drawing.PointF)">
            <summary>
            Parse a string value as a <c>PointF</c>.
            </summary>
            <param name="str">the string to parse</param>
            <param name="def">the default value to return if the string is null or there is a syntax or range error</param>
            <returns>
            An <c>PointF</c> parsed from the string <paramref name="str"/>;
            if there is a parsing exception, this method returns the value of <paramref name="def"/>.
            </returns>
            <remarks>
            You can convert a value to a string by calling <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.WriteAttrVal(System.String,System.Drawing.PointF)"/>
            and passing null as the first argument (the attribute name).
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.SizeFAttr(System.String,System.Drawing.SizeF)">
            <summary>
            Read an attribute's string value as a <c>SizeF</c>.
            </summary>
            <param name="name">the name of the attribute</param>
            <param name="def">the default value to return if the attribute is not present or there is a parsing error</param>
            <returns>the result of calling <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.SizeFFromString(System.String,System.Drawing.SizeF)"/></returns>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.SizeFFromString(System.String,System.Drawing.SizeF)">
            <summary>
            Parse a string value as a <c>SizeF</c>.
            </summary>
            <param name="str">the string to parse</param>
            <param name="def">the default value to return if the string is null or there is a syntax or range error</param>
            <returns>
            A <c>SizeF</c> parsed from the string <paramref name="str"/>;
            if there is a parsing exception, this method returns the value of <paramref name="def"/>.
            </returns>
            <remarks>
            You can convert a value to a string by calling <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.WriteAttrVal(System.String,System.Drawing.SizeF)"/>
            and passing null as the first argument (the attribute name).
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.RectangleFAttr(System.String,System.Drawing.RectangleF)">
            <summary>
            Read an attribute's string value as a <c>RectangleF</c>.
            </summary>
            <param name="name">the name of the attribute</param>
            <param name="def">the default value to return if the attribute is not present or there is a parsing error</param>
            <returns>the result of calling <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.RectangleFFromString(System.String,System.Drawing.RectangleF)"/></returns>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.RectangleFFromString(System.String,System.Drawing.RectangleF)">
            <summary>
            Parse a string value as a <c>RectangleF</c>.
            </summary>
            <param name="str">the string to parse</param>
            <param name="def">the default value to return if the string is null or there is a syntax or range error</param>
            <returns>
            A <c>RectangleF</c> parsed from the string <paramref name="str"/>;
            if there is a parsing exception, this method returns the value of <paramref name="def"/>.
            </returns>
            <remarks>
            You can convert a value to a string by calling <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.WriteAttrVal(System.String,System.Drawing.RectangleF)"/>
            and passing null as the first argument (the attribute name).
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.ColorAttr(System.String,System.Drawing.Color)">
            <summary>
            Read an attribute's string value as a <c>Color</c>.
            </summary>
            <param name="name">the name of the attribute</param>
            <param name="def">the default value to return if the attribute is not present or there is a parsing error</param>
            <returns>the result of calling <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.ColorFromString(System.String,System.Drawing.Color)"/></returns>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.ColorFromString(System.String,System.Drawing.Color)">
            <summary>
            Parse a string value as a <c>Color</c> value.
            </summary>
            <param name="str">the string to parse</param>
            <param name="def">the default value to return if the string is null or there is a syntax or range error</param>
            <returns>
            A <c>Color</c> parsed from the string <paramref name="str"/>;
            if there is a parsing exception, this method returns the value of <paramref name="def"/>.
            </returns>
            <remarks>
            You can convert a value to a string by calling <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.WriteAttrVal(System.String,System.Drawing.Color)"/>
            and passing null as the first argument (the attribute name).
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.TypeAttr(System.String,System.Type)">
            <summary>
            Read an attribute's string value as a <c>Type</c>.
            </summary>
            <param name="name">the name of the attribute</param>
            <param name="def">the default value to return if the attribute is not present or there is a parsing error</param>
            <returns>the result of calling <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.TypeFromString(System.String,System.Type)"/></returns>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.TypeFromString(System.String,System.Type)">
            <summary>
            Parse a string value as a <c>Type</c>.
            </summary>
            <param name="str">the string to parse</param>
            <param name="def">the default value to return if the string is null or there is a syntax or range error</param>
            <returns>
            A <c>Type</c> parsed from the string <paramref name="str"/>;
            if there is a parsing exception, this method returns the value of <paramref name="def"/>.
            </returns>
            <remarks>
            You can convert a value to a string by calling <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.WriteAttrVal(System.String,System.Type)"/>
            and passing null as the first argument (the attribute name).
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.Int32ArrayAttr(System.String,System.Int32[])">
            <summary>
            Read an attribute's string value as an array of integers.
            </summary>
            <param name="name">the name of the attribute</param>
            <param name="def">the default value to return if the attribute is not present or there is a parsing error</param>
            <returns>the result of calling <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.Int32ArrayFromString(System.String,System.Int32[])"/></returns>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.Int32ArrayFromString(System.String,System.Int32[])">
            <summary>
            Parse a string value as an array of integers.
            </summary>
            <param name="str">the string to parse</param>
            <param name="def">the default value to return if the string is null or there is a syntax or range error</param>
            <returns>
            An array of integers parsed from the string <paramref name="str"/>;
            if there is a parsing exception, this method returns the value of <paramref name="def"/>.
            </returns>
            <remarks>
            You can convert a value to a string by calling <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.WriteAttrVal(System.String,System.Int32[])"/>
            and passing null as the first argument (the attribute name).
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.SingleArrayAttr(System.String,System.Single[])">
            <summary>
            Read an attribute's string value as an array of single floats.
            </summary>
            <param name="name">the name of the attribute</param>
            <param name="def">the default value to return if the attribute is not present or there is a parsing error</param>
            <returns>the result of calling <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.SingleArrayFromString(System.String,System.Single[])"/></returns>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.SingleArrayFromString(System.String,System.Single[])">
            <summary>
            Parse a string value as an array of single floats.
            </summary>
            <param name="str">the string to parse</param>
            <param name="def">the default value to return if the string is null or there is a syntax or range error</param>
            <returns>
            An array of single floats parsed from the string <paramref name="str"/>;
            if there is a parsing exception, this method returns the value of <paramref name="def"/>.
            </returns>
            <remarks>
            You can convert a value to a string by calling <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.WriteAttrVal(System.String,System.Single[])"/>
            and passing null as the first argument (the attribute name).
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.PointFArrayAttr(System.String,System.Drawing.PointF[])">
            <summary>
            Read an attribute's string value as an array of <c>PointF</c>.
            </summary>
            <param name="name">the name of the attribute</param>
            <param name="def">the default value to return if the attribute is not present or there is a parsing error</param>
            <returns>the result of calling <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.PointFArrayFromString(System.String,System.Drawing.PointF[])"/></returns>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.PointFArrayFromString(System.String,System.Drawing.PointF[])">
            <summary>
            Parse a string value as an array of <c>PointF</c>.
            </summary>
            <param name="str">the string to parse</param>
            <param name="def">the default value to return if the string is null or there is a syntax or range error</param>
            <returns>
            An array of <c>PointF</c>s parsed from the string <paramref name="str"/>;
            if there is a parsing exception, this method returns the value of <paramref name="def"/>.
            </returns>
            <remarks>
            You can convert a value to a string by calling <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.WriteAttrVal(System.String,System.Drawing.PointF[])"/>
            and passing null as the first argument (the attribute name).
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.ColorArrayAttr(System.String,System.Drawing.Color[])">
            <summary>
            Read an attribute's string value as an array of color values.
            </summary>
            <param name="name">the name of the attribute</param>
            <param name="def">the default value to return if the attribute is not present or there is a parsing error</param>
            <returns>the result of calling <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.ColorArrayFromString(System.String,System.Drawing.Color[])"/></returns>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlTransformer.ColorArrayFromString(System.String,System.Drawing.Color[])">
            <summary>
            Parse a string value as an array of color values.
            </summary>
            <param name="str">the string to parse</param>
            <param name="def">the default value to return if the string is null or there is a syntax or range error</param>
            <returns>
            An array of colors parsed from the string <paramref name="str"/>;
            if there is a parsing exception, this method returns the value of <paramref name="def"/>.
            </returns>
            <remarks>
            You can convert a value to a string by calling <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.WriteAttrVal(System.String,System.Drawing.Color[])"/>
            and passing null as the first argument (the attribute name).
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlTransformer.Writer">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/> that is using this transformer.
            </summary>
            <value>This must be non-null when this transformer is being used for writing.</value>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlTransformer.Reader">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.Xml.GoXmlReader"/> that is using this transformer.
            </summary>
            <value>This must be non-null when this transformer is being used for reading.</value>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlTransformer.ElementName">
            <summary>
            Gets or sets the name of the principal element used to render this object.
            </summary>
            <value>
            The name should be a local name -- it should not have any prefix and colon embedded in it.
            </value>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlTransformer.TransformerType">
            <summary>
            Returns the <c>Type</c> for which these transformer methods apply.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlTransformer.IdAttributeUsedForSharedObjects">
            <summary>
            Gets or sets whether this transformer reads/writes the "id" attribute
            using the identifier associated with shared objects.
            </summary>
            <value>The initial value is false.</value>
            <remarks>
            Setting this property to true will cause <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.GenerateDefinitions(System.Object)"/>
            to call <see cref="M:Northwoods.Go.Xml.GoXmlWriter.MakeShared(System.Object)"/> in order to associate an
            identifier with the object, and it will cause
            <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.GenerateAttributes(System.Object)"/> to write out an "id" attribute whose
            value is that identifier, as returned by <see cref="M:Northwoods.Go.Xml.GoXmlWriter.FindShared(System.Object)"/>.
            When reading, <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.ConsumeAttributes(System.Object)"/> will look at the value of
            the "id" attribute of the current element and (if present) will call
            <see cref="M:Northwoods.Go.Xml.GoXmlReader.MakeShared(System.String,System.Object)"/> to associate that identifier with
            the object.  Your reading code can then call <see cref="M:Northwoods.Go.Xml.GoXmlReader.FindShared(System.String)"/>
            to try to resolve an identifier into a reference.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlTransformer.GeneratesPortsAsChildElements">
            <summary>
            Gets or sets whether this transformer writes child elements
            representing ports (<c>IGoPort</c>), if this transformer is operating on an <c>IGoNode</c>.
            </summary>
            <value>The initial value is false.</value>
            <remarks>
            <para>
            Setting this property to true will cause <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.GenerateDefinitions(System.Object)"/>
            to enumerate all of the <c>IGoPort</c>s for the given <c>IGoNode</c> (assuming
            the argument object indeed implements <c>IGoNode</c>) and call
            <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlWriter.DefineObject(System.Object)"/> on each port.
            A true value will also cause <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.GenerateBody(System.Object)"/> to enumerate all the ports
            and call <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateObject(System.Object)"/> on each one.
            </para>
            <para>
            Note that this property only affects generation.  Typically you
            will also want to set <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.BodyConsumesChildElements"/> to true
            and override <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.ConsumeChild(System.Object,System.Object)"/> to add the port to be a child of
            this parent node.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlTransformer.BodyConsumesChildElements">
            <summary>
            Gets or sets whether <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.ConsumeBody(System.Object)"/> should iterate over all of
            the child elements of this XML node, calling <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeObject"/>
            for each one, and passing the result to <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.ConsumeChild(System.Object,System.Object)"/>.
            </summary>
            <value>The initial value is false.</value>
            <remarks>
            <para>
            See the documentation for <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.ConsumeBody(System.Object)"/> and <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.ConsumeChild(System.Object,System.Object)"/>.
            </para>
            <para>
            Note that this property only affects consumption.  Typically if you
            are working with a simple (non-subgraph) node that contains some ports,
            you will also want to set the <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.GeneratesPortsAsChildElements"/>
            property to true and make sure a transformer is registered for the port
            type(s), so that child elements are generated for the ports.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlTransformer.InheritsFromTransformer">
            <summary>
            Gets or sets a transformer from which this transformer will inherit implementation
            of the <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/> methods.
            </summary>
            <value>this defaults to null</value>
            <remarks>
            <para>
            Normally when you want to extend the behavior of a <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/> or
            a <see cref="T:Northwoods.Go.Xml.GoXmlReader"/>, you define your own transformer inheriting from
            <see cref="T:Northwoods.Go.Xml.GoXmlTransformer"/> and add it to the writer and/or the reader.
            You can do this for additional <c>Type</c>s, or you can replace the transformer
            for a <c>Type</c>.
            </para>
            <para>
            Sometimes you would like to modify the behavior of a transformer but for some reason
            you are unable to inherit from that <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/>-implementing class.
            This property makes it easier to insert additional functionality into an existing
            <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/> by replacing a particular <c>Type</c>'s transformer with
            your own transformer that does some stuff and then delegates the rest of the
            implementation to the old transformer that had been registered for that <c>Type</c>.
            </para>
            <para>
            For example, imagine that you are using a <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>
            such as <c>GoSvgWriter</c> that already
            knows how to handle many <c>Type</c>s, but you want to add some attributes and
            some elements to what is generated for that <c>Type</c>.  If you cannot easily
            define your own transformer class inheriting from the <c>Type</c>'s existing 
            transformer class, you could do something such as the following to add information
            to each generated SVG element for <c>GoSubGraph</c>s.
            <code>
            public class ExtraSubGraphTransformer : GoSvgGenerator {
              public ExtraSubGraphTransformer() { this.TransformerType = typeof(GoSubGraph); }
              public override void GenerateAttributes(Object obj) {
                WriteAttrVal("extra", "attribute");
                base.GenerateAttributes(obj);
              }
              public override void GenerateBody(Object obj) {
                WriteStartElement("extra");
                WriteTextBody("element");
                WriteEndElement();
                base.GenerateBody(obj);
              }
            }
            </code>
            Then where you initialize the <c>GoSvgWriter</c>, you can replace the transformer
            for <c>GoSubGraph</c> with your own transformer that also makes use of the old one.
            <code>
              GoSvgWriter w = new GoSvgWriter();
              ExtraSubGraphTransformer egt = new ExtraSubGraphTransformer();
              egt.InheritsFromTransformer = w.GetTransformer(typeof(GoSubGraph));
              w.SetTransformer(typeof(GoSubGraph), egt);
              . . . more initialization and use of the writer
            </code>
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlTransformer.XmlWriter">
            <summary>
            Get the <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.Writer"/>'s <see cref="P:Northwoods.Go.Xml.GoXmlWriter.XmlWriter"/>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlTransformer.XmlTextWriter">
            <summary>
            This obsolete property exists for compatibility with older versions.
            </summary>
            <value>
            <c>this.Writer.XmlWriter as XmlTextWriter</c>
            </value>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlTransformer.XmlReader">
            <summary>
            Get the <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.Reader"/>'s <see cref="P:Northwoods.Go.Xml.GoXmlReader.XmlReader"/>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlTransformer.XmlTextReader">
            <summary>
            This obsolete property exists for compatibility with older versions.
            </summary>
            <value>
            <c>this.Reader.XmlReader as XmlTextReader</c>
            </value>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlTransformer.XmlDocument">
            <summary>
            Get the <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.Reader"/>'s or the <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.Writer"/>'s <see cref="P:Northwoods.Go.Xml.GoXmlReader.XmlDocument"/>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlTransformer.ReaderNode">
            <summary>
            Get the <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.Reader"/>'s <see cref="P:Northwoods.Go.Xml.GoXmlReader.ReaderNode"/>, an <c>XmlNode</c>.
            </summary>
            <remarks>
            This value is undefined (and should be null) when writing, or when reading
            and either <see cref="P:Northwoods.Go.Xml.GoXmlReader.UseDOM"/> is false or the consuming process
            is not at a point where there would be an <c>XmlNode</c> that is being consumed.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlTransformer.WriterElement">
            <summary>
            Get the <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.Writer"/>'s <see cref="P:Northwoods.Go.Xml.GoXmlWriter.WriterElement"/>, an <c>XmlElement</c>.
            </summary>
            <remarks>
            This value is undefined (and should be null) when reading, or when writing
            directly to a stream or when the generation process is not at a point where
            there would be an <c>XmlElement</c> that is being constructed.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlBindingTransformer.#ctor(System.Object)">
            <summary>
            Create a <c>GoXmlBindingTransformer</c> with a
            <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.TransformerType"/> that is the Type of the
            given <see cref="T:Northwoods.Go.GoObject"/> or <c>ICloneable</c> <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.Prototype"/>,
            and with an <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.ElementName"/> that is that Type's Name.
            </summary>
            <param name="proto"></param>
            <seealso cref="M:Northwoods.Go.Xml.GoXmlBindingTransformer.#ctor(System.String,System.Object)"/>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlBindingTransformer.#ctor(System.String,System.Object)">
            <summary>
            Create a <c>GoXmlBindingTransformer</c> with a given <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.ElementName"/>
            and a given <see cref="T:Northwoods.Go.GoObject"/> or <c>ICloneable</c> <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.Prototype"/>,
            whose Type is the <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.TransformerType"/>.
            </summary>
            <param name="eltname"></param>
            <param name="proto"></param>
            <remarks>
            <para>
            There is a special use of <c>GoXmlBindingTransformer</c> when it applies
            to a <see cref="T:Northwoods.Go.GoDocument"/> that is the root.
            If the prototype object is a <see cref="T:Northwoods.Go.GoDocument"/> and if it is the value of
            <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="P:Northwoods.Go.Xml.GoXmlWriter.Objects"/>,
            this transformer's <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.ElementName"/> is used
            as the <see cref="P:Northwoods.Go.Xml.GoXmlWriter.RootElementName"/>,
            and <see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateRootAttributes"/> will call this transformer's
            <see cref="M:Northwoods.Go.Xml.GoXmlBindingTransformer.GenerateAttributes(System.Object)"/> method.
            If the prototype object is a <see cref="T:Northwoods.Go.GoDocument"/> and if an instance of it is the value of
            <see cref="T:Northwoods.Go.Xml.GoXmlReader"/>.<see cref="P:Northwoods.Go.Xml.GoXmlReader.RootObject"/>,
            <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeRootAttributes(System.Object)"/> will call this transformer's
            <see cref="M:Northwoods.Go.Xml.GoXmlBindingTransformer.ConsumeAttributes(System.Object)"/> method.
            This permits the use of this binding mechanism for binding root attributes
            with <see cref="T:Northwoods.Go.GoDocument"/> properties.
            </para>
            <para>
            However, reading such a document will not make a copy of the <see cref="T:Northwoods.Go.GoDocument"/> prototype.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlBindingTransformer.AddBinding(System.String,System.String,Northwoods.Go.Xml.GoXmlBindingFlags)">
            <summary>
            Associate an attribute on this transformer's element with a property value on
            this transformer's type of object.
            </summary>
            <param name="attrname">an XML attribute name</param>
            <param name="proppath">a .NET property name, or a sequence of properties separated by periods</param>
            <param name="flags"><see cref="T:Northwoods.Go.Xml.GoXmlBindingFlags"/> flags describing the nature of the binding</param>
            <remarks>
            <para>
            See <see cref="M:Northwoods.Go.Xml.GoXmlBindingTransformer.AddBinding(System.String,System.String)"/> for examples.
            </para>
            <para>
            This override also allow you to specify that this attribute, during consumption,
            defines the identifier by which a reference object may be referred to.
            The referred-to object is typically a child <see cref="T:Northwoods.Go.GoObject"/> of a <see cref="T:Northwoods.Go.GoGroup"/>.
            For example, if you add a <see cref="T:Northwoods.Go.GoPort"/> to your custom <see cref="T:Northwoods.Go.GoNode"/> class,
            but do not want to have a separate XML element defining and describing that port, you will
            still need to generate the identifier for that port so that links will be able to
            find that port.  If your node class defines a property that refers to your extra port,
            you can call this method to make sure the identifier is written for the port and that
            reading this attribute will make sure that node's port is given that identifier.
            <code>transformer.AddBinding("xport", "SpecialPort", GoXmlBindingFlags.DefinesShared)</code>
            </para>
            <para>
            The order in which bindings are added determines the order in which properties are set
            when the attributes are consumed.  Since setting some properties, such as the text string
            for a label, may modify the position or the location of a node, you should add the
            binding for a node's position or location last.
            </para>
            <para>
            Setting the <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.HandlesNamedPorts"/> property is similar to defining a shared
            attribute property path for each of the ports on a node that has a name, as returned by
            <see cref="M:Northwoods.Go.GoGroup.FindName(Northwoods.Go.GoObject)"/>.
            </para>
            <para>
            As special cases, there are two property names that provide special behavior.
            For the <see cref="T:Northwoods.Go.GoStroke"/>, <see cref="T:Northwoods.Go.GoLabeledLink"/>, <see cref="T:Northwoods.Go.GoPolygon"/>,
            and <see cref="T:Northwoods.Go.GoDrawing"/> classes, you can bind to the "Points" property
            in order to get or set the array of points used to define those shapes.
            The "Points" property is not treated specially for objects of any other type.
            </para>
            <para>
            Also as a special case for node classes, the "TreeParentNode" property binding is handled as a reference
            to another node, where the other node is considered to be the "parent" node in a tree-structured diagram.
            This supports the definition of XML that only has elements for nodes, with an implicit link from a
            "parent" node to the node whose element includes the attribute corresponding to the "TreeParentNode" property.
            The <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.TreeLinkPrototype"/> property of this transformer provides a link that is copied when
            consuming such an element.  The "TreeParentNode" property is not treated specially for
            objects that are not instances of <c>IGoNode</c>.
            </para>
            </remarks>
            <seealso cref="M:Northwoods.Go.Xml.GoXmlBindingTransformer.AddBinding(System.String,System.String)"/>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlBindingTransformer.AddBinding(System.String,System.String)">
            <summary>
            Associate an attribute on this transformer's element with a property value on
            this transformer's type of object.
            </summary>
            <param name="attrname">an XML attribute name</param>
            <param name="proppath">a .NET property name, or a sequence of properties separated by periods</param>
            <remarks>
            <para>
            <code>transformer.AddBinding("label", "Text")</code>
            will generate a "label" attribute whose value is the value of the "Text" property
            on the object being generated.  When the element is consumed, the "Text" property
            of the newly copied object will be set to the value of the "label" attribute.
            </para>
            <para>
            This mechanism can handle all of the data types for which there are predefined methods
            in <see cref="T:Northwoods.Go.Xml.GoXmlTransformer"/> to read and write attribute values.  For example, if
            the data type of the property is <c>Color</c>, it will read the attribute using the
            <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.ColorAttr(System.String,System.Drawing.Color)"/> method and will write the attribute using the
            <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.WriteAttrVal(System.String,System.Drawing.Color)"/> method.
            </para>
            <para>
            To support access to properties that are not defined on the transformer's
            <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.TransformerType"/> Type, the <paramref name="proppath"/> can be a "path"
            of properties, separated by periods.  For example:
            <code>transformer.AddBinding("img", "Image.Name")</code>
            where the <see cref="T:Northwoods.Go.Xml.GoXmlBindingTransformer"/> is defined for a <see cref="T:Northwoods.Go.GoIconicNode"/>,
            will read and write the value of the <c>GoIconicNode.Image.Name</c> property.
            </para>
            <para>
            As special cases, there are two property names that provide special behavior.
            For the <see cref="T:Northwoods.Go.GoStroke"/>, <see cref="T:Northwoods.Go.GoLabeledLink"/>, <see cref="T:Northwoods.Go.GoPolygon"/>,
            and <see cref="T:Northwoods.Go.GoDrawing"/> classes, you can bind to the "Points" property
            in order to get or set the array of points used to define those shapes.
            The "Points" property is not treated specially for objects of any other type.
            </para>
            <para>
            Also as a special case for node classes, the "TreeParentNode" property binding is handled as a reference
            to another node, where the other node is considered to be the "parent" node in a tree-structured diagram.
            This supports the definition of XML that only has elements for nodes, with an implicit link from a
            "parent" node to the node whose element includes the attribute corresponding to the "TreeParentNode" property.
            The <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.TreeLinkPrototype"/> property of this transformer provides a link that is copied when
            consuming such an element.  The "TreeParentNode" property is not treated specially for
            objects that are not instances of <c>IGoNode</c>.
            </para>
            <para>
            This mechanism has special code to handle <c>Brush</c>es and <c>Pen</c>s,
            because those types must not be modified.  Instead, they are cloned, the property
            is set, and then the brush or pen property is set on the shape object.
            However, in most cases, you should bind to the <see cref="T:Northwoods.Go.GoShape"/>.<see cref="P:Northwoods.Go.GoShape.BrushColor"/>
            and perhaps other <c>GoShape.Brush...</c> properties, and to the <see cref="P:Northwoods.Go.GoShape.PenColor"/>
            and <see cref="P:Northwoods.Go.GoShape.PenWidth"/> properties, since those properties can handle the cases
            when there is no <see cref="P:Northwoods.Go.GoShape.Brush"/> or <see cref="P:Northwoods.Go.GoShape.Pen"/> value.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlBindingTransformer.AddBinding(System.String)">
            <summary>
            Associate an attribute on this transformer's element with the same named property value on
            this transformer's type of object.
            </summary>
            <param name="prop">a property name, without periods, that will also be the attribute name</param>
            <remarks>
            This just calls <see cref="M:Northwoods.Go.Xml.GoXmlBindingTransformer.AddBinding(System.String,System.String)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlBindingTransformer.GenerateElement(System.Object)">
            <summary>
            When the <see cref="P:Northwoods.Go.Xml.GoXmlReaderWriterBase.ParentObject"/>'s <see cref="T:Northwoods.Go.Xml.GoXmlBindingTransformer"/>'s
            <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.HandlesChildAttributes"/> property is true, call <see cref="M:Northwoods.Go.Xml.GoXmlBindingTransformer.GenerateChildAttributes(System.Object,System.Object,Northwoods.Go.Xml.GoXmlBindingTransformer)"/> on
            that parent class's transformer to allow it to add attributes to the new element.
            </summary>
            <param name="obj"></param>
            <returns>the result of the call to the base method</returns>
            <remarks>
            This calls <see cref="M:Northwoods.Go.Xml.GoXmlBindingTransformer.GenerateChildAttributes(System.Object,System.Object,Northwoods.Go.Xml.GoXmlBindingTransformer)"/> only when the base call to
            <see cref="M:Northwoods.Go.Xml.GoXmlBindingTransformer.GenerateElement(System.Object)"/> returned true.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlBindingTransformer.GenerateAttributes(System.Object)">
            <summary>
            This calls <see cref="M:Northwoods.Go.Xml.GoXmlBindingTransformer.GeneratePortReferences(System.Object)"/> (if <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.HandlesNamedPorts"/> is true)
            and <see cref="M:Northwoods.Go.Xml.GoXmlBindingTransformer.GenerateAttributeProperties(System.Object)"/>.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlBindingTransformer.GenerateAttributeProperties(System.Object)">
            <summary>
            Generate attributes defined by <see cref="M:Northwoods.Go.Xml.GoXmlBindingTransformer.AddBinding(System.String,System.String)"/>.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlBindingTransformer.GeneratePortReferences(System.Object)">
            <summary>
            Write attribute values that are references to named ports on the node <paramref name="obj"/>.
            </summary>
            <param name="obj"></param>
            <remarks>
            This is called by <see cref="M:Northwoods.Go.Xml.GoXmlBindingTransformer.GenerateAttributes(System.Object)"/> when <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.HandlesNamedPorts"/> is true.
            This method does nothing for <paramref name="obj"/> objects that are not instances of <see cref="T:Northwoods.Go.GoGroup"/>.
            For each <see cref="T:Northwoods.Go.GoPort"/> that is an immediate child object of the node,
            it calls <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.WriteAttrRef(System.String,System.Object)"/> to write an attribute
            whose name is the group child name for the port and whose value is a reference identifier.
            These port identifiers are not at all related to an <see cref="T:Northwoods.Go.IGoIdentifiablePart"/>.<see cref="P:Northwoods.Go.IGoIdentifiablePart.PartID"/>.
            All attributes defined by <see cref="M:Northwoods.Go.Xml.GoXmlBindingTransformer.AddBinding(System.String,System.String)"/> or
            otherwise generated by <see cref="M:Northwoods.Go.Xml.GoXmlBindingTransformer.GenerateAttributes(System.Object)"/> must not duplicate any port names.
            </remarks>
            <seealso cref="M:Northwoods.Go.Xml.GoXmlBindingTransformer.ConsumePortReferences(System.Object)"/>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlBindingTransformer.GenerateDefinitions(System.Object)">
            <summary>
            This calls <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlWriter.DefineObject(System.Object)"/>
            for child objects (if <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.HandlesChildren"/> is true) or for
            logical-child nodes (if <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.TreeStructured"/> is true).
            </summary>
            <param name="obj"></param>
            <remarks>
            Whether this considers the <see cref="P:Northwoods.Go.IGoNode.Destinations"/> nodes or the
            <see cref="P:Northwoods.Go.IGoNode.Sources"/> nodes depends on the value of <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.TreeLinksToChildren"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlBindingTransformer.GenerateBody(System.Object)">
            <summary>
            This calls <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateObject(System.Object)"/>
            for child objects (if <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.HandlesChildren"/> is true) or for
            logical-child nodes (if <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.TreeStructured"/> is true).
            </summary>
            <param name="obj"></param>
            <remarks>
            Whether this considers the <see cref="P:Northwoods.Go.IGoNode.Destinations"/> nodes or the
            <see cref="P:Northwoods.Go.IGoNode.Sources"/> nodes depends on the value of <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.TreeLinksToChildren"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlBindingTransformer.ConsumeChild(System.Object,System.Object)">
            <summary>
            This handles nested XML elements when <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.HandlesChildren"/> or
            <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.TreeStructured"/> are true.
            </summary>
            <param name="parent"></param>
            <param name="child"></param>
            <remarks>
            <para>
            When <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.HandlesChildren"/> or <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.GeneratesPortsAsChildElements"/> is true,
            and when the <paramref name="parent"/> is a <see cref="T:Northwoods.Go.GoGroup"/> and
            the <paramref name="child"/> is a <see cref="T:Northwoods.Go.GoObject"/>,
            this will add the child object to the group.
            </para>
            <para>
            To support some flexibility to allow the <see cref="T:Northwoods.Go.GoGroup"/> be a property
            of the <paramref name="parent"/> object instead of requiring the <paramref name="parent"/>
            to be the <see cref="T:Northwoods.Go.GoGroup"/> itself, the child <see cref="T:Northwoods.Go.GoObject"/> is added to the
            <paramref name="parent"/>'s <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.ChildrenCollectionPath"/> property,
            if that value is a <see cref="T:Northwoods.Go.GoGroup"/>.
            </para>
            <para>
            When <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.TreeStructured"/> is true the XML element in the body
            produces a separate node that is connected by a link to this node.
            Both the <paramref name="parent"/> and the <paramref name="child"/>
            are assumed to implement <see cref="T:Northwoods.Go.IGoNode"/>.
            This method makes a copy of <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.TreeLinkPrototype"/>.
            It finds the port that is the <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.TreeParentNodePortPath"/>
            property on the <paramref name="parent"/> node, and it finds the port
            that is the <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.TreeChildNodePortPath"/> property on the
            <paramref name="child"/> node.
            Then it sets the <see cref="T:Northwoods.Go.IGoLink"/>.<see cref="P:Northwoods.Go.IGoLink.FromPort"/>
            and <see cref="P:Northwoods.Go.IGoLink.ToPort"/> properties of the new link to those
            ports.  If <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.TreeLinksToChildren"/> is true, the
            <see cref="P:Northwoods.Go.IGoLink.FromPort"/> is assigned the <paramref name="parent"/>'s port,
            and the <see cref="P:Northwoods.Go.IGoLink.ToPort"/> is assigned the <paramref name="child"/>'s port.
            If <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.TreeLinksToChildren"/> is false, the ports are exchanged so
            that the link goes in the opposite direction.
            The child node and the link are then added to the
            <see cref="T:Northwoods.Go.Xml.GoXmlReader"/>.<see cref="P:Northwoods.Go.Xml.GoXmlReader.RootObject"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlBindingTransformer.Allocate">
            <summary>
            Construct an object for this element by making a copy of the <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.Prototype"/>.
            </summary>
            <returns>a copy of the value of <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.Prototype"/></returns>
            <remarks>
            If the <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.Prototype"/> is a <see cref="T:Northwoods.Go.GoObject"/> or a <see cref="T:Northwoods.Go.GoDocument"/>,
            this returns the value of <see cref="M:Northwoods.Go.GoObject.Copy"/>.
            If the <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.Prototype"/> implements the <c>ICloneable</c> interface,
            this returns the value of <c>Clone()</c>.
            Otherwise this raises an exception.
            When a copy is made, and when the <see cref="P:Northwoods.Go.Xml.GoXmlReaderWriterBase.ParentObject"/>'s <see cref="T:Northwoods.Go.Xml.GoXmlBindingTransformer"/>'s
            <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.HandlesChildAttributes"/> property is true, this calls <see cref="M:Northwoods.Go.Xml.GoXmlBindingTransformer.ConsumeChildAttributes(System.Object,System.Object,Northwoods.Go.Xml.GoXmlBindingTransformer)"/> on
            that parent class's transformer to allow it to consume attributes of this current element.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlBindingTransformer.ConsumeAttributes(System.Object)">
            <summary>
            This calls <see cref="M:Northwoods.Go.Xml.GoXmlBindingTransformer.ConsumePortReferences(System.Object)"/> (if <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.HandlesNamedPorts"/> is true),
            and <see cref="M:Northwoods.Go.Xml.GoXmlBindingTransformer.ConsumeAttributeProperties(System.Object)"/>.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlBindingTransformer.ConsumeAttributeProperties(System.Object)">
            <summary>
            Consume attributes defined by <see cref="M:Northwoods.Go.Xml.GoXmlBindingTransformer.AddBinding(System.String,System.String)"/>
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlBindingTransformer.ConsumePortReferences(System.Object)">
            <summary>
            Read attribute values that are references to named ports on the node <paramref name="obj"/>.
            </summary>
            <param name="obj"></param>
            <remarks>
            This is called by <see cref="M:Northwoods.Go.Xml.GoXmlBindingTransformer.ConsumeAttributes(System.Object)"/> when <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.HandlesNamedPorts"/> is true.
            This method does nothing for <paramref name="obj"/> objects that are not instances of <see cref="T:Northwoods.Go.GoGroup"/>.
            For each <see cref="T:Northwoods.Go.GoPort"/> that is an immediate child object of the node,
            and that has a group child name,
            it calls <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.StringAttr(System.String,System.String)"/> to read an identifier
            for that port.
            If the identifier is a non-empty string, it calls
            <see cref="T:Northwoods.Go.Xml.GoXmlReader"/>.<see cref="M:Northwoods.Go.Xml.GoXmlReader.MakeShared(System.String,System.Object)"/>
            to define the ID for that port.
            These port identifiers are not at all related to an <see cref="T:Northwoods.Go.IGoIdentifiablePart"/>.<see cref="P:Northwoods.Go.IGoIdentifiablePart.PartID"/>.
            If the identifier is an empty string, the port will not get a shared
            identifier, so it will not be able to be found by other attributes/properties
            that refer to it, but the port remains on the node.
            If the attribute is not present in the element, the port is removed from the node.
            </remarks>
            <seealso cref="M:Northwoods.Go.Xml.GoXmlBindingTransformer.GeneratePortReferences(System.Object)"/>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlBindingTransformer.UpdateReference(System.Object,System.String,System.Object)">
            <summary>
            Fix up references to objects that did not yet exist when the attribute was read.
            </summary>
            <param name="obj">the object with a property that could not be set before, because the referred-to object was not available</param>
            <param name="proppath">a property path registered with a call to <see cref="M:Northwoods.Go.Xml.GoXmlBindingTransformer.AddBinding(System.String,System.String)"/></param>
            <param name="referred">the resolved object reference</param>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlBindingTransformer.GenerateChildAttributes(System.Object,System.Object,Northwoods.Go.Xml.GoXmlBindingTransformer)">
            <summary>
            This is called on the <paramref name="parent"/>'s <see cref="T:Northwoods.Go.Xml.GoXmlBindingTransformer"/>
            for each <paramref name="child"/> object, when <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.HandlesChildren"/> and
            <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.HandlesChildAttributes"/> are true,
            to allow a parent object to add attributes to each child element.
            </summary>
            <param name="parent"></param>
            <param name="child"></param>
            <param name="childtransformer">the <see cref="T:Northwoods.Go.Xml.GoXmlBindingTransformer"/> being used to write the <paramref name="child"/> object</param>
            <remarks>
            <para>
            For example, this can be used to help generate a dictionary that maps key values
            to child objects by writing a "key" attribute value on each child object.
            This could also be used to store a "value" attribute value on each child object,
            assuming the child object itself is the key in the dictionary.
            </para>
            <para>
            By default this does nothing, unless <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.HandlesSubGraphCollapsedChildren"/>
            and <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.HandlesChildAttributes"/> are both true and this <paramref name="parent"/> is
            a <see cref="T:Northwoods.Go.GoSubGraph"/> and the <paramref name="child"/> is a <see cref="T:Northwoods.Go.GoObject"/>.
            If those conditions are true, this will write out saved bounds or saved path
            information for each child object if the subgraph is not expanded.
            </para>
            <para>
            Here is an example transformer for <see cref="T:Northwoods.Go.GoSubGraph"/>:
            </para>
            <code>
            GoSubGraph sg = new GoSubGraph();
            ... do subgraph initialization ...
            GoXmlBindingTransformer st = new GoXmlBindingTransformer("subgraph", sg);
            st.HandlesNamedPorts = true;
            // generates children and consumes them by adding to the subgraph
            st.HandlesChildren = true;
            // make sure reading/writing each child calls the Generate/ConsumeChildAttributes methods
            st.HandlesChildAttributes = true;
            // actually read/write SavedBounds and SavedPath attributes on children, when collapsed
            st.HandlesSubGraphCollapsedChildren = true;
            st.AddBinding("back", "BackgroundColor");
            st.AddBinding("opacity", "Opacity");
            st.AddBinding("border", "BorderPen.Color");
            st.AddBinding("borderwidth", "BorderPen.Width");
            st.AddBinding("loc", "Location");
            // SavedBounds, and SavedPaths if collapsed on each child, handled by Generate/ConsumeChildAttributes
            // define these AFTER defining Location binding
            st.AddBinding("wasexpanded", "WasExpanded");
            st.AddBinding("expanded", "IsExpanded");
            readerorwriter.AddTransformer(st);
            </code>
            </remarks>
            <seealso cref="M:Northwoods.Go.Xml.GoXmlBindingTransformer.ConsumeChildAttributes(System.Object,System.Object,Northwoods.Go.Xml.GoXmlBindingTransformer)"/>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlBindingTransformer.ConsumeChildAttributes(System.Object,System.Object,Northwoods.Go.Xml.GoXmlBindingTransformer)">
            <summary>
            This is called on the <paramref name="parent"/>'s <see cref="T:Northwoods.Go.Xml.GoXmlBindingTransformer"/>
            for each <paramref name="child"/> object, when <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.HandlesChildren"/> and
            <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.HandlesChildAttributes"/> are true,
            to allow a parent object to read attributes of each child element.
            </summary>
            <param name="parent"></param>
            <param name="child"></param>
            <param name="childtransformer">the <see cref="T:Northwoods.Go.Xml.GoXmlBindingTransformer"/> being used to read the <paramref name="child"/> object</param>
            <remarks>
            <para>
            For example, this can be used to reconstruct a dictionary mapping key values
            to child objects when the key values are attributes on each child element.
            This could also be used to store a "value" attribute value on each child object,
            assuming the child object itself is the key in the dictionary.
            </para>
            <para>
            By default this does nothing, unless <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.HandlesSubGraphCollapsedChildren"/>
            and <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.HandlesChildAttributes"/> are both true and this <paramref name="parent"/> is
            a <see cref="T:Northwoods.Go.GoSubGraph"/> and the <paramref name="child"/> is a <see cref="T:Northwoods.Go.GoObject"/>.
            If those conditions are true, this will read in saved bounds or saved path
            information for each child object if the subgraph is not expanded.
            </para>
            </remarks>
            <seealso cref="M:Northwoods.Go.Xml.GoXmlBindingTransformer.GenerateChildAttributes(System.Object,System.Object,Northwoods.Go.Xml.GoXmlBindingTransformer)"/>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlBindingTransformer.Prototype">
            <summary>
            Gets or sets the object which will be copied and initialized
            when consuming an XML element with this transformer.
            </summary>
            <value>
            The value should either be a <c>GoObject</c> or <c>GoDocument</c> or implement <c>ICloneable</c>.
            This will be set in the constructor, and should not be
            replaced during generation or consumption.
            When the prototype is a <see cref="T:Northwoods.Go.GoDocument"/> and is the root,
            this transformer is used in a special manner to support binding document
            properties to root attributes.
            The documentation for <see cref="M:Northwoods.Go.Xml.GoXmlBindingTransformer.#ctor(System.String,System.Object)"/> provides more details.
            </value>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlBindingTransformer.HandlesNamedPorts">
            <summary>
            Gets or sets whether the identifiers for named ports should
            be attributes on this element.
            </summary>
            <value>
            The default is false.  This may be set to true for those transformers whose objects contain ports.
            </value>
            <remarks>
            <para>
            This is commonly set to true for node types that predefine a
            fixed set of ports, when it is not desired to represent
            information about each port besides the identifier.
            Thus it is natural to set this property to true for types such
            as <c>GoBasicNode</c>, <c>GoIconicNode</c>, <c>GoTextNode</c>,
            and <c>GoSimpleNode</c>.
            </para>
            <para>
            See also the description for <see cref="M:Northwoods.Go.Xml.GoXmlBindingTransformer.AddBinding(System.String,System.String,Northwoods.Go.Xml.GoXmlBindingFlags)"/>.
            </para>
            <para>
            Note that this does not produce nested XML elements, unlike <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.HandlesChildren"/>.
            </para>
            <para>
            These port identifiers are not at all related to an <see cref="T:Northwoods.Go.IGoIdentifiablePart"/>.<see cref="P:Northwoods.Go.IGoIdentifiablePart.PartID"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlBindingTransformer.HandlesChildren">
            <summary>
            Gets or sets whether there are child objects of this <see cref="T:Northwoods.Go.GoGroup"/> that should be
            represented as nested XML elements in the body of this transformer's element.
            </summary>
            <value>
            This defaults to false.
            </value>
            <remarks>
            <para>
            If you are defining a transformer for a <see cref="T:Northwoods.Go.GoSubGraphBase"/>-inheriting class,
            you'll want to set this to true.
            </para>
            <para>
            Setting this to true also automatically sets <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.BodyConsumesChildElements"/> to true.
            </para>
            <para>
            You may find that nested elements are being generated for child objects for which you do
            not want separate XML elements.  This may happen, for example, when you define a transformer
            for the <see cref="T:Northwoods.Go.GoText"/> class and for a node class that has a predefined label as
            well as a variable number of additional <see cref="T:Northwoods.Go.GoText"/> children.
            You have at least two choices.
            </para>
            <para>
            One choice is to replace all of those non-label <see cref="T:Northwoods.Go.GoText"/> child objects with
            instances of some class that inherits from <see cref="T:Northwoods.Go.GoText"/>.  Because transformers are
            defined per type, this is an easy way to discriminate between the usages of text objects.
            Your transformer should then be defined for your custom class inheriting from <see cref="T:Northwoods.Go.GoText"/>,
            instead of for <see cref="T:Northwoods.Go.GoText"/> itself.
            </para>
            <para>
            The other choice is to make the transformer for <see cref="T:Northwoods.Go.GoText"/> smarter.
            Use a transformer inheriting from <see cref="T:Northwoods.Go.Xml.GoXmlBindingTransformer"/> and override the
            <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.SkipGeneration(System.Object)"/> method to return true when the text object
            is actually a label handled as a node attribute, and to return false when the text object
            is supposed to be represented as a separate nested XML element.
            </para>
            </remarks>
            <seealso cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.ChildrenCollectionPath"/>
            <seealso cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.HandlesChildAttributes"/>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlBindingTransformer.ChildrenCollectionPath">
            <summary>
            Gets or sets the property path to find the <see cref="T:Northwoods.Go.GoGroup"/> holding the
            child objects corresponding to nested elements when <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.HandlesChildren"/> is true.
            </summary>
            <value>
            This defaults to the empty string, "", meaning that this transformer's object
            is the <see cref="T:Northwoods.Go.GoGroup"/> containing the child objects to be generated or consumed as nested XML elements.
            </value>
            <remarks>
            For some complicated node classes, the group that is actually supposed to hold a
            varying collection of objects is not the node itself but a child or grandchild of the
            node.  It is common for such a group to actually be a <c>GoListGroup</c> or something similar.
            This property just specifies a path from the transformer's object to that group.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlBindingTransformer.HandlesChildAttributes">
            <summary>
            Gets or sets whether this transformer gets to read or write attributes on elements in the body of this element.
            </summary>
            <value>
            This defaults to false.
            </value>
            <remarks>
            <para>
            This is usually set to true only when <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.HandlesChildren"/> is also set to true.
            When this is true, <see cref="M:Northwoods.Go.Xml.GoXmlBindingTransformer.GenerateChildAttributes(System.Object,System.Object,Northwoods.Go.Xml.GoXmlBindingTransformer)"/> and <see cref="M:Northwoods.Go.Xml.GoXmlBindingTransformer.ConsumeChildAttributes(System.Object,System.Object,Northwoods.Go.Xml.GoXmlBindingTransformer)"/>
            will be called for each child object of this transformer's (parent) object.
            </para>
            <para>
            This property is infrequently used; but it is very handy when you want a "parent" object to
            associate attribute values with each "child" object, but those attributes are not properties
            on the "child" object.  The only pre-defined use of this property is to help save bounds or path
            information for each node or link inside a collapsed subgraph.
            </para>
            </remarks>
            <seealso cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.HandlesSubGraphCollapsedChildren"/>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlBindingTransformer.HandlesSubGraphCollapsedChildren">
            <summary>
            Gets or sets whether <see cref="M:Northwoods.Go.Xml.GoXmlBindingTransformer.GenerateChildAttributes(System.Object,System.Object,Northwoods.Go.Xml.GoXmlBindingTransformer)"/> and <see cref="M:Northwoods.Go.Xml.GoXmlBindingTransformer.ConsumeChildAttributes(System.Object,System.Object,Northwoods.Go.Xml.GoXmlBindingTransformer)"/>
            handle collapsed <see cref="T:Northwoods.Go.GoSubGraph"/>s information about the saved relative bounds or
            saved paths of subgraph child <see cref="T:Northwoods.Go.GoObject"/>s.
            </summary>
            <value>
            This defaults to false, and is only effective when
            <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.HandlesChildAttributes"/> and <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.HandlesChildren"/> are both true.
            </value>
            <remarks>
            You will probably want to set this to true for the transformer defined for your
            <see cref="T:Northwoods.Go.GoSubGraph"/> class.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlBindingTransformer.TreeStructured">
            <summary>
            Gets or sets whether nested XML elements are treated as logical child nodes
            connected by links, rather than being structural parts of nodes like subgraphs.
            </summary>
            <value>
            The default is false.  This may be set to true for those transformers that represent nodes.
            </value>
            <remarks>
            <para>
            When this property is true, the XML will typically look like:
            <code>
            &lt;node id="0" label="Root" loc="71 190"&gt;
              &lt;node id="1" label="A1" loc="182 74" /&gt;
              &lt;node id="2" label="A2" loc="186 276"&gt;
                &lt;node id="3" label="B1" loc="272 236"&gt;
                  &lt;node id="4" label="C1" loc="346 292"&gt;
                    &lt;node id="5" label="D1" loc="445 259" /&gt;
                    &lt;node id="6" label="D2" loc="448 348" /&gt;
                  &lt;/node&gt;
                &lt;/node&gt;
                &lt;node id="7" label="B2" loc="287 358" /&gt;
              &lt;/node&gt;
            &lt;/node&gt;
            </code>
            </para>
            <para>
            When this property is true, it does not make sense to have an attribute/property
            binding using the special property named "TreeParentNode".  The "parent"
            of any node is implicit in the XML structure, so no node reference is necessary.
            </para>
            <para>
            Setting this to true also automatically sets <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.BodyConsumesChildElements"/> to true.
            </para>
            <para>
            Caution: when generating XML, be sure that the collection that you assign to the
            <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<see cref="P:Northwoods.Go.Xml.GoXmlWriter.Objects"/> property only contains
            the root nodes of the trees.  If the collection contains a child node as well as
            the root node, the XML element with nested elements will be generated in duplicate
            for that child node as well as for the whole tree starting at the root node.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlBindingTransformer.TreeParentNodePortPath">
            <summary>
            Gets or sets the property path to find the port on a logical parent node
            to which a copy of <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.TreeLinkPrototype"/> will be connected,
            when <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.TreeStructured"/> is true or when using the "TreeParentNode" property binding.
            </summary>
            <value>
            This defaults to "Port", which should work for most node classes
            that are defined to have a single port.
            </value>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlBindingTransformer.TreeChildNodePortPath">
            <summary>
            Gets or sets the property path to find the port on a logical child node
            to which a copy of <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.TreeLinkPrototype"/> will be connected,
            when <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.TreeStructured"/> is true or when using the "TreeParentNode" property binding.
            </summary>
            <value>
            This defaults to "Port", which should work for most node classes
            that are defined to have a single port.
            </value>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlBindingTransformer.TreeLinkPrototype">
            <summary>
            Gets or sets an instance of a link that is copied to connect all
            new nodes in the constructed diagram,
            when <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.TreeStructured"/> is true or when using the "TreeParentNode" property binding.
            </summary>
            <value>
            The default value is null.
            This must be set when <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.TreeStructured"/> is true or when using the "TreeParentNode" property binding.
            </value>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlBindingTransformer.TreeLinksToChildren">
            <summary>
            Gets or sets whether newly created links should connect from
            logical parent nodes to logical child nodes,
            when <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.TreeStructured"/> is true or when using the "TreeParentNode" property binding.
            </summary>
            <value>
            The default value is true.  A false value will connect links in the opposite direction.
            </value>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlBindingTransformer.TracingEnabled">
            <summary>
            Gets or sets whether to write information to trace listeners
            when tring to read or write properties that do not exist on a given object.
            </summary>
            <value>
            The default is false: when generating XML, nonexisting properties cause the
            attribute not to be written; when consuming XML, an attribute will be ignored
            if the property cannot be set.
            </value>
            <remarks>
            Since .NET Compact Framework does not support trace listeners,
            this property has no effect in GoDiagram Pocket.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlBindingTransformer.DefaultTracingEnabled">
            <summary>
            Gets or sets a shared/static variable that provides the default value
            for <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.TracingEnabled"/> for newly created <see cref="T:Northwoods.Go.Xml.GoXmlBindingTransformer"/>s.
            </summary>
            <value>
            The default value is false.  Setting this property does not modify the
            value of <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.TracingEnabled"/> for any existing <see cref="T:Northwoods.Go.Xml.GoXmlBindingTransformer"/>.
            </value>
        </member>
        <member name="T:Northwoods.Go.Xml.GoXmlSimpleData">
             <summary>
             Use this abstract class to implement temporary data structures representing
             collections of properties that do not exist in your actual <see cref="T:Northwoods.Go.GoObject"/> classes,
             in conjunction with <see cref="T:Northwoods.Go.Xml.GoXmlBindingTransformer"/>s.
             </summary>
             <remarks>
             <para>
             This abstract class does not define any properties, so there will not
             be any property name conflicts with any properties that you want to define.
             </para>
             </remarks>
             <example>
             <para>
             The <see cref="T:Northwoods.Go.GoMultiTextNode"/> class holds a variable number of items, along with
             corresponding ports for each item.  It would be natural to represent such a node in XML
             by having a fixed set of attributes corresponding to node properties, and then a collection
             of nested elements describing each of the items and their ports.
             </para>
             <para>
             However, the <see cref="T:Northwoods.Go.GoMultiTextNode"/> class is not organized such that there is a
             collection of objects (<see cref="T:Northwoods.Go.GoGroup"/>s) that are holding an item and its ports.
             Instead an item has the same <see cref="P:Northwoods.Go.GoObject.Parent"/> as the item's port.
             The items and ports all belong directly to the node in one big collection.
             So there is no <see cref="T:Northwoods.Go.GoObject"/> class representing an "item" for which you could
             define a <see cref="T:Northwoods.Go.Xml.GoXmlTransformer"/>.
             </para>
             <para>
             Instead you can define an auxiliary data class that holds the information about each item.
             Here's the start of such a definition:
             </para>
             <code>
             internal class MultiTextNodeItem {  // this way requires implementing a transformer subclass
               public GoObject Item;
               public GoObject LeftPort;
               public GoObject RightPort;
             }
             </code>
             <para>
             Then one can define a transformer for <c>MultiTextNodeItem</c> and a transformer
             for <see cref="T:Northwoods.Go.GoMultiTextNode"/> that generates nested child elements for each item
             and then consumes them by creating the appropriate <see cref="T:Northwoods.Go.GoObject"/>s and
             adding them to the <see cref="T:Northwoods.Go.GoMultiTextNode"/>.
             </para>
             <para>
             However, you can avoid having to implement a transformer class
             for <c>MultiTextNodeItem</c> if you inherit from <see cref="T:Northwoods.Go.Xml.GoXmlSimpleData"/>
             and define real .NET properties for each property you want to store so that
             you can use <see cref="T:Northwoods.Go.Xml.GoXmlBindingTransformer"/>.
             </para>
             <code>
             internal class MultiTextNodeItem : GoXmlSimpleData {  // no transformer subclass needed
               public MultiTextNodeItem() { }
               public GoObject Item {
                 get { return (GoObject)Get("Item"); }
                 set { Set("Item", value); }
               }
               public GoObject LeftPort {
                 get { return (GoObject)Get("LeftPort"); }
                 set { Set("LeftPort", value); }
               }
               public GoObject RightPort {
                 get { return (GoObject)Get("RightPort"); }
                 set { Set("RightPort", value); }
               }
             }
             </code>
             <para>
             You can then define a <see cref="T:Northwoods.Go.Xml.GoXmlBindingTransformer"/> for <c>MultiTextNodeItem</c>.
             The number of attributes/properties that you decide to read/write is dependent on your
             particular application's needs, of course.  But one possibility is something like:
             </para>
             <code>
             MultiTextNodeItem item = new MultiTextNodeItem();  // represents an item as if it were a single GoObject
             GoMultiTextNode mtn = new GoMultiTextNode();
             item.Item = mtn.CreateText("", 0);
             item.LeftPort = mtn.CreatePort(true, 0);
             item.RightPort = mtn.CreatePort(false, 0);
             GoXmlBindingTransformer st = new GoXmlBindingTransformer("item", item);
             st.AddBinding("text", "Item.Text");
             st.AddBinding("sel", "Item.Selectable");
             st.AddBinding("bold", "Item.Bold");
             st.AddBinding("width", "Item.Width");
             st.AddBinding("wrap", "Item.WrappingWidth");
             st.AddBinding("LeftPort", "LeftPort", GoXmlBindingFlags.DefinesShared);
             st.AddBinding("RightPort", "RightPort", GoXmlBindingFlags.DefinesShared);
             readerorwriter.AddTransformer(st);
             </code>
             <para>
             The <see cref="T:Northwoods.Go.Xml.GoXmlBindingTransformer"/> for <see cref="T:Northwoods.Go.GoMultiTextNode"/> might be implemented as:
             </para>
             <code>
             internal class SimpleGoMultiTextNodeTransformer : GoXmlBindingTransformer {
               public SimpleGoMultiTextNodeTransformer(String eltname, GoMultiTextNode obj) : base(eltname, obj) {
                 this.IdAttributeUsedForSharedObjects = true;  // all nodes get an "id" attribute
                 this.BodyConsumesChildElements = true;  // make sure ConsumeChild gets called
                 AddBinding("ItemWidth");  // attribute name is same as property name
                 AddBinding("back", "Brush.Color");
                 AddBinding("loc", "ListGroup.Location");
                 AddBinding("TopPort", "TopPort", GoXmlBindingFlags.DefinesShared);  // write out reference for and to the TopPort
                 AddBinding("BottomPort", "BottomPort", GoXmlBindingFlags.DefinesShared);  // ibid for BottomPort
               }
            
               public override void GenerateBody(Object obj) {
                 base.GenerateBody(obj);
                 GoMultiTextNode mtn = (GoMultiTextNode)obj;
                 for (int i = 0; i &lt; mtn.ItemCount; i++) {
                   MultiTextNodeItem dummy = new MultiTextNodeItem();
                   dummy.Item = mtn.GetItem(i);
                   dummy.LeftPort = mtn.GetLeftPort(i);
                   dummy.RightPort = mtn.GetRightPort(i);
                   this.Writer.GenerateObject(dummy);
                 }
               }
            
               public override void ConsumeChild(Object parent, Object child) {
                 base.ConsumeChild(parent, child);
                 GoMultiTextNode mtn = (GoMultiTextNode)parent;
                 MultiTextNodeItem item = child as MultiTextNodeItem;
                 if (item != null) {
                   // because MultiTextNodeItem inherits from GoXmlSimpleData,
                   // the GoObject properties of item will have been copied for you already,
                   // so you can just add them to your group
                   mtn.AddItem(item.Item, item.LeftPort, item.RightPort);
                 }
               }
             }
             </code>
             <para>
             An example of the resulting XML could be:
             </para>
             <code>
             &lt;GoMultiTextNode id="30" ItemWidth="100" back="-18751" loc="36.5 379" TopPort="73" BottomPort="74"&gt;
               &lt;item text="first" sel="false" bold="true" width="100" wrap="100" LeftPort="75" RightPort="76" /&gt;
               &lt;item text="second" sel="true" bold="false" width="100" wrap="100" LeftPort="77" RightPort="78" /&gt;
               &lt;item text="third" sel="true" bold="true" width="100" wrap="100" LeftPort="79" RightPort="80" /&gt;
             &lt;/GoMultiTextNode&gt;
             </code>
             </example>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlSimpleData.Get(System.String)">
            <summary>
            Gets the value of a property, given the property name.
            </summary>
            <param name="s">the property name, must not be null or empty</param>
            <returns><c>Object</c></returns>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlSimpleData.Set(System.String,System.Object)">
            <summary>
            Sets the value of a property, given the property name.
            </summary>
            <param name="s">the property name, must not be null or empty</param>
            <param name="x"><c>Object</c></param>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlSimpleData.Clone">
            <summary>
            Creates a new instance of the <see cref="T:Northwoods.Go.Xml.GoXmlSimpleData"/>-inheriting class
            and copies all of the property values -- copying <see cref="T:Northwoods.Go.GoObject"/>s
            and cloning <c>ICloneable</c>s.
            </summary>
            <returns>an instance of this same <see cref="T:Northwoods.Go.Xml.GoXmlSimpleData"/>-inheriting type</returns>
        </member>
        <member name="T:Northwoods.Go.Xml.GoXmlReader">
            <summary>
            Read customizable XML, using class-specific <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/>s,
            using an <c>XmlDocument</c> or just an <c>XmlReader</c>.
            </summary>
            <remarks>
            <para>
            Depending on which overload of <c>Consume</c> is called, you can either
            traverse an <c>XmlDocument</c> that you supply, you can load an <c>XmlDocument</c>
            from a Stream (if <see cref="P:Northwoods.Go.Xml.GoXmlReader.UseDOM"/> is true), or you can just handle the
            elements as they are read in by an <c>XmlReader</c> from a Stream
            (if <see cref="P:Northwoods.Go.Xml.GoXmlReader.UseDOM"/> is false).
            The processing of XML elements is basically done in a single pass, but there
            is built-in functionality for a second pass to fix up references in the objects
            that were constructed.
            </para>
            <para>
            You must provide type-specific customizations by supplying instances of
            <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/>.  Each transformer is associated with a <c>Type</c>
            (<see cref="P:Northwoods.Go.Xml.IGoXmlTransformer.TransformerType"/>) and an <c>ElementName</c> string
            (<see cref="P:Northwoods.Go.Xml.IGoXmlTransformer.ElementName"/>).
            </para>
            <para>
            By default there are no transformers registered for this reader, so this
            reader is unable to actually do anything with the XML elements it sees.
            You will need to call <see cref="M:Northwoods.Go.Xml.GoXmlReaderWriterBase.AddTransformer(Northwoods.Go.Xml.IGoXmlTransformer)"/> for each class of object
            for which you want to consume XML.
            These calls to <see cref="M:Northwoods.Go.Xml.GoXmlReaderWriterBase.AddTransformer(Northwoods.Go.Xml.IGoXmlTransformer)"/> are sometimes done in an override
            of <see cref="M:Northwoods.Go.Xml.GoXmlReaderWriterBase.RegisterTransformers"/>, but you probably do not need to define
            a class inheriting from <see cref="T:Northwoods.Go.Xml.GoXmlReader"/>.
            </para>
            <para>
            <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeRootBody(System.Object)"/> does the bulk of the work to traverse the
            elements in the <c>XmlDocument</c> root, or (if <see cref="P:Northwoods.Go.Xml.GoXmlReader.UseDOM"/> is false)
            just to read elements from the <see cref="P:Northwoods.Go.Xml.GoXmlReader.XmlReader"/>.
            As this reader processes each element, it calls <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeObject"/>.
            <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeObject"/> calls <see cref="M:Northwoods.Go.Xml.GoXmlReader.InvokeAllocate"/> to actually
            allocate an object, and if an object is allocated, calls <see cref="M:Northwoods.Go.Xml.GoXmlReader.InvokeConsumeAttributes(System.Type,System.Object)"/>
            <see cref="M:Northwoods.Go.Xml.GoXmlReader.InvokeConsumeBody(System.Type,System.Object)"/>, and <see cref="M:Northwoods.Go.Xml.GoXmlReader.InvokeConsumeObjectFinish(System.Type,System.Object)"/>
            to actually reconstruct the rest of the object.
            </para>
            <para>
            Although most of the information that needs to be reconstructed will be held in
            attributes of the element representing an object, there will sometimes be references
            to other objects.  If you can be sure that the references will be to objects that
            have already been read, you can call <see cref="M:Northwoods.Go.Xml.GoXmlReader.MakeShared(System.String,System.Object)"/> to remember an object
            by a key string, and you can call <see cref="M:Northwoods.Go.Xml.GoXmlReader.FindShared(System.String)"/> to recover that object
            by using the same key.
            </para>
            <para>
            However, if the reference is to something that might not yet have been read and
            constructed, you can make use of the delayed-references mechanism that this reader offers.
            You can just call <see cref="M:Northwoods.Go.Xml.GoXmlReader.AddDelayedRef(System.Object,System.String,System.String)"/> to remember the referring object,
            the property or other identifying string of the reference in this referring object,
            and the reference string to the referred-to object.  This reference string is the
            same as the key used to identify shared objects.
            </para>
            <para>
            Then the <see cref="M:Northwoods.Go.Xml.GoXmlReader.ProcessDelayedObjects"/> method, called as a "second pass"
            after all of the elements in the XML root have been read, iterates over all of those
            delayed references, calls <see cref="M:Northwoods.Go.Xml.GoXmlReader.FindShared(System.String)"/> to resolve the reference,
            and then calls <see cref="M:Northwoods.Go.Xml.GoXmlReader.InvokeUpdateReference(System.Type,System.Object,System.String,System.Object)"/> so that the transformer
            gets a chance to fix up the reference.
            </para>
            <para>
            The various <c>Invoke...</c> methods do the actual lookup for a transformer
            and invoke the respective method on the first transformer found.
            </para>
            </remarks>
            <example>
            This reader could be used as follows:
            <code>
            public void LoadSimpleXml(String path) {
              myView.Document.Clear();  // assume we're replacing current document contents
              
              GoXmlReader xr = new GoXmlReader();
              // tell the reader how to handle two kinds of elements
              xr.AddTransformer(new SimpleXmlTransformBasicNode());
              xr.AddTransformer(new SimpleXmlTransformLink());
              xr.RootObject = myView.Document;
            
              using (StreamReader sr = new StreamReader(path)) {
                xr.Consume(sr);
              }
            }
            </code>
            See the description of <see cref="T:Northwoods.Go.Xml.GoXmlTransformer"/> for example transformer definitions.
            </example>
        </member>
        <member name="T:Northwoods.Go.Xml.GoXmlReaderWriterBase">
            <summary>
            This base class for both <see cref="T:Northwoods.Go.Xml.GoXmlReader"/> and <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>
            defines methods to manage the <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/>s that they use.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlReaderWriterBase.RegisterTransformers">
            <summary>
            This method creates instances of all of the standard <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/>s
            to be used when generating XML.
            </summary>
            <remarks>
            If you want your own reader or writer, override this method to make
            sure all of your customized transformer instances are added automatically.
            Just call <see cref="M:Northwoods.Go.Xml.GoXmlReaderWriterBase.AddTransformer(Northwoods.Go.Xml.IGoXmlTransformer)"/> with new instances
            of all of the transformers for the kinds of <c>GoObject</c>s
            that you want to handle.
            By default this method does not register any transformers.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlReaderWriterBase.AddTransformer(Northwoods.Go.Xml.IGoXmlTransformer)">
            <summary>
            Cause this XML writer to use the given <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/> for
            objects of the type given by the transformer's <see cref="P:Northwoods.Go.Xml.IGoXmlTransformer.TransformerType"/>.
            </summary>
            <param name="g">an <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/></param>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlReaderWriterBase.SetTransformer(System.Type,Northwoods.Go.Xml.IGoXmlTransformer)">
            <summary>
            Cause this XML writer to use the given <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/> for
            objects of the type given by <paramref name="t"/>.
            </summary>
            <param name="t">a <c>Type</c> representing a class; must not be null</param>
            <param name="g">
            an <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/>;
            if null, removes any existing transformer for the type <paramref name="t"/>
            </param>
            <remarks>
            Although it's most common to use <see cref="M:Northwoods.Go.Xml.GoXmlReaderWriterBase.AddTransformer(Northwoods.Go.Xml.IGoXmlTransformer)"/> to register
            an <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/> for a class Type, if you want to share
            the same transformer for multiple Types, you can do so using this method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlReaderWriterBase.GetTransformer(System.Type)">
            <summary>
            Returns the <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/> associated with a given type.
            </summary>
            <param name="t">a <c>Type</c>, or null if <paramref name="t"/> is null</param>
            <returns>
            a <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/>, or null if none is specified
            for the exact <c>Type</c> <paramref name="t"/>
            </returns>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlReaderWriterBase.FindTransformer(System.Type)">
            <summary>
            Returns the first <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/> associated with a given type or its base types.
            </summary>
            <param name="t">a <c>Type</c>, or null if <paramref name="t"/> is null</param>
            <returns>
            a <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/>, or null if the type and none of its
            base <c>Type</c>s have a transformer associated with it, as returned by
            calls to <see cref="M:Northwoods.Go.Xml.GoXmlReaderWriterBase.GetTransformer(System.Type)"/>
            </returns>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlReaderWriterBase.ObjectStack">
            <summary>
            Gets an <c>ArrayList</c> acting as a stack of Objects that have been created
            during the walking of the XML tree during <c>Consume</c>, or that have been seen
            during <c>Generate</c>.
            </summary>
            <remarks>
            <para>
            During a <see cref="T:Northwoods.Go.Xml.GoXmlReader"/>.<c>Consume</c>,
            the bottom object, at index zero, will be the result of <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeRootElement"/>.
            <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeObject"/> will push the result of <see cref="M:Northwoods.Go.Xml.GoXmlReader.InvokeAllocate"/>
            onto this stack just before calling <see cref="M:Northwoods.Go.Xml.GoXmlReader.InvokeConsumeBody(System.Type,System.Object)"/>,
            and then pop it off immediately afterwards.
            Hence during the processing of an element's body,
            i.e. during calls to <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/>.<see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.ConsumeBody(System.Object)"/>,
            the value of <see cref="P:Northwoods.Go.Xml.GoXmlReaderWriterBase.ParentObject"/> will be that parent element.
            Access to the whole stack of objects may be needed for establishing the
            context in which objects should be searched for, created, or modified.
            For example, when reading an element representing a node that has nested
            elements representing parts of the node, such as ports, the transformer for
            ports may need to implement <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.Allocate"/> to return
            an existing port of the node, rather than blindly allocating a new one that
            would conflict with the existing port.
            </para>
            <para>
            During a <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.<c>Generate</c>,
            the bottom object, at index zero, will be the value of <see cref="P:Northwoods.Go.Xml.GoXmlWriter.Objects"/>.
            <see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateObject(System.Object)"/> will push the argument <c>Object</c>
            onto this stack just before calling <see cref="M:Northwoods.Go.Xml.GoXmlWriter.InvokeGenerateBody(System.Type,System.Object)"/>,
            and the pop it off immediately afterwards.
            Hence during the processing of an element's body,
            i.e. during calls to <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/>.<see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.GenerateBody(System.Object)"/>,
            the value of <see cref="P:Northwoods.Go.Xml.GoXmlReaderWriterBase.ParentObject"/> will be that "parent" object.
            Access to the whole stack of objects may be needed for establishing the
            context in which objects should generated, or to permit communication between the
            transformers for those objects.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlReaderWriterBase.ParentObject">
            <summary>
            Gets the current parent object when consuming or generating the body of an element.
            </summary>
            <value>This is just the top Object on the <see cref="P:Northwoods.Go.Xml.GoXmlReaderWriterBase.ObjectStack"/>, or null if the stack is empty.</value>
            <remarks>
            This property is useful when nested calls to <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.Allocate"/> (and
            <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.ConsumeAttributes(System.Object)"/>) need to look at the parent object
            to decide whether an existing child object should be returned instead of allocating a new one.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlReaderWriterBase.GrandParentObject">
            <summary>
            Gets the parent object of the current parent object when consuming or generating the body of an element.
            </summary>
            <value>This is the Object just under the top one on the <see cref="P:Northwoods.Go.Xml.GoXmlReaderWriterBase.ObjectStack"/>,
            or null if the stack is empty or has only one object in it.</value>
            <remarks>
            This property is useful when nested calls to <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.Allocate"/> (and
            <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.ConsumeAttributes(System.Object)"/>) need to look at the parent object of the parent object
            to decide whether an existing (grand-)child object should be returned instead of allocating a new one.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlReaderWriterBase.UserObject">
            <summary>
            Gets or sets an object holding additional information for use by your application;
            this property is not used by GoXml.
            </summary>
            <value>initially null</value>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlReader.#ctor">
            <summary>
            Create a reader with a set of <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/>s defined.
            </summary>
            <remarks>
            This just calls <see cref="M:Northwoods.Go.Xml.GoXmlReaderWriterBase.RegisterTransformers"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlReader.FindShared(System.String)">
            <summary>
            Look up a shared object in a hashtable by identifier.
            </summary>
            <param name="key">a String</param>
            <returns>an object, or null if not found or if <paramref name="key"/> is null</returns>
            <remarks>
            If <paramref name="key"/> is null, this method returns null.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlReader.MakeShared(System.String,System.Object)">
            <summary>
            Remember an object in a hashtable, using a particular identifier name.
            </summary>
            <param name="key">a String name</param>
            <param name="val">some object</param>
            <remarks>
            If <paramref name="key"/> is null, this method does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlReader.ClearAllShareds">
            <summary>
            Remove all objects from the table of shared objects.
            </summary>
            <remarks>
            This also resets the IDs returned by calls to <see cref="M:Northwoods.Go.Xml.GoXmlReader.MakeShared(System.String,System.Object)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlReader.AddDelayedRef(System.Object,System.String,System.String)">
            <summary>
            Remember an object, one of its properties, and the string representation
            of a reference to another object.
            </summary>
            <param name="val">
            The object that contains an unresolved reference
            </param>
            <param name="prop">
            a <c>String</c> that the names the property or somehow identifies which
            reference in the object given by <paramref name="val"/> needs to be
            updated with the correct reference in an implementation of
            <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.UpdateReference(System.Object,System.String,System.Object)"/>
            </param>
            <param name="refstr">
            a <c>String</c> that holds information needed to resolve the reference
            in an implementation of <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.UpdateReference(System.Object,System.String,System.Object)"/>;
            normally this is an ID returned by <see cref="M:Northwoods.Go.Xml.GoXmlReader.FindShared(System.String)"/>
            </param>
            <remarks>
            <see cref="M:Northwoods.Go.Xml.GoXmlReader.ProcessDelayedObjects"/> uses this stored information
            to fix up references.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlReader.ClearAllDelayeds">
            <summary>
            Remove all entries from the table of delayed references.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlReader.SetXmlReader(System.Xml.XmlReader)">
            <summary>
            Only a subclass of a <see cref="T:Northwoods.Go.Xml.GoXmlReader"/> can provide a
            value for the <see cref="P:Northwoods.Go.Xml.GoXmlReader.XmlReader"/> property.
            </summary>
            <param name="w">an <c>XmlReader</c> initialized at the
            start of <see cref="M:Northwoods.Go.Xml.GoXmlReader.Consume(System.Xml.XmlReader)"/>, or set to null at the end of 
            <see cref="M:Northwoods.Go.Xml.GoXmlReader.Consume(System.Xml.XmlReader)"/> or <see cref="M:Northwoods.Go.Xml.GoXmlReader.LoadDOM"/> after closing the <c>XmlReader</c></param>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlReader.SetXmlDocument(System.Xml.XmlDocument)">
            <summary>
            Only a subclass of a <see cref="T:Northwoods.Go.Xml.GoXmlReader"/> can provide a value
            for the DOM.
            </summary>
            <param name="d">an <c>XmlDocument</c> loaded from the <see cref="P:Northwoods.Go.Xml.GoXmlReader.XmlReader"/>
            by <see cref="M:Northwoods.Go.Xml.GoXmlReader.LoadDOM"/> if <see cref="P:Northwoods.Go.Xml.GoXmlReader.UseDOM"/> is true</param>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlReader.Consume(System.IO.Stream)">
            <summary>
            Start an <see cref="P:Northwoods.Go.Xml.GoXmlReader.XmlReader"/> and consume XML.
            </summary>
            <param name="source">a <c>Stream</c></param>
            <returns>
            an object that represents the whole document, as returned by <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeRootElement"/>
            </returns>
            <remarks>
            <para>
            This does some initialization, creates a <c>XmlReader</c>,
            calls <see cref="M:Northwoods.Go.Xml.GoXmlReader.LoadDOM"/> to perhaps create a <c>XmlDocument</c>.
            Then it calls, in order, <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeInstructions"/>,
            <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeRootElement"/>, <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeRootAttributes(System.Object)"/>,
            <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeRootBody(System.Object)"/>, <see cref="M:Northwoods.Go.Xml.GoXmlReader.ProcessDelayedObjects"/>.
            Note that if <see cref="P:Northwoods.Go.Xml.GoXmlReader.UseDOM"/> is true, the whole DOM is loaded
            by <see cref="M:Northwoods.Go.Xml.GoXmlReader.LoadDOM"/> and the <see cref="P:Northwoods.Go.Xml.GoXmlReader.XmlReader"/> will be null.
            </para>
            <para>
            In .NET 2.0 this calls <c>XmlReader.Create</c> with the value of
            <c>this.XmlReaderSettings</c>.
            In .NET 1.x this just creates an <c>XmlTextReader</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlReader.Consume(System.IO.TextReader)">
            <summary>
            Start an <see cref="P:Northwoods.Go.Xml.GoXmlReader.XmlReader"/> and consume XML.
            </summary>
            <param name="source">a <c>TextReader</c></param>
            <returns>
            an object that represents the whole document, as returned by <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeRootElement"/>
            </returns>
            <remarks>
            <para>
            This does some initialization, creates a <c>XmlReader</c>,
            calls <see cref="M:Northwoods.Go.Xml.GoXmlReader.LoadDOM"/> to perhaps create a <c>XmlDocument</c>.
            Then it calls, in order, <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeInstructions"/>,
            <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeRootElement"/>, <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeRootAttributes(System.Object)"/>,
            <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeRootBody(System.Object)"/>, <see cref="M:Northwoods.Go.Xml.GoXmlReader.ProcessDelayedObjects"/>.
            Note that if <see cref="P:Northwoods.Go.Xml.GoXmlReader.UseDOM"/> is true, the whole DOM is loaded
            by <see cref="M:Northwoods.Go.Xml.GoXmlReader.LoadDOM"/> and the <see cref="P:Northwoods.Go.Xml.GoXmlReader.XmlReader"/> will be null.
            </para>
            <para>
            In .NET 2.0 this calls <c>XmlReader.Create</c> with the value of
            <c>this.XmlReaderSettings</c>.
            In .NET 1.x this just creates an <c>XmlTextReader</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlReader.Consume(System.Xml.XmlReader)">
            <summary>
            Consume XML from an <see cref="P:Northwoods.Go.Xml.GoXmlReader.XmlReader"/>.
            </summary>
            <param name="source">an <c>XmlReader</c></param>
            <returns>
            an object that represents the whole document, as returned by <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeRootElement"/>
            </returns>
            <remarks>
            This does some initialization,
            calls <see cref="M:Northwoods.Go.Xml.GoXmlReader.LoadDOM"/> to perhaps create a <c>XmlDocument</c>.
            Then it calls, in order, <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeInstructions"/>,
            <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeRootElement"/>, <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeRootAttributes(System.Object)"/>,
            <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeRootBody(System.Object)"/>, <see cref="M:Northwoods.Go.Xml.GoXmlReader.ProcessDelayedObjects"/>.
            Note that if <see cref="P:Northwoods.Go.Xml.GoXmlReader.UseDOM"/> is true, the whole DOM is loaded
            by <see cref="M:Northwoods.Go.Xml.GoXmlReader.LoadDOM"/> and the <see cref="P:Northwoods.Go.Xml.GoXmlReader.XmlReader"/> will be null.
            You probably do not need to override this method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlReader.Consume(System.Xml.XmlDocument)">
            <summary>
            Consume an <c>XmlDocument</c>
            </summary>
            <param name="doc">an <c>XmlDocument</c></param>
            <returns>
            an object that represents the whole document, as returned by <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeRootElement"/>
            </returns>
            <remarks>
            After some initialization, this calls, in order, <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeInstructions"/>,
            <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeRootElement"/>, <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeRootAttributes(System.Object)"/>,
            <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeRootBody(System.Object)"/>, and <see cref="M:Northwoods.Go.Xml.GoXmlReader.ProcessDelayedObjects"/>.
            This does not use a <c>XmlReader</c> or call <see cref="M:Northwoods.Go.Xml.GoXmlReader.LoadDOM"/>,
            since an <c>XmlDocument</c> is supplied.
            <see cref="P:Northwoods.Go.Xml.GoXmlReader.UseDOM"/> is set to true.
            You probably do not need to override this method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlReader.Initialize">
            <summary>
            Do the initialization needed by <see cref="M:Northwoods.Go.Xml.GoXmlReader.Consume(System.Xml.XmlReader)"/>
            and <see cref="M:Northwoods.Go.Xml.GoXmlReader.Consume(System.Xml.XmlDocument)"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlReader.LoadDOM">
            <summary>
            This method constructs and loads an <c>XmlDocument</c>
            from the <see cref="P:Northwoods.Go.Xml.GoXmlReader.XmlReader"/> if <see cref="P:Northwoods.Go.Xml.GoXmlReader.UseDOM"/>
            is true.
            </summary>
            <remarks>
            If this does load a <c>XmlDocument</c> from the <see cref="P:Northwoods.Go.Xml.GoXmlReader.XmlReader"/>,
            it sets the <see cref="P:Northwoods.Go.Xml.GoXmlReader.XmlReader"/> property to null afterwards,
            and sets the <see cref="P:Northwoods.Go.Xml.GoXmlReader.XmlDocument"/> property to that new <c>XmlDocument</c>.
            You probably do not need to override this method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlReader.ConsumeInstructions">
            <summary>
            Consume XML instructions before the root element.
            </summary>
            <remarks>
            By default this does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlReader.ConsumeRootElement">
            <summary>
            Start the root element.
            </summary>
            <returns>
            <para>
            The data structure representing the whole document body.
            If <see cref="P:Northwoods.Go.Xml.GoXmlReader.RootObject"/> is non-null, it returns that.
            If the current element name is associated with a <see cref="T:Northwoods.Go.Xml.GoXmlBindingTransformer"/>
            and that transformer's <see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.Prototype"/> is a
            <see cref="T:Northwoods.Go.GoDocument"/>, this returns a copy of that <see cref="T:Northwoods.Go.GoDocument"/>.
            Otherwise this returns an empty <c>ArrayList</c>.
            </para>
            </returns>
            <remarks>
            <para>
            You could override this to return a particular collection or
            collection-like object, such as a <c>GoDocument</c> or a <c>GoCollection</c>.
            If you return a different kind of root object, you may need to override
            <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeRootAttributes(System.Object)"/> and <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeRootBody(System.Object)"/>
            to handle initializing and adding new objects to your root object.
            </para>
            <para>
            The <see cref="P:Northwoods.Go.Xml.GoXmlReader.RootObject"/> property is set to the value of this method.
            All <c>Consume</c> methods will return this value, after having reset
            the <see cref="P:Northwoods.Go.Xml.GoXmlReader.RootObject"/> property to null.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlReader.ConsumeRootAttributes(System.Object)">
            <summary>
            Consume attributes for the root element.
            </summary>
            <param name="obj">the data structure representing the whole document body,
            the result of a call to <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeRootElement"/></param>
            <returns>
            The data structure representing the whole document body.
            </returns>
            <remarks>
            By default this does nothing but return its argument.
            However, if <see cref="P:Northwoods.Go.Xml.GoXmlReader.RootObject"/> is a <see cref="T:Northwoods.Go.GoDocument"/>,
            and if there is a <see cref="T:Northwoods.Go.Xml.GoXmlBindingTransformer"/> registered for that <c>GoDocument</c> type,
            this calls <see cref="M:Northwoods.Go.Xml.GoXmlBindingTransformer.ConsumeAttributes(System.Object)"/> on that transformer,
            passing it the <see cref="T:Northwoods.Go.GoDocument"/>.
            This provides an easy-to-define mechanism for binding document properties with root element attributes.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlReader.ConsumeRootBody(System.Object)">
            <summary>
            Call <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeObject"/> for each element found in the root element.
            </summary>
            <param name="obj">the data structure representing the whole document body,
            the result of a call to <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeRootAttributes(System.Object)"/></param>
            <remarks>
            The default implementation assumes <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeRootElement"/>
            returns either an <c>IList</c> or an <c>IGoCollection</c>
            (such as a <c>GoDocument</c> or a <c>GoCollection</c>)
            representing the collection of objects to be read from the XML.
            If the object returned by <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeObject"/> is a
            <c>GoObject</c> and root object is a <c>IGoCollection</c>, the
            <c>GoObject</c> is <c>Add</c>'ed to the <c>IGoCollection</c>.
            Otherwise, if the root object is an <c>IList</c>, the new
            object is <c>Add</c>ed to the <c>IList</c>.
            If you have overridden <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeRootElement"/> or <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeRootAttributes(System.Object)"/>
            to return a different kind of object, you may need to override this method too.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlReader.ConsumeObject">
            <summary>
            This produces an object from the current element.
            </summary>
            <remarks>
            If <see cref="M:Northwoods.Go.Xml.GoXmlReader.InvokeAllocate"/> produces an object,
            this starts reading an element by calling <see cref="M:Northwoods.Go.Xml.GoXmlReader.InvokeConsumeAttributes(System.Type,System.Object)"/>
            and then <see cref="M:Northwoods.Go.Xml.GoXmlReader.InvokeConsumeBody(System.Type,System.Object)"/>, passing it that object.
            Finally this calls <see cref="M:Northwoods.Go.Xml.GoXmlReader.InvokeConsumeObjectFinish(System.Type,System.Object)"/>.
            This method will return null if <see cref="M:Northwoods.Go.Xml.GoXmlReader.InvokeAllocate"/> returns null.
            This method is called by <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeRootBody(System.Object)"/> and by any other code
            that needs to read/construct an object.
            You probably do not need to override this method.
            </remarks>
            <seealso cref="P:Northwoods.Go.Xml.GoXmlReader.ReaderNode"/>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlReader.ProcessDelayedObjects">
            <summary>
            This method fixes up any objects that had references that were unable to
            be resolved during the regular Consume steps.
            </summary>
            <remarks>
            This uses the information remembered from calls to <see cref="M:Northwoods.Go.Xml.GoXmlReader.AddDelayedRef(System.Object,System.String,System.String)"/>.
            For each object/property pair that was delayed, this method calls
            <see cref="M:Northwoods.Go.Xml.GoXmlReader.FindShared(System.String)"/> to get the real object corresponding to the
            saved string reference, and calls <see cref="M:Northwoods.Go.Xml.GoXmlReader.InvokeUpdateReference(System.Type,System.Object,System.String,System.Object)"/>
            to actually assign the object's property with that reference.
            You probably do not need to override this method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlReader.InvokeAllocate">
            <summary>
            Call the <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.Allocate"/> method of the <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/>
            that is associated with its <see cref="P:Northwoods.Go.Xml.IGoXmlTransformer.ElementName"/>.
            </summary>
            <remarks>
            This searches for the most type-specific <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/> associated
            with a <see cref="P:Northwoods.Go.Xml.IGoXmlTransformer.ElementName"/>.
            </remarks>
            <returns>
            This returns the result of calling <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.Allocate"/>.
            If no transformer is found, this returns false.
            This method is practically never overridden.
            </returns>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlReader.InvokeConsumeAttributes(System.Type,System.Object)">
            <summary>
            Call the <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/>.<see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.ConsumeAttributes(System.Object)"/>
            method of the <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/>
            that is associated with the given <paramref name="type"/>.
            </summary>
            <param name="type">the <c>Type</c> for which we seek an <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/></param>
            <param name="obj">an <c>Object</c> to be passed to <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.ConsumeAttributes(System.Object)"/></param>
            <remarks>
            This searches for an <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/> starting at the
            <paramref name="type"/> and proceeding up the type hierarchy.
            The <paramref name="obj"/> parameter is passed to the method call.
            This method is practically never overridden.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlReader.InvokeConsumeBody(System.Type,System.Object)">
            <summary>
            Call the <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.ConsumeBody(System.Object)"/> method of the <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/>
            that is associated with the given <paramref name="type"/>.
            </summary>
            <param name="type">the <c>Type</c> for which we seek an <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/></param>
            <param name="obj">an <c>Object</c> to be passed to <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.ConsumeBody(System.Object)"/></param>
            <remarks>
            This searches for an <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/> starting at the
            <paramref name="type"/> and proceeding up the type hierarchy.
            The <paramref name="obj"/> parameter is passed to the method call.
            This method is practically never overridden.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlReader.InvokeConsumeChild(System.Type,System.Object,System.Object)">
            <summary>
            Call the <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.ConsumeChild(System.Object,System.Object)"/> method of the <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/>
            that is associated with the given <paramref name="type"/>.
            </summary>
            <param name="type">the <c>Type</c> for which we seek an <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/></param>
            <param name="parent">an <c>Object</c> to be passed to <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.ConsumeChild(System.Object,System.Object)"/></param>
            <param name="child">an <c>Object</c> to be passed to <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.ConsumeChild(System.Object,System.Object)"/></param>
            <remarks>
            This searches for an <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/> starting at the
            <paramref name="type"/> and proceeding up the type hierarchy.
            The <paramref name="obj"/> parameter is passed to the method call.
            This method is practically never overridden.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlReader.InvokeConsumeObjectFinish(System.Type,System.Object)">
            <summary>
            Call the <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.ConsumeObjectFinish(System.Object)"/> method of the <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/>
            that is associated with the given <paramref name="type"/>.
            </summary>
            <param name="type">the <c>Type</c> for which we seek an <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/></param>
            <param name="obj">an <c>Object</c> to be passed to <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.ConsumeObjectFinish(System.Object)"/></param>
            <remarks>
            This searches for an <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/> starting at the
            <paramref name="type"/> and proceeding up the type hierarchy.
            The <paramref name="obj"/> parameter is passed to the method call.
            This method is practically never overridden.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlReader.InvokeUpdateReference(System.Type,System.Object,System.String,System.Object)">
            <summary>
            Call the <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.UpdateReference(System.Object,System.String,System.Object)"/> method of the <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/>
            that is associated with the given <paramref name="type"/>.
            </summary>
            <param name="type">the <c>Type</c> for which we seek an <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/></param>
            <param name="obj">an <c>Object</c> to be passed to <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.UpdateReference(System.Object,System.String,System.Object)"/></param>
            <param name="prop">a <c>String</c> to be passed to <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.UpdateReference(System.Object,System.String,System.Object)"/></param>
            <param name="referred">an <c>Object</c> to be passed to <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.UpdateReference(System.Object,System.String,System.Object)"/></param>
            <remarks>
            This searches for an <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/> starting at the
            <paramref name="type"/> and proceeding up the type hierarchy.
            The <paramref name="obj"/>, <paramref name="prop"/>, and <paramref name="referred"/>
            parameter values are passed to the method call.
            This method is practically never overridden.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlReader.ReadTextBody">
            <summary>
            Return the body of the current text element as a string,
            ignoring any nested elements.
            </summary>
            <returns></returns>
            <remarks>
            If an <see cref="P:Northwoods.Go.Xml.GoXmlReader.XmlReader"/> is available, and is not an empty element,
            this method concatenates the string values, ignoring nested elements.
            Otherwise, if there is a <see cref="P:Northwoods.Go.Xml.GoXmlReader.ReaderNode"/>, this method
            just returns the node's <c>InnerText</c>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlReader.ReadAttrVal(System.String)">
            <summary>
            Return an attribute's string value.
            </summary>
            <param name="name">the name of the attribute</param>
            <returns>
            The value of the attribute named by <paramref name="name"/>;
            if <paramref name="name"/> is null or if the attribute is not present
            in the <see cref="P:Northwoods.Go.Xml.GoXmlReader.XmlReader"/> or <see cref="P:Northwoods.Go.Xml.GoXmlReader.ReaderNode"/>,
            this method returns null.
            </returns>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlReader.XmlReaderSettings">
            <summary>
            Gets or sets the <c>XmlReaderSettings</c> used in the call to <c>XmlReader.Create</c>
            to customize the <c>XmlReader</c>.
            </summary>
            <value>
            The default value is just a newly created <c>XmlReaderSettings</c>.
            </value>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlReader.XmlReader">
            <summary>
            Gets the <c>XmlReader</c> used to actually read XML from the input stream.
            </summary>
            <remarks>
            The value is constructed and initialized during XML generation, and is
            automatically closed afterwards.  If <see cref="P:Northwoods.Go.Xml.GoXmlReader.UseDOM"/> is true,
            <see cref="M:Northwoods.Go.Xml.GoXmlReader.LoadDOM"/> will just load the whole DOM (available as the
            <see cref="P:Northwoods.Go.Xml.GoXmlReader.XmlDocument"/> property), close the stream, and set this property to null.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlReader.XmlTextReader">
            <summary>
            This obsolete property exists for compatibility with older versions.
            </summary>
            <value>
            <c>this.XmlReader as XmlTextReader</c>
            </value>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlReader.XmlDocument">
            <summary>
            Gets the <c>XmlDocument</c> that was loaded from the stream/file.
            </summary>
            <remarks>
            This value is supplied by a call to <see cref="M:Northwoods.Go.Xml.GoXmlReader.Consume(System.Xml.XmlDocument)"/>,
            or it is created by a call to <see cref="M:Northwoods.Go.Xml.GoXmlReader.Consume(System.Xml.XmlReader)"/> if <see cref="P:Northwoods.Go.Xml.GoXmlReader.UseDOM"/> is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlReader.ReaderNode">
            <summary>
            Gets or sets the current <c>XmlNode</c> of the DOM that this reader
            is looking at.
            </summary>
            <value>
            An <c>XmlNode</c>, or null if reading iteratively from the <see cref="P:Northwoods.Go.Xml.GoXmlReader.XmlReader"/>
            because <see cref="P:Northwoods.Go.Xml.GoXmlReader.UseDOM"/> is false or because no <see cref="P:Northwoods.Go.Xml.GoXmlReader.XmlDocument"/> was supplied.
            </value>
            <remarks>
            This property needs to be maintained by implementations of
            <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.ConsumeBody(System.Object)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlReader.RootObject">
            <summary>
            Gets or sets the object representing the root element of the XML document
            being read.
            </summary>
            <value>
            Initially this is null and gets set to the value returned by <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeRootElement"/>
            and then to the value returned by <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeRootAttributes(System.Object)"/>.
            You may want to provide an <c>IList</c> or a <c>IGoCollection</c> that
            <see cref="M:Northwoods.Go.Xml.GoXmlReader.ConsumeRootBody(System.Object)"/> will <c>Add</c> to.
            </value>
            <remarks>
            If all of the top-level objects that will be read are <c>GoObject</c>s,
            it is fairly common to provide a <c>GoDocument</c>, so that all those new
            nodes and links get added to that document.
            After <see cref="M:Northwoods.Go.Xml.GoXmlReader.Consume(System.Xml.XmlReader)"/> or <see cref="M:Northwoods.Go.Xml.GoXmlReader.Consume(System.Xml.XmlDocument)"/>
            are finished, this property is reset to null.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlReader.UseDOM">
            <summary>
            Gets or sets whether the <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/>s should
            use the <see cref="P:Northwoods.Go.Xml.GoXmlReader.XmlDocument"/> or the <see cref="P:Northwoods.Go.Xml.GoXmlReader.XmlReader"/>.
            </summary>
            <value>
            This defaults to false; set this to true before calling <see cref="M:Northwoods.Go.Xml.GoXmlReader.Consume(System.Xml.XmlReader)"/>
            if you need to be able to "look-ahead" in the XML by traversing the DOM.
            This value is automatically set to true if you call <see cref="M:Northwoods.Go.Xml.GoXmlReader.Consume(System.Xml.XmlDocument)"/>.
            </value>
            <remarks>
            The DOM is typically used to make it easier to handle references
            between objects.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.Xml.GoXmlWriter">
            <summary>
            Write customizable XML, using class-specific <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/>s,
            creating an <c>XmlDocument</c> or just writing to an <c>XmlWriter</c>.
            </summary>
            <remarks>
            <para>
            To produce XML, this class opens a <see cref="P:Northwoods.Go.Xml.GoXmlWriter.XmlWriter"/>,
            generates XML instructions, starts a root element, and then
            iterates twice over the set of <see cref="P:Northwoods.Go.Xml.GoXmlWriter.Objects"/>.
            The first pass (implemented by <see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateDefinitions"/>)
            gives each object a chance to detect and remember shared objects and
            set up other definitions in preliminary XML elements that are part of the root.
            The second pass (implemented by <see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateObjects"/>)
            actually produces elements for the <see cref="P:Northwoods.Go.Xml.GoXmlWriter.Objects"/>.
            </para>
            <para>
            You must provide type-specific customizations by supplying instances of
            <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/>.  Each transformer is associated with a <c>Type</c>.
            As this writer processes each object that it is rendering, it searches
            for the appropriate transformer to invoke, starting with that type and
            trying its base types.
            </para>
            <para>
            By default there are no transformers registered for this writer, so this
            writer is unable to actually do anything with the specified <see cref="P:Northwoods.Go.Xml.GoXmlWriter.Objects"/>.
            You will need to call <see cref="M:Northwoods.Go.Xml.GoXmlReaderWriterBase.AddTransformer(Northwoods.Go.Xml.IGoXmlTransformer)"/> for each class of object
            for which you want to produce XML.
            These calls to <see cref="M:Northwoods.Go.Xml.GoXmlReaderWriterBase.AddTransformer(Northwoods.Go.Xml.IGoXmlTransformer)"/> are sometimes done in an override
            of <see cref="M:Northwoods.Go.Xml.GoXmlReaderWriterBase.RegisterTransformers"/>, but you probably do not need to define
            a class inheriting from <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/>.
            </para>
            <para>
            For the <see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateDefinitions"/> pass, <see cref="M:Northwoods.Go.Xml.GoXmlWriter.DefineObject(System.Object)"/>
            is called for each object in <see cref="P:Northwoods.Go.Xml.GoXmlWriter.Objects"/>, which in turn
            calls <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.GenerateDefinitions(System.Object)"/> on the registered transformer
            for the object's <c>Type</c>.
            </para>
            <para>
            For the <see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateObjects"/> pass, <see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateObject(System.Object)"/>
            is called for each object in <see cref="P:Northwoods.Go.Xml.GoXmlWriter.Objects"/>, which in turn
            calls <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.GenerateElement(System.Object)"/>,
            <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.GenerateAttributes(System.Object)"/>,
            <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.GenerateBody(System.Object)"/>, and
            <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.GenerateElementFinish(System.Object)"/>
            on the registered transformer for the object's <c>Type</c>.
            </para>
            <para>
            The various <c>Invoke...</c> methods do the actual lookup for a transformer
            and invoke the respective method on the first transformer found.
            </para>
            </remarks>
            <example>
            This writer could be used as follows:
            <code>
            public void SaveSimpleXml(String path) {
              GoXmlWriter xw = new GoXmlWriter();
              xw.RootElementName = "graph";
              xw.NodesGeneratedFirst = true;
              // tell the writer how to handle two kinds of classes
              xw.AddTransformer(new SimpleXmlTransformBasicNode());
              xw.AddTransformer(new SimpleXmlTransformLink());
              // specify the objects to be generated
              xw.Objects = myView.Document;
              
              using (StreamWriter sw = new StreamWriter(path)) {
                xw.Generate(sw);
              }
            }
            </code>
            See the description of <see cref="T:Northwoods.Go.Xml.GoXmlTransformer"/> for example transformer definitions.
            </example>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlWriter.#ctor">
            <summary>
            Create a writer with a set of <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/>s defined.
            </summary>
            <remarks>
            This just calls <see cref="M:Northwoods.Go.Xml.GoXmlReaderWriterBase.RegisterTransformers"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlWriter.FindShared(System.Object)">
            <summary>
            Find an identifier associated with an object that can be referenced.
            </summary>
            <param name="obj"></param>
            <returns>a string if the object is present; null otherwise or if <paramref name="obj"/> is null</returns>
            <remarks>
            Call <see cref="M:Northwoods.Go.Xml.GoXmlWriter.MakeShared(System.Object)"/> to add an object to this writer's table
            of shared objects.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlWriter.MakeShared(System.Object)">
            <summary>
            Add an object to the table of shared objects.
            </summary>
            <param name="obj"></param>
            <returns>a unique identifier for this shared object, or null if <paramref name="obj"/> is null</returns>
            <remarks>
            This does nothing if the <paramref name="obj"/> is already
            in the table, but just returns its identifier.
            This calls <see cref="M:Northwoods.Go.Xml.GoXmlWriter.FindShared(System.Object)"/> to see if the object
            is already known as a shared object.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlWriter.ClearAllShareds">
            <summary>
            Remove all objects from the table of shared objects.
            </summary>
            <remarks>
            This also resets the IDs returned by calls to <see cref="M:Northwoods.Go.Xml.GoXmlWriter.MakeShared(System.Object)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlWriter.SetXmlWriter(System.Xml.XmlWriter)">
            <summary>
            Only a subclass of a <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/> can provide a
            value for the <see cref="P:Northwoods.Go.Xml.GoXmlWriter.XmlWriter"/> property.
            </summary>
            <param name="w">
            an <c>XmlWriter</c> initialized at the
            start of <see cref="M:Northwoods.Go.Xml.GoXmlWriter.Generate(System.Xml.XmlWriter)"/>, or null at the end of
            <see cref="M:Northwoods.Go.Xml.GoXmlWriter.Generate(System.Xml.XmlWriter)"/> after closing the <c>XmlWriter</c>
            </param>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlWriter.SetXmlDocument(System.Xml.XmlDocument)">
            <summary>
            Only a subclass of a <see cref="T:Northwoods.Go.Xml.GoXmlWriter"/> can provide a
            value for the DOM.
            </summary>
            <param name="d">the <c>XmlDocument</c> being constructed by <see cref="M:Northwoods.Go.Xml.GoXmlWriter.Generate"/>
            when there is no <see cref="P:Northwoods.Go.Xml.GoXmlWriter.XmlWriter"/></param>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlWriter.Generate(System.IO.Stream)">
            <summary>
            Start an <see cref="P:Northwoods.Go.Xml.GoXmlWriter.XmlWriter"/> and generate XML.
            </summary>
            <param name="destination">the <c>Stream</c> to be written</param>
            <remarks>
            <para>
            This calls, in order, <see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateInstructions"/>, 
            <see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateRootElement"/>, <see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateRootAttributes"/>, 
            <see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateDefinitions"/>, and <see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateObjects"/>.
            The value of <see cref="P:Northwoods.Go.Xml.GoXmlWriter.XmlDocument"/> will be null, since no
            DOM is constructed.
            </para>
            <para>
            In .NET 2.0 this calls <c>XmlWriter.Create</c> with the value of
            <c>this.XmlWriterSettings</c>.
            In .NET 1.x this just creates an <c>XmlTextWriter</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlWriter.Generate(System.IO.TextWriter)">
            <summary>
            Start an <see cref="P:Northwoods.Go.Xml.GoXmlWriter.XmlWriter"/> and generate XML.
            </summary>
            <param name="destination">the <c>TextWriter</c> to be written</param>
            <remarks>
            <para>
            This calls, in order, <see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateInstructions"/>, 
            <see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateRootElement"/>, <see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateRootAttributes"/>, 
            <see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateDefinitions"/>, and <see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateObjects"/>.
            The value of <see cref="P:Northwoods.Go.Xml.GoXmlWriter.XmlDocument"/> will be null, since no
            DOM is constructed.
            </para>
            <para>
            In .NET 2.0 this calls <c>XmlWriter.Create</c> with the value of
            <c>this.XmlWriterSettings</c>.
            In .NET 1.x this just creates an <c>XmlTextWriter</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlWriter.Generate(System.Xml.XmlWriter)">
            <summary>
            Generate XML to an <see cref="P:Northwoods.Go.Xml.GoXmlWriter.XmlWriter"/>.
            </summary>
            <param name="destination">the <c>XmlWriter</c> to be written</param>
            <remarks>
            This calls, in order, <see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateInstructions"/>, 
            <see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateRootElement"/>, <see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateRootAttributes"/>, 
            <see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateDefinitions"/>, and <see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateObjects"/>.
            The value of <see cref="P:Northwoods.Go.Xml.GoXmlWriter.XmlDocument"/> will be null, since no
            DOM is constructed.
            You probably do not need to override this method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlWriter.Generate">
            <summary>
            Construct an <c>XmlDocument</c> representing the <see cref="P:Northwoods.Go.Xml.GoXmlWriter.Objects"/>.
            </summary>
            <returns>a newly created <c>XmlDocument</c></returns>
            <remarks>
            This method creates an <c>XmlDocument</c>.
            This then calls, in order,
            <see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateRootElement"/>, <see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateRootAttributes"/>, 
            <see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateDefinitions"/>, and <see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateObjects"/>.
            Note that this does not call <see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateInstructions"/>.
            The value of <see cref="P:Northwoods.Go.Xml.GoXmlWriter.XmlWriter"/> is set to null, since
            no stream is used.
            You probably do not need to override this method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlWriter.Initialize">
            <summary>
            Do the initialization needed by <see cref="M:Northwoods.Go.Xml.GoXmlWriter.Generate(System.Xml.XmlWriter)"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlWriter.GenerateInstructions">
            <summary>
            Generate XML instructions before the root element.
            </summary>
            <remarks>
            By default this does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlWriter.GenerateRootElement">
            <summary>
            Start the root element, using <see cref="P:Northwoods.Go.Xml.GoXmlWriter.RootElementName"/> and <see cref="P:Northwoods.Go.Xml.GoXmlWriter.DefaultNamespace"/>.
            </summary>
            <remarks>
            <para>
            If <see cref="P:Northwoods.Go.Xml.GoXmlWriter.Objects"/> property value is a <see cref="T:Northwoods.Go.GoDocument"/>,
            and if there is a <see cref="T:Northwoods.Go.Xml.GoXmlBindingTransformer"/> registered for that <c>GoDocument</c> type,
            the <see cref="P:Northwoods.Go.Xml.GoXmlWriter.RootElementName"/> is set to that transformer's
            <see cref="T:Northwoods.Go.Xml.GoXmlTransformer"/>.<see cref="P:Northwoods.Go.Xml.GoXmlTransformer.ElementName"/>.
            </para>
            <para>
            If not writing to a <see cref="P:Northwoods.Go.Xml.GoXmlWriter.XmlWriter"/>, this is
            responsible for setting <see cref="P:Northwoods.Go.Xml.GoXmlWriter.WriterElement"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlWriter.GenerateRootAttributes">
            <summary>
            Generate attributes for the root element.
            </summary>
            <remarks>
            <para>
            If <see cref="P:Northwoods.Go.Xml.GoXmlWriter.Objects"/> property value is a <see cref="T:Northwoods.Go.GoDocument"/>,
            and if there is a <see cref="T:Northwoods.Go.Xml.GoXmlBindingTransformer"/> registered for that <c>GoDocument</c> type,
            this calls <see cref="M:Northwoods.Go.Xml.GoXmlBindingTransformer.GenerateAttributes(System.Object)"/> on that transformer,
            passing it the <see cref="T:Northwoods.Go.GoDocument"/>.
            This provides an easy-to-define mechanism for binding document properties with root element attributes.
            </para>
            <para>
            Otherwise, this does nothing.
            You may want to define namespace attributes, as is shown in the
            description for <see cref="M:Northwoods.Go.Xml.GoXmlWriter.SetNamespaceUri(System.String,System.String)"/>, by calling 
            <see cref="M:Northwoods.Go.Xml.GoXmlWriter.SetNamespaceUri(System.String,System.String)"/> before this method is called.
            The <c>Generate</c> methods will call <see cref="M:Northwoods.Go.Xml.GoXmlWriter.WriteNamespaceAttribute(System.String,System.String)"/>
            for each prefix/namespaceURI pair, just after calling
            <see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateRootElement"/>, and just before calling this method.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlWriter.GenerateDefinitions">
            <summary>
            Call <see cref="M:Northwoods.Go.Xml.GoXmlWriter.DefineObject(System.Object)"/> for each object in <see cref="P:Northwoods.Go.Xml.GoXmlWriter.Objects"/>.
            </summary>
            <remarks>
            This gives each object a chance to identify common objects
            and perhaps produce some shared elements that precede the
            regular rendering.
            You probably do not need to override this method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlWriter.GenerateObjects">
            <summary>
            Call <see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateObject(System.Object)"/> for each object in <see cref="P:Northwoods.Go.Xml.GoXmlWriter.Objects"/>.
            </summary>
            <remarks>
            If <see cref="P:Northwoods.Go.Xml.GoXmlWriter.NodesGeneratedFirst"/> is false, this method just
            calls <see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateObject(System.Object)"/> on each object in the order that
            they are enumerated by the collection of <see cref="P:Northwoods.Go.Xml.GoXmlWriter.Objects"/>.
            If <see cref="P:Northwoods.Go.Xml.GoXmlWriter.NodesGeneratedFirst"/> is true, this method enumerates
            the collection twice, first to call <see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateObject(System.Object)"/>
            on all objects that implement <c>IGoNode</c>, then second to generate
            all the rest of the objects.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlWriter.DefineObject(System.Object)">
            <summary>
            This may produce shared elements that precede the regular rendering of the objects.
            </summary>
            <param name="obj">an <c>Object</c>; if null this method does nothing</param>
            <remarks>
            If <see cref="M:Northwoods.Go.Xml.GoXmlWriter.InvokeSkipGeneration(System.Type,System.Object)"/> returns true, no definition elements are generated.
            Otherwise this calls <see cref="M:Northwoods.Go.Xml.GoXmlWriter.InvokeGenerateDefinitions(System.Type,System.Object)"/>.
            You probably do not need to override this method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlWriter.GenerateObject(System.Object)">
            <summary>
            This produces an element for an object, including any nested elements that help represent the rendering.
            </summary>
            <param name="obj">an <c>Object</c>; if null this method does nothing</param>
            <remarks>
            If <see cref="M:Northwoods.Go.Xml.GoXmlWriter.InvokeSkipGeneration(System.Type,System.Object)"/> returns true, no element is generated.
            Otherwise this starts writing an element by calling <see cref="M:Northwoods.Go.Xml.GoXmlWriter.InvokeGenerateElement(System.Type,System.Object)"/>,
            <see cref="M:Northwoods.Go.Xml.GoXmlWriter.InvokeGenerateAttributes(System.Type,System.Object)"/>, <see cref="M:Northwoods.Go.Xml.GoXmlWriter.InvokeGenerateBody(System.Type,System.Object)"/>,
            and the <see cref="M:Northwoods.Go.Xml.GoXmlWriter.InvokeGenerateElementFinish(System.Type,System.Object)"/>.
            If <see cref="M:Northwoods.Go.Xml.GoXmlWriter.InvokeGenerateElement(System.Type,System.Object)"/> returned true to indicate that it started
            a new element, this method will call <see cref="M:Northwoods.Go.Xml.GoXmlWriter.WriteEndElement"/> in order to finish it.
            You probably do not need to override this method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlWriter.DefineAndGenerateSharedObject(System.Object)">
            <summary>
            If the given object is not already known to be a shared object,
            define it and generate it, so that you can use simple ID references
            to the shared object both during generation and during consumption.
            </summary>
            <param name="obj">an <c>Object</c>; if null this method does nothing</param>
            <remarks>
            This convenience method can be called from an override of
            <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.GenerateDefinitions(System.Object)"/>
            when there are auxiliary objects
            that can be shared by the primary <see cref="P:Northwoods.Go.Xml.GoXmlWriter.Objects"/> but are
            not in that collection of <see cref="P:Northwoods.Go.Xml.GoXmlWriter.Objects"/>.
            If <see cref="M:Northwoods.Go.Xml.GoXmlWriter.InvokeSkipGeneration(System.Type,System.Object)"/> returns true,
            or if the <paramref name="obj"/> is already shared,
            no element is generated.
            This method is implemented as:
            <code>
             if (obj == null)
               return;
             Type t = obj.GetType();
             if (InvokeSkipGeneration(t, obj))
               return;
             String id = FindShared(obj);
             if (id == null) {
               MakeShared(obj);
               DefineObject(obj);
               GenerateObject(obj);
             }
            </code>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlWriter.InvokeSkipGeneration(System.Type,System.Object)">
            <summary>
            Call the <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.SkipGeneration(System.Object)"/> method of the <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/>
            that is associated with the given <paramref name="type"/>.
            </summary>
            <param name="type">the <c>Type</c> for which we seek an <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/></param>
            <param name="obj">an <c>Object</c> to be passed to <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.SkipGeneration(System.Object)"/></param>
            <returns>
            This returns the result of calling <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.SkipGeneration(System.Object)"/>.
            If no transformer is found, this returns false.
            </returns>
            <remarks>
            This searches for an <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/> starting at the
            <paramref name="type"/> and proceeding up the type hierarchy.
            The <paramref name="obj"/> parameter is passed to method call.
            This method is practically never overridden.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlWriter.InvokeGenerateDefinitions(System.Type,System.Object)">
            <summary>
            Call the <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.GenerateDefinitions(System.Object)"/> method of the <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/>
            that is associated with the given <paramref name="type"/>.
            </summary>
            <param name="type">the <c>Type</c> for which we seek an <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/></param>
            <param name="obj">an <c>Object</c> to be passed to <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.GenerateDefinitions(System.Object)"/></param>
            <remarks>
            This searches for an <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/> starting at the
            <paramref name="type"/> and proceeding up the type hierarchy.
            The <paramref name="obj"/> parameter is passed to method call.
            This method is practically never overridden.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlWriter.InvokeGenerateElement(System.Type,System.Object)">
            <summary>
            Call the <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.GenerateElement(System.Object)"/> method of the <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/>
            that is associated with the given <paramref name="type"/>.
            </summary>
            <param name="type">the <c>Type</c> for which we seek an <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/></param>
            <param name="obj">an <c>Object</c> to be passed to <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.GenerateElement(System.Object)"/></param>
            <remarks>
            This searches for an <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/> starting at the
            <paramref name="type"/> and proceeding up the type hierarchy.
            The <paramref name="obj"/> parameter is passed to method call.
            </remarks>
            <returns>
            True if an element was started.
            This returns the result of calling <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.GenerateElement(System.Object)"/>.
            If no transformer is found, this returns false.
            This method is practically never overridden.
            </returns>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlWriter.InvokeGenerateAttributes(System.Type,System.Object)">
            <summary>
            Call the <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.GenerateAttributes(System.Object)"/> method of the <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/>
            that is associated with the given <paramref name="type"/>.
            </summary>
            <param name="type">the <c>Type</c> for which we seek an <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/></param>
            <param name="obj">an <c>Object</c> to be passed to <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.GenerateAttributes(System.Object)"/></param>
            <remarks>
            This searches for an <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/> starting at the
            <paramref name="type"/> and proceeding up the type hierarchy.
            The <paramref name="obj"/> parameter is passed to method call.
            This method is practically never overridden.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlWriter.InvokeGenerateBody(System.Type,System.Object)">
            <summary>
            Call the <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.GenerateBody(System.Object)"/> method of the <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/>
            that is associated with the given <paramref name="type"/>.
            </summary>
            <param name="type">the <c>Type</c> for which we seek an <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/></param>
            <param name="obj">an <c>Object</c> to be passed to <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.GenerateBody(System.Object)"/></param>
            <remarks>
            This searches for an <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/> starting at the
            <paramref name="type"/> and proceeding up the type hierarchy.
            The <paramref name="obj"/> parameter is passed to method call.
            This method is practically never overridden.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlWriter.InvokeGenerateElementFinish(System.Type,System.Object)">
            <summary>
            Call the <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.GenerateElementFinish(System.Object)"/> method of the <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/>
            that is associated with the given <paramref name="type"/>.
            </summary>
            <param name="type">the <c>Type</c> for which we seek an <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/></param>
            <param name="obj">an <c>Object</c> to be passed to <see cref="M:Northwoods.Go.Xml.IGoXmlTransformer.GenerateElementFinish(System.Object)"/></param>
            <remarks>
            This searches for an <see cref="T:Northwoods.Go.Xml.IGoXmlTransformer"/> starting at the
            <paramref name="type"/> and proceeding up the type hierarchy.
            The <paramref name="obj"/> parameter is passed to method call.
            This method is practically never overridden.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlWriter.WriteStartElement(System.String)">
            <summary>
            Start a new XML element, with the name given by <paramref name="name"/>.
            </summary>
            <param name="name">the local name for the element; must not be null</param>
            <remarks>
            This starts a new element in the <see cref="P:Northwoods.Go.Xml.GoXmlWriter.DefaultNamespace"/>.
            You need to make a corresponding call to <see cref="M:Northwoods.Go.Xml.GoXmlWriter.WriteEndElement"/>
            when you are finished writing this element.
            This method will write to the <see cref="P:Northwoods.Go.Xml.GoXmlWriter.XmlWriter"/> if it
            is available or else it will create an XML element as a child of the <see cref="P:Northwoods.Go.Xml.GoXmlWriter.WriterElement"/>.
            If we are constructing a DOM instead of writing to a stream,
            this sets <see cref="P:Northwoods.Go.Xml.GoXmlWriter.WriterElement"/> to be the newly started <c>XmlElement</c>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlWriter.WriteStartElement(System.String,System.String,System.String)">
            <summary>
            Start a new XML element, with the name given by <paramref name="name"/>,
            and an optional <paramref name="prefix"/> and an optional associated namespace <paramref name="uri"/>.
            </summary>
            <param name="prefix"></param>
            <param name="name">the local name for the element; must not be null</param>
            <param name="uri"></param>
            <remarks>
            <para>
            This starts a new element with the given <paramref name="prefix"/>, if not null.
            If a namespace <paramref name="uri"/> is given, that is associated with the new element,
            and with the prefix, if it was given.
            You need to make a corresponding call to <see cref="M:Northwoods.Go.Xml.GoXmlWriter.WriteEndElement"/>
            when you are finished writing this element.
            This method will write to the <see cref="P:Northwoods.Go.Xml.GoXmlWriter.XmlWriter"/> if it
            is available or else it will create an XML element as a child of the <see cref="P:Northwoods.Go.Xml.GoXmlWriter.WriterElement"/>.
            If we are constructing a DOM instead of writing to a stream,
            this sets <see cref="P:Northwoods.Go.Xml.GoXmlWriter.WriterElement"/> to be the newly started <c>XmlElement</c>.
            </para>
            <para>
            Note that GoXml currently does not support multiple <see cref="T:Northwoods.Go.Xml.GoXmlTransformer"/>s
            with the same <see cref="P:Northwoods.Go.Xml.GoXmlTransformer.ElementName"/> but different namespaces.
            You can call this method if you need to generate an element in a namespace other
            than the <see cref="P:Northwoods.Go.Xml.GoXmlWriter.DefaultNamespace"/>.
            Calling this method does not modify this writer's table of prefix to namespace
            mappings -- it does not call <see cref="M:Northwoods.Go.Xml.GoXmlWriter.SetNamespaceUri(System.String,System.String)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlWriter.WriteEndElement">
            <summary>
            Finish the current XML element started by a call to <see cref="M:Northwoods.Go.Xml.GoXmlWriter.WriteStartElement(System.String)"/>.
            </summary>
            <remarks>
            If we are constructing a DOM instead of writing to a stream,
            this sets the <see cref="P:Northwoods.Go.Xml.GoXmlWriter.WriterElement"/> to be the <c>ParentNode</c> assuming
            it is an <c>XmlElement</c>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlWriter.WriteTextBody(System.String)">
            <summary>
            Write out a string as the body of an element.
            </summary>
            <param name="s">the text to be written</param>
            <remarks>
            This method will write to the <see cref="P:Northwoods.Go.Xml.GoXmlWriter.XmlWriter"/> if it
            is available or else it will create an XML text node in the <see cref="P:Northwoods.Go.Xml.GoXmlWriter.WriterElement"/>.
            If <paramref name="s"/> is null, nothing is written and no <c>XmlText</c>
            node is created.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlWriter.WriteAttrVal(System.String,System.String)">
            <summary>
            Write an attribute of the name <paramref name="name"/> with a
            string representation for the value <paramref name="val"/>.
            </summary>
            <param name="name">
            the attribute name; if null, no attribute is written.
            If you call <see cref="M:Northwoods.Go.Xml.GoXmlWriter.SetNamespaceUri(System.String,System.String)"/>, typically before calling a <c>Generate</c> method,
            you can also include a prefix in this name, in the format "prefix:localname".
            </param>
            <param name="val">the value to write; if null, no attribute is written</param>
            <returns><paramref name="val"/></returns>
            <remarks>
            This method will write to the <see cref="P:Northwoods.Go.Xml.GoXmlWriter.XmlWriter"/> if it is available,
            or else it will set the attribute of the <see cref="P:Northwoods.Go.Xml.GoXmlWriter.WriterElement"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlWriter.WriteNamespaceAttribute(System.String,System.String)">
            <summary>
            Write an "xmlns:prefix" attribute for a namespace given by <paramref name="uri"/>.
            </summary>
            <param name="prefix">must not be a null string</param>
            <param name="uri">must not be a null string</param>
            <remarks>
            <para>
            Namespaces are normally defined on the root element by calling
            <see cref="M:Northwoods.Go.Xml.GoXmlWriter.SetNamespaceUri(System.String,System.String)"/> before calling one of the <c>Generate</c> methods.
            That will cause this method to be called to add the appropriate
            <code>xmlns:prefix="uri"</code> attributes to the root element.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlWriter.GetNamespaceUri(System.String)">
            <summary>
            Look up the namespace URI for a prefix string.
            </summary>
            <param name="prefix">must not be null</param>
            <returns>the URI <c>String</c>, if known; null if <paramref name="prefix"/> is null</returns>
            <remarks>
            This is used by <see cref="M:Northwoods.Go.Xml.GoXmlWriter.WriteStartElement(System.String)"/> and <see cref="M:Northwoods.Go.Xml.GoXmlWriter.WriteAttrVal(System.String,System.String)"/>.
            </remarks>
            <seealso cref="M:Northwoods.Go.Xml.GoXmlWriter.SetNamespaceUri(System.String,System.String)"/>
        </member>
        <member name="M:Northwoods.Go.Xml.GoXmlWriter.SetNamespaceUri(System.String,System.String)">
            <summary>
            Define the namespace URI for a prefix string, used when writing prefixed attribute names.
            </summary>
            <param name="prefix">must not be null</param>
            <param name="uri">if null this method removes any URI associated with the <paramref name="prefix"/></param>
            <remarks>
            This should be called to establish a namespace URI for a prefix
            before calling <see cref="M:Northwoods.Go.Xml.GoXmlWriter.WriteStartElement(System.String)"/> or <see cref="M:Northwoods.Go.Xml.GoXmlWriter.WriteAttrVal(System.String,System.String)"/>
            with a name that has that prefix.
            To specify the default namespace for the root element,
            set the <see cref="P:Northwoods.Go.Xml.GoXmlWriter.DefaultNamespace"/> property.
            Calls to this method before a call to a <c>Generate</c> method
            will result in the addition of "xmlns:prefix" attributes in the root element.
            </remarks>
            <seealso cref="M:Northwoods.Go.Xml.GoXmlWriter.GetNamespaceUri(System.String)"/>
            <example>
            <para>
            As an example, consider the following code adapted from the GoSvg implementation:
            <code>
              GoXmlWriter w = ...
              w.DefaultNamespace = "http://www.w3.org/2000/svg";
              w.SetNamespaceUri("xlink", "http://www.w3.org/1999/xlink");
            </code>
            </para>
            <para>
            The above code causes the root element to have an "xmlns" attribute.
            It also defines a prefix, "xlink", that refers to a particular namespace URI.
            The result may look like:
            <code>
              &lt;svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
              ...
              &lt;/svg&gt;
            </code>
            </para>
            <para>
            By calling <see cref="M:Northwoods.Go.Xml.GoXmlWriter.SetNamespaceUri(System.String,System.String)"/>, you can then define a
            <see cref="T:Northwoods.Go.Xml.GoXmlTransformer"/> with code such as:
            <code>
            public override void GenerateBody(Object obj) {
              base.GenerateBody(obj);
              GoImage img = (GoImage)obj;
              Image image = img.Image;
              String id = this.Writer.FindShared(image);
              if (id != null) {
                WriteStartElement("use");
                WriteAttrVal("xlink:href", "#S" + id);
                WriteEndElement();
              }
            }
            </code>
            </para>
            <para>
            The above transformer method example is simplified from the code used
            by the SVG transformer for <c>GoImage</c>s, where there needs to be
            a link to the element representing the actual Image.
            </para>
            </example>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlWriter.XmlWriterSettings">
            <summary>
            Gets or sets the <c>XmlWriterSettings</c> used in the call to <c>XmlWriter.Create</c>
            to customize the <c>XmlWriter</c>.
            </summary>
            <value>
            The default value has its <c>XmlWriterSettings.Indent</c> property set to true.
            </value>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlWriter.XmlWriter">
            <summary>
            Gets the <c>XmlWriter</c> used to actually write XML to the output stream.
            </summary>
            <value>
            The value is constructed and initialized during XML generation, and is
            automatically closed afterwards.
            This value is null when constructing an <see cref="P:Northwoods.Go.Xml.GoXmlWriter.XmlDocument"/>.
            </value>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlWriter.XmlTextWriter">
            <summary>
            This obsolete property exists for compatibility with older versions.
            </summary>
            <value>
            <c>this.XmlWriter as XmlTextWriter</c>
            </value>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlWriter.XmlDocument">
            <summary>
            Gets the <c>XmlDocument</c> that is constructed by <see cref="M:Northwoods.Go.Xml.GoXmlWriter.Generate"/> when not writing
            directly to a stream with <see cref="P:Northwoods.Go.Xml.GoXmlWriter.XmlWriter"/>.
            </summary>
            <value>
            An <c>XmlDocument</c>; this value is null when writing directly to an <see cref="P:Northwoods.Go.Xml.GoXmlWriter.XmlWriter"/>.
            </value>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlWriter.WriterElement">
            <summary>
            Gets or sets the <c>XmlElement</c> that is being constructed when creating
            a DOM rather than writing directly to a <see cref="P:Northwoods.Go.Xml.GoXmlWriter.XmlWriter"/>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlWriter.Objects">
            <summary>
            Gets or sets the collection of objects to be generated.
            </summary>
            <value>
            This must be set before calling <see cref="M:Northwoods.Go.Xml.GoXmlWriter.Generate(System.Xml.XmlWriter)"/>
            or <see cref="M:Northwoods.Go.Xml.GoXmlWriter.Generate"/>.
            </value>
            <remarks>
            <para>
            Caution: <see cref="T:Northwoods.Go.GoNode"/> implements <b>ICollection</b>,
            so if you set this property to refer to a node in your document,
            this writer will try to generate XML for the parts of your node,
            which is probably not what you intend.
            </para>
            <para>
            Caution: If you are generating tree-structured XML corresponding to a
            logically tree-structured graph of nodes and links, by making use of the
            <see cref="T:Northwoods.Go.Xml.GoXmlBindingTransformer"/>.<see cref="P:Northwoods.Go.Xml.GoXmlBindingTransformer.TreeStructured"/>
            property, you will need to make sure that the collection that you
            assign to this property contains only the logical root nodes of
            the logical trees in your document.
            That transformer will automatically generate nested XML for the nodes
            corresponding to the tree-children of each node given in this collection property,
            and recursively through the whole tree.  That will cause the generation of
            duplicate XML elements for every single logical node in your trees.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlWriter.RootElementName">
            <summary>
            Gets or sets the name of the root element.
            </summary>
            <value>
            This should be set, along with <see cref="P:Northwoods.Go.Xml.GoXmlWriter.DefaultNamespace"/>
            if desired, before calling <c>Generate</c>.
            </value>
            <seealso cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateRootElement"/>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlWriter.NodesGeneratedFirst">
            <summary>
            Gets or sets whether <see cref="M:Northwoods.Go.Xml.GoXmlWriter.GenerateObjects"/> makes two
            passes over the collection of <see cref="P:Northwoods.Go.Xml.GoXmlWriter.Objects"/>, generating
            the objects that implement <c>IGoNode</c> first before generating
            the other objects.
            </summary>
            <value>This defaults to true.</value>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlWriter.ColorsNamed">
            <summary>
            Gets or sets whether <see cref="M:Northwoods.Go.Xml.GoXmlTransformer.WriteAttrVal(System.String,System.Drawing.Color)"/>
            tries to write out the name of a <c>Color</c> when known, instead of just
            writing out the integer ARGB value.
            </summary>
            <value>This defaults to false</value>
        </member>
        <member name="P:Northwoods.Go.Xml.GoXmlWriter.DefaultNamespace">
            <summary>
            Gets or sets the "xmlns" attribute namespace to be
            defined for the root element.
            </summary>
            <value>
            This defaults to null--no "xmlns" attribute is created for the root element.
            </value>
            <remarks>
            If you want to specify a default namespace, you will need to set this property,
            along with the <see cref="P:Northwoods.Go.Xml.GoXmlWriter.RootElementName"/>, before calling <c>Generate</c>.
            </remarks>
            <seealso cref="M:Northwoods.Go.Xml.GoXmlWriter.SetNamespaceUri(System.String,System.String)"/>
        </member>
    </members>
</doc>

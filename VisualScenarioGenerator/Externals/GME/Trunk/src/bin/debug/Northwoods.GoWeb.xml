<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Northwoods.GoWeb</name>
    </assembly>
    <members>
        <member name="T:Northwoods.GoWeb.GoControl">
            <summary>
            This class is not used in Web Forms.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoObject">
            <summary>
            The GoObject abstract class represents graphical objects that can be
            added to <see cref="T:Northwoods.GoWeb.GoDocument"/>s to be displayed by <see cref="T:Northwoods.GoWeb.GoView"/>s.
            </summary>
            <remarks>
            <para>
            Read the User Guide and FAQ for more details.
            </para>
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoObject.NoSpot">
            <summary>
            Use this spot when no particular spot seems appropriate.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoObject.GetSpotLocation(System.Int32)"/>
        </member>
        <member name="F:Northwoods.GoWeb.GoObject.NoHandle">
            <summary>
            Use this handle when no particular handle seems appropriate.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoObject.Middle">
            <summary>
            This represents the point at the center of the object's bounds.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoObject.GetSpotLocation(System.Int32)"/>
        </member>
        <member name="F:Northwoods.GoWeb.GoObject.MiddleCenter">
            <summary>
            This represents the point at the center of the object's bounds;
            the same as <seealso cref="F:Northwoods.GoWeb.GoObject.Middle"/>.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoObject.GetSpotLocation(System.Int32)"/>
        </member>
        <member name="F:Northwoods.GoWeb.GoObject.TopLeft">
            <summary>
            This represents a corner point in the object's bounds.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoObject.GetSpotLocation(System.Int32)"/>
        </member>
        <member name="F:Northwoods.GoWeb.GoObject.TopRight">
            <summary>
            This represents a corner point in the object's bounds.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoObject.GetSpotLocation(System.Int32)"/>
        </member>
        <member name="F:Northwoods.GoWeb.GoObject.BottomRight">
            <summary>
            This represents a corner point in the object's bounds.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoObject.GetSpotLocation(System.Int32)"/>
        </member>
        <member name="F:Northwoods.GoWeb.GoObject.BottomLeft">
            <summary>
            This represents a corner point in the object's bounds.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoObject.GetSpotLocation(System.Int32)"/>
        </member>
        <member name="F:Northwoods.GoWeb.GoObject.MiddleTop">
            <summary>
            This represents a point in the object's bounds.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoObject.GetSpotLocation(System.Int32)"/>
        </member>
        <member name="F:Northwoods.GoWeb.GoObject.TopCenter">
            <summary>
            This represents a point in the object's bounds.
            </summary>
            <seealso cref="F:Northwoods.GoWeb.GoObject.MiddleTop"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.GetSpotLocation(System.Int32)"/>
        </member>
        <member name="F:Northwoods.GoWeb.GoObject.MiddleRight">
            <summary>
            This represents a point in the object's bounds.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoObject.GetSpotLocation(System.Int32)"/>
        </member>
        <member name="F:Northwoods.GoWeb.GoObject.MiddleBottom">
            <summary>
            This represents a point in the object's bounds.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoObject.GetSpotLocation(System.Int32)"/>
        </member>
        <member name="F:Northwoods.GoWeb.GoObject.BottomCenter">
            <summary>
            This represents a point in the object's bounds.
            </summary>
            <seealso cref="F:Northwoods.GoWeb.GoObject.MiddleBottom"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.GetSpotLocation(System.Int32)"/>
        </member>
        <member name="F:Northwoods.GoWeb.GoObject.MiddleLeft">
            <summary>
            This represents a point in the object's bounds.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoObject.GetSpotLocation(System.Int32)"/>
        </member>
        <member name="F:Northwoods.GoWeb.GoObject.LastSpot">
            <summary>
            User-defined spots should have identifiers greater than this value.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoObject.LastHandle">
            <summary>
            User-defined handles should have identifiers greater than this value.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoObject.RepaintAll">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoObject.ChangedBounds">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoObject.ChangedVisible">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoObject.Visible"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoObject.ChangedSelectable">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoObject.Selectable"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoObject.ChangedMovable">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoObject.Movable"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoObject.ChangedCopyable">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoObject.Copyable"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoObject.ChangedResizable">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoObject.Resizable"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoObject.ChangedReshapable">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoObject.Reshapable"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoObject.ChangedDeletable">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoObject.Deletable"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoObject.ChangedEditable">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoObject.Editable"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoObject.ChangedAutoRescales">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoObject.AutoRescales"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoObject.ChangedResizesRealtime">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoObject.ResizesRealtime"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoObject.ChangedShadowed">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoObject.Shadowed"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoObject.ChangedAddedObserver">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoObject.ChangedRemovedObserver">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoObject.ChangedDragsNode">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoObject.DragsNode"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoObject.ChangedPrintable">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoObject.Printable"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoObject.ChangedInitializing">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoObject.Initializing"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoObject.LastChangedHint">
            <summary>
            Users can define their own <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> event subhint values greater than this value.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.#ctor">
            <summary>
            The constructor produces a GoObject with no <see cref="P:Northwoods.GoWeb.GoObject.Parent"/>
            that is not part of any <see cref="P:Northwoods.GoWeb.GoObject.Layer"/> and that has no particular
            <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/>.
            </summary>
            <remarks>
            By default the following properties are true:
            <see cref="P:Northwoods.GoWeb.GoObject.Visible"/>, <see cref="P:Northwoods.GoWeb.GoObject.Selectable"/>, <see cref="P:Northwoods.GoWeb.GoObject.Movable"/>,
            <see cref="P:Northwoods.GoWeb.GoObject.Copyable"/>, <see cref="P:Northwoods.GoWeb.GoObject.Resizable"/>, <see cref="P:Northwoods.GoWeb.GoObject.Reshapable"/>,
            <see cref="P:Northwoods.GoWeb.GoObject.Deletable"/>, <see cref="P:Northwoods.GoWeb.GoObject.AutoRescales"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.CopyObject(Northwoods.GoWeb.GoCopyDictionary)">
            <summary>
            Called during the first phase of the copy process to produce a copy
            of this object within the given copy dictionary.
            </summary>
            <param name="env">
            The <see cref="T:Northwoods.GoWeb.GoCopyDictionary"/> provides the context to be used for performing
            the copy.
            </param>
            <returns>
            A newly allocated copy of this object, or null.
            </returns>
            <remarks>
            <para>
            If you just need to make a copy of a <see cref="T:Northwoods.GoWeb.GoObject"/>, call
            <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="M:Northwoods.GoWeb.GoObject.Copy"/>, or
            <see cref="T:Northwoods.GoWeb.GoDocument"/>.<see cref="M:Northwoods.GoWeb.GoDocument.AddCopy(Northwoods.GoWeb.GoObject,System.Drawing.PointF)"/>, or
            <see cref="M:Northwoods.GoWeb.GoDocument.CopyFromCollection(Northwoods.GoWeb.IGoCollection)"/> if
            you have more than one object to copy.
            </para>
            <para>
            You should override this method in your derived classes when it has some
            fields that have reference objects that need to be copied.
            Your override method should first call <c>base.CopyObject(env)</c>
            to get the newly copied object.
            The standard implementation of this method for <see cref="T:Northwoods.GoWeb.GoObject"/>
            is to do a shallow copy, by <c>Object.MemberwiseClone()</c>.
            The result should be the object you return, after performing any
            other deeper copying of referenced objects that you deem necessary,
            and after removing references that should not be shared (such as to
            cached data structures).
            If <c>base.CopyObject(env)</c> returns null, it's either already copied,
            or mapped to an existing object in this document,
            or shouldn't be copied at all.
            </para>
            <para>
            The copied object does not belong to any layer or any group, nor does
            it have any observers; the ultimate caller
            (i.e. <see cref="T:Northwoods.GoWeb.GoDocument"/>.<see cref="M:Northwoods.GoWeb.GoDocument.CopyFromCollection(Northwoods.GoWeb.IGoCollection)"/>)
            is responsible for adding it to the appropriate
            collection and <see cref="M:Northwoods.GoWeb.GoObject.CopyObjectDelayed(Northwoods.GoWeb.GoCopyDictionary,Northwoods.GoWeb.GoObject)"/> is responsible
            for adding the appropriate observers.
            </para>
            <para>
            You probably should not be calling this method for any reason
            but the initial <c>base.CopyObject(env)</c> call in an override
            of this method; normally only
            <see cref="T:Northwoods.GoWeb.GoCopyDictionary"/>.<see cref="M:Northwoods.GoWeb.GoCopyDictionary.Copy(Northwoods.GoWeb.GoObject)"/>
            is the caller.
            Within an override of this method, if you need to make a copy of another object,
            call <see cref="T:Northwoods.GoWeb.GoCopyDictionary"/>.<see cref="M:Northwoods.GoWeb.GoCopyDictionary.Copy(Northwoods.GoWeb.GoObject)"/> instead.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.CopyObjectDelayed(Northwoods.GoWeb.GoCopyDictionary,Northwoods.GoWeb.GoObject)">
            <summary>
            For objects that require a second pass to complete the copying,
            this method is called after the first pass of copying all of the objects
            in <see cref="M:Northwoods.GoWeb.GoDocument.CopyFromCollection(Northwoods.GoWeb.IGoCollection)"/>.
            </summary>
            <param name="env"></param>
            <param name="newobj"></param>
            <remarks>
            <para>
            This method need only be overridden by objects that refer to other
            independent objects.  The problem usually is that during the
            call to <see cref="M:Northwoods.GoWeb.GoObject.CopyObject(Northwoods.GoWeb.GoCopyDictionary)"/>, some of the objects that this
            object refers to might not yet have been copied.  So it's best to
            add this object to the <see cref="P:Northwoods.GoWeb.GoCopyDictionary.Delayeds"/>
            collection in the call to <see cref="M:Northwoods.GoWeb.GoObject.CopyObject(Northwoods.GoWeb.GoCopyDictionary)"/>, and then
            fix things up during the second pass in the call to this method.
            </para>
            <para>
            For most objects, this method just adds the new observers that are
            copies of any old observers of this object.  For <see cref="T:Northwoods.GoWeb.GoLink"/>s,
            however, it also makes sure both ports refer to the copied ports, and
            if the ports were not copied, it removes the link.
            </para>
            <para>
            The base method should be called by any override that you define.
            You should not be calling this method from other code; normally only
            <see cref="T:Northwoods.GoWeb.GoCopyDictionary"/>.<see cref="M:Northwoods.GoWeb.GoCopyDictionary.FinishDelayedCopies"/>
            is the caller.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.Copy">
            <summary>
            This convenience method just makes a copy of the object itself,
            using a generic <see cref="T:Northwoods.GoWeb.GoCopyDictionary"/>.
            </summary>
            <returns></returns>
            <remarks>
            <para>
            The easiest way to add a copy of an object to a document is to call
            <see cref="T:Northwoods.GoWeb.GoDocument"/>.<see cref="M:Northwoods.GoWeb.GoDocument.AddCopy(Northwoods.GoWeb.GoObject,System.Drawing.PointF)"/>.
            </para>
            <para>
            This method is implemented as:
            <code>
              GoDocument doc = this.Document;
              GoCopyDictionary env;
              if (doc != null)
                env = doc.CreateCopyDictionary();
              else
                env = new GoCopyDictionary();
              return env.CopyComplete(this);
            </code>
            <see cref="T:Northwoods.GoWeb.GoCopyDictionary"/>.<see cref="M:Northwoods.GoWeb.GoCopyDictionary.Copy(Northwoods.GoWeb.GoObject)"/> calls
            <see cref="M:Northwoods.GoWeb.GoObject.CopyObject(Northwoods.GoWeb.GoCopyDictionary)"/> to allow the object to decide how to copy itself.
            Although the use of a copy dictionary isn't really needed for the
            simplest objects, more complex objects (such as <see cref="T:Northwoods.GoWeb.GoGroup"/>s)
            may contain references that need to be resolved with a second pass.
            </para>
            <para>
            If you want to copy many objects, it will be more efficient to
            allocate your own <see cref="T:Northwoods.GoWeb.GoCopyDictionary"/>,
            call <see cref="T:Northwoods.GoWeb.GoCopyDictionary"/>.<see cref="M:Northwoods.GoWeb.GoCopyDictionary.Copy(Northwoods.GoWeb.GoObject)"/> on each object,
            and then finally call <see cref="T:Northwoods.GoWeb.GoCopyDictionary"/>.<see cref="M:Northwoods.GoWeb.GoCopyDictionary.FinishDelayedCopies"/>.
            But if you are just going to be adding those copied objects into a <see cref="T:Northwoods.GoWeb.GoDocument"/>,
            just call <see cref="M:Northwoods.GoWeb.GoDocument.CopyFromCollection(Northwoods.GoWeb.IGoCollection)"/> or
            the more general override of that method.
            </para>
            <para>
            If you want to make many copies of one object, it will be more efficient to
            allocate your own <see cref="T:Northwoods.GoWeb.GoCopyDictionary"/>,
            and then for each copy you want to make,
            call <see cref="T:Northwoods.GoWeb.GoCopyDictionary"/>.<see cref="M:Northwoods.GoWeb.GoCopyDictionary.CopyComplete(Northwoods.GoWeb.GoObject)"/> on the object
            followed by a call to <c>Clear()</c> the dictionary.
            Clearing the copy dictionary will make sure each <see cref="M:Northwoods.GoWeb.GoCopyDictionary.CopyComplete(Northwoods.GoWeb.GoObject)"/>
            call does not share any references with any other copy.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.IsChildOf(Northwoods.GoWeb.GoObject)">
            <summary>
            Determines if this object is a child, perhaps indirectly, of the given object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <remarks>
            This predicate will be false if <paramref name="obj"/> is this object itself or
            if it is not a <see cref="T:Northwoods.GoWeb.GoGroup"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.FindCommonParent(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject)">
            <summary>
            Find the <see cref="T:Northwoods.GoWeb.GoGroup"/> that is closest parent group for this object and another.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>
            This will return null if either argument is null or
            if there is no parent group that contains both objects.
            If <paramref name="a"/> is the same object as <paramref name="b"/>, it will return it.
            If <paramref name="a"/> is a parent of <paramref name="b"/>,
            it will return <paramref name="a"/>. 
            If <paramref name="b"/> is a parent of <paramref name="a"/>,
            it will return <paramref name="b"/>. 
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.Remove">
            <summary>
            This convenience method just removes this object from its container, if there is any.
            </summary>
            <remarks>
            This is implemented as:
            <code>
              GoLayer layer = this.Layer;
              if (layer != null) {
                layer.Remove(this);
              } else {
                GoGroup parent = this.Parent;
                if (parent != null)
                  parent.Remove(this);
              }
            </code>
            Removing an object from a layer also removes it from its parent group, if any.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.ComputeBounds">
            <summary>
            Recalculates the actual bounding rectangle for this object when it might
            be invalid.
            </summary>
            <returns>
            The true bounding rectangle, in document coordinates.
            </returns>
            <remarks>
            This method is called if the <see cref="P:Northwoods.GoWeb.GoObject.InvalidBounds"/> property
            is true, and some code needs the value of the <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/>
            property or after the bounds have changed and <see cref="M:Northwoods.GoWeb.GoObject.OnBoundsChanged(System.Drawing.RectangleF)"/>
            or <see cref="T:Northwoods.GoWeb.GoGroup"/>.<see cref="M:Northwoods.GoWeb.GoGroup.OnChildBoundsChanged(Northwoods.GoWeb.GoObject,System.Drawing.RectangleF)"/> have been called.
            The <see cref="P:Northwoods.GoWeb.GoObject.InvalidBounds"/> property is set back to false
            just before calling this method.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.SpotOpposite(System.Int32)">
            <summary>
            Get the spot that is on the opposite side of a given spot.
            </summary>
            <param name="spot">
            A predefined or user-defined integer spot or handle ID.
            </param>
            <returns>
            The opposite spot for the standard nine object spots.
            For other values, it just returns that value.
            </returns>
            <remarks>
            This is typically used by methods that position objects in
            a group (such as <see cref="T:Northwoods.GoWeb.GoGroup"/>.<see cref="M:Northwoods.GoWeb.GoGroup.LayoutChildren(Northwoods.GoWeb.GoObject)"/>)
            or that specify link points for ports
            (e.g. <see cref="T:Northwoods.GoWeb.GoPort"/>.<see cref="P:Northwoods.GoWeb.GoPort.ToSpot"/>).
            You may want to override this method to handle your own
            custom spot values, those with a value greater than
            </remarks>
            <see cref="F:Northwoods.GoWeb.GoObject.LastSpot"/>.
            <seealso cref="M:Northwoods.GoWeb.GoObject.GetSpotLocation(System.Int32)"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.SetSpotLocation(System.Int32,System.Drawing.PointF)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.GetRectangleSpotLocation(System.Drawing.RectangleF,System.Int32)">
            <summary>
            Get the position of a spot in a rectangle.
            </summary>
            <param name="r">a <c>RectangleF</c></param>
            <param name="spot">a predefine or user-defined integer spot or handle ID.</param>
            <returns>the <c>PointF</c> position of that spot in the rectangle</returns>
            <remarks>
            This is typically used by methods that need to position objects within a group.
            You may want to override this method to handle your own
            custom spot values, those with a value greater than <see cref="F:Northwoods.GoWeb.GoObject.LastSpot"/>.
            If you do so, you will also need to override <see cref="M:Northwoods.GoWeb.GoObject.SetRectangleSpotLocation(System.Drawing.RectangleF,System.Int32,System.Drawing.PointF)"/>
            and <see cref="M:Northwoods.GoWeb.GoObject.SpotOpposite(System.Int32)"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.SetRectangleSpotLocation(System.Drawing.RectangleF,System.Int32,System.Drawing.PointF)"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.GetSpotLocation(System.Int32)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.SetRectangleSpotLocation(System.Drawing.RectangleF,System.Int32,System.Drawing.PointF)">
            <summary>
            Modify a rectangle such that its new spot location is at a given point.
            </summary>
            <param name="r">a <c>RectangleF</c></param>
            <param name="spot">a predefine or user-defined integer spot or handle ID.</param>
            <param name="p">a <c>PointF</c> specifying the desired new location for the rectangle</param>
            <returns>the modified <c>RectangleF</c>; the original Width and Height are kept.</returns>
            <remarks>
            This is typically used by methods that need to position objects within a group.
            You may want to override this method to handle your own
            custom spot values, those with a value greater than <see cref="F:Northwoods.GoWeb.GoObject.LastSpot"/>.
            If you do so, you will also need to override <see cref="M:Northwoods.GoWeb.GoObject.GetRectangleSpotLocation(System.Drawing.RectangleF,System.Int32)"/>
            and <see cref="M:Northwoods.GoWeb.GoObject.SpotOpposite(System.Int32)"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.GetRectangleSpotLocation(System.Drawing.RectangleF,System.Int32)"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.GetSpotLocation(System.Int32)"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.SetSpotLocation(System.Int32,System.Drawing.PointF)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.GetSpotLocation(System.Int32)">
            <summary>
            Get the position of a spot on this object.
            </summary>
            <param name="spot">
            A predefined or user-defined integer spot or handle ID.
            </param>
            <returns>
            A <c>PointF</c> value in document coordinates.
            </returns>
            <remarks>
            If you want to define your own custom spots, you may wish
            to override the <see cref="M:Northwoods.GoWeb.GoObject.GetRectangleSpotLocation(System.Drawing.RectangleF,System.Int32)"/> method
            and related methods.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.GetRectangleSpotLocation(System.Drawing.RectangleF,System.Int32)"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.SetSpotLocation(System.Int32,System.Drawing.PointF)"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.SetSpotLocation(System.Int32,Northwoods.GoWeb.GoObject,System.Int32)"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.SpotOpposite(System.Int32)"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Location"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Position"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.SetSpotLocation(System.Int32,System.Drawing.PointF)">
            <summary>
            Move this object so this object's given spot is at the given location.
            </summary>
            <param name="spot">
            A predefined or user-defined integer spot or handle ID.
            </param>
            <param name="newp">
            The new <c>PointF</c> position for this object's spot to be at.
            </param>
            <remarks>
            If you want to define your own custom spots, you may wish
            to override the <see cref="M:Northwoods.GoWeb.GoObject.SetRectangleSpotLocation(System.Drawing.RectangleF,System.Int32,System.Drawing.PointF)"/> method
            and related methods.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.SetRectangleSpotLocation(System.Drawing.RectangleF,System.Int32,System.Drawing.PointF)"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.GetSpotLocation(System.Int32)"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.SetSpotLocation(System.Int32,Northwoods.GoWeb.GoObject,System.Int32)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.SetSpotLocation(System.Int32,Northwoods.GoWeb.GoObject,System.Int32)">
            <summary>
            Move this object so this object's given spot is the same as another
            object's spot's position.
            </summary>
            <param name="spot">
            A predefined or user-defined integer spot or handle ID.
            </param>
            <param name="obj">another <see cref="T:Northwoods.GoWeb.GoObject"/></param>
            <param name="otherSpot">a spot on the other object, <paramref name="obj"/></param>
            <remarks>
            <para>
            Use this method when you want a spot on this object to be exactly at
            a spot on another object, by moving this object.
            </para>
            <para>
            Remember that this method just moves this object once.
            When other objects in a group resize or move, this object will
            not automatically follow.  You will need to override <see cref="M:Northwoods.GoWeb.GoGroup.LayoutChildren(Northwoods.GoWeb.GoObject)"/>
            to maintain whatever layout you want.
            </para>
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.GetSpotLocation(System.Int32)"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.SetSpotLocation(System.Int32,System.Drawing.PointF)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.SetSpotLocation(System.Int32,Northwoods.GoWeb.GoObject,System.Int32,System.Drawing.SizeF)">
            <summary>
            Move this object so this object's given spot is the same as another
            object's spot's position and offset by a given distance.
            </summary>
            <param name="spot">
            A predefined or user-defined integer spot or handle ID.
            </param>
            <param name="obj">another <see cref="T:Northwoods.GoWeb.GoObject"/></param>
            <param name="otherSpot">a spot on the other object, <paramref name="obj"/></param>
            <param name="offset"></param>
            <remarks>
            <para>
            Use this method when you want a spot on this object to be near,
            but not exactly at, a spot on another object, by moving this object.
            This is just like <see cref="M:Northwoods.GoWeb.GoObject.SetSpotLocation(System.Int32,Northwoods.GoWeb.GoObject,System.Int32)"/>,
            except that it first adds the <paramref name="offset"/> width and height
            to the point of the <paramref name="obj"/>'s <paramref name="otherSpot"/>.
            </para>
            <para>
            Remember that this method just moves this object once.
            When other objects in a group resize or move, this object will
            not automatically follow.  You will need to override <see cref="M:Northwoods.GoWeb.GoGroup.LayoutChildren(Northwoods.GoWeb.GoObject)"/>
            to maintain whatever layout you want.
            </para>
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.GetSpotLocation(System.Int32)"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.SetSpotLocation(System.Int32,System.Drawing.PointF)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.SetSpotLocation(System.Int32,Northwoods.GoWeb.GoObject,System.Int32,System.Single,System.Single)">
            <summary>
            Move this object so this object's given spot is the same as another
            object's spot's position and offset by a given X and Y distance.
            </summary>
            <param name="spot">
            A predefined or user-defined integer spot or handle ID.
            </param>
            <param name="obj">another <see cref="T:Northwoods.GoWeb.GoObject"/></param>
            <param name="otherSpot">a spot on the other object, <paramref name="obj"/></param>
            <param name="dx"></param>
            <param name="dy"></param>
            <remarks>
            <para>
            Use this method when you want a spot on this object to be near,
            but not exactly at, a spot on another object, by moving this object.
            This is just like <see cref="M:Northwoods.GoWeb.GoObject.SetSpotLocation(System.Int32,Northwoods.GoWeb.GoObject,System.Int32)"/>,
            except that it first adds the <paramref name="dx"/> and <paramref name="dy"/>
            offsets to the point of the <paramref name="obj"/>'s <paramref name="otherSpot"/>.
            </para>
            <para>
            Remember that this method just moves this object once.
            When other objects in a group resize or move, this object will
            not automatically follow.  You will need to override <see cref="M:Northwoods.GoWeb.GoGroup.LayoutChildren(Northwoods.GoWeb.GoObject)"/>
            to maintain whatever layout you want.
            </para>
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.GetSpotLocation(System.Int32)"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.SetSpotLocation(System.Int32,System.Drawing.PointF)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.SetSizeKeepingLocation(System.Drawing.SizeF)">
            <summary>
            Sets a new size for this object while maintaining the same location.
            </summary>
            <param name="s"></param>
            <remarks>
            If the natural location of an object is not the top-left corner,
            changing the size of an object will also change its location.
            However, there are times when you wish to change the size without
            changing the location.
            This method is more efficient than remembering the Location,
            setting the Size, and then setting the Location again.
            By default this assumes the <see cref="P:Northwoods.GoWeb.GoObject.Location"/> is really the
            <see cref="F:Northwoods.GoWeb.GoObject.TopLeft"/> spot of the object.
            If you override this method, you should also override the
            <see cref="P:Northwoods.GoWeb.GoObject.Location"/> property.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.LargestSizeKeepingAspectRatio(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Compute a <c>SizeF</c> that fits in <paramref name="target"/> while maintaining
            the aspect ratio given by <paramref name="aspect"/>.
            </summary>
            <param name="target"></param>
            <param name="aspect">if both width and height are zero or negative, assume 1x1</param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.CanView">
            <summary>
            Called to see if the user can see this object.
            </summary>
            <remarks>
            This returns true if <c>Visible</c>, if its parent
            is visible, and if this object is
            part of a layer, if <c>Layer.CanViewObjects</c> is true.
            This predicate is used by methods such as <see cref="M:Northwoods.GoWeb.GoObject.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)"/> and <see cref="M:Northwoods.GoWeb.GoObject.Pick(System.Drawing.PointF,System.Boolean)"/>.
            Painting operations may also want to call <see cref="M:Northwoods.GoWeb.GoObject.CanPrint"/>
            if the painting is occurring for a view that is printing.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Visible"/>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanViewObjects"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.CanPrint">
            <summary>
            Called to see if the view can print this object.
            </summary>
            <remarks>
            This returns true if <c>Printable</c>, if its parent
            is printable, and if this object is
            part of a layer, whether <c>Layer.CanPrintObjects</c> is true.
            This predicate is used by methods such as <see cref="M:Northwoods.GoWeb.GoObject.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)"/>
            when <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="P:Northwoods.GoWeb.GoView.IsPrinting"/> is true for a view.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Printable"/>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanPrintObjects"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.CanSelect">
            <summary>
            Called to see if the user can select this object.
            </summary>
            <remarks>
            This returns true if <c>Selectable</c>, and if this object is
            part of a layer, if <c>Layer.CanSelectObjects</c>.
            This object's parent need not be selectable for this
            object to be selectable.
            This predicate is used by methods such as <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="M:Northwoods.GoWeb.GoView.SelectInRectangle(System.Drawing.RectangleF)"/>
            and <see cref="M:Northwoods.GoWeb.GoObject.Pick(System.Drawing.PointF,System.Boolean)"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Selectable"/>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanSelectObjects"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.CanMove">
            <summary>
            Called to see if the user can move this object.
            </summary>
            <remarks>
            This returns true if <c>Movable</c>, and, if this object is
            in a layer, if <c>Layer.CanMoveObjects</c>.
            This object's parent need not be movable for this
            object to be movable.
            This predicate is used by methods such as <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="M:Northwoods.GoWeb.GoView.MoveSelection(Northwoods.GoWeb.GoSelection,System.Drawing.SizeF,System.Boolean)"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Movable"/>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanMoveObjects"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.CanCopy">
            <summary>
            Called to see if the user can copy this object.
            </summary>
            <remarks>
            This returns true if <c>Copyable</c>, and, if this object is
            in a layer, if <c>Layer.CanCopyObjects</c>.
            This object's parent need not be copyable for this
            object to be copyable.
            This predicate is used by methods such as <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="M:Northwoods.GoWeb.GoView.CopySelection(Northwoods.GoWeb.GoSelection,System.Drawing.SizeF,System.Boolean)"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Copyable"/>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanCopyObjects"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.CanResize">
            <summary>
            Called to see if the user can resize this object.
            </summary>
            <remarks>
            This returns true if <see cref="P:Northwoods.GoWeb.GoObject.Resizable"/>, and, if this object is
            in a layer, if <c>Layer.CanResizeObjects()</c> is true.
            This object's parent need not be resizable for this
            object to be resizable.
            This predicate is used by <see cref="T:Northwoods.GoWeb.GoToolResizing"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Resizable"/>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanResizeObjects"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.CanReshape">
            <summary>
            Called to see if the user can reshape this object.
            </summary>
            <remarks>
            This returns true if <c>Reshapable</c>, and, if this object is
            in a layer, if <c>Layer.CanReshapeObjects</c>.
            This object's parent need not be reshapable for this
            object to be reshapable.
            This predicate is used by <see cref="T:Northwoods.GoWeb.GoToolResizing"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Reshapable"/>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanReshapeObjects"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.CanDelete">
            <summary>
            Called to see if the user can delete this object.
            </summary>
            <remarks>
            This returns true if <c>Deletable</c>, and, if this object is
            in a layer, if <c>Layer.CanDeleteObjects</c>.
            This object's parent need not be deletable for this
            object to be deletable.
            This predicate is used by methods such as <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="M:Northwoods.GoWeb.GoView.DeleteSelection(Northwoods.GoWeb.GoSelection)"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Deletable"/>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanDeleteObjects"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.CanEdit">
            <summary>
            Called to see if the user can edit this object.
            </summary>
            <remarks>
            This returns true if <c>Editable</c>, and, if this object is
            in a layer, if <c>Layer.CanEditObjects</c>.
            This object's parent need not be editable for this
            object to be editable.
            This predicate is used by methods such as <see cref="T:Northwoods.GoWeb.GoText"/>.<see cref="M:Northwoods.GoWeb.GoText.OnSingleClick(Northwoods.GoWeb.GoInputEventArgs,Northwoods.GoWeb.GoView)"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Editable"/>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanEditObjects"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.Changing(System.Int32)">
            <summary>
            Notify this object's document or view that some part of this object's
            state is about to be changed.
            </summary>
            <param name="subhint"></param>
            <remarks>
            Normally this method is only called for the benefit of the
            <see cref="T:Northwoods.GoWeb.GoUndoManager"/> to record larger or more complex state
            before a change than can easily or efficiently be passed as the
            "old" or "previous" value in a call to <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>.
            This method does nothing if <see cref="P:Northwoods.GoWeb.GoObject.SuspendsUpdates"/> is true.
            If you intend to turn on <see cref="P:Northwoods.GoWeb.GoObject.SuspendsUpdates"/> for a while,
            to reduce the overhead of repeated notifications,
            you probably should call this method first and make sure the
            <see cref="M:Northwoods.GoWeb.GoObject.CopyOldValueForUndo(Northwoods.GoWeb.GoChangedEventArgs)"/> and <see cref="M:Northwoods.GoWeb.GoObject.CopyNewValueForRedo(Northwoods.GoWeb.GoChangedEventArgs)"/>
            methods can remember all of the relevant state before the unrecorded
            changes occur.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)">
            <summary>
            Notify this object's document or view that some part of this object's
            state has been changed, via the <see cref="T:Northwoods.GoWeb.GoDocument"/>.<see cref="E:Northwoods.GoWeb.GoDocument.Changed"/>
            event and using the <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/> event args class.
            </summary>
            <param name="subhint">
            the value for <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/>.<see cref="P:Northwoods.GoWeb.GoChangedEventArgs.SubHint"/>
            </param>
            <param name="oldI">
            An <c>integer</c> value.
            </param>
            <param name="oldVal">
            An <c>Object</c> value.
            </param>
            <param name="oldRect">
            A <c>RectangleF</c> value, also useful for <c>PointF</c>, <c>SizeF</c>, and <c>float</c> values.
            </param>
            <param name="newI">
            An <c>integer</c> value.
            </param>
            <param name="newVal">
            An <c>Object</c> value.
            </param>
            <param name="newRect">
            A <c>RectangleF</c> value, also useful for <c>PointF</c>, <c>SizeF</c>, and <c>float</c> values.
            </param>
            <remarks>
            <para>
            Any override of this method and any methods that this calls should not
            further modify this object, either directly or indirectly.
            </para>
            <para>
            Each of your property setters should call this method after actually
            changing the object's state.
            You should only call this method if the property's value actually changed.
            You should use the <paramref name="oldI"/>, <paramref name="oldVal"/>,
            and/or <paramref name="oldRect"/> parameters for passing the previous old
            property value.
            You should use the <paramref name="newI"/>, <paramref name="newVal"/>,
            and/or <paramref name="newRect"/> parameters for passing the new
            property value.
            The old and new values can be used by <see cref="T:Northwoods.GoWeb.GoDocument"/>.<see cref="E:Northwoods.GoWeb.GoDocument.Changed"/>
            event handlers to update their state.
            A special case of such event handlers is the <see cref="T:Northwoods.GoWeb.GoUndoManager"/>,
            which records the old and new values so that it can perform undo and redo
            operations.
            </para>
            <para>
            If <see cref="P:Northwoods.GoWeb.GoObject.SuspendsUpdates"/> is true (it is normally false of course),
            this method does nothing.  Your override of this method should check for
            <see cref="P:Northwoods.GoWeb.GoObject.SuspendsUpdates"/> before invoking any updating functionality.
            If this object is part of a layer, it calls
            <see cref="M:Northwoods.GoWeb.IGoLayerCollectionContainer.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            with a hint of <see cref="T:Northwoods.GoWeb.GoLayer"/>.<see cref="F:Northwoods.GoWeb.GoLayer.ChangedObject"/>.
            If there are any observers watching changes to this object,
            this method calls <see cref="M:Northwoods.GoWeb.GoObject.OnObservedChanged(Northwoods.GoWeb.GoObject,System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> on each of this object's
            observers.
            </para>
            <para>
            A number of subhints are pre-defined:
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoObject"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoObject.RepaintAll"/></term> <term>1000</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoObject.ChangedBounds"/></term> <term>1001</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoObject.ChangedVisible"/></term> <term>1003</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoObject.ChangedSelectable"/></term> <term>1004</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoObject.ChangedMovable"/></term> <term>1005</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoObject.ChangedCopyable"/></term> <term>1006</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoObject.ChangedResizable"/></term> <term>1007</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoObject.ChangedReshapable"/></term> <term>1008</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoObject.ChangedDeletable"/></term> <term>1009</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoObject.ChangedEditable"/></term> <term>1010</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoObject.ChangedAutoRescales"/></term> <term>1011</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoObject.ChangedResizesRealtime"/></term> <term>1012</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoObject.ChangedShadowed"/></term> <term>1013</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoObject.ChangedAddedObserver"/></term> <term>1014</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoObject.ChangedRemovedObserver"/></term> <term>1015</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoObject.ChangedDragsNode"/></term> <term>1016</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoObject.ChangedPrintable"/></term> <term>1017</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoObject.ChangedInitializing"/></term> <term>1041</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoObject.LastChangedHint"/></term> <term>10000</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoGroup"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGroup.InsertedObject"/></term> <term>1051</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGroup.RemovedObject"/></term> <term>1052</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGroup.ChangedZOrder"/></term> <term>1053</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGroup.ReplacedObject"/></term> <term>1054</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGroup.ChangedPickableBackground"/></term> <term>1055</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGroup.AddedChildName"/></term> <term>1056</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGroup.RemovedChildName"/></term> <term>1057</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoShape"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoShape.ChangedPen"/></term> <term>1101</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoShape.ChangedBrush"/></term> <term>1102</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoDrawing"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDrawing.AddedPoint"/></term> <term>1151</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDrawing.RemovedPoint"/></term> <term>1152</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDrawing.ModifiedPoint"/></term> <term>1153</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDrawing.ChangedData"/></term> <term>1154</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDrawing.ChangedFillMode"/></term> <term>1155</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDrawing.ChangedAngle"/></term> <term>1156</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDrawing.ChangedUnrotatedBounds"/></term> <term>1160</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDrawing.ChangedSmoothCurves"/></term> <term>1161</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDrawing.ChangedSameEndPoints"/></term> <term>1162</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDrawing.ChangedShowsBoundingHandle"/></term> <term>1163</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDrawing.ChangedReshapablePoints"/></term> <term>1164</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDrawing.ChangedReshapableRectangle"/></term> <term>1165</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDrawing.ChangedPickMargin"/></term> <term>1166</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDrawing.ChangedFigure"/></term> <term>1167</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoStroke"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoStroke.AddedPoint"/></term> <term>1201</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoStroke.RemovedPoint"/></term> <term>1202</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoStroke.ModifiedPoint"/></term> <term>1203</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoStroke.ChangedAllPoints"/></term> <term>1204</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoStroke.ChangedStyle"/></term> <term>1205</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoStroke.ChangedCurviness"/></term> <term>1206</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoStroke.ChangedHighlightPen"/></term> <term>1236</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoStroke.ChangedHighlight"/></term> <term>1237</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoStroke.ChangedHighlightWhenSelected"/></term> <term>1238</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoStroke.ChangedToArrowHead"/></term> <term>1250</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoStroke.ChangedToArrowLength"/></term> <term>1251</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoStroke.ChangedToArrowShaftLength"/></term> <term>1252</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoStroke.ChangedToArrowWidth"/></term> <term>1253</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoStroke.ChangedToArrowFilled"/></term> <term>1254</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoStroke.ChangedToArrowStyle"/></term> <term>1255</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoStroke.ChangedFromArrowHead"/></term> <term>1260</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoStroke.ChangedFromArrowLength"/></term> <term>1261</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoStroke.ChangedFromArrowShaftLength"/></term> <term>1262</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoStroke.ChangedFromArrowWidth"/></term> <term>1263</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoStroke.ChangedFromArrowFilled"/></term> <term>1264</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoStroke.ChangedFromArrowStyle"/></term> <term>1265</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoLink"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLink.ChangedLinkUserFlags"/></term> <term>1300</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLink.ChangedLinkUserObject"/></term> <term>1301</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLink.ChangedFromPort"/></term> <term>1302</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLink.ChangedToPort"/></term> <term>1303</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLink.ChangedOrthogonal"/></term> <term>1304</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLink.ChangedRelinkable"/></term> <term>1305</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLink.ChangedAbstractLink"/></term> <term>1306</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLink.ChangedAvoidsNodes"/></term> <term>1307</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLink.ChangedPartID"/></term> <term>1309</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLink.ChangedAdjustingStyle"/></term> <term>1310</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLink.ChangedToolTipText"/></term> <term>1311</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLink.ChangedDraggableOrthogonalSegments"/></term> <term>1312</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoLabeledLink"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLabeledLink.ChangedLink"/></term> <term>1311</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLabeledLink.ChangedFromLabel"/></term> <term>1312</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLabeledLink.ChangedMidLabel"/></term> <term>1313</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLabeledLink.ChangedToLabel"/></term> <term>1314</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLabeledLink.ChangedFromLabelCentered"/></term> <term>1315</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLabeledLink.ChangedMidLabelCentered"/></term> <term>1316</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLabeledLink.ChangedToLabelCentered"/></term> <term>1317</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoPolygon"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoPolygon.AddedPoint"/></term> <term>1401</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoPolygon.RemovedPoint"/></term> <term>1402</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoPolygon.ModifiedPoint"/></term> <term>1403</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoPolygon.ChangedAllPoints"/></term> <term>1412</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoPolygon.ChangedStyle"/></term> <term>1414</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoRoundedRectangle"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoRoundedRectangle.ChangedCorner"/></term> <term>1421</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoRoundedRectangle.ChangedRoundedCornerSpots"/></term> <term>1422</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoTriangle"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoTriangle.ChangedPointA"/></term> <term>1431</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoTriangle.ChangedPointB"/></term> <term>1432</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoTriangle.ChangedPointC"/></term> <term>1433</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoTriangle.ChangedAllPoints"/></term> <term>1434</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoHexagon"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoHexagon.ChangedDistanceLeft"/></term> <term>1442</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoHexagon.ChangedDistanceRight"/></term> <term>1443</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoHexagon.ChangedDistanceTop"/></term> <term>1444</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoHexagon.ChangedDistanceBottom"/></term> <term>1445</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoHexagon.ChangedOrientation"/></term> <term>1446</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoHexagon.ChangedReshapeBehavior"/></term> <term>1447</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoHexagon.ChangedReshapableCorner"/></term> <term>1448</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoHexagon.ChangedKeepsLengthwiseSymmetry"/></term> <term>1449</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoHexagon.ChangedKeepsCrosswiseSymmetry"/></term> <term>1450</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoPie"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoPie.ChangedStartAngle"/></term> <term>1451</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoPie.ChangedSweepAngle"/></term> <term>1452</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoPie.ChangedResizableStartAngle"/></term> <term>1453</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoPie.ChangedResizableEndAngle"/></term> <term>1454</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoTrapezoid"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoTrapezoid.ChangedPointA"/></term> <term>1460</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoTrapezoid.ChangedPointB"/></term> <term>1461</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoTrapezoid.ChangedPointC"/></term> <term>1462</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoTrapezoid.ChangedPointD"/></term> <term>1463</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoTrapezoid.ChangedAllPoints"/></term> <term>1464</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoTrapezoid.ChangedOrientation"/></term> <term>1465</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoParallelogram"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoParallelogram.ChangedSkew"/></term> <term>1466</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoParallelogram.ChangedReshapableSkew"/></term> <term>1467</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoParallelogram.ChangedDirection"/></term> <term>1468</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoOctagon"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoOctagon.ChangedCorner"/></term> <term>1469</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoOctagon.ChangedReshapableCorner"/></term> <term>1470</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoCylinder"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoCylinder.ChangedMinorRadius"/></term> <term>1481</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoCylinder.ChangedOrientation"/></term> <term>1482</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoCylinder.ChangedPerspective"/></term> <term>1483</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoCylinder.ChangedResizableRadius"/></term> <term>1484</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoCube"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoCube.ChangedDepth"/></term> <term>1491</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoCube.ChangedPerspective"/></term> <term>1492</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoCube.ChangedReshapableDepth"/></term> <term>1493</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoText"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoText.ChangedText"/></term> <term>1501</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoText.ChangedFamilyName"/></term> <term>1502</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoText.ChangedFontSize"/></term> <term>1503</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoText.ChangedAlignment"/></term> <term>1504</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoText.ChangedTextColor"/></term> <term>1505</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoText.ChangedBackgroundColor"/></term> <term>1506</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoText.ChangedTransparentBackground"/></term> <term>1507</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoText.ChangedBold"/></term> <term>1508</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoText.ChangedItalic"/></term> <term>1509</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoText.ChangedUnderline"/></term> <term>1510</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoText.ChangedStrikeThrough"/></term> <term>1511</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoText.ChangedMultiline"/></term> <term>1512</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoText.ChangedBackgroundOpaqueWhenSelected"/></term> <term>1515</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoText.ChangedClipping"/></term> <term>1516</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoText.ChangedAutoResizes"/></term> <term>1518</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoText.ChangedWrapping"/></term> <term>1520</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoText.ChangedWrappingWidth"/></term> <term>1521</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoText.ChangedGdiCharSet"/></term> <term>1522</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoText.ChangedEditorStyle"/></term> <term>1523</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoText.ChangedMinimum"/></term> <term>1524</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoText.ChangedMaximum"/></term> <term>1525</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoText.ChangedDropDownList"/></term> <term>1526</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoText.ChangedChoices"/></term> <term>1527</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoText.ChangedRightToLeft"/></term> <term>1528</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoText.ChangedRightToLeftFromView"/></term> <term>1529</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoText.ChangedBordered"/></term> <term>1530</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoText.ChangedStringTrimming"/></term> <term>1531</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoText.ChangedEditableWhenSelected"/></term> <term>1532</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoImage"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoImage.ChangedImage"/></term> <term>1601</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoImage.ChangedResourceManager"/></term> <term>1602</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoImage.ChangedName"/></term> <term>1603</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoImage.ChangedAlignment"/></term> <term>1604</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoImage.ChangedAutoResizes"/></term> <term>1605</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoImage.ChangedImageList"/></term> <term>1606</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoImage.ChangedIndex"/></term> <term>1607</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoImage.ChangedThrowsExceptions"/></term> <term>1608</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoImage.ChangedNameIsUri"/></term> <term>1609</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoPort"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoPort.ChangedPortUserFlags"/></term> <term>1700</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoPort.ChangedPortUserObject"/></term> <term>1701</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoPort.ChangedStyle"/></term> <term>1702</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoPort.ChangedObject"/></term> <term>1703</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoPort.ChangedValidFrom"/></term> <term>1704</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoPort.ChangedValidTo"/></term> <term>1705</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoPort.ChangedValidSelfNode"/></term> <term>1706</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoPort.ChangedFromSpot"/></term> <term>1707</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoPort.ChangedToSpot"/></term> <term>1708</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoPort.ChangedAddedLink"/></term> <term>1709</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoPort.ChangedRemovedLink"/></term> <term>1710</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoPort.ChangedValidDuplicateLinks"/></term> <term>1711</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoPort.ChangedEndSegmentLength"/></term> <term>1712</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoPort.ChangedPartID"/></term> <term>1713</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoPort.ChangedClearsLinksWhenRemoved"/></term> <term>1714</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoPort.ChangedValidSingleLink"/></term> <term>1715</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoGrid"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGrid.ChangedStyle"/></term> <term>1801</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGrid.ChangedOrigin"/></term> <term>1802</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGrid.ChangedOriginRelative"/></term> <term>1803</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGrid.ChangedCellSize"/></term> <term>1804</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGrid.ChangedLineColor"/></term> <term>1805</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGrid.ChangedLineWidth"/></term> <term>1806</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGrid.ChangedLineDashStyle"/></term> <term>1807</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGrid.ChangedSnapDrag"/></term> <term>1808</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGrid.ChangedSnapResize"/></term> <term>1809</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGrid.ChangedCellColors"/></term> <term>1810</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGrid.ChangedUnboundedSpots"/></term> <term>1811</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGrid.ChangedSnapDragWhole"/></term> <term>1812</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGrid.ChangedSnapOpaque"/></term> <term>1814</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGrid.ChangedSnapCellSpot"/></term> <term>1815</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGrid.ChangedMajorLineColor"/></term> <term>1816</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGrid.ChangedMajorLineWidth"/></term> <term>1817</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGrid.ChangedMajorLineDashStyle"/></term> <term>1818</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGrid.ChangedMajorLineFrequency"/></term> <term>1819</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGrid.ChangedLineDashPattern"/></term> <term>1820</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGrid.ChangedMajorLineDashPattern"/></term> <term>1821</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoControl"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoControl.ChangedControlType"/></term> <term>1901</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoNode"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoNode.ChangedNodeUserFlags"/></term> <term>2000</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoNode.ChangedNodeUserObject"/></term> <term>2001</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoNode.ChangedToolTipText"/></term> <term>2002</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoNode.ChangedPartID"/></term> <term>2004</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoNodeIcon"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoNodeIcon.ChangedMinimumIconSize"/></term> <term>2050</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoNodeIcon.ChangedMaximumIconSize"/></term> <term>2051</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoBasicNode"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoBasicNode.ChangedLabelSpot"/></term> <term>2101</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoBasicNode.ChangedShape"/></term> <term>2102</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoBasicNode.ChangedLabel"/></term> <term>2103</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoBasicNode.ChangedPort"/></term> <term>2104</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoBasicNode.ChangedMiddleLabelMargin"/></term> <term>2105</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoBasicNode.ChangedAutoResizes"/></term> <term>2106</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoBoxNode"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoBoxNode.ChangedBody"/></term> <term>2201</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoBoxNode.ChangedPortBorderMargin"/></term> <term>2202</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoBoxNode.ChangedPort"/></term> <term>2203</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoBoxPort"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoBoxPort.ChangedLinkPointsSpread"/></term> <term>2211</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoBoxPort.ChangedFromSides"/></term> <term>2212</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoBoxPort.ChangedToSides"/></term> <term>2213</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoComment"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoComment.ChangedTopLeftMargin"/></term> <term>2301</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoComment.ChangedBottomRightMargin"/></term> <term>2302</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoComment.ChangedPartID"/></term> <term>2303</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoComment.ChangedBackground"/></term> <term>2304</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoComment.ChangedLabel"/></term> <term>2305</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoBalloon"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoBalloon.ChangedAnchor"/></term> <term>2310</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoBalloon.ChangedBaseWidth"/></term> <term>2312</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoBalloon.ChangedUnanchoredOffset"/></term> <term>2313</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoBalloon.ChangedReanchorable"/></term> <term>2314</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoGeneralNode"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGeneralNode.InsertedPort"/></term> <term>2401</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGeneralNode.RemovedPort"/></term> <term>2402</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGeneralNode.ReplacedPort"/></term> <term>2403</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGeneralNode.ChangedTopLabel"/></term> <term>2404</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGeneralNode.ChangedBottomLabel"/></term> <term>2405</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGeneralNode.ChangedIcon"/></term> <term>2406</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGeneralNode.ChangedOrientation"/></term> <term>2407</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGeneralNode.ChangedFromEndSegmentLengthStep"/></term> <term>2408</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGeneralNode.ChangedToEndSegmentLengthStep"/></term> <term>2409</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGeneralNode.ChangedLeftPortsAlignment"/></term> <term>2410</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGeneralNode.ChangedRightPortsAlignment"/></term> <term>2411</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGeneralNode.ChangedLeftPortsLabelSpacing"/></term> <term>2412</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGeneralNode.ChangedRightPortsLabelSpacing"/></term> <term>2413</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGeneralNode.ChangedLeftPortLabelsInside"/></term> <term>2414</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGeneralNode.ChangedRightPortLabelsInside"/></term> <term>2415</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoGeneralNodePort"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGeneralNodePort.ChangedName"/></term> <term>2430</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGeneralNodePort.ChangedLabel"/></term> <term>2431</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGeneralNodePort.ChangedSideIndex"/></term> <term>2432</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoGeneralNodePort.ChangedLeftSide"/></term> <term>2433</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoListGroup"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoListGroup.ChangedSpacing"/></term> <term>2501</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoListGroup.ChangedAlignment"/></term> <term>2502</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoListGroup.ChangedLinePen"/></term> <term>2503</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoListGroup.ChangedBorderPen"/></term> <term>2504</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoListGroup.ChangedBrush"/></term> <term>2505</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoListGroup.ChangedCorner"/></term> <term>2506</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoListGroup.ChangedTopLeftMargin"/></term> <term>2507</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoListGroup.ChangedBottomRightMargin"/></term> <term>2508</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoListGroup.ChangedOrientation"/></term> <term>2509</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoListGroup.ChangedTopIndex"/></term> <term>2510</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoListGroup.ChangedMinimumItemSize"/></term> <term>2511</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoSimpleNode"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoSimpleNode.ChangedText"/></term> <term>2601</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoSimpleNode.ChangedIcon"/></term> <term>2602</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoSimpleNode.ChangedLabel"/></term> <term>2603</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoSimpleNode.ChangedInPort"/></term> <term>2604</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoSimpleNode.ChangedOutPort"/></term> <term>2605</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoSimpleNode.ChangedOrientation"/></term> <term>2606</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoIconicNode"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoIconicNode.ChangedDraggableLabel"/></term> <term>2651</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoIconicNode.ChangedIcon"/></term> <term>2652</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoIconicNode.ChangedLabel"/></term> <term>2653</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoIconicNode.ChangedPort"/></term> <term>2654</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoIconicNode.ChangedLabelOffset"/></term> <term>2655</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoSubGraph"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoSubGraph.ChangedLabel"/></term> <term>2702</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoSubGraph.ChangedCollapsible"/></term> <term>2703</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoSubGraph.ChangedBackgroundColor"/></term> <term>2704</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoSubGraph.ChangedOpacity"/></term> <term>2705</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoSubGraph.ChangedLabelSpot"/></term> <term>2706</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoSubGraph.ChangedTopLeftMargin"/></term> <term>2707</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoSubGraph.ChangedBorderPen"/></term> <term>2708</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoSubGraph.ChangedCorner"/></term> <term>2710</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoSubGraph.ChangedPort"/></term> <term>2711</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoSubGraph.ChangedBottomRightMargin"/></term> <term>2712</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoSubGraph.ChangedCollapsedTopLeftMargin"/></term> <term>2713</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoSubGraph.ChangedCollapsedBottomRightMargin"/></term> <term>2714</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoSubGraph.ChangedCollapsedCorner"/></term> <term>2715</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoSubGraph.ChangedCollapsedLabelSpot"/></term> <term>2716</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoSubGraph.ChangedCollapsedObject"/></term> <term>2717</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoSubGraph.ChangedState"/></term> <term>2718</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoSubGraph.ChangedSavedBounds"/></term> <term>2719</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoSubGraph.ChangedSavedPaths"/></term> <term>2720</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoSubGraph.ChangedWasExpanded"/></term> <term>2721</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoSubGraph.ChangedExpandedResizable"/></term> <term>2722</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoTextNode"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoTextNode.ChangedLabel"/></term> <term>2801</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoTextNode.ChangedBackground"/></term> <term>2802</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoTextNode.ChangedTopPort"/></term> <term>2803</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoTextNode.ChangedRightPort"/></term> <term>2804</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoTextNode.ChangedBottomPort"/></term> <term>2805</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoTextNode.ChangedLeftPort"/></term> <term>2806</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoTextNode.ChangedTopLeftMargin"/></term> <term>2807</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoTextNode.ChangedBottomRightMargin"/></term> <term>2808</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoTextNode.ChangedAutoResizes"/></term> <term>2809</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoButton"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoButton.ChangedBackground"/></term> <term>2901</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoButton.ChangedIcon"/></term> <term>2902</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoButton.ChangedLabel"/></term> <term>2903</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoButton.ChangedTopLeftMargin"/></term> <term>2904</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoButton.ChangedBottomRightMargin"/></term> <term>2905</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoButton.ChangedActionEnabled"/></term> <term>2906</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoButton.ChangedAutoRepeating"/></term> <term>2907</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoCollapsibleHandle"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoCollapsibleHandle.ChangedStyle"/></term> <term>2950</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoCollapsibleHandle.ChangedBordered"/></term> <term>2951</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoMultiTextNode"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoMultiTextNode.InsertedLeftPort"/></term> <term>3001</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoMultiTextNode.InsertedRightPort"/></term> <term>3002</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoMultiTextNode.RemovedLeftPort"/></term> <term>3003</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoMultiTextNode.RemovedRightPort"/></term> <term>3004</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoMultiTextNode.ReplacedPort"/></term> <term>3005</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoMultiTextNode.ChangedTopPort"/></term> <term>3006</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoMultiTextNode.ChangedBottomPort"/></term> <term>3007</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoMultiTextNode.ChangedItemWidth"/></term> <term>3008</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoMultiTextNode.ChangedFromEndSegmentLengthStep"/></term> <term>3009</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoMultiTextNode.ChangedToEndSegmentLengthStep"/></term> <term>3010</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoSheet"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoSheet.ChangedTopLeftMargin"/></term> <term>3101</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoSheet.ChangedBottomRightMargin"/></term> <term>3102</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoSheet.ChangedBackgroundImageSpot"/></term> <term>3103</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoSheet.ChangedShowsMargins"/></term> <term>3104</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoSheet.ChangedMarginColor"/></term> <term>3105</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoSheet.ChangedPaper"/></term> <term>3110</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoSheet.ChangedBackgroundImage"/></term> <term>3111</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoSheet.ChangedGrid"/></term> <term>3112</term> </item>
            </list>
            Please note that this list may not be complete--in fact you are encouraged to
            add new subhints for your own properties and other changes.
            </para>
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.AddObserver(Northwoods.GoWeb.GoObject)"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.RemoveObserver(Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.InvalidateViews">
            <summary>
            Cause all views to repaint this object when they get a chance.
            </summary>
            <remarks>
            This calls <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> with a <see cref="F:Northwoods.GoWeb.GoObject.RepaintAll"/> subhint.
            You will only need to call this if you have overridden <see cref="M:Northwoods.GoWeb.GoObject.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)"/>
            and the area that you paint extends beyond the regular <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/>.
            The primary usage is before making any change that affects only the paint bounds,
            as determined by <see cref="M:Northwoods.GoWeb.GoObject.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.GoWeb.GoView)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.OnLayerChanged(Northwoods.GoWeb.GoLayer,Northwoods.GoWeb.GoLayer,Northwoods.GoWeb.GoObject)">
            <summary>
            Called when this object's layer is changed.
            </summary>
            <param name="oldlayer">
            This <see cref="T:Northwoods.GoWeb.GoLayer"/> value is the old value of <see cref="P:Northwoods.GoWeb.GoObject.Layer"/>.
            The value will be null if the object did not belong to a layer but
            is being added to one.
            </param>
            <param name="newlayer">
            This <see cref="T:Northwoods.GoWeb.GoLayer"/> value is the new value of <see cref="P:Northwoods.GoWeb.GoObject.Layer"/>.
            The value will be null if the object is being removed from a layer.
            </param>
            <param name="mainObj">
            This is the object that is being inserted or removed from a layer.
            </param>
            <remarks>
            When this object is being removed from its layer, this method is
            called before the actual value of <see cref="P:Northwoods.GoWeb.GoObject.Layer"/> is set to null.
            Otherwise this method is called after the layer has been changed.
            Both <paramref name="oldlayer"/> and <paramref name="newlayer"/>
            can be non-null when the object is being moved from one layer to another.
            Unlike <see cref="T:Northwoods.GoWeb.GoDocument"/>.<see cref="E:Northwoods.GoWeb.GoDocument.Changed"/> events,
            this method will be called even when this object is not part of a document,
            or when <see cref="P:Northwoods.GoWeb.GoObject.SuspendsUpdates"/> is true.
            However, this method is not called upon undo or redo of a change of layer.
            By default this method does nothing.
            Any implementation of this method should not cause a change in layers.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.OnParentChanged(Northwoods.GoWeb.GoGroup,Northwoods.GoWeb.GoGroup)">
            <summary>
            Called when this object's parent is changed.
            </summary>
            <param name="oldgroup">
            This <see cref="T:Northwoods.GoWeb.GoGroup"/> value is the old value of <see cref="P:Northwoods.GoWeb.GoObject.Parent"/>.
            The value will be null if the object did not belong to a group but
            is being added to one.
            </param>
            <param name="newgroup">
            This <see cref="T:Northwoods.GoWeb.GoGroup"/> value is the new value of <see cref="P:Northwoods.GoWeb.GoObject.Parent"/>.
            The value will be null if the object is being removed from a group.
            </param>
            <remarks>
            When this object is being removed from its group, this method is
            called before the actual value of <see cref="P:Northwoods.GoWeb.GoObject.Parent"/> is set to null.
            Otherwise this method is called after the parent has been changed.
            When this object is being removed from its group, its <see cref="P:Northwoods.GoWeb.GoObject.Layer"/>
            will be set to null too.
            When this object is being added to a group, its <see cref="P:Northwoods.GoWeb.GoObject.Layer"/>
            property will be set to be the same as its new parent's layer.
            Unlike <see cref="T:Northwoods.GoWeb.GoDocument"/>.<see cref="E:Northwoods.GoWeb.GoDocument.Changed"/> events,
            this method will be called even when this object is not part of a document,
            or when <see cref="P:Northwoods.GoWeb.GoObject.SuspendsUpdates"/> is true.
            However, this method is not called upon undo or redo of a change of parent.
            By default this method does nothing.
            Any implementation of this method should not cause a change in parents
            or layers.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.OnBoundsChanged(System.Drawing.RectangleF)">
            <summary>
            Called after this object's bounds has changed.
            </summary>
            <param name="old">
            A <c>RectangleF</c> in document coordinates holding the previous bounds.
            </param>
            <remarks>
            By default this method does nothing.
            This method is called as part of the <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/> setter, after
            the property value has been saved.
            Unlike <see cref="T:Northwoods.GoWeb.GoDocument"/>.<see cref="E:Northwoods.GoWeb.GoDocument.Changed"/> events,
            this method will be called even when this object is not part of a document,
            or when <see cref="P:Northwoods.GoWeb.GoObject.SuspendsUpdates"/> is true.
            However, this method is not called when the bounds are changed due to a call
            to <see cref="M:Northwoods.GoWeb.GoObject.ComputeBounds"/>, nor upon an undo or a redo of a change
            in bounds.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoGroup.OnBoundsChanged(System.Drawing.RectangleF)"/>
            <seealso cref="M:Northwoods.GoWeb.GoGroup.OnChildBoundsChanged(Northwoods.GoWeb.GoObject,System.Drawing.RectangleF)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.OnObservedChanged(Northwoods.GoWeb.GoObject,System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)">
            <summary>
            Called when an observed object has been changed.
            </summary>
            <param name="observed">
            The modified object being observed by this object.
            </param>
            <param name="subhint">The same as for the <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> method.</param>
            <param name="oldI">The same as for the <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> method.</param>
            <param name="oldVal">The same as for the <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> method.</param>
            <param name="oldRect">The same as for the <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> method.</param>
            <param name="newI">The same as for the <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> method.</param>
            <param name="newVal">The same as for the <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> method.</param>
            <param name="newRect">The same as for the <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> method.</param>
            <remarks>
            <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> calls this method on each of the
            observing objects that were registered with the observed object
            by a call to <see cref="M:Northwoods.GoWeb.GoObject.AddObserver(Northwoods.GoWeb.GoObject)"/>.
            If the observed's <see cref="P:Northwoods.GoWeb.GoObject.SuspendsUpdates"/> property is true,
            this method will not be called on its observers.
            Unlike <see cref="T:Northwoods.GoWeb.GoDocument"/>.<see cref="E:Northwoods.GoWeb.GoDocument.Changed"/> events,
            this method will be called even when the observed object is not part of a document.
            By default this method does nothing.
            Any implementation of this method should be very careful about causing any
            changes to the observed object.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoGroup.OnChildBoundsChanged(Northwoods.GoWeb.GoObject,System.Drawing.RectangleF)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.AddObserver(Northwoods.GoWeb.GoObject)">
            <summary>
            Register an object as an observer of changes to this object.
            </summary>
            <param name="obj"></param>
            <remarks>
            <para>
            Adding an observer object means that that observer's <see cref="M:Northwoods.GoWeb.GoObject.OnObservedChanged(Northwoods.GoWeb.GoObject,System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            method will be called whenever this object is changed.
            If the <paramref name="obj"/> is already an observer for this object,
            this call does nothing.
            <see cref="M:Northwoods.GoWeb.GoObject.CopyObject(Northwoods.GoWeb.GoCopyDictionary)"/> will not copy the list of observers for this object;
            the caller of <see cref="M:Northwoods.GoWeb.GoObject.CopyObject(Northwoods.GoWeb.GoCopyDictionary)"/> is responsible for doing so, just as with
            adding the copied object to a layer and/or group to update the <see cref="P:Northwoods.GoWeb.GoObject.Layer"/>
            and <see cref="P:Northwoods.GoWeb.GoObject.Parent"/> properties.
            </para>
            <para>
            Use of the observer mechanism is less efficient in both space and time
            than overriding the <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> method of the observed object's class.
            However it can be useful when it is inconvenient to implement such an override.
            </para>
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.RemoveObserver(Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.RemoveObserver(Northwoods.GoWeb.GoObject)">
            <summary>
            Make sure an object is not an observer of changes to this object.
            </summary>
            <param name="obj"></param>
            <seealso cref="M:Northwoods.GoWeb.GoObject.AddObserver(Northwoods.GoWeb.GoObject)"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.OnObservedChanged(Northwoods.GoWeb.GoObject,System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)">
            <summary>
            Render this object to a Graphics object.
            </summary>
            <param name="g">
            The <c>Graphics</c> object with which to draw.
            </param>
            <param name="view">
            The <see cref="T:Northwoods.GoWeb.GoView"/> provides additional context for this painting
            operation.
            </param>
            <remarks>
            <para>
            This method may get called frequently and should not modify any object or view state.
            </para>
            <para>
            The default implementation paints nothing.
            Each derived class should override this method.
            </para>
            <para>
            The <paramref name="view"/> parameter is useful for customizing
            the drawing behavior based on the kind of view to which we are drawing.
            For example, the <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="P:Northwoods.GoWeb.GoView.ShadowOffset"/> property specifies 
            the size of the drop shadow painted by objects whose <see cref="P:Northwoods.GoWeb.GoObject.Shadowed"/>
            property is true.
            </para>
            <para>
            If you override this method, you may also need to override <see cref="M:Northwoods.GoWeb.GoObject.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.GoWeb.GoView)"/>,
            and perhaps the other geometry methods, including <see cref="M:Northwoods.GoWeb.GoObject.ComputeBounds"/>,
            <see cref="M:Northwoods.GoWeb.GoObject.ContainsPoint(System.Drawing.PointF)"/>, <see cref="M:Northwoods.GoWeb.GoObject.ContainedByRectangle(System.Drawing.RectangleF)"/>,
            <see cref="M:Northwoods.GoWeb.GoObject.GetNearestIntersectionPoint(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)"/>,
            and other methods such as <see cref="M:Northwoods.GoWeb.GoObject.AddSelectionHandles(Northwoods.GoWeb.GoSelection,Northwoods.GoWeb.GoObject)"/> and <see cref="M:Northwoods.GoWeb.GoObject.DoResize(Northwoods.GoWeb.GoView,System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,Northwoods.GoWeb.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)"/>.
            </para>
            <para>
            Furthermore, in the implementation of a property setter that causes the paint bounds
            to change, you will need to call <see cref="M:Northwoods.GoWeb.GoObject.InvalidateViews"/> before actually
            changing your object's state, so that views will get a chance to notice the
            paint bounds before it changes.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.GoWeb.GoView)">
            <summary>
            Expand a bounding rectangle to better represent where
            this object is painted.
            </summary>
            <param name="rect">
            A <c>RectangleF</c> in document coordinates.
            </param>
            <param name="view">
            The view in which the object is being painted.
            This may be null, if the particular view is not known.
            </param>
            <returns>
            A <c>RectangleF</c> in document coordinates that may be slightly
            larger than the <paramref name="rect"/> argument, to account for
            where this object may be painted.
            </returns>
            <remarks>
            <para>
            The <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/> property provides the abstract position and
            size of an object.  However, the actual painted area is often somewhat
            larger, because of the thickness of a <c>Pen</c> or because of a
            shadow.
            </para>
            <para>
            The default behavior of this method is just to return the
            <paramref name="rect"/> value.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.ContainsPoint(System.Drawing.PointF)">
            <summary>
            Determine if a given point is inside and on this object.
            </summary>
            <param name="p">
            A <c>PointF</c> in document coordinates.
            </param>
            <returns>
            True if the argument <paramref name="p"/> is considered to be "in"
            this object.
            </returns>
            <remarks>
            <para>
            This method tries to return true for points near a stroke or near or
            inside a possibly filled object such as an ellipse or a polygon.
            This method ignores any drop shadow, but normally includes the
            width of any <c>Pen</c>.
            </para>
            <para>
            The default behavior of this method is to return true if the
            point <paramref name="p"/> is within this object's <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/>.
            If this object's <see cref="P:Northwoods.GoWeb.GoObject.Width"/> or <see cref="P:Northwoods.GoWeb.GoObject.Height"/> are zero,
            the given point <paramref name="p"/> has to be exactly on for this
            predicate to return true.
            However, some classes, such as <see cref="T:Northwoods.GoWeb.GoStroke"/> that is inherently
            somewhat "one dimensional", may intentionally be more forgiving by
            supporting some margin nearby where a point can be considered to be
            "inside" the object.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.ContainedByRectangle(System.Drawing.RectangleF)">
            <summary>
            Determine if a given rectangle completely encloses this object.
            </summary>
            <param name="r">
            a <c>RectangleF</c> in document coordinates.
            </param>
            <returns>
            True if this object is considered to be "inside" the rectangle <paramref name="r"/>.
            </returns>
            <remarks>
            The default behavior is to see if this object's <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/> are within
            the rectangle <paramref name="r"/>.
            A zero width and/or height for this object is acceptable; but if either
            <c>r.Width</c> or <c>r.Height</c> are zero or negative, this will return false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.GetNearestIntersectionPoint(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)">
            <summary>
            Find the closest point in this object to a given point that is on a line from that point.
            </summary>
            <param name="p1">
            the point we are looking to be closest to, on the line formed with <paramref name="p2"/>
            </param>
            <param name="p2">
            forms a line with <paramref name="p1"/>
            </param>
            <param name="result">
            the point of this object that is closest to <paramref name="p1"/> and that is on
            the infinite line from <paramref name="p1"/> to <paramref name="p2"/>
            </param>
            <returns>
            true if the infinite line does intersect with this object; false otherwise
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.GetNearestIntersectionPoint(System.Drawing.RectangleF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)">
            <summary>
            Find the closest point of a rectangle to a given point that is on a line from that point.
            </summary>
            <param name="rect"></param>
            <param name="p1">
            the point we are looking to be closest to, on the line formed with <paramref name="p2"/>
            </param>
            <param name="p2">
            forms a line with <paramref name="p1"/>
            </param>
            <param name="result">
            the point of this object that is closest to <paramref name="p1"/> and that is on
            the infinite line from <paramref name="p1"/> to <paramref name="p2"/>
            </param>
            <returns>
            true if the infinite line does intersect with this object; false otherwise
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.Pick(System.Drawing.PointF,System.Boolean)">
            <summary>
            Return an object at a point, perhaps only a selectable one.
            </summary>
            <param name="p">
            A <c>PointF</c> in document coordinates.
            </param>
            <param name="selectableOnly">
            Whether the return value must be selectable by the user.
            </param>
            <returns>
            An object under the point <paramref name="p"/>.
            If <paramref name="selectableOnly"/> is true, the object
            returned will have its <see cref="M:Northwoods.GoWeb.GoObject.CanSelect"/> property be true.
            This method returns null if no suitable object is found.
            </returns>
            <remarks>
            <para>
            This will return null if this object is not visible or if
            the <paramref name="p"/> is not in this object.
            </para>
            <para>
            If <paramref name="selectableOnly"/> is false, it will return
            this object; if that parameter is true, it will return this
            object only if <see cref="M:Northwoods.GoWeb.GoObject.CanSelect"/> is true.
            </para>
            <para>
            Finally, if <see cref="M:Northwoods.GoWeb.GoObject.CanSelect"/> is false, and this object
            is part of a <see cref="T:Northwoods.GoWeb.GoGroup"/>, it proceeds up the chain
            of <see cref="P:Northwoods.GoWeb.GoObject.Parent"/> objects until it finds one whose
            <see cref="M:Northwoods.GoWeb.GoObject.CanSelect"/> property is true, and returns that.
            </para>
            <para>
            Failing all of those tests, this method will return null.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.OnSingleClick(Northwoods.GoWeb.GoInputEventArgs,Northwoods.GoWeb.GoView)">
            <summary>
            Called when the user single clicks on this object.
            </summary>
            <param name="evt"></param>
            <param name="view"></param>
            <returns>
            True to indicate this
            object handled the event and thus that the calling view
            need not continue calling the method up the chain of parents.
            </returns>
            <remarks>
            By default this method does nothing but return false.
            <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="M:Northwoods.GoWeb.GoView.DoSingleClick(Northwoods.GoWeb.GoInputEventArgs)"/> is the normal caller,
            which in turn is called by various tools.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.OnDoubleClick(Northwoods.GoWeb.GoInputEventArgs,Northwoods.GoWeb.GoView)"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.OnContextClick(Northwoods.GoWeb.GoInputEventArgs,Northwoods.GoWeb.GoView)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.OnDoubleClick(Northwoods.GoWeb.GoInputEventArgs,Northwoods.GoWeb.GoView)">
            <summary>
            Called when the user double clicks on this object.
            </summary>
            <param name="evt"></param>
            <param name="view"></param>
            <returns>
            True to indicate this
            object handled the event and thus that the calling view
            need not continue calling the method up the chain of parents.
            </returns>
            <remarks>
            By default this method does nothing but return false.
            <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="M:Northwoods.GoWeb.GoView.DoDoubleClick(Northwoods.GoWeb.GoInputEventArgs)"/> is the normal caller,
            which in turn is called by various tools.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.OnSingleClick(Northwoods.GoWeb.GoInputEventArgs,Northwoods.GoWeb.GoView)"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.OnContextClick(Northwoods.GoWeb.GoInputEventArgs,Northwoods.GoWeb.GoView)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.OnContextClick(Northwoods.GoWeb.GoInputEventArgs,Northwoods.GoWeb.GoView)">
            <summary>
            Called when the user context clicks on this object.
            </summary>
            <param name="evt"></param>
            <param name="view"></param>
            <returns>
            True to indicate this
            object handled the event and thus that the calling view
            need not continue calling the method up the chain of parents.
            </returns>
            <remarks>
            By default this method does nothing but return false.
            The context menu click is normally a right mouse click.
            This method is normally invoked by <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="M:Northwoods.GoWeb.GoView.DoContextClick(Northwoods.GoWeb.GoInputEventArgs)"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.OnSingleClick(Northwoods.GoWeb.GoInputEventArgs,Northwoods.GoWeb.GoView)"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.OnDoubleClick(Northwoods.GoWeb.GoInputEventArgs,Northwoods.GoWeb.GoView)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.OnHover(Northwoods.GoWeb.GoInputEventArgs,Northwoods.GoWeb.GoView)">
            <summary>
            Called when the user hovers over this object.
            </summary>
            <param name="evt"></param>
            <param name="view"></param>
            <returns>
            false
            </returns>
            <remarks>
            Currently this is not used.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.OnEnterLeave(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoView)">
            <summary>
            Called when the document object immediately under the mouse changes
            after a drag.
            </summary>
            <param name="from">the object that had been under the mouse, or null if the mouse was not over any document object</param>
            <param name="to">the object that is now under the mouse, or null if the mouse is now in the view's background</param>
            <param name="view"></param>
            <returns>
            false
            </returns>
            <remarks>
            Currently this is only used at the end of a drag by <see cref="T:Northwoods.GoWeb.GoToolDragging"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.OnMouseOver(Northwoods.GoWeb.GoInputEventArgs,Northwoods.GoWeb.GoView)">
            <summary>
            Called when the user moves the mouse over this object when not
            dragging or resizing.
            </summary>
            <param name="evt"></param>
            <param name="view"></param>
            <returns>
            True to indicate this
            object handled the event and thus that the calling view
            need not continue calling the method up the chain of parents.
            </returns>
            <remarks>
            Currently this is not used.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.OnHover(Northwoods.GoWeb.GoInputEventArgs,Northwoods.GoWeb.GoView)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.GetCursorName(Northwoods.GoWeb.GoView)">
            <summary>
            Called when rendering the view to determine the cursor, if any,
            to display over this object.
            </summary>
            <param name="view"></param>
            <returns>By default this returns null: just show the view's default cursor.</returns>
            <remarks>
            By default this method does nothing but return null.
            Currently this is used by <see cref="M:Northwoods.GoWeb.GoViewDataRenderer.BuildCursorSearchArray"/>
            to get cursor names for all of the objects that are visible in
            the <see cref="T:Northwoods.GoWeb.GoView"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.GetToolTip(Northwoods.GoWeb.GoView)">
            <summary>
            Called to get a String to display as a tooltip for this object.
            </summary>
            <param name="view"></param>
            <returns>
            A <c>String</c>, or null to indicate no tooltip for this object.
            </returns>
            <remarks>
            By default this method does nothing but return null.
            Currently this is used by <see cref="M:Northwoods.GoWeb.GoViewDataRenderer.BuildToolTipSearchArray"/>
            to get tooltip strings for all of the objects that are visible in
            the <see cref="T:Northwoods.GoWeb.GoView"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.GetContextMenu(Northwoods.GoWeb.GoView)">
            <summary>
            Called to get a <see cref="T:Northwoods.GoWeb.GoContextMenu"/> to display for this object.
            </summary>
            <param name="view">may be null</param>
            <returns>
            a <see cref="T:Northwoods.GoWeb.GoContextMenu"/>, or null to indicate no context menu for this object.
            </returns>
            <remarks>
            By default this just returns null.
            A non-null value indicates this object has handled the standard context click
            event and thus that the calling view need not continue calling this method
            up the chain of parents.
            Current this is used by <see cref="M:Northwoods.GoWeb.GoViewDataRenderer.BuildContextMenuSearchArray"/>
            to get any context menus for all of the objects that are visible in the <see cref="T:Northwoods.GoWeb.GoView"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.OnSelectionDropReject(Northwoods.GoWeb.GoObjectEventArgs,Northwoods.GoWeb.GoView)">
            <summary>
            Called during a user's drag of the view's Selection when the mouse is
            over this object, to give this object a chance to veto a drop.
            </summary>
            <param name="evt">
            a <see cref="T:Northwoods.GoWeb.GoObjectEventArgs"/> whose
            <see cref="T:Northwoods.GoWeb.GoObjectEventArgs"/>.<see cref="P:Northwoods.GoWeb.GoObjectEventArgs.GoObject"/> property
            refers to the object at which the mouse might drop the selection;
            setting the <see cref="P:Northwoods.GoWeb.GoInputEventArgs.InputState"/> property to
            <see cref="T:Northwoods.GoWeb.GoInputState"/>.<see cref="F:Northwoods.GoWeb.GoInputState.Cancel"/> will
            also reject a drop, just as returning true does
            </param>
            <param name="view"></param>
            <returns>
            True to indicate a drop of the view's Selection should not occur on this object.
            False to indicate that it might be OK, and to continue calling this method up
            the chain of parent objects to see if any parent wants to cancel the drop.
            </returns>
            <remarks>
            By default this does nothing but return false.
            This method is normally invoked by the <see cref="T:Northwoods.GoWeb.GoToolDragging"/> tool,
            through the <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="M:Northwoods.GoWeb.GoView.DoSelectionDropReject(Northwoods.GoWeb.GoInputEventArgs)"/> method.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.OnSelectionDropped(Northwoods.GoWeb.GoObjectEventArgs,Northwoods.GoWeb.GoView)">
            <summary>
            Called after the user has dropped the selection on this object.
            </summary>
            <param name="evt">
            a <see cref="T:Northwoods.GoWeb.GoObjectEventArgs"/> whose
            <see cref="T:Northwoods.GoWeb.GoObjectEventArgs"/>.<see cref="P:Northwoods.GoWeb.GoObjectEventArgs.GoObject"/> property
            refers to the object at which the mouse dropped the selection
            </param>
            <param name="view"></param>
            <returns>
            True to indicate this object handled the event and thus
            that the calling view need not continue calling the method
            up the chain of parent objects.
            </returns>
            <remarks>
            By default this does nothing but return false.
            This method is normally invoked by the <see cref="T:Northwoods.GoWeb.GoToolDragging"/> tool,
            through the <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="M:Northwoods.GoWeb.GoView.DoSelectionDropped(Northwoods.GoWeb.GoInputEventArgs)"/> method.
            One cannot cancel a drop at this time -- it has already happened.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.OnGotSelection(Northwoods.GoWeb.GoSelection)">
            <summary>
            Called when this object becomes selected.
            </summary>
            <param name="sel">
            The <see cref="T:Northwoods.GoWeb.GoSelection"/> of the <see cref="T:Northwoods.GoWeb.GoView"/> in which
            this object has been selected.
            </param>
            <remarks>
            By default this method calls <see cref="M:Northwoods.GoWeb.GoObject.AddSelectionHandles(Northwoods.GoWeb.GoSelection,Northwoods.GoWeb.GoObject)"/> on this
            object's <see cref="P:Northwoods.GoWeb.GoObject.SelectionObject"/>.
            Only document objects get selection handles--if this object does not belong
            to a document (for example by being a view object), no selection handles
            are created.
            Any implementation of this method should not change which objects are selected.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.OnLostSelection(Northwoods.GoWeb.GoSelection)"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.AddSelectionHandles(Northwoods.GoWeb.GoSelection,Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.OnLostSelection(Northwoods.GoWeb.GoSelection)">
            <summary>
            Called when this object becomes unselected.
            </summary>
            <param name="sel">
            The <see cref="T:Northwoods.GoWeb.GoSelection"/> of the <see cref="T:Northwoods.GoWeb.GoView"/> in which
            this object had been selected.
            </param>
            <remarks>
            This removes any selection handles from this object's <see cref="P:Northwoods.GoWeb.GoObject.SelectionObject"/>
            by calling <see cref="M:Northwoods.GoWeb.GoObject.RemoveSelectionHandles(Northwoods.GoWeb.GoSelection)"/> on it.
            Any implementation of this method should not change which objects are selected.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.OnGotSelection(Northwoods.GoWeb.GoSelection)"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.RemoveSelectionHandles(Northwoods.GoWeb.GoSelection)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.AddSelectionHandles(Northwoods.GoWeb.GoSelection,Northwoods.GoWeb.GoObject)">
            <summary>
            Add selection handles for this object for the given selection collection.
            </summary>
            <param name="sel"></param>
            <param name="selectedObj"></param>
            <remarks>
            This typically calls <see cref="T:Northwoods.GoWeb.GoSelection"/>.<see cref="M:Northwoods.GoWeb.GoSelection.CreateBoundingHandle(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject)"/> or
            <see cref="M:Northwoods.GoWeb.GoSelection.CreateResizeHandle(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject,System.Drawing.PointF,System.Int32,System.Boolean)"/> as needed.
            The standard implementation first calls <see cref="M:Northwoods.GoWeb.GoObject.RemoveSelectionHandles(Northwoods.GoWeb.GoSelection)"/>
            to make sure no obsolete handles remain for this object.
            If <see cref="M:Northwoods.GoWeb.GoObject.CanResize"/> is false, it just creates a bounding handle.
            Otherwise if <see cref="M:Northwoods.GoWeb.GoObject.CanReshape"/> is true, it creates eight resize
            handles at the eight standard spots along the object's bounds.
            If <see cref="M:Northwoods.GoWeb.GoObject.CanReshape"/> is false, it only creates the four resize
            handles at the object's corners.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.CreateBoundingHandle">
            <summary>
            Create a bounding handle for this object.
            </summary>
            <returns>
            This must return a <see cref="T:Northwoods.GoWeb.GoObject"/> that implements <see cref="T:Northwoods.GoWeb.IGoHandle"/>
            and is an appropriate size and position for surrounding the object.
            </returns>
            <remarks>
            By default this allocates a new <see cref="T:Northwoods.GoWeb.GoHandle"/>.
            <see cref="T:Northwoods.GoWeb.GoSelection"/>.<see cref="M:Northwoods.GoWeb.GoSelection.CreateBoundingHandle(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject)"/> will call this method to
            allocate a handle and size and position it.
            <see cref="M:Northwoods.GoWeb.GoSelection.CreateBoundingHandle(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject)"/> is then responsible for
            specifying its properties, including its <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.Pen"/> and
            <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> if the handle is a <see cref="T:Northwoods.GoWeb.GoShape"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.CreateResizeHandle(System.Int32)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.CreateResizeHandle(System.Int32)">
            <summary>
            Create a resize handle for this object, given a handle ID.
            </summary>
            <param name="handleid"></param>
            <returns>
            This must return a <see cref="T:Northwoods.GoWeb.GoObject"/> that implements <see cref="T:Northwoods.GoWeb.IGoHandle"/>.
            </returns>
            <remarks>
            By default this allocates a new <see cref="T:Northwoods.GoWeb.GoHandle"/>.
            <see cref="T:Northwoods.GoWeb.GoSelection"/>.<see cref="M:Northwoods.GoWeb.GoSelection.CreateResizeHandle(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject,System.Drawing.PointF,System.Int32,System.Boolean)"/> will call this method to
            allocate a handle which it will position.
            <see cref="M:Northwoods.GoWeb.GoSelection.CreateResizeHandle(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject,System.Drawing.PointF,System.Int32,System.Boolean)"/> also is responsible
            for specifying its other <see cref="T:Northwoods.GoWeb.GoObject"/> properties,
            including its <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.Pen"/> and <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> if
            the handle is a <see cref="T:Northwoods.GoWeb.GoShape"/>.
            You may find it convenient to adjust the shape (<see cref="T:Northwoods.GoWeb.GoHandle"/>.<see cref="P:Northwoods.GoWeb.GoHandle.Style"/>) or size
            of a particular handle by overriding this method.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.CreateBoundingHandle"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.RemoveSelectionHandles(Northwoods.GoWeb.GoSelection)">
            <summary>
            Remove all selection handles for this object for the given selection collection.
            </summary>
            <param name="sel"></param>
            <remarks>
            By default this just calls <see cref="T:Northwoods.GoWeb.GoSelection"/>.<see cref="M:Northwoods.GoWeb.GoSelection.RemoveHandles(Northwoods.GoWeb.GoObject)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.DoMove(Northwoods.GoWeb.GoView,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Called when a user moves this object.
            </summary>
            <param name="view">the <see cref="T:Northwoods.GoWeb.GoView"/> whose <see cref="M:Northwoods.GoWeb.GoView.MoveSelection(Northwoods.GoWeb.GoSelection,System.Drawing.SizeF,System.Boolean)"/> or
            <see cref="M:Northwoods.GoWeb.GoView.CopySelection(Northwoods.GoWeb.GoSelection,System.Drawing.SizeF,System.Boolean)"/> or similar method is calling this method</param>
            <param name="origLoc">the original <see cref="P:Northwoods.GoWeb.GoObject.Location"/></param>
            <param name="newLoc">the new <see cref="P:Northwoods.GoWeb.GoObject.Location"/></param>
            <remarks>
            This is normally called from <see cref="T:Northwoods.GoWeb.GoView"/> methods <see cref="M:Northwoods.GoWeb.GoView.MoveSelection(Northwoods.GoWeb.GoSelection,System.Drawing.SizeF,System.Boolean)"/>,
            and <see cref="M:Northwoods.GoWeb.GoView.CopySelection(Northwoods.GoWeb.GoSelection,System.Drawing.SizeF,System.Boolean)"/>.
            By default it just sets this object's <see cref="P:Northwoods.GoWeb.GoObject.Location"/> property
            to the result of a call to <see cref="M:Northwoods.GoWeb.GoObject.ComputeMove(System.Drawing.PointF,System.Drawing.PointF)"/>:
            <c>Location = ComputeMove(origLoc, newLoc)</c>
            However, you can override this method or <see cref="M:Northwoods.GoWeb.GoObject.ComputeMove(System.Drawing.PointF,System.Drawing.PointF)"/>
            to constrain the places that this object can be moved to by the user.
            You will still be able to move this object programmatically by
            setting the <see cref="P:Northwoods.GoWeb.GoObject.Location"/> or <see cref="P:Northwoods.GoWeb.GoObject.Position"/> property
            directly.
            If you want to constrain this object's movement both interactively and
            programmatically, you should override the <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/> property.
            Override <see cref="M:Northwoods.GoWeb.GoObject.ComputeMove(System.Drawing.PointF,System.Drawing.PointF)"/> if you want to constrain the user's
            movement of this object without regard to the actual view or input events
            causing the move.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.ComputeMove(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Calculate a new location for this object.
            </summary>
            <param name="origLoc"></param>
            <param name="newLoc"></param>
            <returns>
            A <c>PointF</c> in document coordinates.
            </returns>
            <remarks>
            This is normally called from <see cref="M:Northwoods.GoWeb.GoObject.DoMove(Northwoods.GoWeb.GoView,System.Drawing.PointF,System.Drawing.PointF)"/> and <see cref="T:Northwoods.GoWeb.GoDocument"/>'s
            <see cref="M:Northwoods.GoWeb.GoDocument.CopyFromCollection(Northwoods.GoWeb.IGoCollection,System.Boolean,System.Boolean,System.Drawing.SizeF,Northwoods.GoWeb.GoCopyDictionary)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.DoResize(Northwoods.GoWeb.GoView,System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,Northwoods.GoWeb.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Called when a user resizes this object.
            </summary>
            <param name="view">
            the <see cref="T:Northwoods.GoWeb.GoView"/> whose <see cref="T:Northwoods.GoWeb.GoToolResizing"/> is calling this method
            </param>
            <param name="origRect">
            the original bounding rectangle
            </param>
            <param name="newPoint">
            the PointF, in document coordinates, to which the resize handle is being dragged
            </param>
            <param name="whichHandle">
            The <see cref="T:Northwoods.GoWeb.IGoHandle"/>.<see cref="P:Northwoods.GoWeb.IGoHandle.HandleID"/> of the handle being dragged
            </param>
            <param name="evttype">
            <list type="bullet">
            <item><term><c>GoInputState.Start</c></term><description>when called from <see cref="M:Northwoods.GoWeb.GoToolResizing.Start"/></description></item>
            <item><term><c>GoInputState.Continue</c></term><description>when called from <see cref="M:Northwoods.GoWeb.GoToolResizing.DoMouseMove"/></description></item>
            <item><term><c>GoInputState.Finish</c></term><description>when called from <see cref="M:Northwoods.GoWeb.GoToolResizing.DoMouseUp"/></description></item>
            <item><term><c>GoInputState.Cancel</c></term><description>when the <see cref="M:Northwoods.GoWeb.GoToolResizing.DoCancelMouse"/></description></item>
            </list>
            </param>
            <param name="min">
            the value of <see cref="T:Northwoods.GoWeb.GoToolResizing"/>.<see cref="P:Northwoods.GoWeb.GoToolResizing.MinimumSize"/>
            </param>
            <param name="max">
            the value of <see cref="T:Northwoods.GoWeb.GoToolResizing"/>.<see cref="P:Northwoods.GoWeb.GoToolResizing.MaximumSize"/>
            </param>
            <remarks>
            This is normally called from <see cref="T:Northwoods.GoWeb.GoToolResizing"/>.
            By default it just calls <see cref="M:Northwoods.GoWeb.GoObject.ComputeResize(System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,System.Drawing.SizeF,System.Drawing.SizeF,System.Boolean)"/>, allowing
            reshaping if this object's <see cref="M:Northwoods.GoWeb.GoObject.CanReshape"/> property is true
            and the <paramref name="view"/>'s last input's <see cref="T:Northwoods.GoWeb.GoInputEventArgs"/>.<see cref="P:Northwoods.GoWeb.GoInputEventArgs.Shift"/>
            property is true.
            The resulting <c>RectangleF</c> value is used as this object's new
            <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/> if <see cref="P:Northwoods.GoWeb.GoObject.ResizesRealtime"/> is true or if
            <paramref name="evttype"/> is <see cref="T:Northwoods.GoWeb.GoInputState"/>.<see cref="F:Northwoods.GoWeb.GoInputState.Finish"/>.
            Override <see cref="M:Northwoods.GoWeb.GoObject.ComputeResize(System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,System.Drawing.SizeF,System.Drawing.SizeF,System.Boolean)"/> if you want to constrain the user's
            resizing of this object without regard to the actual view or input events
            causing the resize.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.ComputeResize(System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,System.Drawing.SizeF,System.Drawing.SizeF,System.Boolean)">
            <summary>
            Calculate a new bounding rectangle for this object.
            </summary>
            <param name="origRect">the original bounding rectangle</param>
            <param name="newPoint">the PointF, in document coordinates, to which to resize</param>
            <param name="handle">the handle ID that is being resized</param>
            <param name="min">the minimum size allowed</param>
            <param name="max">the maximum size allowed</param>
            <param name="reshape">whether or not to allow reshaping of the object</param>
            <returns>
            A new <c>RectangleF</c> bounding rectangle, in document coordinates.
            </returns>
            <remarks>
            This is normally called from <see cref="M:Northwoods.GoWeb.GoObject.DoResize(Northwoods.GoWeb.GoView,System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,Northwoods.GoWeb.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.DoBeginEdit(Northwoods.GoWeb.GoView)">
            <summary>
            Start editing this object in the given view.
            </summary>
            <param name="view"></param>
            <remarks>
            Currently this is not used.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.CreateEditor(Northwoods.GoWeb.GoView)">
            <summary>
            Create a <c>GoControl</c> that implements an editor for this object in the given view.
            </summary>
            <param name="view"></param>
            <returns>
            null
            </returns>
            <remarks>
            Currently this is not used.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.DoEndEdit(Northwoods.GoWeb.GoView)">
            <summary>
            Stop editing this object in the given view.
            </summary>
            <param name="view"></param>
            <remarks>
            Currently this is not used.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.GetPartInfo(Northwoods.GoWeb.GoView,Northwoods.GoWeb.IGoPartInfoRenderer)">
            <summary>
            Return a <see cref="T:Northwoods.GoWeb.GoPartInfo"/> that describes this object
            and that can be transmitted to the client (user agent) as
            JavaScript data structures that can be used by code running on the client.
            [Not in GoDiagram Pocket]
            </summary>
            <param name="view"></param>
            <param name="renderer">an <see cref="T:Northwoods.GoWeb.IGoPartInfoRenderer"/> from which one can allocate a <see cref="T:Northwoods.GoWeb.GoPartInfo"/></param>
            <returns>
            By default this just returns the result of calling <see cref="M:Northwoods.GoWeb.IGoPartInfoRenderer.GetStandardPartInfo(Northwoods.GoWeb.GoObject)"/>.
            </returns>
            <remarks>
            You may want to override this method in order to add property/value information
            for each instance of a class.
            You can either call <see cref="M:Northwoods.GoWeb.IGoPartInfoRenderer.CreatePartInfo"/> and
            set all of its properties as desired,
            or you can call the base method to get the standard <see cref="T:Northwoods.GoWeb.GoPartInfo"/>
            as produced by the <see cref="T:Northwoods.GoWeb.IGoPartInfoRenderer"/> and modify that.
            However, it may be that the renderer does not normally produce any <see cref="T:Northwoods.GoWeb.GoPartInfo"/>
            for this kind of object, in which case the base method call will return null.
            You will need to check that return value to decide whether you can modify it
            or whether you need to call <see cref="M:Northwoods.GoWeb.IGoPartInfoRenderer.CreatePartInfo"/>
            if you still need to return a <see cref="T:Northwoods.GoWeb.GoPartInfo"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.GetShadowOffset(Northwoods.GoWeb.GoView)">
            <summary>
            Gets the size of a drop shadow for this object in the given view.
            </summary>
            <param name="view"></param>
            <returns>
            A <c>SizeF</c> value that specifies the X and Y offset from the
            object's position.  A positive value for X places the drop shadow
            toward the right; a positive value for Y places it toward the bottom.
            Normally this value has small positive values for both <c>Width</c>
            (X) and <c>Height</c> (Y), resulting in a shadow that corresponds to
            a light source coming from the top left of the view.
            </returns>
            <remarks>
            By default this just returns <c>view.ShadowOffset</c>.
            You can override this to customize the size of ths drop shadow
            for this kind of object.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.GetShadowBrush(Northwoods.GoWeb.GoView)"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.GetShadowPen(Northwoods.GoWeb.GoView,System.Single)"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.ShadowOffset"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.GetShadowBrush(Northwoods.GoWeb.GoView)">
            <summary>
            Get a Brush for painting a drop shadow in the given view.
            </summary>
            <param name="view"></param>
            <returns>
            A <c>Brush</c>, typically a partially transparent gray.
            </returns>
            <remarks>
            By default this just returns <c>view.GetShadowBrush()</c>.
            You can override this to customize the shadow for this kind of object.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.GetShadowOffset(Northwoods.GoWeb.GoView)"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.GetShadowPen(Northwoods.GoWeb.GoView,System.Single)"/>
            <seealso cref="M:Northwoods.GoWeb.GoView.GetShadowBrush(Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.GetShadowPen(Northwoods.GoWeb.GoView,System.Single)">
            <summary>
            Get a Pen for painting a drop shadow in the given view.
            </summary>
            <param name="view"></param>
            <param name="width"></param>
            <returns>
            A <c>Pen</c>, typically a partially transparent gray.
            </returns>
            <remarks>
            By default this just returns <c>view.GetShadowPen(width)</c>.
            You can override this to customize the shadow for this kind of object.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.GetShadowOffset(Northwoods.GoWeb.GoView)"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.GetShadowBrush(Northwoods.GoWeb.GoView)"/>
            <seealso cref="M:Northwoods.GoWeb.GoView.GetShadowPen(Northwoods.GoWeb.GoObject,System.Single)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.CopyOldValueForUndo(Northwoods.GoWeb.GoChangedEventArgs)">
            <summary>
            Preserve any mutable state needed to perform an <see cref="M:Northwoods.GoWeb.IGoUndoableEdit.Undo"/>.
            </summary>
            <param name="e">The particular <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/> edit.</param>
            <remarks>
            This does not need to be overridden for changes to properties of type integer,
            single float, <c>RectangleF</c>, <c>PointF</c>, <c>SizeF</c>, boolean,
            or references to independent objects,
            as long as the old value is passed in the arguments to <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.CopyOldValueForUndo(Northwoods.GoWeb.GoChangedEventArgs)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.CopyNewValueForRedo(Northwoods.GoWeb.GoChangedEventArgs)">
            <summary>
            Preserve any mutable state needed to perform an <see cref="M:Northwoods.GoWeb.IGoUndoableEdit.Redo"/>.
            </summary>
            <param name="e">The particular <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/> edit.</param>
            <remarks>
            This does not need to be overridden for changes to properties of type integer,
            single float, <c>RectangleF</c>, <c>PointF</c>, <c>SizeF</c>, boolean,
            or references to independent objects,
            as long as the new value is passed in the arguments to <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.CopyNewValueForRedo(Northwoods.GoWeb.GoChangedEventArgs)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
             <summary>
             Perform an undo or redo, given a <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/> representing
             a change on this object.
             </summary>
             <param name="e">The particular <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/> edit.</param>
             <param name="undo">If true, restore the old value, otherwise restore the new value.</param>
             <remarks>
             <para>
             If you override this method, be sure to call the base method for all
             <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.SubHint"/> values that your override method does
             not handle.
             </para>
             <para>
             Although properties should be designed so that setting one property
             does not modify other properties, this is sometimes not practical.
             Nevertheless it is important to avoid having side-effects when
             the value is changing due to an undo or redo.
             One way of doing this is to copy the needed code, but not the
             auxiliary side-effecting code, from the property setter to the
             <see cref="M:Northwoods.GoWeb.GoObject.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)"/> override.  Or you could define
             a method called from both the setter and the ChangeValue method,
             parameterized by whether the caller is the setter or not.
             </para>
             <para>
             But a more convenient way to achieve this is to check the
             <see cref="P:Northwoods.GoWeb.GoObject.Initializing"/> property that is set to true when the
             <see cref="M:Northwoods.GoWeb.GoObject.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)"/> method is being called on this object.
             You should check this property before making "unrelated" side-effects.
             </para>
             <code>
               public bool Orthogonal {
                 get { return myOrthogonal; }
                 set {
                   // only set the value and do other things if the value has changed
                   bool old = myOrthogonal;
                   if (old != value) {
                     myOrthogonal = value;
                     // maybe clear out some internal cached state too
                     ResetStuff();
                     // notify about the change
                     Changed(ChangedOrthogonal, 0, old, NullRect, 0, value, NullRect);
                     // when set to true, and when not undoing/redoing, recalculate the stroke
                     if (value &amp;&amp; !this.Initializing) {
                       ClearPoints();
                       CalculateRoute();
                     }
                   }
                 }
               }
            
               public override void ChangeValue(GoChangedEventArgs e, bool undo) {
                 switch (e.SubHint) {
                   case ChangedOrthogonal: {
                     this.Orthogonal = (bool)e.GetValue(undo);
                     return; }
                   default:
                     base.ChangeValue(e, undo);
                     return;
                 }
               }
             </code>
             </remarks>
             <seealso cref="M:Northwoods.GoWeb.GoDocument.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.MakeRect(System.Single)">
            <summary>
            A static method for converting a float to a RectangleF, for calls to <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>.
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.MakeRect(System.Drawing.PointF)">
            <summary>
            A static method for converting a PointF to a RectangleF, for calls to <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>.
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoObject.MakeRect(System.Drawing.SizeF)">
            <summary>
            A static method for converting a SizeF to a RectangleF, for calls to <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>.
            </summary>
            <param name="s"></param>
        </member>
        <member name="F:Northwoods.GoWeb.GoObject.NullRect">
            <summary>
            This is an empty <c>RectangleF</c>, which is convenient when calling <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.Layer">
            <summary>
            Gets the layer to which this object belongs.
            </summary>
            <remarks>
            If this object is not part of any layer, either directly
            as a top-level object, or as part of a group,
            then this property value will be null.
            You cannot set this property--call <see cref="T:Northwoods.GoWeb.GoLayer"/>.<see cref="M:Northwoods.GoWeb.GoLayer.Add(Northwoods.GoWeb.GoObject)"/> instead.
            <see cref="M:Northwoods.GoWeb.GoObject.CopyObject(Northwoods.GoWeb.GoCopyDictionary)"/> will not set this property directly, nor will
            it automatically add the copied object to some layer to set this property
            indirectly.
            The caller of <see cref="M:Northwoods.GoWeb.GoObject.CopyObject(Northwoods.GoWeb.GoCopyDictionary)"/> is responsible for deciding which
            <see cref="T:Northwoods.GoWeb.GoLayer"/> to add the newly copied object, if any.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoObject.IsInDocument"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Document"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.IsInView"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.View"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.OnLayerChanged(Northwoods.GoWeb.GoLayer,Northwoods.GoWeb.GoLayer,Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.IsInDocument">
            <summary>
            Gets whether this object belongs to a document.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Document"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.Document">
            <summary>
            Gets the document that this object belongs to,
            or null if this is not in a layer or if this is in a view layer.
            </summary>
            <remarks>
            You cannot set this property--call <see cref="T:Northwoods.GoWeb.GoLayer"/>.<see cref="M:Northwoods.GoWeb.GoLayer.Add(Northwoods.GoWeb.GoObject)"/> instead.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoObject.IsInDocument"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.IsInView">
            <summary>
            Gets whether this object belongs to a view.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoObject.View"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.View">
            <summary>
            Gets the view that this object belongs to,
            or null if this is not in a layer or if this is in a document layer.
            </summary>
            <remarks>
            You cannot set this property--call <see cref="T:Northwoods.GoWeb.GoLayer"/>.<see cref="M:Northwoods.GoWeb.GoLayer.Add(Northwoods.GoWeb.GoObject)"/> instead.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoObject.IsInView"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.Parent">
            <summary>
            Gets the parent group for this object.
            </summary>
            <remarks>
            If this object belongs to a <see cref="T:Northwoods.GoWeb.GoGroup"/>, we return that group.
            Otherwise we return null.
            You cannot set this property--call <see cref="T:Northwoods.GoWeb.GoGroup"/>.<see cref="M:Northwoods.GoWeb.GoGroup.Add(Northwoods.GoWeb.GoObject)"/> instead.
            This property does not depend on the object belonging to a layer.
            <see cref="M:Northwoods.GoWeb.GoObject.CopyObject(Northwoods.GoWeb.GoCopyDictionary)"/> will not set this property directly, nor will
            it automatically add the copied object to some group to set this property
            indirectly.
            The caller of <see cref="M:Northwoods.GoWeb.GoObject.CopyObject(Northwoods.GoWeb.GoCopyDictionary)"/> is responsible for deciding if and
            where to add the newly copied object to a <see cref="T:Northwoods.GoWeb.GoGroup"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoObject.IsTopLevel"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.OnParentChanged(Northwoods.GoWeb.GoGroup,Northwoods.GoWeb.GoGroup)"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.IsTopLevel">
            <summary>
            Gets whether this object is a top-level object.
            </summary>
            <remarks>
            This property is true if there is no <see cref="P:Northwoods.GoWeb.GoObject.Parent"/> group.
            This property does not depend on the object belonging to a layer.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoObject.TopLevelObject"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.TopLevelObject">
            <summary>
            Gets the top-level object for this object.
            </summary>
            <remarks>
            If this object's <see cref="P:Northwoods.GoWeb.GoObject.IsTopLevel"/> property is true,
            we just return this object.
            Otherwise we look up the <see cref="P:Northwoods.GoWeb.GoObject.Parent"/> chain until
            we find the top-level object.
            This property does not depend on the object belonging to a layer.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Parent"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.ParentNode">
            <summary>
            This convenience property gets the highest-level object in the <see cref="P:Northwoods.GoWeb.GoObject.Parent"/>
            chain that is not a <see cref="T:Northwoods.GoWeb.GoSubGraphBase"/>.
            </summary>
            <remarks>
            If this is a top-level object, or if this is an immediate child of a <see cref="T:Northwoods.GoWeb.GoSubGraphBase"/>,
            the value is just itself.
            Note that the value need not be a real <see cref="T:Northwoods.GoWeb.IGoNode"/>--it could very well be a
            group or a link.
            However, if it is an immediate child of a <see cref="T:Northwoods.GoWeb.GoSubGraphBase"/> and is
            also a <see cref="T:Northwoods.GoWeb.IGoPort"/>, the parent node value is the subgraph, not the port itself.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.Bounds">
            <summary>
            Gets or sets the bounding rectangle for this object.
            </summary>
            <value>
            This <c>RectangleF</c> value describes the size and position of the object
            in document coordinates.
            The <c>Width</c> and <c>Height</c> must be non-negative.
            </value>
            <remarks>
            When getting the bounds, if <see cref="P:Northwoods.GoWeb.GoObject.InvalidBounds"/> is true,
            we call <see cref="M:Northwoods.GoWeb.GoObject.ComputeBounds"/> to get the correct updated bounds.
            When setting the bounds, we call <see cref="M:Northwoods.GoWeb.GoObject.OnBoundsChanged(System.Drawing.RectangleF)"/>,
            <see cref="T:Northwoods.GoWeb.GoGroup"/>.<see cref="M:Northwoods.GoWeb.GoGroup.OnChildBoundsChanged(Northwoods.GoWeb.GoObject,System.Drawing.RectangleF)"/>
            on the <see cref="P:Northwoods.GoWeb.GoObject.Parent"/> (if any),
            and <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> with a subhint of <c>ChangedBounds</c>.
            You should override setting this property if you want to make sure this
            object never gets certain bounds, such as a size that's too small or large,
            or a position that is "out-of-bounds" for your application.
            However, if you only want to constrain how the user is allowed to
            move this object around with the mouse, you should override
            <see cref="M:Northwoods.GoWeb.GoObject.ComputeMove(System.Drawing.PointF,System.Drawing.PointF)"/> instead, or override <see cref="M:Northwoods.GoWeb.GoObject.DoMove(Northwoods.GoWeb.GoView,System.Drawing.PointF,System.Drawing.PointF)"/>
            if the constraint should be specific to a particular view or if
            something other than the <see cref="P:Northwoods.GoWeb.GoObject.Location"/> should be set.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Position"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Size"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Center"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Left"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Top"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Width"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Height"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Right"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Bottom"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.GetSpotLocation(System.Int32)"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.SetSpotLocation(System.Int32,System.Drawing.PointF)"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Location"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.Position">
            <summary>
            Gets or sets this object's top-left corner's position.
            </summary>
            <value>
            The <c>PointF</c> value is in document coordinates.
            </value>
            <remarks>
            This is just a convenience property that operates on this object's
            <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.GetSpotLocation(System.Int32)"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.SetSpotLocation(System.Int32,System.Drawing.PointF)"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Location"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.Size">
            <summary>
            Gets or sets this object's dimensions.
            </summary>
            <value>
            The <c>SizeF</c> value is in document coordinates.
            </value>
            <remarks>
            This is just a convenience property that operates on this object's
            <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.Center">
            <summary>
            Gets or sets this object's center position.
            </summary>
            <value>
            The <c>PointF</c> value is in document coordinates.
            </value>
            <remarks>
            This is just a convenience property that operates on this object's
            <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.Left">
            <summary>
            Gets or sets this object's left coordinate, the X position.
            </summary>
            <value>
            The <c>float</c> value is in document coordinates.
            </value>
            <remarks>
            This is just a convenience property that operates on this object's
            <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.Top">
            <summary>
            Gets or sets this object's top coordinate, the Y position.
            </summary>
            <value>
            The <c>float</c> value is in document coordinates.
            </value>
            <remarks>
            This is just a convenience property that operates on this object's
            <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.Width">
            <summary>
            Gets or sets this object's width.
            </summary>
            <value>
            The <c>float</c> value is in document coordinates.
            </value>
            <remarks>
            This is just a convenience property that operates on this object's
            <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.Height">
            <summary>
            Gets or sets this object's height.
            </summary>
            <value>
            The <c>float</c> value is in document coordinates.
            </value>
            <remarks>
            This is just a convenience property that operates on this object's
            <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.Right">
            <summary>
            Gets or sets this object's right coordinate.
            </summary>
            <value>
            The <c>float</c> value is in document coordinates.
            </value>
            <remarks>
            This is just a convenience property that operates on this object's
            <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.Bottom">
            <summary>
            Gets or sets this object's bottom coordinate.
            </summary>
            <value>
            The <c>float</c> value is in document coordinates.
            </value>
            <remarks>
            This is just a convenience property that operates on this object's
            <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.Location">
            <summary>
            Gets or sets this object's natural position.
            </summary>
            <value>
            The <c>PointF</c> value is in document coordinates.
            </value>
            <remarks>
            This property is normally the object's <see cref="F:Northwoods.GoWeb.GoObject.TopLeft"/> position.
            However, it is common for certain kinds of objects to assume that the
            assigned location actually refers to a different spot of the bounding
            rectangle.  For example, for <see cref="T:Northwoods.GoWeb.GoText"/> objects, the text's
            alignment property determines the <c>Location</c>.  For groups, one of
            the child objects might be the natural thing to be positioned as the
            user would see it.  For example, the icon of a node might provide the
            Location for the node as a whole.
            If you override this property, you should also override
            <see cref="M:Northwoods.GoWeb.GoObject.SetSizeKeepingLocation(System.Drawing.SizeF)"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.SetSizeKeepingLocation(System.Drawing.SizeF)"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Bounds"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.GetSpotLocation(System.Int32)"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.SetSpotLocation(System.Int32,System.Drawing.PointF)"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.Visible">
            <summary>
            Gets or sets whether the user can see this object.
            </summary>
            <value>
            This defaults to true.
            You should normally call the <see cref="M:Northwoods.GoWeb.GoObject.CanView"/> method
            instead of getting this property.
            If you set this property to false, you probably also want to set
            the <see cref="P:Northwoods.GoWeb.GoObject.Printable"/> property to false.
            </value>
            <remarks>
            A false value prevents the user from seeing this object
            by the normal painting mechanisms.
            Even when this property value is true, this object might not be
            seeable by the user because the object's layer is not visible.
            A user will not normally be able to select an invisible object
            or do other interactive operations with an invisible object.
            However, an invisible object can still be part of a layer and
            document or view, and can still take part in all programmatic
            operations such as manipulating its bounds.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.CanView"/>
            <seealso cref="P:Northwoods.GoWeb.GoLayer.AllowView"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Printable"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.Printable">
            <summary>
            Gets or sets whether the view can print this object.
            </summary>
            <value>
            This defaults to true.
            You should normally call the <see cref="M:Northwoods.GoWeb.GoObject.CanPrint"/> method
            instead of getting this property.
            You may also want to set the <see cref="P:Northwoods.GoWeb.GoObject.Visible"/> property
            when setting this property.
            </value>
            <remarks>
            A false value prevents the view from printing this object
            by the normal mechanisms.
            Even when this property value is true, this object might not be
            printable by the view because the object's layer is not printable.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.CanPrint"/>
            <seealso cref="P:Northwoods.GoWeb.GoLayer.AllowPrint"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Visible"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.Selectable">
            <summary>
            Gets or sets whether the user can select this object.
            </summary>
            <value>
            This defaults to true.  However, for some objects, such
            as <see cref="T:Northwoods.GoWeb.GoPort"/>, this defaults to false.
            You should normally call the <see cref="M:Northwoods.GoWeb.GoObject.CanSelect"/> method
            instead of getting this property.
            </value>
            <remarks>
            A false value prevents the user from selecting this object
            by the normal mechanisms.
            Normally all the child objects of a group should have Selectable set to false.
            Even when this property value is true, this object might not be
            selectable by the user because its layer or document disallows it,
            or because the view disallows it.
            Your code can always select objects programmatically by calling
            <c>aView.Selection.Select(obj)</c> or <c>aView.Selection.Add(obj)</c>.
            When this object's <c>CanSelect</c> is false, then if this object is
            part of a group, the normal selection mechanism will see if the
            group's <c>CanSelect</c> is true.  If so, the group will be selected.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.CanSelect"/>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanSelectObjects"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.Movable">
            <summary>
            Gets or sets whether the user can move this object.
            </summary>
            <value>
            This defaults to true.  However, for some objects, such
            as <see cref="T:Northwoods.GoWeb.GoLink"/>, this defaults to false.
            You should normally call the <see cref="M:Northwoods.GoWeb.GoObject.CanMove"/> method
            instead of getting this property.
            </value>
            <remarks>
            A false value prevents the user from moving this object
            by the normal mechanisms.
            Even when this property value is true, this object might not be
            movable by the user because the layer or document disallows it,
            or because the view disallows it.
            Your code can always move objects programmatically by calling
            <c>obj.Position = newPos</c>.
            When this object is part of a group, the default drag behavior
            is to move just the object.  However, the <see cref="P:Northwoods.GoWeb.GoObject.DraggingObject"/>
            really determines what is actually moved.  Note that some objects
            will not be able to move, or will not be able to move freely,
            because of constraints enforced in setting the <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/>
            or in the parent's <see cref="T:Northwoods.GoWeb.GoGroup"/>.<see cref="M:Northwoods.GoWeb.GoGroup.LayoutChildren(Northwoods.GoWeb.GoObject)"/> method.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.CanMove"/>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanMoveObjects"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.DoMove(Northwoods.GoWeb.GoView,System.Drawing.PointF,System.Drawing.PointF)"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.Copyable">
            <summary>
            Gets or sets whether the user can copy this object.
            </summary>
            <value>
            This defaults to true.
            You should normally call the <see cref="M:Northwoods.GoWeb.GoObject.CanCopy"/> method
            instead of getting this property.
            </value>
            <remarks>
            A false value prevents the user from copying this object
            by the normal mechanisms.
            Even when this property value is true, this object might not be
            copyable by the user because the layer or document disallows it,
            or because the view disallows it.
            Your code can always copy objects programmatically by calling
            <see cref="T:Northwoods.GoWeb.GoDocument"/>.<see cref="M:Northwoods.GoWeb.GoDocument.CopyFromCollection(Northwoods.GoWeb.IGoCollection)"/>.
            When this object is part of a group, the default drag behavior
            is to copy just the object.  However, the <see cref="P:Northwoods.GoWeb.GoObject.DraggingObject"/>
            really determines what is actually copied.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.CanCopy"/>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanCopyObjects"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.Resizable">
            <summary>
            Gets or sets whether the user can resize this object.
            </summary>
            <value>
            This defaults to true.  However, for some objects, such
            as <see cref="T:Northwoods.GoWeb.GoText"/> and <see cref="T:Northwoods.GoWeb.GoPort"/>,
            this defaults to false.
            You should normally call the <see cref="M:Northwoods.GoWeb.GoObject.CanResize"/> method
            instead of getting this property.
            </value>
            <remarks>
            A false value prevents the user from resizing this object
            by the normal mechanisms.
            Even when this property value is true, this object might not be
            resizable by the user because the layer or document disallows it,
            or because the view disallows it.
            Your code can always resize objects programmatically by calling
            <c>obj.Size = newSize</c> or <c>obj.Bounds = newRect</c>.
            For an object to be resizable, its <see cref="P:Northwoods.GoWeb.GoObject.SelectionObject"/>
            is really what should be resizable.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.CanResize"/>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanResizeObjects"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.DoResize(Northwoods.GoWeb.GoView,System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,Northwoods.GoWeb.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Reshapable"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.Reshapable">
            <summary>
            Gets or sets whether the user can reshape this object.
            </summary>
            <value>
            This defaults to true.  However, for some objects, such as
            <see cref="T:Northwoods.GoWeb.GoImage"/> this defaults to false, so that users
            cannot change the aspect ratio.
            You should normally call the <see cref="M:Northwoods.GoWeb.GoObject.CanReshape"/> method
            instead of getting this property.
            </value>
            <remarks>
            A false value prevents the user from reshaping this object
            by the normal mechanisms.
            Even when this property value is true, this object might not be
            reshapable by the user because the layer or document disallows it,
            or because the view disallows it.
            Your code can always reshape objects programmatically by calling
            <c>obj.Size = newSize</c> or <c>obj.Bounds = newRect</c>
            or by making other changes to alter the shape of the object.
            For an object to be reshapable, its <see cref="P:Northwoods.GoWeb.GoObject.SelectionObject"/>
            is really what should be reshapable--for a <see cref="T:Northwoods.GoWeb.GoGroup"/>,
            this is often one of its child objects.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.CanReshape"/>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanReshapeObjects"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Resizable"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.Deletable">
            <summary>
            Gets or sets whether the user can delete this object.
            </summary>
            <value>
            This defaults to true.
            You should normally call the <see cref="M:Northwoods.GoWeb.GoObject.CanDelete"/> method
            instead of getting this property.
            </value>
            <remarks>
            A false value prevents the user from deleting this object
            by the normal mechanisms (i.e., removing it from its layer).
            Even when this property value is true, this object might not be
            deletable by the user because the layer or document disallows it,
            or because the view disallows it.
            Your code can always delete objects programmatically by calling
            <c>obj.Remove()</c>.
            When this object is part of a group, the default edit delete behavior
            is to remove the object from the group.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.CanDelete"/>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanDeleteObjects"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.Editable">
            <summary>
            Gets or sets whether the user can edit this object.
            </summary>
            <value>
            This defaults to false.
            You should normally call the <see cref="M:Northwoods.GoWeb.GoObject.CanEdit"/> method
            instead of getting this property.
            </value>
            <remarks>
            A false value prevents the user from editing this object
            by the normal mechanisms.
            Even when this property value is true, this object might not be
            editable by the user because the layer or document disallows it,
            or because the view disallows it.
            Your code can always edit objects programmatically by calling
            <c>obj.DoBeginEdit(aView)</c>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.CanEdit"/>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanEditObjects"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.AutoRescales">
            <summary>
            Gets or sets whether this object automatically rescales its appearance when
            its size changes.
            </summary>
            <value>
            This defaults to true.
            </value>
            <remarks>
            For most objects, particularly shapes, it is natural that when the size
            changes, the object adjusts its appearance appropriately smaller or larger,
            and accomodating any change in aspect ratio.
            Most classes ignore this property.
            However, there are certain circumstances where users do not expect this behavior,
            for example for <see cref="T:Northwoods.GoWeb.GoText"/> instances that are part of a resizable group.
            Typically you will set this property false for text objects added to groups.
            <see cref="T:Northwoods.GoWeb.GoGroup"/>.<see cref="M:Northwoods.GoWeb.GoGroup.RescaleChildren(System.Drawing.RectangleF)"/> heeds this property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.ResizesRealtime">
            <summary>
            Gets or sets whether this object continuously changes its size during a user resizing operation.
            [In Web Forms there is no continuous visual feedback of a resize.]
            </summary>
            <value>
            This defaults to false.  However, for some objects, such
            as <see cref="T:Northwoods.GoWeb.GoPolygon"/> and <see cref="T:Northwoods.GoWeb.GoStroke"/>,
            this defaults to true.
            </value>
            <remarks>
            One advantage of a false value for this property is that only one undo record
            is generated for a user's resizing operation--namely the final one on mouse up.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.DoResize(Northwoods.GoWeb.GoView,System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,Northwoods.GoWeb.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.Shadowed">
            <summary>
            Gets or sets whether this object is painted with a drop shadow.
            </summary>
            <value>
            This defaults to false.
            </value>
            <remarks>
            Normally the drop shadow is achieved by painting the shadow first,
            using <see cref="M:Northwoods.GoWeb.GoObject.GetShadowBrush(Northwoods.GoWeb.GoView)"/> or <see cref="M:Northwoods.GoWeb.GoObject.GetShadowPen(Northwoods.GoWeb.GoView,System.Single)"/>
            at the <see cref="M:Northwoods.GoWeb.GoObject.GetShadowOffset(Northwoods.GoWeb.GoView)"/>, and then doing the regular
            painting.
            The shadow affects the paint bounds, but not the object's bounds.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.GoWeb.GoView)"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.DragsNode">
            <summary>
            Gets or sets whether this object, when selected and a child of a group,
            and when dragged, drags the parent node instead.
            </summary>
            <value>
            This defaults to false.
            </value>
            <remarks>
            This is used by <see cref="P:Northwoods.GoWeb.GoObject.DraggingObject"/> so that
            <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="M:Northwoods.GoWeb.GoView.MoveSelection(Northwoods.GoWeb.GoSelection,System.Drawing.SizeF,System.Boolean)"/> or <see cref="M:Northwoods.GoWeb.GoView.CopySelection(Northwoods.GoWeb.GoSelection,System.Drawing.SizeF,System.Boolean)"/>
            will move or copy the node instead of the child object.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.SuspendsUpdates">
            <summary>
            Gets or sets whether any document Changed event handlers are called upon a
            change to this object.
            </summary>
            <value>
            A value of true means that any document Changed event handlers and any
            UndoManager are not called.  No observer objects are notified either.
            A value of false means that the notifications do take place.
            The default value is false.
            </value>
            <remarks>
            <para>
            Warning!  You probably shouldn't be using this property.
            </para>
            <para>
            When this property is true, no views of this document will be updated
            as this object is changed, and no undo/redo information is kept.
            When you set the property to false again, you will need to make
            sure all the views are correct (you may wish to call <see cref="M:Northwoods.GoWeb.GoObject.InvalidateViews"/>).
            You should also be sure the user and the UndoManager will
            not be confused by the loss of any undo/redo information while
            this property was true.
            Setting this property does not raise any Changed events.
            </para>
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.SuspendsUpdates"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.SkipsUndoManager"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.SkipsUndoManager">
            <summary>
            Gets or sets whether the UndoManager is notified upon a change to this object.
            </summary>
            <value>
            A value of true means the <see cref="T:Northwoods.GoWeb.GoUndoManager"/>'s
            <see cref="M:Northwoods.GoWeb.GoUndoManager.DocumentChanged(System.Object,Northwoods.GoWeb.GoChangedEventArgs)"/> method is not called.
            A value of false means that if there is an <see cref="T:Northwoods.GoWeb.GoUndoManager"/>,
            it is notified so that it can record changes for undo and redo purposes.
            The default value is false.
            </value>
            <remarks>
            You must be careful that any changes that occur while this property
            is true will not confuse the user when they perform Undo's and Redo's
            but the changes are not undone or redone.
            Setting this property does not raise any Changed events.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.SkipsUndoManager"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.SuspendsUpdates"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.InvalidBounds">
            <summary>
            Gets or sets whether the bounds are up to date.
            </summary>
            <remarks>
            This is typically set to true as some change is made to this
            object that requires recalculation of the bounds.
            This flag is automatically set to false and the
            <see cref="M:Northwoods.GoWeb.GoObject.ComputeBounds"/> method then actually does that
            calculation on demand.
            Setting this property does not raise any Changed events.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Bounds"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.BeingRemoved">
            <summary>
            Gets whether this object is in the process of being removed from its layer or group.
            </summary>
            <remarks>
            Sometimes when handling certain events you need to know whether the
            object is being removed from its group or layer, so that you can decide
            on alternative behaviors.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.Remove(Northwoods.GoWeb.GoObject)"/>
            <seealso cref="M:Northwoods.GoWeb.GoGroup.Remove(Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.Initializing">
            <summary>
            Gets or sets whether this object is in the process of being initialized.
            </summary>
            <remarks>
            <para>
            This property is provided as a standard way to indicate that the object
            is not yet completely initialized, thereby allowing some methods to optimize
            their behavior.
            </para>
            <para>
            Most of the simpler objects do not need to use this flag.
            More complicated objects such as <see cref="T:Northwoods.GoWeb.GoGroup"/>s use this flag
            during construction and initialization to avoid repeated work in
            methods such as <see cref="T:Northwoods.GoWeb.GoGroup"/>.<see cref="M:Northwoods.GoWeb.GoGroup.LayoutChildren(Northwoods.GoWeb.GoObject)"/>.
            So if you temporarily set this property to true during the initialization of a
            complex or large node, be sure to call <see cref="M:Northwoods.GoWeb.GoGroup.LayoutChildren(Northwoods.GoWeb.GoObject)"/><b>(null)</b>
            after you set it back to false.
            </para>
            <para>
            This property is temporarily set to true in some constructors or
            initialization methods, in <see cref="T:Northwoods.GoWeb.GoGroup"/>.<see cref="M:Northwoods.GoWeb.GoGroup.CopyObject(Northwoods.GoWeb.GoCopyDictionary)"/>
            when calling <see cref="M:Northwoods.GoWeb.GoGroup.CopyChildren(Northwoods.GoWeb.GoGroup,Northwoods.GoWeb.GoCopyDictionary)"/>, and during an undo or a
            redo when calling <see cref="M:Northwoods.GoWeb.GoObject.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)"/>.
            </para>
            <para>
            Property setters that have public side-effects (besides just changing the value
            of a field or other internal state) should not do those side-effects when this
            property is true.
            This can be important in avoiding unwanted side-effects during undo or redo.
            </para>
            <para>
            Setting this property does not call <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> or raise
            any <see cref="E:Northwoods.GoWeb.GoDocument.Changed"/> events.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.Observers">
            <summary>
            Gets an enumerator over the list of observer objects of this object.
            </summary>
            <value>
            A <see cref="T:Northwoods.GoWeb.GoCollectionEnumerator"/> that iterates over the <see cref="T:Northwoods.GoWeb.GoObject"/>s
            that are observers.  Most objects do not have any observer objects.
            Their use does impose a performance penalty in both space and time.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.SelectionObject">
            <summary>
            Gets the object that gets selection handles when this object is selected.
            </summary>
            <remarks>
            Sometimes when an object gets selected, you want to make it look like
            another object is what really got selected.
            Normally this happens for groups, where you don't want to have selection
            handles on the whole group, but only on some particular child object.
            This property allows you to specify which object should get selection
            handles when this object gains selection.
            The default value is this object itself.
            The selection object's <see cref="M:Northwoods.GoWeb.GoObject.CanResize"/> method will control if that
            object gets resize selection handles and if the user can actually resize
            that object.
            You should be careful to make sure the value of this property is
            not confusing to the user.  Returning unrelated or varying objects
            may produce indeterminate behavior.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.OnGotSelection(Northwoods.GoWeb.GoSelection)"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.AddSelectionHandles(Northwoods.GoWeb.GoSelection,Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.DraggingObject">
            <summary>
            Gets the object that will be dragged instead of this selected object.
            </summary>
            <remarks>
            This property is used by <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="M:Northwoods.GoWeb.GoView.MoveSelection(Northwoods.GoWeb.GoSelection,System.Drawing.SizeF,System.Boolean)"/> and
            <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="M:Northwoods.GoWeb.GoView.CopySelection(Northwoods.GoWeb.GoSelection,System.Drawing.SizeF,System.Boolean)"/>.
            If <see cref="P:Northwoods.GoWeb.GoObject.DragsNode"/> is true, this will return the node that this
            object is part of, which may be the <see cref="P:Northwoods.GoWeb.GoObject.Parent"/> or a grandparent.
            If this is a top-level object, the value will be this object itself.
            By default this will just return this object itself.
            You should be careful to make sure the value of this property is
            not confusing to the user.  Returning unrelated or varying objects
            may produce indeterminate behavior.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoObject.Editor">
            <summary>
            Gets the <c>GoControl</c> being used to edit this object.
            </summary>
            <value>
            null
            </value>
            <remarks>
            Currently this is not used.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoControl.ChangedControlType">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <c>ControlType</c> property.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoControl.#ctor">
            <summary>
            The constructor produces a GoControl with no <c>ControlType</c>.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoPerspective">
            <summary>
            Specifies the 3D perspective to simulate for any "3D" GoObject.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPerspective.TopLeft">
            <summary>
            A perspective style for any "3D" GoObject.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPerspective.BottomLeft">
            <summary>
            A perspective style for any "3D" GoObject.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPerspective.TopRight">
            <summary>
            A perspective style for any "3D" GoObject.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPerspective.BottomRight">
            <summary>
            A perspective style for any "3D" GoObject.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoCube">
            <summary>
            A 2-D representation of a Rectangular Prism, with the 
            "depth" dimension controlled by an additional GoHandle.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoShape">
            <summary>
            An abstract geometrical shape that uses an optional <c>Pen</c> to draw an outline and
            an optional <c>Brush</c> to fill the outline.
            </summary>
            <remarks>
            <para>
            There are several very commonly used classes inheriting from <c>GoShape</c>:
            <see cref="T:Northwoods.GoWeb.GoRectangle"/>, <see cref="T:Northwoods.GoWeb.GoRoundedRectangle"/>, and <see cref="T:Northwoods.GoWeb.GoEllipse"/>.
            The following classes allow you to determine the shape:
            <see cref="T:Northwoods.GoWeb.GoStroke"/> for straight and curved multi-segment lines,
            <see cref="T:Northwoods.GoWeb.GoPolygon"/> for closed figures using straight or curved sides,
            and most generally, <see cref="T:Northwoods.GoWeb.GoDrawing"/>.
            <see cref="T:Northwoods.GoWeb.GoDrawing"/> also supports many predefined shapes that you can
            specify with the <see cref="T:Northwoods.GoWeb.GoFigure"/> enumeration.
            Other shape classes provide properties to easily specify particular characteristics,
            and they may provide specialized resizing behavior.
            </para>
            <para>
            Although it is most common to use the predefined <b>Brush</b>es given by
            the <b>System.Drawing.Brushes</b> class, you can also set the <see cref="P:Northwoods.GoWeb.GoShape.Brush"/>
            property to any <b>SolidBrush</b> or <b>HatchBrush</b>, as well as many kinds of
            simple <b>LinearGradientBrush</b> or <b>PathGradientBrush</b>.
            Be sure to construct and completely initialize the <b>Brush</b> before assigning
            it to the <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> property -- you may not modify a <b>Brush</b>
            after assigning it to a <b>Brush</b> property defined by GoDiagram.
            </para>
            <para>
            It is also very common to assign the <see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>, <see cref="P:Northwoods.GoWeb.GoShape.BrushStyle"/>,
            <see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>, <see cref="P:Northwoods.GoWeb.GoShape.BrushMidColor"/>, and <see cref="P:Northwoods.GoWeb.GoShape.BrushMidFraction"/>
            properties.
            </para>
            <para>
            For somewhat more complex effects, there are several <b>Fill...</b> methods defined on <see cref="T:Northwoods.GoWeb.GoShape"/>
            that set the <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> property to commonly used <b>LinearGradientBrush</b>es
            or <b>PathGradientBrush</b>es.
            </para>
            <para>
            As with brushes, you can set the <see cref="P:Northwoods.GoWeb.GoShape.Pen"/> property to any of the predefined
            <b>System.Drawing.Pens</b>, or you can construct your own <b>Pen</b>.
            Be sure to construct and completely initialize the <b>Pen</b> before assigning
            it to the <see cref="P:Northwoods.GoWeb.GoShape.Pen"/> property -- you may not modify a <b>Pen</b>
            after assigning it to a <b>Pen</b> property defined by GoDiagram.
            </para>
            <para>
            It is also very common to assign the <see cref="P:Northwoods.GoWeb.GoShape.PenColor"/> and <see cref="P:Northwoods.GoWeb.GoShape.PenWidth"/> properties.
            </para>
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoShape.ChangedPen">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoShape.Pen"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoShape.ChangedBrush">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> property.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.#ctor">
            <summary>
            The constructor produces a shape that is drawn with a black pen and no brush.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.CopyObject(Northwoods.GoWeb.GoCopyDictionary)">
            <summary>
            Makes sure the copied shape does not share any internal data references with the
            original one.
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.ToHatchStyle(Northwoods.GoWeb.GoBrushStyle)">
            <summary>
            This static method converts a <see cref="T:Northwoods.GoWeb.GoBrushStyle"/> enumerated value representing a hatch style
            to a <c>System.Drawing.Drawing2D.HatchStyle</c> value.  [Not in GoDiagram Pocket]
            </summary>
            <param name="s">must be one of the <c>GoBrushStyle.Hatch...</c> enum values</param>
            <returns>a <c>HatchStyle</c></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.ToBrushStyle(System.Drawing.Drawing2D.HatchStyle)">
            <summary>
            This static method converts a <c>System.Drawing.Drawing2D.HatchStyle</c> enumerated value
            to the corresponding <see cref="T:Northwoods.GoWeb.GoBrushStyle"/> value.  [Not in GoDiagram Pocket]
            </summary>
            <param name="s">a <c>HatchStyle</c></param>
            <returns>a <see cref="T:Northwoods.GoWeb.GoBrushStyle"/> named "Hatch..."</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.FillSimpleGradient(System.Drawing.Color)">
            <summary>
            Set the <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> to be a simple vertical linear gradient using the given <paramref name="color"/>.  [Not in GoDiagram Pocket.]
            </summary>
            <param name="color">a <b>Color</b> from which the gradient colors are derived, keeping the same hue</param>
            <seealso cref="P:Northwoods.GoWeb.GoShape.Brush"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.FillSimpleGradient(System.Drawing.Color,System.Int32)">
            <summary>
            Set the <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> to be a simple linear gradient using the given <paramref name="color"/>.  [Not in GoDiagram Pocket.]
            </summary>
            <param name="color">a <b>Color</b> from which the gradient colors are derived, keeping the same hue</param>
            <param name="spot">one of four <see cref="T:Northwoods.GoWeb.GoObject"/> spots: <b>GoObject.MiddleTop</b>, <b>GoObject.MiddleLeft</b>, <b>GoObject.TopLeft</b>, <b>GoObject.TopRight</b>, from which to start the gradient, towards the opposite spot</param>
            <seealso cref="P:Northwoods.GoWeb.GoShape.Brush"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.FillSimpleGradient(System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Set the <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> to be a simple linear gradient starting with the <paramref name="start"/> color
            and ending with the <paramref name="end"/> color.  [Not in GoDiagram Pocket.]
            </summary>
            <param name="start">the <b>Color</b> at the starting <paramref name="spot"/></param>
            <param name="end">the <b>Color</b> at the ending spot</param>
            <param name="spot">one of four <see cref="T:Northwoods.GoWeb.GoObject"/> spots: <b>GoObject.MiddleTop</b>, <b>GoObject.MiddleLeft</b>, <b>GoObject.TopLeft</b>, <b>GoObject.TopRight</b>, from which to start the gradient, towards the opposite spot</param>
            <seealso cref="P:Northwoods.GoWeb.GoShape.Brush"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.FillShadedGradient(System.Drawing.Color)">
            <summary>
            Set the <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> to be a vertical linear gradient starting with a very light version of the <paramref name="color"/> color,
            having the middle with a color lighter than <paramref name="color"/>, and ending with a darker color than the <paramref name="color"/>.  [Not in GoDiagram Pocket.]
            </summary>
            <param name="color">a <b>Color</b> from which the gradient colors are derived, keeping the same hue</param>
            <seealso cref="P:Northwoods.GoWeb.GoShape.Brush"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.FillShadedGradient(System.Drawing.Color,System.Int32)">
            <summary>
            Set the <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> to be a linear gradient starting with a very light version of the <paramref name="color"/> color,
            having the middle with a color lighter than <paramref name="color"/>, and ending with a darker color than the <paramref name="color"/>.  [Not in GoDiagram Pocket.]
            </summary>
            <param name="color">a <b>Color</b> from which the gradient colors are derived, keeping the same hue</param>
            <param name="spot">one of four <see cref="T:Northwoods.GoWeb.GoObject"/> spots: <b>GoObject.MiddleTop</b>, <b>GoObject.MiddleLeft</b>, <b>GoObject.TopLeft</b>, <b>GoObject.TopRight</b>, from which to start the gradient, towards the opposite spot</param>
            <seealso cref="P:Northwoods.GoWeb.GoShape.Brush"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.FillShadedGradient(System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Set the <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> to be a linear gradient starting with the <paramref name="start"/> color,
            having the middle with a color lighter than <paramref name="color"/>, and ending with a darker color than the <paramref name="color"/>.  [Not in GoDiagram Pocket.]
            </summary>
            <param name="start">the <b>Color</b> at the starting <paramref name="spot"/></param>
            <param name="color">a <b>Color</b> used to generate the colors in the middle and at the end of the gradient</param>
            <param name="spot">one of four <see cref="T:Northwoods.GoWeb.GoObject"/> spots: <b>GoObject.MiddleTop</b>, <b>GoObject.MiddleLeft</b>, <b>GoObject.TopLeft</b>, <b>GoObject.TopRight</b>, from which to start the gradient, towards the opposite spot</param>
            <seealso cref="P:Northwoods.GoWeb.GoShape.Brush"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.FillHalfGradient(System.Drawing.Color)">
            <summary>
            Set the <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> to be a vertical linear gradient starting with a very light version of the <paramref name="color"/> color,
            and having the last half of the gradient be the solid color <paramref name="color"/>.  [Not in GoDiagram Pocket.]
            </summary>
            <param name="color">a <b>Color</b> from which the gradient colors are derived, keeping the same hue</param>
            <seealso cref="P:Northwoods.GoWeb.GoShape.Brush"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.FillHalfGradient(System.Drawing.Color,System.Int32)">
            <summary>
            Set the <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> to be a linear gradient starting with a very light version of the <paramref name="color"/> color,
            and having the last half of the gradient be the solid color <paramref name="color"/>.  [Not in GoDiagram Pocket.]
            </summary>
            <param name="color">a <b>Color</b> from which the gradient colors are derived, keeping the same hue</param>
            <param name="spot">one of four <see cref="T:Northwoods.GoWeb.GoObject"/> spots: <b>GoObject.MiddleTop</b>, <b>GoObject.MiddleLeft</b>, <b>GoObject.TopLeft</b>, <b>GoObject.TopRight</b>, from which to start the gradient, towards the opposite spot</param>
            <seealso cref="P:Northwoods.GoWeb.GoShape.Brush"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.FillHalfGradient(System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Set the <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> to be a linear gradient starting with the <paramref name="start"/> color,
            and having the last half of the gradient be the solid color <paramref name="mid"/>.  [Not in GoDiagram Pocket.]
            </summary>
            <param name="start">the <b>Color</b> at the starting <paramref name="spot"/></param>
            <param name="mid">the <b>Color</b> from the middle to the end of the gradient</param>
            <param name="spot">one of four <see cref="T:Northwoods.GoWeb.GoObject"/> spots: <b>GoObject.MiddleTop</b>, <b>GoObject.MiddleLeft</b>, <b>GoObject.TopLeft</b>, <b>GoObject.TopRight</b>, from which to start the gradient, towards the opposite spot</param>
            <seealso cref="P:Northwoods.GoWeb.GoShape.Brush"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.FillMiddleGradient(System.Drawing.Color)">
            <summary>
            Set the <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> to be a vertical linear gradient starting with a very light version of the <paramref name="color"/> color,
            having the middle with a color lighter than <paramref name="color"/>, and ending with the starting color.  [Not in GoDiagram Pocket.]
            </summary>
            <param name="color">a <b>Color</b> from which the gradient colors are derived</param>
            <seealso cref="P:Northwoods.GoWeb.GoShape.Brush"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.FillMiddleGradient(System.Drawing.Color,System.Int32)">
            <summary>
            Set the <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> to be a linear gradient starting with a very light version of the <paramref name="color"/> color,
            having the middle with a color lighter than <paramref name="color"/>, and ending with the starting color.  [Not in GoDiagram Pocket.]
            </summary>
            <param name="color">a <b>Color</b> from which the gradient colors are derived</param>
            <param name="spot">one of four <see cref="T:Northwoods.GoWeb.GoObject"/> spots: <b>GoObject.MiddleTop</b>, <b>GoObject.MiddleLeft</b>, <b>GoObject.TopLeft</b>, <b>GoObject.TopRight</b>, from which to start the gradient, towards the opposite spot</param>
            <seealso cref="P:Northwoods.GoWeb.GoShape.Brush"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.FillMiddleGradient(System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Set the <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> to be a linear gradient starting with a very light version of the <paramref name="color"/> color,
            having the middle be the color <paramref name="mid"/> color, and ending with the starting color.  [Not in GoDiagram Pocket.]
            </summary>
            <param name="color">a <b>Color</b> from which the gradient start and end colors are derived</param>
            <param name="mid">the <b>Color</b> at the middle of the gradient</param>
            <param name="spot">one of four <see cref="T:Northwoods.GoWeb.GoObject"/> spots: <b>GoObject.MiddleTop</b>, <b>GoObject.MiddleLeft</b>, <b>GoObject.TopLeft</b>, <b>GoObject.TopRight</b>, from which to start the gradient, towards the opposite spot</param>
            <seealso cref="P:Northwoods.GoWeb.GoShape.Brush"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.FillMiddleGradient(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Set the <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> to be a linear gradient starting with the <paramref name="start"/> color,
            having the middle be the <paramref name="mid"/> color, and ending with the <paramref name="end"/> color.  [Not in GoDiagram Pocket.]
            </summary>
            <param name="start">the <b>Color</b> at the starting <paramref name="spot"/></param>
            <param name="mid">the <b>Color</b> in the middle of the gradient</param>
            <param name="end">the <b>Color</b> at the ending spot</param>
            <param name="spot">one of four <see cref="T:Northwoods.GoWeb.GoObject"/> spots: <b>GoObject.MiddleTop</b>, <b>GoObject.MiddleLeft</b>, <b>GoObject.TopLeft</b>, <b>GoObject.TopRight</b>, from which to start the gradient, towards the opposite spot</param>
            <remarks>
            Due to a bug in GDI+ in .NET 1.1, the <paramref name="mid"/> color is ignored and the <paramref name="end"/> color is used as the <paramref name="mid"/> color.
            However, when the <paramref name="start"/> and <paramref name="end"/> colors are the same,
            this method (only in .NET 1.1) uses <see cref="M:Northwoods.GoWeb.GoShape.FillDoubleEdge(System.Drawing.Color,System.Drawing.Color,System.Int32)"/>
            to achieve the desired effect using the <paramref name="mid"/> color.
            In .NET 2.0, this produces a brush with the correct appearance using all three colors.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoShape.Brush"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.FillSingleEdge(System.Drawing.Color)">
            <summary>
            Set the <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> to be a vertical linear gradient starting with the <paramref name="start"/> color,
            with most of the center being <b>Color.White</b>.  [Not in GoDiagram Pocket.]
            </summary>
            <param name="start">a <b>Color</b> for the edge</param>
            <remarks>
            Only filled areas inside the shape near the <paramref name="spot"/> will get the starting color.
            You can change the <see cref="P:Northwoods.GoWeb.GoShape.BrushMidFraction"/> property to adjust the thickness of the <paramref name="start"/> color edging.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoShape.Brush"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.FillSingleEdge(System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Set the <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> to be a linear gradient starting with the <paramref name="start"/> color,
            having the center being the <paramref name="center"/> color.  [Not in GoDiagram Pocket.]
            </summary>
            <param name="start">a <b>Color</b> for the edge</param>
            <param name="center">a <b>Color</b> for the rest of the area</param>
            <param name="spot">one of four <see cref="T:Northwoods.GoWeb.GoObject"/> spots: <b>GoObject.MiddleTop</b>, <b>GoObject.MiddleLeft</b>, <b>GoObject.MiddleRight</b>, <b>GoObject.MiddleBottom</b>, that shows the <paramref name="start"/> color</param>
            <remarks>
            Only filled areas inside the shape near the <paramref name="spot"/> will get the starting color.
            You can change the <see cref="P:Northwoods.GoWeb.GoShape.BrushMidFraction"/> property to adjust the thickness of the <paramref name="start"/> color edging.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoShape.Brush"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.FillDoubleEdge(System.Drawing.Color)">
            <summary>
            Set the <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> to be a vertical linear gradient starting with the <paramref name="start"/> color,
            with most of the center being <b>Color.White</b>, and ending with the starting color.  [Not in GoDiagram Pocket.]
            </summary>
            <param name="start">a <b>Color</b> for the edge</param>
            <remarks>
            Only filled areas inside the shape near the top or bottom will get the starting color.
            You can change the <see cref="P:Northwoods.GoWeb.GoShape.BrushMidFraction"/> property to adjust the thickness of the <paramref name="start"/> color edging.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoShape.Brush"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.FillDoubleEdge(System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Set the <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> to be a linear gradient starting with the <paramref name="start"/> color,
            having the center the <paramref name="center"/> color, and ending with the starting color.  [Not in GoDiagram Pocket.]
            </summary>
            <param name="start">a <b>Color</b> for the edges</param>
            <param name="center">a <b>Color</b> for the rest of the area</param>
            <param name="spot">one of four <see cref="T:Northwoods.GoWeb.GoObject"/> spots: <b>GoObject.MiddleTop</b>, <b>GoObject.MiddleLeft</b>, <b>GoObject.TopLeft</b>, <b>GoObject.TopRight</b>, from which to start the gradient, towards the opposite spot</param>
            <remarks>
            Only filled areas inside the shape near the <paramref name="spot"/> or near the opposite spot will get the starting color.
            You can change the <see cref="P:Northwoods.GoWeb.GoShape.BrushMidFraction"/> property to adjust the thickness of the <paramref name="start"/> color edging.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoShape.Brush"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.FillShapeFringe(System.Drawing.Color)">
            <summary>
            Set the <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> to be a path shaped gradient starting with the <paramref name="start"/> color,
            with most of the center being <b>Color.White</b>.  [Not in GoDiagram Pocket.]
            </summary>
            <param name="start">a <b>Color</b></param>
            <remarks>
            Path gradients only work well for convex shapes having only a single figure.
            Only filled areas inside the shape near the edges of the bounding rectangle will get the starting color.
            You can change the <see cref="P:Northwoods.GoWeb.GoShape.BrushMidFraction"/> property to adjust the thickness of the <paramref name="start"/> color fringe.
            Its thickness is always proportional to the width and height of the shape.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoShape.Brush"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.FillShapeFringe(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Set the <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> to be a path shaped gradient starting with the <paramref name="start"/> color,
            with most of the center being the <paramref name="center"/> color.  [Not in GoDiagram Pocket.]
            </summary>
            <param name="start">a <b>Color</b></param>
            <param name="center">a <b>Color</b></param>
            <remarks>
            Path gradients only work well for convex shapes having only a single figure.
            Only filled areas inside the shape near the edges of the bounding rectangle will get the starting color.
            You can change the <see cref="P:Northwoods.GoWeb.GoShape.BrushMidFraction"/> property to adjust the thickness of the <paramref name="start"/> color fringe.
            Its thickness is always proportional to the width and height of the shape.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoShape.Brush"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.FillShapeGradient(System.Drawing.Color)">
            <summary>
            Set the <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> to be a path shaped gradient with the <paramref name="color"/> color
            surrounding a very light version of that color.  [Not in GoDiagram Pocket.]
            </summary>
            <param name="color">a <b>Color</b> that is the starting color of the gradient;
            the center color is a very light color of the same hue</param>
            <remarks>
            Path gradients only work well for convex shapes having only a single figure.
            Only filled areas inside the shape near the edges of the bounding rectangle will get the starting color.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoShape.Brush"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.FillShapeGradient(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Set the <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> to be a path shaped gradient with the <paramref name="center"/> color
            surrounded by the <paramref name="start"/> color.  [Not in GoDiagram Pocket.]
            </summary>
            <param name="start">the <b>Color</b> drawn inside the edges of the shape</param>
            <param name="center">the <b>Color</b> filling the center of the shape</param>
            <remarks>
            Path gradients only work well for convex shapes having only a single figure.
            Only filled areas inside the shape near the edges of the bounding rectangle will get the starting color.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoShape.Brush"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.FillShapeHighlight(System.Drawing.Color)">
            <summary>
            Set the <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> to be a path shaped gradient that is mostly the <paramref name="start"/> color,
            with a white "highlight".  [Not in GoDiagram Pocket.]
            </summary>
            <param name="start">a <b>Color</b></param>
            <remarks>
            Path gradients only work well for convex shapes having only a single figure.
            You can set the <see cref="P:Northwoods.GoWeb.GoShape.BrushPoint"/> property to change where the center color is centered;
            the default is <b>new PointF(0.15f, 0.15f)</b>, near the top-left corner.
            You can set the <see cref="P:Northwoods.GoWeb.GoShape.BrushFocusScales"/> property to change the size of the center color area;
            the default is <b>new SizeF(0.1f, 0.1f)</b>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoShape.Brush"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.FillShapeHighlight(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Set the <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> to be a path shaped gradient that is mostly the <paramref name="start"/> color,
            with a "highlight" given by the <paramref name="center"/> color.  [Not in GoDiagram Pocket.]
            </summary>
            <param name="start">the <b>Color</b> drawn inside the edges of the shape</param>
            <param name="center">the <b>Color</b> filling the center of the shape</param>
            <remarks>
            Path gradients only work well for convex shapes having only a single figure.
            You can set the <see cref="P:Northwoods.GoWeb.GoShape.BrushPoint"/> property to change where the center color is centered;
            the default is <b>new PointF(0.15f, 0.15f)</b>, near the top-left corner.
            You can set the <see cref="P:Northwoods.GoWeb.GoShape.BrushFocusScales"/> property to change the size of the center color area;
            the default is <b>new SizeF(0.1f, 0.1f)</b>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoShape.Brush"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.FillRectangleGradient(System.Drawing.Color)">
            <summary>
            Set the <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> to be a gradient occupying this shape's <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/>,
            with the <paramref name="start"/> color along the four edges of the rectangle,
            surrounding a very light version of that color.  [Not in GoDiagram Pocket.]
            </summary>
            <param name="color">the <b>Color</b> drawn inside the edges of the rectangular bounds</param>
            <remarks>
            The <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> is a <b>PathGradientBrush</b> using the rectangular bounds of this shape, clipped by the actual shape.
            Hence you may not see the <paramref name="color"/> very much, except where the shape is close to the bounds.
            This use of a <b>PathGradientBrush</b> does not suffer from the effects of GDI+ filling concave or multi-figure shapes.
            You can set the <see cref="P:Northwoods.GoWeb.GoShape.BrushPoint"/> property to change where the center color is centered;
            the default is <b>new PointF(0.5f, 0.5f)</b>, the middle of the shape.
            You can set the <see cref="P:Northwoods.GoWeb.GoShape.BrushFocusScales"/> property to change the size of the center color area;
            the default is <b>new SizeF(0, 0)</b>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoShape.Brush"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.FillRectangleGradient(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Set the <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> to be a gradient occupying this shape's <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/>,
            with the <paramref name="start"/> color along the four edges of the rectangle, and with the
            <paramref name="center"/> color at the center.  [Not in GoDiagram Pocket]
            </summary>
            <param name="start">the <b>Color</b> drawn inside the edges of the rectangular bounds</param>
            <param name="center">the <b>Color</b> filling the center of the shape</param>
            <remarks>
            The <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> is a <b>PathGradientBrush</b> using the rectangular bounds of this shape, clipped by the actual shape.
            Hence you may not see the <paramref name="start"/> color very much, except where the shape is close to the bounds.
            This use of a <b>PathGradientBrush</b> does not suffer from the effects of GDI+ filling concave or multi-figure shapes.
            You can set the <see cref="P:Northwoods.GoWeb.GoShape.BrushPoint"/> property to change where the center color is centered;
            the default is <b>new PointF(0.5f, 0.5f)</b>, the middle of the shape.
            You can set the <see cref="P:Northwoods.GoWeb.GoShape.BrushFocusScales"/> property to change the size of the center color area;
            the default is <b>new SizeF(0, 0)</b>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoShape.Brush"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.FillEllipseGradient(System.Drawing.Color)">
            <summary>
            Set the <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> to be a gradient occupying this shape's <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/>,
            with the <paramref name="start"/> color along the four edges of the rectangle,
            surrounding a very light version of that color.  [Not in GoDiagram Pocket.]
            </summary>
            <param name="color">the <b>Color</b> drawn inside the edges of the rectangular bounds</param>
            <remarks>
            The <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> is a <b>PathGradientBrush</b> using the rectangular bounds of this shape, clipped by the actual shape.
            Hence you may not see the <paramref name="color"/> very much, except where the shape is close to the bounds.
            This use of a <b>PathGradientBrush</b> does not suffer from the effects of GDI+ filling concave or multi-figure shapes.
            You can set the <see cref="P:Northwoods.GoWeb.GoShape.BrushPoint"/> property to change where the center color is centered;
            the default is <b>new PointF(0.5f, 0.5f)</b>, the middle of the shape.
            You can set the <see cref="P:Northwoods.GoWeb.GoShape.BrushFocusScales"/> property to change the size of the center color area;
            the default is <b>new SizeF(0, 0)</b>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoShape.Brush"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.FillEllipseGradient(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Set the <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> to be a gradient occupying this shape's <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/>,
            with the <paramref name="start"/> color along the four edges of the rectangle, and with the
            <paramref name="center"/> color at the center.  [Not in GoDiagram Pocket]
            </summary>
            <param name="start">the <b>Color</b> drawn inside the edges of the rectangular bounds</param>
            <param name="center">the <b>Color</b> filling the center of the shape</param>
            <remarks>
            The <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> is a <b>PathGradientBrush</b> using the rectangular bounds of this shape, clipped by the actual shape.
            Hence you may not see the <paramref name="start"/> color very much, except where the shape is close to the bounds.
            This use of a <b>PathGradientBrush</b> does not suffer from the effects of GDI+ filling concave or multi-figure shapes.
            You can set the <see cref="P:Northwoods.GoWeb.GoShape.BrushPoint"/> property to change where the center color is centered;
            the default is <b>new PointF(0.5f, 0.5f)</b>, the middle of the shape.
            You can set the <see cref="P:Northwoods.GoWeb.GoShape.BrushFocusScales"/> property to change the size of the center color area;
            the default is <b>new SizeF(0, 0)</b>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoShape.Brush"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Performs changes for undo and redo.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoObject.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.GoWeb.GoView)">
            <summary>
            The expanded paint bounds for a shape includes any Pen width and miter
            limit and any drop shadow.
            </summary>
            <param name="rect"></param>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.GetPenWidth(System.Drawing.Pen,Northwoods.GoWeb.GoView)">
            <summary>
            Get the effective width of a pen in a view.
            </summary>
            <param name="pen"></param>
            <param name="view"></param>
            <returns>
            Zero if <paramref name="pen"/> is null.
            If the pen's <c>Width</c> is zero,
            this returns the width of one pixel in the <paramref name="view"/>,
            if the view is non-null, inversely proportional to the <see cref="P:Northwoods.GoWeb.GoView.DocScale"/>.
            Otherwise this just returns the pen's <c>Width</c>.
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)">
            <summary>
            Paint this shape, using this shape's <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> and <see cref="P:Northwoods.GoWeb.GoShape.Pen"/>,
            with a shadow if <see cref="P:Northwoods.GoWeb.GoObject.Shadowed"/> is true.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.MakePath">
            <summary>
            Produce a <c>GraphicsPath</c> representing this shape.
            </summary>
            <returns>a newly allocated <c>GraphicsPath</c></returns>
            <remarks>
            The result of this method is not necessarily the whole path
            used by the <see cref="M:Northwoods.GoWeb.GoObject.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)"/> method.
            In fact, <see cref="M:Northwoods.GoWeb.GoObject.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)"/> or <see cref="M:Northwoods.GoWeb.GoObject.ContainsPoint(System.Drawing.PointF)"/>
            or other methods might never call this method.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.GetPath">
            <summary>
            Gets a cached <c>GraphicsPath</c> produced by a call to <see cref="M:Northwoods.GoWeb.GoShape.MakePath"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.ResetPath">
            <summary>
            Clear any cached <c>GraphicsPath</c>.
            </summary>
            <remarks>
            Calling this method will result in <see cref="M:Northwoods.GoWeb.GoShape.MakePath"/> to be called
            when needed by a call to <see cref="M:Northwoods.GoWeb.GoShape.GetPath"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.ExpandPointOnEdge(System.Drawing.PointF,System.Drawing.RectangleF,System.Single)">
            <summary>
            This is a convenience method for shifting a point on the edge of the
            given rectangle's bounds out by some distance.
            </summary>
            <param name="p"></param>
            <param name="rect"></param>
            <param name="shift"></param>
            <returns>
            if <paramref name="p"/> had been on the edge of the rectangle, the
            value will be shifted out by the <paramref name="shift"/> in either or
            both directions; otherwise the unmodified <paramref name="p"/>
            is returned
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.ContainsPoint(System.Drawing.PointF)">
            <summary>
            Consider the Pen width when determining if a point is in this shape.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.ContainedByRectangle(System.Drawing.RectangleF)">
            <summary>
            Consider the Pen width when determining if this shape is inside a rectangle.
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.GetNearestIntersectionPoint(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)">
            <summary>
            Consider the Pen width in determining the closest point of this object
            that intersects the given line.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.DrawLine(System.Drawing.Graphics,Northwoods.GoWeb.GoView,System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draw a straight line.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <param name="pen"></param>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.DrawLines(System.Drawing.Graphics,Northwoods.GoWeb.GoView,System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            Draw a connected sequence of straight lines.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <param name="pen"></param>
            <param name="points"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.DrawBezier(System.Drawing.Graphics,Northwoods.GoWeb.GoView,System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draw a Bezier curve.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <param name="pen"></param>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="x3"></param>
            <param name="y3"></param>
            <param name="x4"></param>
            <param name="y4"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.DrawRectangle(System.Drawing.Graphics,Northwoods.GoWeb.GoView,System.Drawing.Pen,System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draw a possibly filled rectangle or square.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <param name="pen"></param>
            <param name="brush"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.DrawRoundedRectangle(System.Drawing.Graphics,Northwoods.GoWeb.GoView,System.Drawing.Pen,System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draw a possibly filled rounded rectangle.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <param name="pen"></param>
            <param name="brush"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w">the rectangle width</param>
            <param name="h">the rectangle height</param>
            <param name="cw">the desired corner radius width, actually limited by half the width <paramref name="w"/></param>
            <param name="ch">the desired corner radius height, actually limited by half the height <paramref name="h"/></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.DrawEllipse(System.Drawing.Graphics,Northwoods.GoWeb.GoView,System.Drawing.Pen,System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draw a possibly filled ellipse or circle.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <param name="pen"></param>
            <param name="brush"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.DrawPie(System.Drawing.Graphics,Northwoods.GoWeb.GoView,System.Drawing.Pen,System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draw a possibly filled pie-shaped section of an ellipse.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <param name="pen"></param>
            <param name="brush"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="startangle"></param>
            <param name="sweepangle"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.DrawPolygon(System.Drawing.Graphics,Northwoods.GoWeb.GoView,System.Drawing.Pen,System.Drawing.Brush,System.Drawing.PointF[])">
            <summary>
            Draw a possibly filled polygon.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <param name="pen"></param>
            <param name="brush"></param>
            <param name="points"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoShape.DrawPath(System.Drawing.Graphics,Northwoods.GoWeb.GoView,System.Drawing.Pen,System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Draw a general <c>GraphicsPath</c>, filling with the <paramref name="brush"/> and outlining with the <paramref name="pen"/>.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <param name="pen"></param>
            <param name="brush"></param>
            <param name="path"></param>
        </member>
        <member name="P:Northwoods.GoWeb.GoShape.Bounds">
            <summary>
            Whenever the size and/or position is changed, we clear out any cached data.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoShape.Pen">
            <summary>
            Gets or sets the pen used to draw the outline of this shape.
            </summary>
            <value>
            The <c>Pen</c> value may be null, in which case no outline is drawn.
            This value defaults to <c>Pens.Black</c>.
            </value>
            <remarks>
            You must not modify the pen after you have assigned it.
            It is common to use the predefined brushes that are members of the
            <c>Pens</c> class.
            Currently serialization is limited to standard pens.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoShape.Brush">
            <summary>
            Gets or sets the brush used to fill the outline of this shape.
            </summary>
            <value>
            The <c>Brush</c> value may be null, in which case no background is painted.
            This value defaults to null.
            </value>
            <remarks>
            <para>
            LinearGradientBrushes and TextureBrushes are drawn with their origin at the Position (top-left corner) of this shape.
            </para>
            <para>
            You must not modify the brush after you have assigned it.
            It is common to use the predefined brushes that are members of the
            <c>Brushes</c> class.
            For the simplest linear gradient and path gradient effects,
            you can just set the <see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>, <see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>,
            <see cref="P:Northwoods.GoWeb.GoShape.BrushMidColor"/>, and <see cref="P:Northwoods.GoWeb.GoShape.BrushStyle"/> properties.
            For common linear gradient and path gradient effects,
            more complicated than you get by setting those <b>Brush...</b> properties,
            we suggest that you use one of the <b>Fill...</b> methods.
            Finally, for the most sophisticated or complex kinds of gradient brushes,
            you may need to override this property to return the kind of value you need.
            </para>
            <para>
            When a linear gradient brush or a path gradient brush is drawn very small,
            due to a combination of small size and small <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="P:Northwoods.GoWeb.GoView.DocScale"/>,
            GoDiagram may substitute a solid brush or not draw anything at all,
            both for efficiency as well as to avoid GDI+ errors.
            When a path gradient brush is drawn very large,
            due to a combination of large size and large <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="P:Northwoods.GoWeb.GoView.DocScale"/>,
            GoDiagram may substitute a solid brush, both for efficiency as well as to avoid GDI+ errors.
            </para>
            <para>
            Currently serialization is limited to standard solid, hatch,
            and texture brushes and many kinds of simple linear gradient and
            path gradient brushes.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoShape.PenWidth">
            <summary>
            Gets or sets the width of the pen.
            </summary>
            <value>
            The width of the <see cref="P:Northwoods.GoWeb.GoShape.Pen"/>, or 0 if there is no pen.
            The default value is zero.
            </value>
            <remarks>
            If there is no <see cref="P:Northwoods.GoWeb.GoShape.Pen"/>, setting this property might have no effect.
            For GoDiagram Pocket, this property is only used for <see cref="T:Northwoods.GoWeb.GoStroke"/>
            and its subclasses.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoShape.PenColor">
            <summary>
            Gets or sets the color of the pen.
            </summary>
            <value>
            The <b>Color</b> of the <see cref="P:Northwoods.GoWeb.GoShape.Pen"/>, or <b>Color.Empty</b> if there is no pen.
            Setting the new value to <b>Color.Empty</b> will set the <see cref="P:Northwoods.GoWeb.GoShape.Pen"/> to null.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoShape.BrushColor">
            <summary>
            Gets or sets the main or background color of the brush.
            </summary>
            <value>
            The <b>Color</b> of the <see cref="P:Northwoods.GoWeb.GoShape.Brush"/>, or <b>Color.Empty</b> if there is no brush.
            Setting the new value to a non-empty <b>Color</b> when <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> is null
            will set the <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> to a <b>SolidBrush</b> of that new color.
            Setting the new value to <b>Color.Empty</b> will set the <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> to null if
            the old brush was a <b>SolidBrush</b>.
            </value>
            <remarks>
            This refers to the color of a <b>SolidBrush</b>, the background color of
            a <b>HatchBrush</b>, the ending color of a <b>LinearGradientBrush</b>, or the
            center color of a <b>PathGradientBrush</b>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoShape.BrushForeColor">
            <summary>
            Gets or sets the foreground color of a brush.  [Not in GoDiagram Pocket.]
            </summary>
            <value>
            Setting this value will have no effect for brushes that are not
            <b>HatchBrush</b>, <b>LinearGradientBrush</b>, or <b>PathGradientBrush</b>.
            </value>
            <remarks>
            This refers to the foreground color of a <b>HatchBrush</b>,
            the starting color of a <b>LinearGradientBrush</b>, or the
            surrounding color of a <b>PathGradientBrush</b>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoShape.BrushMidColor">
            <summary>
            Gets or sets the middle color of a gradient brush.  [Not in GoDiagram Pocket.]
            </summary>
            <value>
            For a <b>LinearGradientBrush</b> or <b>PathGradientBrush</b>, the value may be <b>Color.Empty</b>
            if no middle color is needed.
            This defaults to <b>Color.Empty</b>.
            Setting this value will have no effect for other kinds of brushes.
            </value>
            <remarks>
            Due to a bug in GDI+ in .NET 1.1, this color is ignored.
            In .NET 2.0, this produces a brush with the correct appearance using all three colors
            when the <see cref="P:Northwoods.GoWeb.GoShape.BrushStyle"/> is one that uses three colors.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoShape.BrushMidFraction">
            <summary>
            Gets or sets the fractional distance between the end colors at which the middle color is drawn.  [Not in GoDiagram Pocket]
            </summary>
            <remarks>
            This property is ignored if the value is <b>Single.NaN</b>.
            The meaning of this property depends on the value <see cref="P:Northwoods.GoWeb.GoShape.BrushStyle"/> property;
            many brush styles ignore this property.
            </remarks>
            <remarks>
            This property is not meaningful unless the <see cref="P:Northwoods.GoWeb.GoShape.BrushStyle"/> is a linear gradient or a path gradient
            that supports three colors.
            Changing the <see cref="P:Northwoods.GoWeb.GoShape.BrushStyle"/> may also change the value of this property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoShape.BrushStartPoint">
            <summary>
            Gets or sets the start point for linear gradients,
            as normalized fractions of the size of the shape.  [Not in GoDiagram Pocket]
            </summary>
            <value>
            A <b>PointF</b> whose X and Y values are normally between 0 and 1, and should be between -1 and 2.
            An X value of zero corresponds to the left side of the shape; an X value of 1 corresponds to the right side.
            A Y value of zero corresponds to the top side of the shape; a Y value of 1 corresponds to the bottom side.
            Negative values or values greater than 1 denote points that are outside of the shape.
            </value>
            <remarks>
            This property is not meaningful unless the <see cref="P:Northwoods.GoWeb.GoShape.BrushStyle"/> is a linear gradient.
            Changing the <see cref="P:Northwoods.GoWeb.GoShape.BrushStyle"/> may also change the value of this property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoShape.BrushPoint">
            <summary>
            Gets or sets the end point for linear gradients or the focus point for path gradients,
            as normalized fractions of the size of the shape.  [Not in GoDiagram Pocket]
            </summary>
            <value>
            A <b>PointF</b> whose X and Y values are normally between 0 and 1, and should be between -1 and 2.
            An X value of zero corresponds to the left side of the shape; an X value of 1 corresponds to the right side.
            A Y value of zero corresponds to the top side of the shape; a Y value of 1 corresponds to the bottom side.
            Negative values or values greater than 1 denote points that are outside of the shape.
            </value>
            <remarks>
            This property is not meaningful unless the <see cref="P:Northwoods.GoWeb.GoShape.BrushStyle"/> is a linear gradient or a path gradient.
            Changing the <see cref="P:Northwoods.GoWeb.GoShape.BrushStyle"/> may also change the value of this property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoShape.BrushFocusScales">
            <summary>
            Gets or sets the size of the focus area for path gradients,
            as normalized fractions of the size of the shape.  [Not in GoDiagram Pocket]
            </summary>
            <value>
            A <b>SizeF</b> whose Width and Height values must be between 0 and 1.
            </value>
            <remarks>
            This property is not meaningful unless the <see cref="P:Northwoods.GoWeb.GoShape.BrushStyle"/> is a path gradient.
            Changing the <see cref="P:Northwoods.GoWeb.GoShape.BrushStyle"/> may also change the value of this property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoShape.BrushStyle">
            <summary>
            Gets or sets the kind of brush used by this shape.  [Not in GoDiagram Pocket]
            </summary>
            <value>
            A <see cref="T:Northwoods.GoWeb.GoBrushStyle"/>.
            The default value depends on the shape type.
            However, for most shapes the default is <see cref="F:Northwoods.GoWeb.GoBrushStyle.None"/>
            because <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> is null.
            </value>
            <remarks>
            <para>
            Changing this property to a new <see cref="T:Northwoods.GoWeb.GoBrushStyle"/> that is a
            gradient will also reset some of the brush properties to
            default values established by the corresponding <b>Fill...</b> methods.
            In particular, the value of <see cref="P:Northwoods.GoWeb.GoShape.BrushMidFraction"/>, <see cref="P:Northwoods.GoWeb.GoShape.BrushPoint"/>,
            <see cref="P:Northwoods.GoWeb.GoShape.BrushStartPoint"/>, and/or <see cref="P:Northwoods.GoWeb.GoShape.BrushFocusScales"/> may change.
            However, setting this property will not change the <see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>,
            <see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/> or <see cref="P:Northwoods.GoWeb.GoShape.BrushMidColor"/> properties,
            although some or all of those properties might not be used by certain
            brush styles.  You will normally want to set this property first, before
            setting other <b>Brush...</b> properties.
            </para>
            <para>
            When a linear gradient brush or a path gradient brush is drawn very small,
            due to a combination of small size and small <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="P:Northwoods.GoWeb.GoView.DocScale"/>,
            GoDiagram may substitute a solid brush or not draw anything at all,
            both for efficiency as well as to avoid GDI+ errors.
            When a path gradient brush is drawn very large,
            due to a combination of large size and large <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="P:Northwoods.GoWeb.GoView.DocScale"/>,
            GoDiagram may substitute a solid brush, both for efficiency as well as to avoid GDI+ errors.
            </para>
            <para>
            Caution: using gradient brush styles, particularly path gradients,
            can be computationally expensive to paint.  This is especially true
            for large shapes.
            </para>
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoCube.ChangedDepth">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoCube.Depth"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoCube.ChangedPerspective">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoCube.Perspective"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoCube.ChangedReshapableDepth">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoCube.ReshapableDepth"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoCube.DepthHandleID">
            <summary>
            A special handle ID for a handle which controls the depth size.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoCube.#ctor">
            <summary>
            The constructor produces a cube with a standard black <see cref="P:Northwoods.GoWeb.GoShape.Pen"/>
            outline, no <see cref="T:System.Drawing.Brush"/> fill.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoCube.MakePath">
            <summary>
            Returns a <c>GraphicsPath</c> representation of what will be drawn.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoCube.ContainsPoint(System.Drawing.PointF)">
            <summary>
            Considers the shape of the "outer" cube to determine
            if a given point is inside.
            </summary>
            <param name="p"></param>
            <returns></returns>
            <remarks>
            Currently this does not take the pen width into account.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoCube.DoResize(Northwoods.GoWeb.GoView,System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,Northwoods.GoWeb.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Support either allowing the user to move the depth control handle.
            </summary>
            <param name="view"></param>
            <param name="origRect"></param>
            <param name="newPoint"></param>
            <param name="whichHandle"></param>
            <param name="evttype"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoCube.AddSelectionHandles(Northwoods.GoWeb.GoSelection,Northwoods.GoWeb.GoObject)">
            <summary>
            If <see cref="M:Northwoods.GoWeb.GoObject.CanReshape"/> and <see cref="P:Northwoods.GoWeb.GoCube.ReshapableDepth"/>
            are true, this supports a depth control handle.
            </summary>
            <param name="sel"></param>
            <param name="selectedObj"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoCube.GetNearestIntersectionPoint(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)">
            <summary>
            The closest point of the "outer" cube that intersects with a given line
            is the closest such point of each of its six line segments.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoCube.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle this class's property changes for undo and redo
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.GoWeb.GoCube.Depth">
            <summary>
            Gets or sets the width and height of the depth dimension.
            </summary>
            <value>
            This defaults to 10x10.
            If given a negative value, it uses zero instead.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoCube.Perspective">
            <summary>
            Gets or sets the perspective from which the cube is viewed.
            </summary>
            <value>
            This defaults to <see cref="F:Northwoods.GoWeb.GoPerspective.TopLeft"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoCube.ReshapableDepth">
            <summary>
            Gets or sets whether to add the depth control handle.
            </summary>
            <value>
            This defaults to true.
            </value>
        </member>
        <member name="T:Northwoods.GoWeb.GoCylinder">
            <summary>
            A 2-D representation of a cylinder, with the radius 
            or perspective "pitch" controlled by an additional GoHandle.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoCylinder.ChangedMinorRadius">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoCylinder.MinorRadius"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoCylinder.ChangedOrientation">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoCylinder.Orientation"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoCylinder.ChangedPerspective">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoCylinder.Perspective"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoCylinder.ChangedResizableRadius">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoCylinder.ResizableRadius"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoCylinder.RadiusHandleID">
            <summary>
            A special handle ID for a handle which controls the radius length.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoCylinder.#ctor">
            <summary>
            The constructor produces a cylinder with a standard black <see cref="P:Northwoods.GoWeb.GoShape.Pen"/>
            outline, no <see cref="T:System.Drawing.Brush"/> fill, and a default radius dimensions.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoCylinder.MakePath">
            <summary>
            Returns a <c>GraphicsPath</c> representation of what will be drawn.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoCylinder.ContainsPoint(System.Drawing.PointF)">
            <summary>
            Consider the actual shape of the cylinder to determine
            if a given point is inside.
            </summary>
            <param name="p"></param>
            <returns></returns>
            <remarks>
            Currently this does not take the pen width into account.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoCylinder.DoResize(Northwoods.GoWeb.GoView,System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,Northwoods.GoWeb.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Support either allowing the user to move the radius control handle.
            </summary>
            <param name="view"></param>
            <param name="origRect"></param>
            <param name="newPoint"></param>
            <param name="whichHandle"></param>
            <param name="evttype"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoCylinder.AddSelectionHandles(Northwoods.GoWeb.GoSelection,Northwoods.GoWeb.GoObject)">
            <summary>
            If <see cref="M:Northwoods.GoWeb.GoObject.CanReshape"/> and <see cref="P:Northwoods.GoWeb.GoCylinder.ResizableRadius"/>
            are true, this supports a radius control handle.
            </summary>
            <param name="sel"></param>
            <param name="selectedObj"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoCylinder.GetNearestIntersectionPoint(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)">
            <summary>
            The closest point of a cylinder that intersects with a given line
            is the closest such point of each two line segments and two ellipses.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoCylinder.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle this class's property changes for undo and redo
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.GoWeb.GoCylinder.MinorRadius">
            <summary>
            Gets or sets the length of minor radius of the cylinder's ellipse. 
            </summary>
            <value>
            This defaults to 10.
            If given a negative value, it uses zero instead.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoCylinder.Orientation">
            <summary>
            Gets or sets how to draw the cylinder, whether the parallel lines
            of the cylinder are drawn horizontally or vertically.
            </summary>
            <value>
            This defaults to <c>Orientation.Vertical</c>.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoCylinder.Perspective">
            <summary>
            Gets or sets how to draw the cylinder, whether the full ellipse 
            is drawn on the top or bottom for <c>Orientation.Vertical</c> or left or right for 
            <c>Orientation.Horizontal</c>,
            </summary>
            <value>
            This defaults to <c>GoPerspective.TopLeft</c>
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoCylinder.ResizableRadius">
            <summary>
            Gets or sets whether to add the radius control handle.
            </summary>
            <value>
            This defaults to true.
            </value>
        </member>
        <member name="T:Northwoods.GoWeb.GoDiamond">
            <summary>
            An object in the shape of a diamond or rhombus whose corners are at
            the midpoints of the bounding rectangle's edges.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoDiamond.#ctor">
            <summary>
            The constructor produces a diamond with a standard black <see cref="P:Northwoods.GoWeb.GoShape.Pen"/>
            outline and no <see cref="T:System.Drawing.Brush"/> fill.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoDiamond.CopyObject(Northwoods.GoWeb.GoCopyDictionary)">
            <summary>
            Don't share any internal data between copies.
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoDiamond.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)">
            <summary>
            Paint a diamond shape, possibly with a shadow.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoDiamond.ContainsPoint(System.Drawing.PointF)">
            <summary>
            Consider the sides of the diamond when determining if a point is inside.
            </summary>
            <param name="p"></param>
            <returns></returns>
            <remarks>
            Currently this does not take the pen width into account.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDiamond.MakePath">
            <summary>
            Produce a <c>GraphicsPath</c> by adding lines between the points.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoDiamond.GetNearestIntersectionPoint(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)">
            <summary>
            The closest point of a diamond that intersects with a given line
            is the closest such point of each of its four line segments.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:Northwoods.GoWeb.GoDrawingAction">
            <summary>
            These values describe the kind of action used to start or extend
            figures in a <see cref="T:Northwoods.GoWeb.GoDrawing"/>.  [Not in GoDiagram Pocket]
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDrawingAction.StartAt">
            <summary>
            Start a new figure at a point.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDrawingAction.LineTo">
            <summary>
            Draw a straight line from the last point to this point.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDrawingAction.CurveTo">
            <summary>
            Draw a Bezier curve using these control points and destination point.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDrawingAction.ClosedLine">
            <summary>
            A line with the ClosedFlag set.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDrawingAction.ClosedCurve">
            <summary>
            A curve with the ClosedFlag set.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDrawingAction.BeginCurveTo">
            <summary>
            The first control point of a Bezier curve; equal to (<see cref="F:Northwoods.GoWeb.GoDrawingAction.CurveTo"/> | GoDrawing.BeginCurveFlag).
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDrawingAction.Mask">
            <summary>
            Mask an <see cref="M:Northwoods.GoWeb.GoDrawing.GetAction(System.Int32)"/> value with this mask to get
            the <see cref="F:Northwoods.GoWeb.GoDrawingAction.StartAt"/>, <see cref="F:Northwoods.GoWeb.GoDrawingAction.LineTo"/>, or <see cref="F:Northwoods.GoWeb.GoDrawingAction.CurveTo"/> value.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDrawingAction.ClosedFlag">
            <summary>
            An interal flag used to mark the final vertex in a figure as closed.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoDrawingData">
            <summary>
            A simple class that holds both the array of bytes of <see cref="T:Northwoods.GoWeb.GoDrawingAction"/>s
            and the array of <c>PointF</c>s describing the figures of a <see cref="T:Northwoods.GoWeb.GoDrawing"/>.
            [Not in GoDiagram Pocket]
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawingData.#ctor(System.Byte[],System.Drawing.PointF[])">
            <summary>
            Constructs a <c>GoDrawingData</c> containing
            an array of <c>byte</c> <see cref="T:Northwoods.GoWeb.GoDrawingAction"/>s and
            a corresponding array of <c>PointF</c>s.
            </summary>
            <param name="acts"></param>
            <param name="pts"></param>
        </member>
        <member name="F:Northwoods.GoWeb.GoDrawingData.Actions">
            <summary>
            Gets or sets the array of <c>byte</c>s representing the actions.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDrawingData.Points">
            <summary>
            Gets or sets the array of <c>PointF</c>s.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoDrawing">
            <summary>
            This shape holds both closed and open figures consisting of
            segments that are either straight lines or Bezier curves.
            [Not in GoDiagram Pocket]
            </summary>
            <remarks>
            <para>
            This shape class, the most capable of the <see cref="T:Northwoods.GoWeb.GoShape"/>s, is a
            generalization of the <see cref="T:Northwoods.GoWeb.GoPolygon"/> and <see cref="T:Northwoods.GoWeb.GoStroke"/> classes.
            You can also rotate or flip a drawing, extract figures as drawings, or
            insert other shapes as figures.
            The <see cref="T:Northwoods.GoWeb.GoFigure"/> enumeration specifies a number of predefined drawings.
            </para>
            <para>
            The term "figure" is used in two different but related ways here.
            Inside a GoDrawing there can be more than one figure, where each figure is a
            closed or open series of straight or curved segments.
            Although most <see cref="T:Northwoods.GoWeb.GoFigure"/> enumerations specify <see cref="T:Northwoods.GoWeb.GoDrawing"/>s consisting
            of a single figure, some of the more complicated <see cref="T:Northwoods.GoWeb.GoFigure"/>s specify
            <see cref="T:Northwoods.GoWeb.GoDrawing"/>s that contain multiple figures.
            </para>
            <para>
            The most common usage is to just use the <see cref="M:Northwoods.GoWeb.GoDrawing.#ctor(Northwoods.GoWeb.GoFigure)"/>
            constructor, followed by setting the <see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>,
            <see cref="P:Northwoods.GoWeb.GoShape.PenColor"/>, or other <see cref="T:Northwoods.GoWeb.GoShape"/> properties.
            Remember that an instance of a GoDrawing is a single <see cref="T:Northwoods.GoWeb.GoShape"/>,
            with a single <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> and a single <see cref="P:Northwoods.GoWeb.GoShape.Pen"/>
            covering the whole shape.
            </para>
            <para>
            You can define your own drawings by specifying the points and the nature of each
            segment, along with whether each figure is open or closed.
            In a manner similar to drawing with a pencil, for each figure you want to create,
            call the <c>StartAt</c> method, call <c>LineTo</c> and/or <c>CurveTo</c> as many
            times as you need, followed by a call to <c>CloseFigure</c> if you want that figure
            to be a closed path and potentially filled by the <see cref="P:Northwoods.GoWeb.GoShape.Brush"/>.
            For example, this produces an open shape consisting of two curves:
            <code>
            GoDrawing s = new GoDrawing();
            s.StartAt(50, 50);
            s.CurveTo(75, 75, 100, 100, 50, 150);
            s.CurveTo(100, 150, 150, 100, 200, 200);
            </code>
            This produces a square with two curved lines connecting the top-left corner
            with the bottom-right corner:
            <code>
            GoDrawing s = new GoDrawing();
            s.StartAt(50, 50);
            s.LineTo(150, 50);
            s.LineTo(150, 150);
            s.LineTo(50, 150);
            s.LineTo(50, 50);
            s.CurveTo(125, 75, 125, 75, 150, 150);
            s.CurveTo(75, 125, 75, 125, 50, 50);
            s.CloseFigure();
            s.BrushColor = Color.Green;
            </code>
            The above drawing is completely filled by the green color.
            If you had not called <see cref="M:Northwoods.GoWeb.GoDrawing.CloseFigure"/>, no brush would be painted
            in that figure.  Users could only pick this drawing by clicking along the lines.
            </para>
            <para>
            If you call <see cref="M:Northwoods.GoWeb.GoDrawing.CloseFigure"/> and also set <see cref="P:Northwoods.GoWeb.GoDrawing.FillMode"/>
            to <c>FillMode.Alternate</c>, the inner area between the two curves will be open.
            No brush will be painted there, and <see cref="M:Northwoods.GoWeb.GoDrawing.ContainsPoint(System.Drawing.PointF)"/> at any point
            in there will return false, although <see cref="M:Northwoods.GoWeb.GoDrawing.ContainsPoint(System.Drawing.PointF)"/> will return
            true where the brush is painted.
            </para>
            <para>
            Here's an example of creating a drawing with three figures: two squares
            connected by a line.
            <code>
            GoDrawing s = new GoDrawing();
            s.StartAt(50, 50);
            s.LineTo(100, 50);
            s.LineTo(100, 100);
            s.LineTo(50, 100);
            s.CloseFigure();
            s.StartAt(150, 50);
            s.LineTo(200, 50);
            s.LineTo(200, 100);
            s.LineTo(150, 100);
            s.CloseFigure();
            s.StartAt(100, 75);
            s.LineTo(150, 75);
            s.FillSimpleGradient(Color.Green, GoObject.MiddleLeft);
            </code>
            Note that the gradient extends all the way from the left side to the right side.
            The left square is relatively light colored; the right square is relatively dark.
            </para>
            <para>
            You can rotate a drawing by setting the <see cref="P:Northwoods.GoWeb.GoDrawing.Angle"/> property.
            Or you can rotate about any point by calling <see cref="M:Northwoods.GoWeb.GoDrawing.Rotate(System.Drawing.PointF,System.Single)"/>,
            which will also set the <see cref="P:Northwoods.GoWeb.GoDrawing.Angle"/>.  Please note that changing
            the angle may very well change the <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/>, including
            the <see cref="P:Northwoods.GoWeb.GoObject.Position"/>.  You can get the bounds of this drawing
            as if the angle were zero by using the <see cref="P:Northwoods.GoWeb.GoDrawing.UnrotatedBounds"/> property.
            Just setting the <see cref="P:Northwoods.GoWeb.GoDrawing.Angle"/> property will rotate the drawing about
            the <see cref="P:Northwoods.GoWeb.GoDrawing.UnrotatedCenter"/> -- the center of the <see cref="P:Northwoods.GoWeb.GoDrawing.UnrotatedBounds"/>.
            </para>
            <para>
            You can also flip a drawing about either a horizontal axis or a vertical one.
            </para>
            <para>
            When a drawing is <see cref="P:Northwoods.GoWeb.GoObject.Resizable"/> and <see cref="P:Northwoods.GoWeb.GoObject.Reshapable"/>,
            and when <see cref="P:Northwoods.GoWeb.GoDrawing.ReshapablePoints"/> is true, the user will be able to drag any of
            the points of the drawing.
            </para>
            <para>
            For figures that are have their first point and their last point at the same <c>PointF</c>
            location, moving either shape might produce undesirable results unless the other point
            is moved too.  Set the <see cref="P:Northwoods.GoWeb.GoDrawing.SameEndPoints"/> property to true to have
            <see cref="M:Northwoods.GoWeb.GoDrawing.DoResizePointHandles(Northwoods.GoWeb.GoView,System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,Northwoods.GoWeb.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)"/> (called by <see cref="M:Northwoods.GoWeb.GoDrawing.DoResize(Northwoods.GoWeb.GoView,System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,Northwoods.GoWeb.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)"/>) keep both end points
            of figures together.
            </para>
            <para>
            Adjacent curved segments may meet at an angle.  Sometimes you would like to make sure
            that curves remain smooth between two curved segments, even when the user reshapes
            the points.  You can set <see cref="P:Northwoods.GoWeb.GoDrawing.SmoothCurves"/>, or call <see cref="M:Northwoods.GoWeb.GoDrawing.MakeSmoothCurves"/>.
            But note that curved segments will still form angles with an adjacent straight line segments.
            </para>
            <para>
            There are also methods for modifying individual points, for inserting segments into an
            existing figure, for opening or closing existing figures, for inserting whole shapes as
            figures into a drawing, and for extracting figures from a drawing into a new GoDrawing.
            </para>
            <para>
            The basic points and segment style and figure information is stored in a <see cref="T:Northwoods.GoWeb.GoDrawingData"/>,
            accessible via the <see cref="P:Northwoods.GoWeb.GoDrawing.Data"/> property.  This information is used to construct
            a <c>GraphicsPath</c> in the <see cref="M:Northwoods.GoWeb.GoDrawing.MakePath"/> method.
            </para>
            <para>
            The <see cref="P:Northwoods.GoWeb.GoDrawing.PointsCount"/> property returns the number of points in the whole drawing.
            The <see cref="P:Northwoods.GoWeb.GoDrawing.FiguresCount"/> property returns the number of figures in the whole drawing.
            </para>
            <para>
            Since it is hard for a user to pick a figure when they have to precisely target pixels
            where the line is drawn, the <see cref="M:Northwoods.GoWeb.GoDrawing.ContainsPoint(System.Drawing.PointF)"/> predicate allows for a certain
            amount of leeway.  This is governed by the <see cref="P:Northwoods.GoWeb.GoDrawing.PickMargin"/> property.
            </para>
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoDrawing.AddedPoint">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDrawing.RemovedPoint">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDrawing.ModifiedPoint">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDrawing.ChangedData">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDrawing.Data"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDrawing.ChangedFillMode">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDrawing.FillMode"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDrawing.ChangedAngle">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDrawing.Angle"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDrawing.ChangedRotatable">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDrawing.Rotatable"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDrawing.ChangedRotatesRealtime">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDrawing.RotatesRealtime"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDrawing.ChangedRotationPoint">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDrawing.RotationPoint"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDrawing.ChangedUnrotatedBounds">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDrawing.UnrotatedBounds"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDrawing.ChangedSmoothCurves">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDrawing.SmoothCurves"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDrawing.ChangedSameEndPoints">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDrawing.SameEndPoints"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDrawing.ChangedShowsBoundingHandle">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDrawing.ShowsBoundingHandle"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDrawing.ChangedReshapablePoints">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDrawing.ReshapablePoints"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDrawing.ChangedReshapableRectangle">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDrawing.ReshapableRectangle"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDrawing.ChangedPickMargin">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDrawing.PickMargin"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDrawing.ChangedFigure">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDrawing.Figure"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDrawing.ChangedClosed">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.#ctor">
            <summary>
            Construct a shape with no points in it.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.#ctor(Northwoods.GoWeb.GoFigure)">
            <summary>
            Construct a shape that is initialized to look like a
            particular <see cref="T:Northwoods.GoWeb.GoFigure"/>.
            </summary>
            <param name="f"></param>
            <remarks>
            The initial <see cref="P:Northwoods.GoWeb.GoDrawing.Angle"/> will be zero.
            You can always change the figure by setting the <see cref="P:Northwoods.GoWeb.GoDrawing.Figure"/> property.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.CopyObject(Northwoods.GoWeb.GoCopyDictionary)">
            <summary>
            Overridden to avoid sharing internal data structures.
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.GetAction(System.Int32)">
            <summary>
            Get the action at a particular index.
            </summary>
            <param name="i">the zero-based index</param>
            <returns>A <see cref="T:Northwoods.GoWeb.GoDrawingAction"/> value</returns>
            <remarks>
            This method throws an exception if <paramref name="i"/> is out of bounds.
            You cannot modify the action for a particular point.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoDrawing.PointsCount"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.GetPoint(System.Int32)">
            <summary>
            Get the point at a particular index.
            </summary>
            <param name="i">the zero-based index</param>
            <returns>A <c>PointF</c> in document coordinates</returns>
            <remarks>
            This method throws an exception if <paramref name="i"/> is out of bounds.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoDrawing.SetPoint(System.Int32,System.Drawing.PointF)"/>
            <seealso cref="M:Northwoods.GoWeb.GoDrawing.SetPoint(System.Int32,System.Single,System.Single)"/>
            <seealso cref="P:Northwoods.GoWeb.GoDrawing.PointsCount"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.SetPoint(System.Int32,System.Drawing.PointF)">
            <summary>
            Replace the point at a particular index;
            </summary>
            <param name="i">the zero-based index</param>
            <param name="p">A <c>PointF</c> in document coordinates</param>
            <remarks>
            This method throws an exception if <paramref name="i"/> is out of bounds.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoDrawing.GetPoint(System.Int32)"/>
            <seealso cref="P:Northwoods.GoWeb.GoDrawing.PointsCount"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.SetPoint(System.Int32,System.Single,System.Single)">
            <summary>
            Replace the point at a particular index;
            </summary>
            <param name="i">the zero-based index</param>
            <param name="x"></param>
            <param name="y"></param>
            <remarks>
            This method throws an exception if <paramref name="i"/> is out of bounds.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoDrawing.GetPoint(System.Int32)"/>
            <seealso cref="P:Northwoods.GoWeb.GoDrawing.PointsCount"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.ClearPoints">
            <summary>
            Remove all figures from this shape.
            </summary>
            <remarks>
            Afterwards the <see cref="P:Northwoods.GoWeb.GoDrawing.PointsCount"/> will be zero.
            The paints and other properties are not affected.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.CopyActionsArray">
            <summary>
            This returns a copy of the array of bytes representing the GoDrawingAction for each point.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.CopyPointsArray">
            <summary>
            This returns a copy of the array of points defining this shape.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.SetData(System.Byte[],System.Drawing.PointF[])">
            <summary>
            Replace all of the points and actions for this shape.
            </summary>
            <param name="actions">A <c>byte</c> array whose values are one of the permitted actions</param>
            <param name="points">A <c>PointF</c> array whose points are in document coordinates</param>
            <remarks>
            The length of <paramref name="actions"/> and the length of <paramref name="points"/>
            should be the same.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoDrawing.CopyPointsArray"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.StartAt(System.Drawing.PointF)">
            <summary>
            Extend this shape by starting a new figure at a particular point.
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.StartAt(System.Single,System.Single)">
            <summary>
            Extend this shape by starting a new figure at a particular point.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <remarks>
            This just calls <see cref="M:Northwoods.GoWeb.GoDrawing.StartAt(System.Drawing.PointF)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.LineTo(System.Drawing.PointF)">
            <summary>
            Extend the current figure by drawing a straight line to a point.
            </summary>
            <param name="p">the destination point</param>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.LineTo(System.Single,System.Single)">
            <summary>
            Extend the current figure by drawing a straight line to a point.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <remarks>
            This just calls <see cref="M:Northwoods.GoWeb.GoDrawing.LineTo(System.Drawing.PointF)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.CurveTo(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Extend the current figure by drawing a Bezier curve from the last
            point to another point, with two control points to guide the curve.
            </summary>
            <param name="c1">the first control point</param>
            <param name="c2">the second control point</param>
            <param name="p">the destination point</param>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.CurveTo(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Extend the current figure by drawing a Bezier curve from the last
            point to another point, with two control points to guide the curve.
            </summary>
            <param name="c1x"></param>
            <param name="c1y"></param>
            <param name="c2x"></param>
            <param name="c2y"></param>
            <param name="x"></param>
            <param name="y"></param>
            <remarks>
            This just calls <see cref="M:Northwoods.GoWeb.GoDrawing.CurveTo(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.InsertStartAt(System.Int32,System.Drawing.PointF)">
            <summary>
            Start a new figure at the given point, perhaps ending any ongoing figure at that index.
            </summary>
            <param name="i">the index for starting a new figure</param>
            <param name="p">the start point</param>
            <remarks>
            <see cref="M:Northwoods.GoWeb.GoDrawing.IsSegmentIndex(System.Int32)"/> should be true for the given index <paramref name="i"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.InsertStartAt(System.Int32,System.Single,System.Single)">
            <summary>
            Start a new figure at the given point, perhaps ending any ongoing figure at that index.
            </summary>
            <param name="i"></param>
            <param name="x"></param>
            <param name="y"></param>
            <remarks>
            This just calls <see cref="M:Northwoods.GoWeb.GoDrawing.InsertStartAt(System.Int32,System.Drawing.PointF)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.InsertLineTo(System.Int32,System.Drawing.PointF)">
            <summary>
            Insert a straight line segment into this shape at the given index.
            </summary>
            <param name="i">must be greater than zero</param>
            <param name="p">the destination point</param>
            <remarks>
            <see cref="M:Northwoods.GoWeb.GoDrawing.IsSegmentIndex(System.Int32)"/> should be true for the given index <paramref name="i"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.InsertLineTo(System.Int32,System.Single,System.Single)">
            <summary>
            Insert a straight line segment into this shape at the given index.
            </summary>
            <param name="i"></param>
            <param name="x"></param>
            <param name="y"></param>
            <remarks>
            This just calls <see cref="M:Northwoods.GoWeb.GoDrawing.InsertLineTo(System.Int32,System.Drawing.PointF)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.InsertCurveTo(System.Int32,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Insert a Bezier curve segment into this shape at the given index.
            </summary>
            <param name="i">the index for the first point, <paramref name="c1"/>; must be greater than zero</param>
            <param name="c1">the first control point</param>
            <param name="c2">the second control point</param>
            <param name="p">the destination point</param>
            <remarks>
            <see cref="M:Northwoods.GoWeb.GoDrawing.IsSegmentIndex(System.Int32)"/> should be true for the given index <paramref name="i"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.InsertCurveTo(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Extend the current figure by drawing a Bezier curve from the last
            point to another point, with two control points to guide the curve.
            </summary>
            <param name="i"></param>
            <param name="c1x"></param>
            <param name="c1y"></param>
            <param name="c2x"></param>
            <param name="c2y"></param>
            <param name="x"></param>
            <param name="y"></param>
            <remarks>
            This just calls <see cref="M:Northwoods.GoWeb.GoDrawing.InsertCurveTo(System.Int32,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.InsertLineFrom(System.Int32,System.Drawing.PointF)">
            <summary>
            Insert a straight line segment into this shape that will end at the given index.
            </summary>
            <param name="i">the destination index of the line</param>
            <param name="p">the starting point of the new line</param>
            <remarks>
            <see cref="M:Northwoods.GoWeb.GoDrawing.IsSegmentIndex(System.Int32)"/> should be true for the given index <paramref name="i"/>.
            Useful for attaching to the beginning of figures.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.InsertLineFrom(System.Int32,System.Single,System.Single)">
            <summary>
            Insert a straight line segment into this shape that will end at the given index.
            </summary>
            <param name="i"></param>
            <param name="x"></param>
            <param name="y"></param>
            <remarks>
            This just calls <see cref="M:Northwoods.GoWeb.GoDrawing.InsertLineFrom(System.Int32,System.Drawing.PointF)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.InsertCurveFrom(System.Int32,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Insert a Bezier curve segment into this shape that will end at the given index.
            </summary>
            <param name="i">the destination index of the curve</param>
            <param name="c1">the first control point</param>
            <param name="c2">the second control point</param>
            <param name="p">the starting point of the new curve</param>
            <remarks>
            <see cref="M:Northwoods.GoWeb.GoDrawing.IsSegmentIndex(System.Int32)"/> should be true for the given index <paramref name="i"/>.
            Useful for attaching to the beginning of figures.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.InsertCurveFrom(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Insert a Bezier curve segment into this shape that will end at the given index.
            </summary>
            <param name="i"></param>
            <param name="c1x"></param>
            <param name="c1y"></param>
            <param name="c2x"></param>
            <param name="c2y"></param>
            <param name="x"></param>
            <param name="y"></param>
            <remarks>
            This just calls <see cref="M:Northwoods.GoWeb.GoDrawing.InsertCurveFrom(System.Int32,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.IsSegmentIndex(System.Int32)">
            <summary>
            This predicate is true when the given index is the start of a segment of this shape.
            </summary>
            <param name="idx"></param>
            <returns>
            true unless the <paramref name="idx"/> refers to the second or third
            points of a Bezier <see cref="F:Northwoods.GoWeb.GoDrawingAction.CurveTo"/> (open or closed)
            -- we cannot break up a curve.
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.IsFigureIndex(System.Int32)">
            <summary>
            This predicate is true when the given index is the start of a figure in this shape.
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.NextFigureIndex(System.Int32)">
            <summary>
            Iterates through the figure until it finds the next <see cref="F:Northwoods.GoWeb.GoDrawingAction.StartAt"/> from the index.
            </summary>
            <param name="idx"></param>
            <returns>The next <see cref="F:Northwoods.GoWeb.GoDrawingAction.StartAt"/> index, or the <see cref="P:Northwoods.GoWeb.GoDrawing.PointsCount"/>
            if there is no next <see cref="F:Northwoods.GoWeb.GoDrawingAction.StartAt"/> index.</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.PreviousFigureIndex(System.Int32)">
            <summary>
            Iterates backwards through the figure until it finds the previous <see cref="F:Northwoods.GoWeb.GoDrawingAction.StartAt"/> from the index.
            </summary>
            <param name="idx"></param>
            <returns>The previous <see cref="F:Northwoods.GoWeb.GoDrawingAction.StartAt"/> index.</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.IsClosedFigure(System.Int32)">
            <summary>
            This predicate determines if the figure containing the given index is closed. 
            </summary>
            <param name="i">
            An index contained in the figure to be determined closed or not.
            If less than zero, it will be set to zero.
            If beyond the end of the array, it will be set to the last index.
            </param>
            <returns>
            true if the figure containing the index is closed.
            false if the figure containing the index is open, or if there are no points.
            </returns>
            <remarks>
            A closed figure will be filled with a brush if one is set, and will have
            a line drawn from its end point to its start point, if they are not already at the same point.
            To close or open figures, use <see cref="M:Northwoods.GoWeb.GoDrawing.OpenFigure(System.Int32)"/> and <see cref="M:Northwoods.GoWeb.GoDrawing.CloseFigure(System.Int32)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.OpenFigure(System.Int32)">
            <summary>
            Opens the figure containing the given index.
            </summary>
            <param name="i">Any index in the figure</param>
            <remarks>
            A closed figure will be filled with a brush if one is set, and will have
            a line drawn from its end point to its start point, if they are not already at the same point.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoDrawing.CloseFigure"/>
            <seealso cref="M:Northwoods.GoWeb.GoDrawing.CloseFigure(System.Int32)"/>
            <seealso cref="M:Northwoods.GoWeb.GoDrawing.IsClosedFigure(System.Int32)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.CloseFigure(System.Int32)">
            <summary>
            Closes the figure containing the given index.
            </summary>
            <param name="i">Any index in the figure</param>
            <remarks>
            <para>
            A closed figure will be filled with a brush if one is set, and will have
            a line drawn from its end point to its start point, if they are not already at the same point.
            </para>
            <para>
            This method is different from <see cref="M:Northwoods.GoWeb.GoDrawing.CompleteFigure(System.Int32)"/> because
            this results in the figure being filled with a brush, whereas <see cref="M:Northwoods.GoWeb.GoDrawing.CompleteFigure(System.Int32)"/>
            causes the figure to be left unfilled when painted.
            </para>
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoDrawing.OpenFigure(System.Int32)"/>
            <seealso cref="M:Northwoods.GoWeb.GoDrawing.IsClosedFigure(System.Int32)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.CloseFigure">
            <summary>
            Close the current (last) figure.
            </summary>
            <remarks>
            This just calls <see cref="M:Northwoods.GoWeb.GoDrawing.CloseFigure(System.Int32)"/> passing it the last index.
            You may find it convenient to call this after constructing the last segment of
            a figure that you want to be filled with the brush.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.OpenAllFigures">
            <summary>
            Opens all figures in the shape.
            </summary>
            <remarks>
            This just calls <see cref="M:Northwoods.GoWeb.GoDrawing.OpenFigure(System.Int32)"/> with the end index of each figure.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.CloseAllFigures">
            <summary>
            Closes all figures in the shape.
            </summary>
            <remarks>
            This just calls <see cref="M:Northwoods.GoWeb.GoDrawing.CloseFigure(System.Int32)"/> with the end index of each figure.
            You may find it convenient to call this after constructing some figures a segment at a time,
            when you intend all of the figures to be filled with the brush.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.HasClosedFigures">
            <summary>
            Determines if the GoDrawing has closed figures
            </summary>
            <returns>true if at least one figure is closed, false otherwise</returns>
            <remarks>
            When this is true, <see cref="M:Northwoods.GoWeb.GoDrawing.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)"/> will fill the closed
            figures of this shape with the <see cref="P:Northwoods.GoWeb.GoShape.Brush"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoDrawing.IsClosedFigure(System.Int32)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.CompleteFigure(System.Int32)">
            <summary>
            Completes a figure by adding a line segment from the last point to the start point of the figure, if needed.
            </summary>
            <param name="i">an index in the figure</param>
            <remarks>
            This method is different from <see cref="M:Northwoods.GoWeb.GoDrawing.CloseFigure(System.Int32)"/> because, if needed,
            it inserts a point that is the same as the first point of the segment without
            causing the figure to be filled with a brush.  <see cref="M:Northwoods.GoWeb.GoDrawing.CloseFigure(System.Int32)"/>
            results in the figure being filled when painted.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.CompleteFigure">
            <summary>
            Complete the current (last) figure.
            </summary>
            <remarks>
            This just calls <see cref="M:Northwoods.GoWeb.GoDrawing.CompleteFigure(System.Int32)"/> passing it the last index.
            You may find it convenient to call this after constructing the last segment of
            a figure that you want to complete by having it return straight to the first
            point of the segment.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.CompleteAllFigures">
            <summary>
            Completes all figures by adding a line segment from the last point to the start point of each figure, if needed.
            </summary>
            <remarks>
            This just calls <see cref="M:Northwoods.GoWeb.GoDrawing.CompleteFigure(System.Int32)"/> with each figure index.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.RemoveSegment(System.Int32)">
            <summary>
            Remove the action at the given index.
            </summary>
            <param name="idx">a valid insertion index greater than zero</param>
            <remarks>
            This will remove the action and point for the index <paramref name="idx"/>.
            If the action is a <see cref="F:Northwoods.GoWeb.GoDrawingAction.CurveTo"/> (open or closed),
            this will remove the three points of this Bezier curve segment.
            This method does not simply remove a <c>StartAt</c> action, causing
            two figures to be combined--call <see cref="M:Northwoods.GoWeb.GoDrawing.JoinFigure(System.Int32)"/> to do that.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.JoinFigure(System.Int32)">
            <summary>
            Remove the <see cref="F:Northwoods.GoWeb.GoDrawingAction.StartAt"/> action that begins the figure at point <paramref name="idx"/>,
            causing the figure to become part of the previous figure.
            </summary>
            <param name="idx">the zero-based index of a point</param>
            <remarks>
            This method does nothing if the figure is the first one in this shape.
            This method will iterate idx backward until it reaches a StartAt.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoDrawing.RemoveSegment(System.Int32)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.ExtractShape(System.Int32,System.Int32)">
            <summary>
            Removes a figure or figures from a GoDrawing, placing them in a new GoDrawing.
            Returns null if the parameters are incorrect.
            </summary>
            <param name="start">An index that is a <see cref="F:Northwoods.GoWeb.GoDrawingAction.StartAt"/> vertex</param>
            <param name="end">The <see cref="F:Northwoods.GoWeb.GoDrawingAction.StartAt"/> vertex to stop extraction at, or the last+1 index</param>
            <returns>A GoDrawing created from the removed figure(s).</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.InsertShape(System.Int32,Northwoods.GoWeb.GoShape)">
            <summary>
            Inserts a GoShape into the GoDrawing at the given index.
            </summary>
            <param name="i">The <see cref="F:Northwoods.GoWeb.GoDrawingAction.StartAt"/> index to insert before, or the last+1 index to insert at the end</param>
            <param name="s">The shape to insert</param>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.ReversePaths">
            <summary>
            Reverse the order of actions and points in this shape.
            </summary>
            <remarks>
            The resulting shape may look the same, but may combine differently with other shapes
            due to a change in deciding whether an area is inside or outside of the shape.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.FlipHorizontal">
            <summary>
            Horizontally flips this GoDrawing about its center.
            </summary>
            <remarks>
            This just calls <see cref="M:Northwoods.GoWeb.GoDrawing.FlipHorizontal(System.Single)"/> with the horizontal center.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.FlipHorizontal(System.Single)">
            <summary>
            Horizontally flips this GoDrawing about a given line.
            </summary>
            <param name="line">The x value to flip about.</param>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.FlipVertical">
            <summary>
            Vertically flips this GoDrawing about its center.
            </summary>
            <remarks>
            This just calls <see cref="M:Northwoods.GoWeb.GoDrawing.FlipVertical(System.Single)"/> with the vertical center.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.FlipVertical(System.Single)">
            <summary>
            Vertically flips this GoDrawing about a given line.
            </summary>
            <param name="line">The y value to flip about.</param>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.MakeSmoothCurves">
            <summary>
            Iterates through all of the points, attempting to smooth any adjacent bezier curves.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.MakePath">
            <summary>
            Returns a <c>GraphicsPath</c> representation of what will be drawn.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.ResetPath">
            <summary>
            Overridden from base class to include myClosedPath.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)">
            <summary>
            Paint this shape, with an optional shadow.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.OnBoundsChanged(System.Drawing.RectangleF)">
            <summary>
            Changing the bounds of a shape may change all of its points.
            </summary>
            <param name="oldr">the earlier bounds, a <c>RectangleF</c> in document coordinates</param>
            <remarks>
            All of the points are modified to reflect the translation and
            scaling of the new bounding rectangle from the old one.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.ComputeBounds">
            <summary>
            The bounding rectangle of a shape is computed as the smallest
            rectangle that includes all of its points.
            </summary>
            <returns></returns>
            <remarks>
            If there are only zero or one points, the size will be zero.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.ContainsPoint(System.Drawing.PointF)">
            <summary>
            A point is in a figure only if it is inside its fill area if
            the figure is closed (even if it has no Brush), and
            only if the point is near any of the lines of the figures
            if those figures are open.
            </summary>
            <param name="p"></param>
            <returns></returns>
            <remarks>
            This currently does not take any pen width into account.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.GetSegmentNearPoint(System.Drawing.PointF,System.Single)">
            <summary>
            Return the index of the first point of a segment of this shape
            that is close to a given point.
            </summary>
            <param name="pnt">A <c>PointF</c> in document coordinates</param>
            <param name="pickMargin"></param>
            <returns>
            The zero-based index of the first point of a segment,
            or <c>-1</c> if no segment is near <paramref name="pnt"/>.
            </returns>
            <remarks>
            This is sensitive to the <see cref="P:Northwoods.GoWeb.GoDrawing.PickMargin"/> value.
            For Bezier segments, the index of the first of each set of
            points is returned.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.GetNearestIntersectionPoint(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)">
            <summary>
            The closest intersection point of a shape with a line is the
            closest such point for each of its segments.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="result"></param>
            <returns></returns>
            <remarks>
            This currently does not always take into account any pen width.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.AddSelectionHandles(Northwoods.GoWeb.GoSelection,Northwoods.GoWeb.GoObject)">
            <summary>
            Display the appropriate selected appearance, normally, resize selection handles
            at each point of the shape.
            </summary>
            <param name="sel"></param>
            <param name="selectedObj"></param>
            <remarks>
            If this shape is resizable and reshapable, we add resize selection
            handles at each shape point, with handle IDs equal to
            <see cref="F:Northwoods.GoWeb.GoObject.LastHandle"/> plus the index of the point.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.AddPointHandles(Northwoods.GoWeb.GoSelection,Northwoods.GoWeb.GoObject)">
            <summary>
            Add selection handles for each point of this shape, if this shape is
            resizable and reshapable.
            </summary>
            <param name="sel"></param>
            <param name="selectedObj"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.CreateBoundingHandle">
            <summary>
            Produce a rotated rectangle to surround the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.AddRectangleHandles(Northwoods.GoWeb.GoSelection,Northwoods.GoWeb.GoObject)">
            <summary>
            Add the standard selection handles, except that the standard four or
            eight resize handles are positioned at the rotated corners and sides
            of this shape.
            </summary>
            <param name="sel"></param>
            <param name="selectedObj"></param>
            <seealso cref="M:Northwoods.GoWeb.GoDrawing.DoResizeRectangleHandles(Northwoods.GoWeb.GoView,System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,Northwoods.GoWeb.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.DoResize(Northwoods.GoWeb.GoView,System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,Northwoods.GoWeb.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            When the resize handles are at each point of the shape, the user's
            dragging of a resize handle should just change that point in the curve.
            </summary>
            <param name="view"></param>
            <param name="origRect"></param>
            <param name="newPoint"></param>
            <param name="whichHandle"></param>
            <param name="evttype"></param>
            <param name="min"></param>
            <param name="max"></param>
            <remarks>
            When <see cref="P:Northwoods.GoWeb.GoObject.ResizesRealtime"/> is true, this method always calls
            <see cref="M:Northwoods.GoWeb.GoDrawing.SetPoint(System.Int32,System.Drawing.PointF)"/>.
            Otherwise it only calls <see cref="M:Northwoods.GoWeb.GoDrawing.SetPoint(System.Int32,System.Drawing.PointF)"/> when the <paramref name="evttype"/>
            is <see cref="F:Northwoods.GoWeb.GoInputState.Finish"/> or <see cref="F:Northwoods.GoWeb.GoInputState.Cancel"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.DoResizePointHandles(Northwoods.GoWeb.GoView,System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,Northwoods.GoWeb.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            This method is called to handle dragging of resize handles for the points of this shape.
            </summary>
            <param name="view"></param>
            <param name="origRect"></param>
            <param name="newPoint"></param>
            <param name="whichHandle"></param>
            <param name="evttype"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.DoResizeRectangleHandles(Northwoods.GoWeb.GoView,System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,Northwoods.GoWeb.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            This method is called to handle resizing the standard eight corner/middle resize handles.
            </summary>
            <param name="view"></param>
            <param name="origRect"></param>
            <param name="newPoint"></param>
            <param name="whichHandle"></param>
            <param name="evttype"></param>
            <param name="min"></param>
            <param name="max"></param>
            <seealso cref="M:Northwoods.GoWeb.GoDrawing.AddRectangleHandles(Northwoods.GoWeb.GoSelection,Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.Rotate(System.Drawing.PointF,System.Single)">
            <summary>
            Change the angle of this shape by rotating it around a given axis point.
            </summary>
            <param name="rotatePoint">the rotation axis point</param>
            <param name="angle">the degrees by which to turn; positive is clockwise</param>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.CanRotate">
            <summary>
            This predicate is true if this object is <see cref="P:Northwoods.GoWeb.GoDrawing.Rotatable"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.CopyOldValueForUndo(Northwoods.GoWeb.GoChangedEventArgs)">
            <summary>
            Copies state to permit an undo.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoObject.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.CopyNewValueForRedo(Northwoods.GoWeb.GoChangedEventArgs)">
            <summary>
            Copies state to permit a redo.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoObject.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoDrawing.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Performs changes for undo and redo.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoObject.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoDrawing.Figure">
            <summary>
            Gets or sets the last known kind of <see cref="T:Northwoods.GoWeb.GoFigure"/> for this shape.
            </summary>
            <value>
            This defaults to <see cref="F:Northwoods.GoWeb.GoFigure.None"/>.
            </value>
            <remarks>
            Although this may have a value that is a particular <see cref="T:Northwoods.GoWeb.GoFigure"/>,
            the actual path may have been modified arbitrarily since this property was last set.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoDrawing.PointsCount">
            <summary>
            Gets the number of points in this shape.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoDrawing.Data">
            <summary>
            Gets or sets both the array of bytes of <see cref="T:Northwoods.GoWeb.GoDrawingAction"/>s and the array of <c>PointF</c>s,
            bundled together in a <see cref="T:Northwoods.GoWeb.GoDrawingData"/> object.
            </summary>
            <remarks>
            Getting this property will result in a new <see cref="T:Northwoods.GoWeb.GoDrawingData"/> with copies of the two arrays.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoDrawing.FiguresCount">
            <summary>
            Returns the number of figures currently in this shape.
            </summary>
            <remarks>
            The number of figures is the same as the number of <see cref="F:Northwoods.GoWeb.GoDrawingAction.StartAt"/> points in the shape.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoDrawing.SameEndPoints">
            <summary>
            Gets or sets whether the first and last point of each figure are at the same point.
            </summary>
            <value>
            The default value is false.
            </value>
            <remarks>
            For polycurves setting this property to true will cause the loss of
            the straight line connecting the last and first points.
            (But note that if the whole figure consists of just the four points
            of a Bezier curve, having the first and last points the same may
            result in a degenerate Bezier curve: a straight line.)
            Even when this property is true, the first and last point of each figure
            might not be at the same position if they are modified by calling <see cref="M:Northwoods.GoWeb.GoDrawing.SetPoint(System.Int32,System.Drawing.PointF)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoDrawing.SmoothCurves">
            <summary>
            Gets or sets whether all points joining any two adjacent Bezier segments form a smooth curve.
            </summary>
            <value>
            The default value is false.
            A value of true means that there are no corners between Bezier curves,
            although there still may be corners between straight line segments and
            between a Bezier segment and a straight segment.
            </value>
            <remarks>
            Even when this property is true, the rendered path might not be smooth
            if the points are modified by calling <see cref="M:Northwoods.GoWeb.GoDrawing.SetPoint(System.Int32,System.Drawing.PointF)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoDrawing.FillMode">
            <summary>
            Gets or sets how <see cref="M:Northwoods.GoWeb.GoDrawing.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)"/> and <see cref="M:Northwoods.GoWeb.GoDrawing.ContainsPoint(System.Drawing.PointF)"/>
            operate on closed figures.
            </summary>
            <value>
            The default value is <c>FillMode.Winding</c>.
            </value>
            <remarks>
            Consider also calling <see cref="M:Northwoods.GoWeb.GoDrawing.ReversePaths"/> before combining two shapes.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoDrawing.PickMargin">
            <summary>
            Gets or sets the approximate width of the region on either side of an open shape's line that
            is still considered "inside" the shape when picking.
            </summary>
            <value>
            The default value is 3.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoDrawing.ShowsBoundingHandle">
            <summary>
            Gets or sets whether this object, when selected, displays a bounding selection
            handle around this shape.
            </summary>
            <value>
            The default value is true.
            </value>
            <remarks>
            This value is considered by <see cref="M:Northwoods.GoWeb.GoDrawing.AddSelectionHandles(Northwoods.GoWeb.GoSelection,Northwoods.GoWeb.GoObject)"/> whether or
            not this shape is Resizable.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoDrawing.ReshapablePoints">
            <summary>
            Gets or sets whether this object, when selected, displays resize handles
            at each point of this shape, instead of the standard four or eight resize
            handles at the corners and middles of the rectangular bounds.
            </summary>
            <value>
            The default value is true.
            </value>
            <remarks>
            This value is considered by <see cref="M:Northwoods.GoWeb.GoDrawing.AddSelectionHandles(Northwoods.GoWeb.GoSelection,Northwoods.GoWeb.GoObject)"/> when this
            shape is Resizable and Reshapable.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoDrawing.ReshapableRectangle">
            <summary>
            Gets or sets whether this object, when selected, displays the standard four or eight resize
            handles at the corners and middles of the rectangular bounds, when this object is
            reshapable and <see cref="P:Northwoods.GoWeb.GoDrawing.ReshapablePoints"/> is false.
            </summary>
            <value>
            The default value is true.
            </value>
            <remarks>
            This value is considered by <see cref="M:Northwoods.GoWeb.GoDrawing.AddSelectionHandles(Northwoods.GoWeb.GoSelection,Northwoods.GoWeb.GoObject)"/> when this
            shape is Resizable and Reshapable and when <see cref="P:Northwoods.GoWeb.GoDrawing.ReshapablePoints"/> is false.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoDrawing.UnrotatedBounds">
            <summary>
            Gets or sets the <c>Bounds</c> of this shape if the <see cref="P:Northwoods.GoWeb.GoDrawing.Angle"/> were zero.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoDrawing.UnrotatedCenter">
            <summary>
            Gets the center point of the <see cref="P:Northwoods.GoWeb.GoDrawing.UnrotatedBounds"/>.
            </summary>
            <remarks>
            This is the center that the shape rotated about. Unlike <see cref="P:Northwoods.GoWeb.GoObject.Center"/>,
            this point does not move when the shape is rotated.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoDrawing.Angle">
            <summary>
            Gets or sets the angle at which this shape is drawn.
            </summary>
            <value>
            The default value is zero.
            </value>
            <remarks>
            This calls <see cref="M:Northwoods.GoWeb.GoDrawing.Rotate(System.Drawing.PointF,System.Single)"/> about the unrotated center of this shape,
            with the angle being the difference between the old angle and the new one.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoDrawing.RotationPoint">
            <summary>
            Gets or sets the axis-of-rotation point.
            </summary>
            <value>
            This defaults to the <see cref="P:Northwoods.GoWeb.GoDrawing.UnrotatedCenter"/> of this shape.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoDrawing.Rotatable">
            <summary>
            Gets or sets whether the user can rotate this object.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoDrawing.RotatesRealtime">
            <summary>
            Gets or sets whether this object is actually rotated while the user is turning it.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoHandle">
            <summary>
            This class is used to show that a document object is selected by
            decorating the object with handles that are added to a view layer.
            </summary>
            <remarks>
            Instances of this class are assumed only to be used in <see cref="T:Northwoods.GoWeb.GoView"/>
            layers, not as part of a <see cref="T:Northwoods.GoWeb.GoDocument"/>.  Thus they do not
            participate in undo/redo nor can they be selected.
            </remarks>
        </member>
        <member name="T:Northwoods.GoWeb.IGoHandle">
            <summary>
            This interface specifies the properties used by <see cref="T:Northwoods.GoWeb.GoSelection"/>
            for displaying selection handles, normally implemented by <see cref="T:Northwoods.GoWeb.GoHandle"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.IGoHandle.GoObject">
            <summary>
            Gets the object being used to implement the handle's visual representation.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.IGoHandle.HandleID">
            <summary>
            Gets or sets an identifier for this handle.
            </summary>
            <remarks>
            Since an object may get many handles when selected, this property
            provides a means of distinguishing them.
            </remarks>
            <seealso cref="T:Northwoods.GoWeb.GoSelection"/>
        </member>
        <member name="P:Northwoods.GoWeb.IGoHandle.SelectedObject">
            <summary>
            Gets or sets the selected object for this handle.
            </summary>
            <remarks>
            This value should be contained by a <see cref="T:Northwoods.GoWeb.GoSelection"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.IGoHandle.HandledObject"/>
        </member>
        <member name="P:Northwoods.GoWeb.IGoHandle.HandledObject">
            <summary>
            Gets the object that actually gets the handles.
            </summary>
            <remarks>
            This should be the same as <c>SelectedObject.SelectionObject</c>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.IGoHandle.SelectedObject"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoHandle.#ctor">
            <summary>
            The constructor produces a rectangular handle whose <see cref="P:Northwoods.GoWeb.GoHandle.HandleID"/> is
            <see cref="P:Northwoods.GoWeb.GoHandle.GoObject"/>.<c>NoHandle</c> and that has zero width and height.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoHandle.CopyObject(Northwoods.GoWeb.GoCopyDictionary)">
            <summary>
            We never expect to copy handles.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoHandle.GetCursorName(Northwoods.GoWeb.GoView)">
            <summary>
            Return the appropriate resize cursor name for the handle ID's corresponding to
            the standard spots, but return null if the object cannot be resized.
            </summary>
            <param name="view"></param>
            <returns>
            null if <see cref="M:Northwoods.GoWeb.GoView.CanResizeObjects"/> is false or if
            <see cref="P:Northwoods.GoWeb.GoHandle.GoObject"/>.<c>CanResize</c> and <see cref="P:Northwoods.GoWeb.GoHandle.GoObject"/>.<c>CanReshape</c> are both false;
            otherwise the value of <see cref="P:Northwoods.GoWeb.GoHandle.CursorName"/> if it is non-null;
            finally a cursor name depending on the <see cref="P:Northwoods.GoWeb.GoHandle.HandleID"/>,
            such as "se-resize" for <see cref="P:Northwoods.GoWeb.GoHandle.GoObject"/>.<c>BottomRight</c> or
            "hand" for <see cref="F:Northwoods.GoWeb.GoLink.RelinkableToHandle"/>, or "move"
            for most other handles, or finally null if the <see cref="P:Northwoods.GoWeb.GoHandle.HandleID"/>
            is <see cref="P:Northwoods.GoWeb.GoHandle.GoObject"/>.<c>NoHandle</c>.
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoHandle.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)">
            <summary>
            Draw this handle according to the handle's style.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <remarks>
            Handles never have shadows, but their outlines and fills
            can be specified by the <see cref="P:Northwoods.GoWeb.GoShape.Pen"/> and
            <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> properties.
            Hollow handles (those with a <see cref="P:Northwoods.GoWeb.GoHandle.GoObject"/>.<c>NoHandle</c>
            <see cref="P:Northwoods.GoWeb.GoHandle.HandleID"/>), should have no <see cref="P:Northwoods.GoWeb.GoShape.Brush"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoHandle.MakePath">
            <summary>
            Produce a <c>GraphicsPath</c> representing this shape.
            </summary>
            <returns>a newly allocated <c>GraphicsPath</c></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoHandle.ContainsPoint(System.Drawing.PointF)">
            <summary>
            Determines if the given point is inside this handle's bounds.
            </summary>
            <param name="p">
            A <c>PointF</c> value in document coordinates.
            </param>
            <returns>
            True if the point is considered "on" the handle.
            </returns>
            <remarks>
            This assumes that handles are actually hollow when the
            <see cref="P:Northwoods.GoWeb.GoHandle.HandleID"/> is <see cref="P:Northwoods.GoWeb.GoHandle.GoObject"/>.<c>NoHandle</c>--
            that is, a point well inside the handle's bounds is
            not considered "on" the handle if the handle's ID is
            <see cref="P:Northwoods.GoWeb.GoHandle.GoObject"/>.<c>NoHandle</c>.  This is useful for
            letting bounding handles be ignored by mouse over behavior.
            Note that this method does not take the <see cref="P:Northwoods.GoWeb.GoHandle.Style"/>
            into account--it assumes the handle is rectangular.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoHandle.AddSelectionHandles(Northwoods.GoWeb.GoSelection,Northwoods.GoWeb.GoObject)">
            <summary>
            Handles should never be selected, so they should not get their own selection handles.
            </summary>
            <param name="sel"></param>
            <param name="selectedObj"></param>
        </member>
        <member name="P:Northwoods.GoWeb.GoHandle.GoObject">
            <summary>
            Gets the object being used to implement the handle's visual representation.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.IGoHandle.GoObject"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoHandle.HandleID">
            <summary>
            Gets or sets an identifier for this handle.
            </summary>
            <value>
            The default identifier is <see cref="P:Northwoods.GoWeb.GoHandle.GoObject"/>.<c>NoHandle</c>.
            </value>
            <remarks>
            Because handles are only used in views, setting this
            property is not tracked by the undo/redo mechanism.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.IGoHandle.HandleID"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoHandle.SelectedObject">
            <summary>
            Gets or sets the selected object for this handle.
            </summary>
            <remarks>
            Because handles are only used in views, setting this
            property is not tracked by the undo/redo mechanism.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.IGoHandle.SelectedObject"/>
            <seealso cref="T:Northwoods.GoWeb.GoSelection"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoHandle.HandledObject">
            <summary>
            Gets the object that actually gets the handles.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.IGoHandle.HandledObject"/>
            <seealso cref="M:Northwoods.GoWeb.GoHandle.AddSelectionHandles(Northwoods.GoWeb.GoSelection,Northwoods.GoWeb.GoObject)"/>
            <remarks>
            This is the <see cref="P:Northwoods.GoWeb.GoHandle.SelectedObject"/>'s <see cref="P:Northwoods.GoWeb.GoHandle.GoObject"/>.<c>SelectionObject</c>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoHandle.Style">
            <summary>
            Gets or sets the appearance style for this handle.
            </summary>
            <value>
            The default style is <see cref="F:Northwoods.GoWeb.GoHandleStyle.Rectangle"/>
            </value>
            <remarks>
            Normally, bounding handles are open rectangles that go
            around the handled object, and resize handles are small
            rectangles that are filled with a selection color.
            Because handles are only used in views, setting this
            property is not tracked by the undo/redo mechanism.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoHandle.CursorName">
            <summary>
            Gets or sets the name of the cursor to be used when the mouse
            is over this handle object.
            </summary>
            <value>
            The default value is null.
            </value>
            <remarks>
            <para>
            <see cref="M:Northwoods.GoWeb.GoHandle.GetCursorName(Northwoods.GoWeb.GoView)"/> uses this property, taking
            precedence over the standard cursor name for the <see cref="P:Northwoods.GoWeb.GoHandle.HandleID"/>,
            as returned by <see cref="M:Northwoods.GoWeb.GoHandle.GetCursorNameForHandleID(System.Int32)"/>.
            </para>
            <para>
            Because handles are only used in views, setting this
            property is not tracked by the undo/redo mechanism.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoHandle.SelectionObject">
            <summary>
            Handles should never be selected, so they have no SelectionObject.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoEllipse">
            <summary>
            An object in the shape of an ellipse or circle.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoEllipse.#ctor">
            <summary>
            The constructor produces an ellipse with a standard black <see cref="P:Northwoods.GoWeb.GoShape.Pen"/>
            outline and no <see cref="T:System.Drawing.Brush"/> fill.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoEllipse.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)">
            <summary>
            Draw a possibly shadowed ellipse.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoEllipse.MakePath">
            <summary>
            Produce a <c>GraphicsPath</c> by adding an elliptical shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoEllipse.ContainsPoint(System.Drawing.PointF)">
            <summary>
            A point is in this object only if it really is inside the ellipse.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoEllipse.GetNearestIntersectionPoint(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)">
            <summary>
            A point on the ellipse that is coincident with a line drawn from
            the center of the ellipse to the given point.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoEllipse.NearestIntersectionOnEllipse(System.Drawing.RectangleF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)">
            <summary>
            Find the intersection point of the elliptical path defined by rectangle rect and an infinite
            line p1-p2 that is closest to point p1.
            </summary>
            <param name="rect"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoEllipse.NearestIntersectionOnArc(System.Drawing.RectangleF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@,System.Single,System.Single)">
            <summary>
            Find the intersection point of the elliptical path defined by rectangle rect and an infinite
            line p1-p2 that is closest to point p1 within the area from startAngle through the sweepAngle.
            </summary>
            <param name="rect"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="result"></param>
            <param name="startAngle"></param>
            <param name="sweepAngle"></param>
            <returns></returns>
        </member>
        <member name="T:Northwoods.GoWeb.GoFigure">
            <summary>
            Predefined <see cref="T:Northwoods.GoWeb.GoDrawing"/> shapes.  [Not in GoDiagram Pocket]
            </summary>
            <remarks>
            Use as the argument to the <see cref="M:Northwoods.GoWeb.GoDrawing.#ctor(Northwoods.GoWeb.GoFigure)"/> constructor:
            <c>new GoDrawing(GoFigure.Rectangle)</c>.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.None">
            <summary>
            Used when there is no particular figure for a <see cref="T:Northwoods.GoWeb.GoDrawing"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Line1">
            <summary>
            Represents a line.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Line2">
            <summary>
            Represents a line.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Curve1">
            <summary>
            Represents a curve.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Curve2">
            <summary>
            Represents a curve.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Curve3">
            <summary>
            Represents a curve.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Curve4">
            <summary>
            Represents a curve.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Triangle">
            <summary>
            Represents a three-sided figure (a triangle). This is the same shape
            represented by GoFigure.Alternative and GoFigure.Merge.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Diamond">
            <summary>
            Represents a four-sided figure (a diamond). This is the same shape
            represented by GoFigure.Decision.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Pentagon">
            <summary>
            Represents a five-sided figure (a pentagon).
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Hexagon">
            <summary>
            Represents a six-sided figure (a hexagon). This is the same shape
            represented by GoFigure.DataTransmission.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Heptagon">
            <summary>
            Represents a seven-sided figure (a heptagon).
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Octagon">
            <summary>
            Represents an eight-sided figure (an octagon).
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Nonagon">
            <summary>
            Represents a nine-sided figure (a nonagon).
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Decagon">
            <summary>
            Represents a ten-sided figure (a decagon).
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Dodecagon">
            <summary>
            Represents a twelve-sided figure (a dodecagon).
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.FivePointedStar">
            <summary>
            Represents a five-pointed star.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.SixPointedStar">
            <summary>
            Represents a six-pointed star.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.SevenPointedStar">
            <summary>
            Represents a seven-pointed star.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.EightPointedStar">
            <summary>
            Represents an eight-pointed star.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.NinePointedStar">
            <summary>
            Represents a nine-pointed star.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.TenPointedStar">
            <summary>
            Represents a ten-pointed star.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.FivePointedBurst">
            <summary>
            Represents a five-pointed burst.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.SixPointedBurst">
            <summary>
            Represents a six-pointed burst.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.SevenPointedBurst">
            <summary>
            Represents a seven-pointed burst.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.EightPointedBurst">
            <summary>
            Represents an eight-pointed burst.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.NinePointedBurst">
            <summary>
            Represents a nine-pointed burst.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.TenPointedBurst">
            <summary>
            Represents a ten-pointed burst.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Circle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Cloud">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Crescent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Ellipse">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.FramedRectangle">
            <summary>
            Represents a shape containing a rectangle within another regtangle.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.HalfEllipse">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Heart">
            <summary>
            Represents a shape resembling a heart.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Spade">
            <summary>
            Represents a shape resembling a spade.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Club">
            <summary>
            Represents a shape resembling a club.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.HourGlass">
            <summary>
            Represents an hour glass shape.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Lightning">
            <summary>
            Represents a shape resembling a bolt of lightning.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Parallelogram1">
            <summary>
            Represents a four-sided figure containing two acute opposite angles,
            and two obtuse opposite angles.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Parallelogram2">
            <summary>
            Represents a four-sided figure containing two acute opposite angles,
            and two obtuse opposite angles.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Rectangle">
            <summary>
            Represents a four-sided figure containing four ninety degree angles.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.RightTriangle">
            <summary>
            Represents a three-sided figure containing one ninety degree angle.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.RoundedIBeam">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.RoundedRectangle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Square">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.SquareIBeam">
            <summary>
            Represents a figure in the shape of an 'I'.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.ThickCross">
            <summary>
            Represents a figure in the shape of a '+'.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.ThickX">
            <summary>
            Represents a figure in the shape of a 'X'.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.ThinCross">
            <summary>
            Represents a figure in the shape of a '+'.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.ThinX">
            <summary>
            Represents a figure in the shape of a 'X'.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Trapezoid">
            <summary>
            Represents a four-sided figure containing two acute adjacent angles,
            and two obtuse adjacent angles. This is the same shape represented by
            GoFigure.ManualLoop and GoFigure.ManualOperation
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.YinYang">
            <summary>
            Represents the Yin-Yang symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Peace">
            <summary>
            Represents the universal peace symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.NotAllowed">
            <summary>
            Represents a figure used to mean "Not Allowed." In the shape of a circle with a line through.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Fragile">
            <summary>
            Represents a figure used to mean "Fragile." In the shape of a broken glass.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.GenderMale">
            <summary>
            Represents the male gender in biology. In the shape of the astronomical Mars symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.GenderFemale">
            <summary>
            Represents the female gender in biology. In the shape of the astronomical Venus symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.PlusLine">
            <summary>
            Represents the "+" symbol using unfilled lines.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.XLine">
            <summary>
            Represents an "X" symbol using unfilled lines.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.AsteriskLine">
            <summary>
            Represents the "*" symbol using unfilled lines.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.CircleLine">
            <summary>
            Represents an unfilled circle.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Pie">
            <summary>
            Represents a Pie with a piece taken out.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.PiePiece">
            <summary>
            Represents a piece of a pie.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.StopSign">
            <summary>
            Represents an octagonal Stop Sign.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.LogicImplies">
            <summary>
            Logical symbol, represented by an arrow.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.LogicIff">
            <summary>
            Logical symbol for If and Only If, represented by a double-headed arrow.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.LogicNot">
            <summary>
            Logical symbol for Not or Negation, represented by a horizontal line with a small vertical bar at the end.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.LogicAnd">
            <summary>
            Logical symbol for And, represented by a vertically flipped "V".
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.LogicOr">
            <summary>
            Logical symbol for Or, represented by a "V".
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.LogicXor">
            <summary>
            Logical symbol for Exclusive Or, represented by a circle with a "+" inscribed inside.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.LogicTruth">
            <summary>
            Logical symbol for an unconditional Truth, represented by a "T".
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.LogicFalsity">
            <summary>
            Logical symbol for an unconditional Falsity, represented by a vertically flipped "T".
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.LogicThereExists">
            <summary>
            Logical symbol for existential quantification, represented by a horizontally flipped "E".
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.LogicForAll">
            <summary>
            Logical symbol for universal quantification, represented by a vertically flipped "A".
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.LogicIsDefinedAs">
            <summary>
            Logical symbol for Definition, represented by three horizontal bars.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.LogicIntersect">
            <summary>
            Logical symbol for Intersection, represented by a vertically flipped "U".
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.LogicUnion">
            <summary>
            Logical symbol for Union, represented by a "U".
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Arrow">
            <summary>
            Represents a basic arrow shape with a square end.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Chevron">
            <summary>
            A chevron type arrow. This is the same shape represented by
            GoFigure.ISOProcess.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.DoubleArrow">
            <summary>
            Represents a shape consisting of two arrows.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.DoubleEndArrow">
            <summary>
            Represents an arrow with directional points on each end.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.IBeamArrow">
            <summary>
            Represents an arrow with an I-Beam end.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Pointer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.RoundedPointer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.SplitEndArrow">
            <summary>
            Represents an arrow with a triangle shaped split at the end.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.SquareArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Cone1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Cone2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Cube1">
            <summary>
            A two dimensional representation of a cube.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Cube2">
            <summary>
            A two dimensional representation of a cube.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Cylinder1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Cylinder2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Cylinder3">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Cylinder4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Prism1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Prism2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Pyramid1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Pyramid2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Actor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Alternative">
            <summary>
            Flowchart 'alternative' symbol. This is the same shape represented by
            GoFigure.Triangle.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Card">
            <summary>
            Flowchart 'card' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Collate">
            <summary>
            Flowchart 'collate' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Connector">
            <summary>
            Flowchart 'connector' symbol. This is the same shape represented by
            GoFigure.Ellipse.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.CreateRequest">
            <summary>
            Flowchart 'create request' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Database">
            <summary>
            Flowchart 'database' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.DataStorage">
            <summary>
            Flowchart 'data storage' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.DataTransmission">
            <summary>
            Flowchart 'data transmission' symbol. This is the same shape
            represented by GoFigure.Hexagon.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Decision">
            <summary>
            Flowchart 'decision' symbol. This is the same shape represented by
            GoFigure.Diamond.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Delay">
            <summary>
            Flowchart 'delay' symbol. This is the same shape represented by
            GoFigure.HalfEllipse.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.DirectData">
            <summary>
            Flowchart 'direct data' symbol. This is the same shape represented by
            GoFigure.Cylinder4.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.DiskStorage">
            <summary>
            Flowchart 'disk storage' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Display">
            <summary>
            Flowchart 'display' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.DividedEvent">
            <summary>
            Flowchart 'divided event' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.DividedProcess">
            <summary>
            Flowchart 'divided process' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Document">
            <summary>
            Flowchart 'document' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.ExternalOrganization">
            <summary>
            Flowchart 'external organization' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.ExternalProcess">
            <summary>
            Flowchart 'external process' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.File">
            <summary>
            Flowchart 'file' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Gate">
            <summary>
            Flowchart 'gate' symbol. This is the same shape represented by
            GoFigure.Crescent.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Input">
            <summary>
            Flowchart 'input' symbol. This is the same shape represented by
            GoFigure.Parallelogram1.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Interupt">
            <summary>
            Flowchart 'interupt' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.InternalStorage">
            <summary>
            Flowchart 'internal storage' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.ISOProcess">
            <summary>
            Flowchart 'ISO Process' symbol. This is the same shape represented by
            GoFigure.Chevron
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Junction">
            <summary>
            Flowchart 'junction' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.LinedDocument">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.LoopLimit">
            <summary>
            Flowchart 'loop limit' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.MagneticData">
            <summary>
            Flowchart 'magnetic data' symbol. This is the same shape represented by
            GoFigure.Cylinder1.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.MagneticTape">
            <summary>
            Flowchart 'magetic tape' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.ManualInput">
            <summary>
            Flowchart 'manual input' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.ManualLoop">
            <summary>
            Flowchart 'manual loop' symbol. This is the same shape represented by
            GoFigure.Trapezoid.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.ManualOperation">
            <summary>
            Flowchart 'manual operation' symbol. This is the same shape represented
            by GoFigure.Trapezoid and GoFigure.ManualInput.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Merge">
            <summary>
            Flowchart 'merge' symbol. This is the same shape represented by
            GoFigure.Triangle.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.MessageFromUser">
            <summary>
            Flowchart 'message from user' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.MessageToUser">
            <summary>
            Flowchart 'message to user' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.MicroformProcessing">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.MicroformRecording">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.MultiDocument">
            <summary>
            Flowchart 'multiple document' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.MultiProcess">
            <summary>
            Flowchart 'multiple process' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.OfflineStorage">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.OffPageConnector">
            <summary>
            Flowchart 'off page connector' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Or">
            <summary>
            Flowchart 'or' symbol
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Output">
            <summary>
            Flowchart 'output' symbol. This is the same shape represented by
            GoFigure.Parallelogram1.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.PaperTape">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.PrimitiveFromCall">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.PrimitiveToCall">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Procedure">
            <summary>
            Flowchart 'procedure' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Process">
            <summary>
            Flowchart 'process' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.SequentialData">
            <summary>
            Flowchart 'sequential data' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Sort">
            <summary>
            Flowchart 'sort' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Start">
            <summary>
            Flowchart 'start' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.StoredData">
            <summary>
            Flowchart 'stored data' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Subroutine">
            <summary>
            Flowchart 'subroutine' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Terminator">
            <summary>
            Flowchart 'terminator' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.TransmittalTape">
            <summary>
            Flowchart 'transmittal tape' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.AndGate">
            <summary>
            Represents an and gate logic circuit.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Buffer">
            <summary>
            Represents a buffer logic circuit.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Clock">
            <summary>
            Represents a system clock.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Ground">
            <summary>
            Represents ground.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Inverter">
            <summary>
            Represents an inverter logic circuit.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.NandGate">
            <summary>
            Represents a nand gate logic circuit.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.NorGate">
            <summary>
            Represents a nor gate logic circuit.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.OrGate">
            <summary>
            Represents an or gate logic circuit.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.XnorGate">
            <summary>
            Represents an xnor gate logic circuit.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.XorGate">
            <summary>
            Represents an xor gate logic circuit.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Capacitor">
            <summary>
            Represents a capacitor.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Resistor">
            <summary>
            Represents a resistor.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Inductor">
            <summary>
            Represents an inductor.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.ACvoltageSource">
            <summary>
            Represents an AC voltage source.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.DCvoltageSource">
            <summary>
            Represents a DC voltage source.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Diode">
            <summary>
            Represents a diode.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Wifi">
            <summary>
            Represents a wifi symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Email">
            <summary>
            Represents an email symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Ethernet">
            <summary>
            Represents an ethernet jack symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Power">
            <summary>
            Represents the power symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.Fallout">
            <summary>
            Represents the Fallout Shelter symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.IrritationHazard">
            <summary>
            Represents the Irritation Hazard symbol, in the shape of an 'X'.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.ElectricalHazard">
            <summary>
            Represents an Electrical Hazard symbol, in the shape of a lightning bolt.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoFigure.FireHazard">
            <summary>
            Represents a Fire Hazard symbol, in the shape of a fire.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoViewGridStyle">
            <summary>
            Specifies the appearance of the grid.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoViewGridStyle.None">
            <summary>
            Do not display any grid.  See <see cref="P:Northwoods.GoWeb.GoView.GridStyle"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoViewGridStyle.Dot">
            <summary>
            Display a grid consisting of dots.  See <see cref="P:Northwoods.GoWeb.GoView.GridStyle"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoViewGridStyle.Cross">
            <summary>
            Display a grid consisting of small crosses.  See <see cref="P:Northwoods.GoWeb.GoView.GridStyle"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoViewGridStyle.Line">
            <summary>
            Display a grid consisting of lines.  See <see cref="P:Northwoods.GoWeb.GoView.GridStyle"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoViewGridStyle.HorizontalLine">
            <summary>
            Display a grid consisting of only horizontal lines.  See <see cref="P:Northwoods.GoWeb.GoView.GridStyle"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoViewGridStyle.VerticalLine">
            <summary>
            Display a grid consisting of only vertical lines.  See <see cref="P:Northwoods.GoWeb.GoView.GridStyle"/>.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoViewSnapStyle">
            <summary>
            Specifies the move or resize behavior based on the grid.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoViewSnapStyle.None">
            <summary>
            Ignore the grid while moving or resizing an object.
            See <see cref="P:Northwoods.GoWeb.GoGrid.SnapDrag"/> and <see cref="P:Northwoods.GoWeb.GoGrid.SnapResize"/>
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoViewSnapStyle.Jump">
            <summary>
            Move or resize an object to a grid point continuously as the mouse moves.
            See <see cref="P:Northwoods.GoWeb.GoGrid.SnapDrag"/> and <see cref="P:Northwoods.GoWeb.GoGrid.SnapResize"/>
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoViewSnapStyle.After">
            <summary>
            Move or resize an object to a grid point only on a mouse up.
            See <see cref="P:Northwoods.GoWeb.GoGrid.SnapDrag"/> and <see cref="P:Northwoods.GoWeb.GoGrid.SnapResize"/>
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoGrid">
            <summary>
            An object that draws a set of dots, crosses, or lines in a rectangular pattern,
            and that can affect how objects are moved, copied, and resized.
            </summary>
            <remarks>
            A <c>GoGrid</c> is not a table containing cells of objects.
            This class just draws lines in a regular manner within the bounds of
            this object according to a frequency specified by the <see cref="P:Northwoods.GoWeb.GoGrid.CellSize"/>.
            The appearance of the lines is governed by the <see cref="P:Northwoods.GoWeb.GoGrid.Style"/>
            and <see cref="P:Northwoods.GoWeb.GoGrid.LineWidth"/> and <see cref="P:Northwoods.GoWeb.GoGrid.LineColor"/>.
            You can also specify a regular pattern of colors by specifying <see cref="P:Northwoods.GoWeb.GoGrid.CellColors"/>.
            Furthermore a grid can have a semi-infinite or infinite extent by
            setting <see cref="P:Northwoods.GoWeb.GoGrid.UnboundedSpots"/>.
            This class also implements the <see cref="T:Northwoods.GoWeb.IGoDragSnapper"/> interface,
            which affects how various view methods and tools move, copy, and resize
            objects.
            </remarks>
        </member>
        <member name="T:Northwoods.GoWeb.GoRectangle">
            <summary>
            An object in the shape of a rectangle or square, whose corners are at
            the corners of the bounding rectangle.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoRectangle.#ctor">
            <summary>
            The constructor produces a rectangle with a standard black <see cref="P:Northwoods.GoWeb.GoShape.Pen"/>
            outline and no <see cref="T:System.Drawing.Brush"/> fill.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoRectangle.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)">
            <summary>
            Paint a possibly shadowed rectangle.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
        </member>
        <member name="T:Northwoods.GoWeb.IGoDragSnapper">
            <summary>
            This interface should be implemented by those <see cref="T:Northwoods.GoWeb.GoObject"/>s that
            want to act like grids for affecting how objects are dragged or resized in a <see cref="T:Northwoods.GoWeb.GoView"/>.
            </summary>
            <remarks>
            <see cref="T:Northwoods.GoWeb.GoGrid"/> implements this interface.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.IGoDragSnapper.CanSnapPoint(System.Drawing.PointF,Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoView)">
            <summary>
            This predicate is called by <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="M:Northwoods.GoWeb.GoView.SnapPoint(System.Drawing.PointF,Northwoods.GoWeb.GoObject)"/> to
            decide whether this grid-like object should take part.
            </summary>
            <param name="p">a <c>PointF</c> in document coordinates</param>
            <param name="obj">the <see cref="T:Northwoods.GoWeb.GoObject"/> being moved or resized</param>
            <param name="view">the <see cref="T:Northwoods.GoWeb.GoView"/> that is moving or resizing an object</param>
            <returns>true if the point <paramref name="p"/> is in (or near) this object and
            if <see cref="M:Northwoods.GoWeb.IGoDragSnapper.SnapPoint(System.Drawing.PointF,Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoView)"/> should be called</returns>
            <remarks>
            An implementation of this predicate should probably return false if
            <see cref="M:Northwoods.GoWeb.GoObject.CanView"/> returns false.
            It also should probably return false if this object is part of the
            <paramref name="view"/>'s <see cref="P:Northwoods.GoWeb.GoView.Selection"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.IGoDragSnapper.SnapPoint(System.Drawing.PointF,Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoView)">
            <summary>
            This method is called by <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="M:Northwoods.GoWeb.GoView.SnapPoint(System.Drawing.PointF,Northwoods.GoWeb.GoObject)"/> to
            find the point to which an object should be moved or resized.
            </summary>
            <param name="p">a <c>PointF</c> in document coordinates</param>
            <param name="obj">the <see cref="T:Northwoods.GoWeb.GoObject"/> being moved or resized</param>
            <param name="view">the <see cref="T:Northwoods.GoWeb.GoView"/> that is moving or resizing an object</param>
            <returns></returns>
        </member>
        <member name="P:Northwoods.GoWeb.IGoDragSnapper.SnapOpaque">
            <summary>
            Gets whether <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="M:Northwoods.GoWeb.GoView.SnapPoint(System.Drawing.PointF,Northwoods.GoWeb.GoObject)"/>
            should look at any <see cref="T:Northwoods.GoWeb.IGoDragSnapper"/> that might be behind this one.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGrid.ChangedStyle">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoGrid.Style"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGrid.ChangedOrigin">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoGrid.Origin"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGrid.ChangedOriginRelative">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoGrid.OriginRelative"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGrid.ChangedCellSize">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoGrid.CellSize"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGrid.ChangedLineColor">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoGrid.LineColor"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGrid.ChangedLineWidth">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoGrid.LineWidth"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGrid.ChangedLineDashStyle">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoGrid.LineDashStyle"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGrid.ChangedSnapDrag">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoGrid.SnapDrag"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGrid.ChangedSnapResize">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoGrid.SnapResize"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGrid.ChangedCellColors">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoGrid.CellColors"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGrid.ChangedUnboundedSpots">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoGrid.UnboundedSpots"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGrid.ChangedSnapDragWhole">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoGrid.SnapDragWhole"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGrid.ChangedSnapOpaque">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoGrid.SnapOpaque"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGrid.ChangedSnapCellSpot">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoGrid.SnapCellSpot"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGrid.ChangedMajorLineColor">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoGrid.MajorLineColor"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGrid.ChangedMajorLineWidth">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoGrid.MajorLineWidth"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGrid.ChangedMajorLineDashStyle">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoGrid.MajorLineDashStyle"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGrid.ChangedMajorLineFrequency">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoGrid.MajorLineFrequency"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGrid.ChangedLineDashPattern">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoGrid.LineDashPattern"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGrid.ChangedMajorLineDashPattern">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoGrid.MajorLineDashPattern"/> property.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoGrid.#ctor">
            <summary>
            The default grid of size 100x100 does not draw anything, because it has
            no <see cref="P:Northwoods.GoWeb.GoShape.Pen"/> or <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> and the
            <see cref="P:Northwoods.GoWeb.GoGrid.Style"/> is <see cref="F:Northwoods.GoWeb.GoViewGridStyle.None"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoGrid.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)">
            <summary>
            Draw the grid, if the <see cref="P:Northwoods.GoWeb.GoGrid.Style"/> is not <see cref="F:Northwoods.GoWeb.GoViewGridStyle.None"/>.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <remarks>
            Note that if <see cref="P:Northwoods.GoWeb.GoGrid.UnboundedSpots"/> specifies any corner or side spots,
            <see cref="P:Northwoods.GoWeb.GoGrid.IsUnbounded"/> will be true, and this grid will paint arbitrarily
            far in the direction(s) specified.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoGrid.GetShadowBrush(Northwoods.GoWeb.GoView)">
            <summary>
            If this grid is the <see cref="P:Northwoods.GoWeb.GoSheet.Paper"/> of a <see cref="T:Northwoods.GoWeb.GoSheet"/>,
            let it paint the sheet's shadow.
            </summary>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoGrid.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.GoWeb.GoView)">
            <summary>
            The paint bounds are effectively unbounded if <see cref="P:Northwoods.GoWeb.GoGrid.IsUnbounded"/> is true.
            </summary>
            <param name="rect"></param>
            <param name="view"></param>
            <returns>
            If <see cref="P:Northwoods.GoWeb.GoGrid.IsUnbounded"/> is true,
            a <c>RectangleF</c> with a very large <c>Width</c> and/or <c>Height</c>;
            otherwise the standard expanded rectangle as for any <see cref="T:Northwoods.GoWeb.GoShape"/>
            accounting for any pen and/or shadow.
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoGrid.FillGrid(System.Drawing.Graphics,Northwoods.GoWeb.GoView,System.Drawing.RectangleF)">
            <summary>
            Fill the cells of the grid according to the colors given by <see cref="P:Northwoods.GoWeb.GoGrid.CellColors"/>.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <param name="clipRect">
            the area in document coordinates that needs to be painted;
            this is used to optimize the drawing by not trying to draw anything that is
            clearly outside of this clipping rectangle
            </param>
            <remarks>
            If <see cref="P:Northwoods.GoWeb.GoGrid.CellColors"/> has either zero width or zero height,
            this draws no cell colors.
            A color that is <c>Color.Empty</c> draws nothing for that cell.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoGrid.DrawGridLines(System.Drawing.Graphics,Northwoods.GoWeb.GoView,System.Drawing.RectangleF)">
            <summary>
            Draw continuous lines for the grids.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <param name="clipRect">
            the area in document coordinates that needs to be painted;
            this is used to optimize the drawing by not trying to draw anything that is
            clearly outside of this clipping rectangle
            </param>
        </member>
        <member name="M:Northwoods.GoWeb.GoGrid.DrawGridDots(System.Drawing.Graphics,Northwoods.GoWeb.GoView,System.Drawing.RectangleF)">
            <summary>
            Draw small dots at the grid points.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <param name="clipRect">
            the area in document coordinates that needs to be painted;
            this is used to optimize the drawing by not trying to draw anything that is
            clearly outside of this clipping rectangle
            </param>
        </member>
        <member name="M:Northwoods.GoWeb.GoGrid.DrawGridCrosses(System.Drawing.Graphics,Northwoods.GoWeb.GoView,System.Drawing.SizeF,System.Drawing.RectangleF)">
            <summary>
            Draw small crosses at the grid points.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <param name="cross">how long the lines of each cross should be</param>
            <param name="clipRect">
            the area in document coordinates that needs to be painted;
            this is used to optimize the drawing by not trying to draw anything that is
            clearly outside of this clipping rectangle
            </param>
        </member>
        <member name="M:Northwoods.GoWeb.GoGrid.CanSnapPoint(System.Drawing.PointF,Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoView)">
            <summary>
            This predicate is called by <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="M:Northwoods.GoWeb.GoView.SnapPoint(System.Drawing.PointF,Northwoods.GoWeb.GoObject)"/> to
            decide whether this grid should take part.
            </summary>
            <param name="p">a <c>PointF</c> in document coordinates</param>
            <param name="obj">the object being moved or resized (may be null/nothing)</param>
            <param name="view">the <see cref="T:Northwoods.GoWeb.GoView"/> in which the snapping is occuring; may be null/nothing</param>
            <returns>true if <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="M:Northwoods.GoWeb.GoView.SnapPoint(System.Drawing.PointF,Northwoods.GoWeb.GoObject)"/>
            should call <see cref="T:Northwoods.GoWeb.GoGrid"/>.<see cref="M:Northwoods.GoWeb.GoGrid.SnapPoint(System.Drawing.PointF,Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoView)"/></returns>
            <remarks>
            This considers the <see cref="P:Northwoods.GoWeb.GoGrid.SnapDrag"/> property
            (or the <see cref="P:Northwoods.GoWeb.GoGrid.SnapResize"/> property if resizing).
            If <paramref name="view"/> is not null and the current <see cref="P:Northwoods.GoWeb.GoView.Tool"/>
            is either <see cref="T:Northwoods.GoWeb.GoToolResizing"/> or <see cref="T:Northwoods.GoWeb.GoToolDragging"/>,
            this method checks whether the <see cref="P:Northwoods.GoWeb.GoView.LastInput"/> point is within the grid;
            if the view is null or another type of tool is currently in use,
            it checks whether the given point <paramref name="p"/> is within the grid.
            This predicate is false if <see cref="M:Northwoods.GoWeb.GoObject.CanView"/> returns false,
            but this predicate is not affected by the value of <see cref="P:Northwoods.GoWeb.GoGrid.Style"/>
            or any other properties that control this grid's appearance.
            To avoid confusion in some common cases,
            this predicate is also false if the <paramref name="obj"/> is this
            grid itself, or if this grid <see cref="M:Northwoods.GoWeb.GoObject.IsChildOf(Northwoods.GoWeb.GoObject)"/> the
            <paramref name="obj"/>, or if this grid is part of the view's
            <see cref="P:Northwoods.GoWeb.GoView.Selection"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoGrid.SnapPoint(System.Drawing.PointF,Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoView)">
            <summary>
            This method is called by <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="M:Northwoods.GoWeb.GoView.SnapPoint(System.Drawing.PointF,Northwoods.GoWeb.GoObject)"/> to
            find the point to which an object should be moved or resized.
            </summary>
            <param name="p">a <c>PointF</c> in document coordinates</param>
            <param name="obj">the object being moved or resized (may be null/nothing)</param>
            <param name="view">the <see cref="T:Northwoods.GoWeb.GoView"/> in which the snapping is occuring; may be null/nothing</param>
            <returns>by default, just the result of calling <see cref="T:Northwoods.GoWeb.GoGrid"/>.<see cref="M:Northwoods.GoWeb.GoGrid.FindNearestGridPoint(System.Drawing.PointF,Northwoods.GoWeb.GoObject)"/></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoGrid.FindNearestGridPoint(System.Drawing.PointF,Northwoods.GoWeb.GoObject)">
            <summary>
            Find the nearest grid point to a given point.
            </summary>
            <param name="p">A <c>PointF</c> in document coordinates.</param>
            <param name="obj">the object being dragged if <see cref="P:Northwoods.GoWeb.GoGrid.SnapDragWhole"/> is true;
            may be null/nothing</param>
            <returns>A <c>PointF</c> point in document coordinates,
            adjusted according to value of <see cref="P:Northwoods.GoWeb.GoGrid.SnapCellSpot"/>.
            When <paramref name="obj"/> is not null, the returned point is
            also adjusted to try to include the whole object within the grid.
            If that object cannot fit in the grid because it is too wide and/or
            too tall, the <see cref="P:Northwoods.GoWeb.GoObject.Location"/> of the object,
            if along one of the four edges of the object, determines which side(s)
            stay within the bounds of the grid.
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoGrid.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Performs changes for undo and redo.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoObject.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoGrid.Extent">
            <summary>
            Gets a <c>RectangleF</c> that simulates the bounds of extent of this grid,
            using large numbers for the semi-infinite or infinite positions and/or sizes.
            </summary>
            <value>
            when <see cref="P:Northwoods.GoWeb.GoGrid.IsUnbounded"/> is false, this is the same as <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/>;
            otherwise this inflates the bounds by large values according to the value of <see cref="P:Northwoods.GoWeb.GoGrid.UnboundedSpots"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoGrid.Style">
            <summary>
            Gets or sets the style of the grid.
            </summary>
            <value>
            This <see cref="T:Northwoods.GoWeb.GoViewGridStyle"/> value defaults to <see cref="F:Northwoods.GoWeb.GoViewGridStyle.None"/>.
            </value>
            <seealso cref="P:Northwoods.GoWeb.GoGrid.Origin"/>
            <seealso cref="P:Northwoods.GoWeb.GoGrid.CellSize"/>
            <seealso cref="T:System.Drawing.Color"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoGrid.Origin">
            <summary>
            Gets or sets the origin for the grid.
            </summary>
            <value>
            This <c>PointF</c> value is a document coordinate point.
            The default value is (0, 0).
            </value>
            <seealso cref="P:Northwoods.GoWeb.GoGrid.Style"/>
            <seealso cref="P:Northwoods.GoWeb.GoGrid.OriginRelative"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoGrid.OriginRelative">
            <summary>
            Gets or sets whether the value of <see cref="P:Northwoods.GoWeb.GoGrid.Origin"/> moves along with this grid's Position.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoGrid.CellSize">
            <summary>
            Gets or sets the size of each cell in the grid.
            </summary>
            <value>
            This <c>SizeF</c> value describes the size of each cell in document coordinates.
            The <c>Width</c> and <c>Height</c> must be positive.
            </value>
            <seealso cref="P:Northwoods.GoWeb.GoGrid.Style"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoGrid.UnboundedSpots">
            <summary>
            Gets or sets the directions in which this grid is effectively unlimited in size and extent.
            </summary>
            <value>
            This must be some bitwise OR of the standard eight side-or-corner spots:
            <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="F:Northwoods.GoWeb.GoObject.TopLeft"/>, <see cref="F:Northwoods.GoWeb.GoObject.MiddleTop"/>, <see cref="F:Northwoods.GoWeb.GoObject.TopRight"/>,
            <see cref="F:Northwoods.GoWeb.GoObject.MiddleLeft"/>, <see cref="F:Northwoods.GoWeb.GoObject.MiddleRight"/>,
            <see cref="F:Northwoods.GoWeb.GoObject.BottomLeft"/>, <see cref="F:Northwoods.GoWeb.GoObject.MiddleBottom"/>, <see cref="F:Northwoods.GoWeb.GoObject.BottomRight"/>.
            The default value is <see cref="F:Northwoods.GoWeb.GoObject.NoSpot"/>; that is, this grid object is completely finite,
            like the typical <see cref="T:Northwoods.GoWeb.GoObject"/>.
            </value>
            <seealso cref="P:Northwoods.GoWeb.GoGrid.IsUnbounded"/>
            <seealso cref="M:Northwoods.GoWeb.GoGrid.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)"/>
            <seealso cref="M:Northwoods.GoWeb.GoGrid.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.GoWeb.GoView)"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoGrid.IsUnbounded">
            <summary>
            This is true when <see cref="P:Northwoods.GoWeb.GoGrid.UnboundedSpots"/> includes at least one of the standard
            eight spots at the sides or corners.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoGrid.UnboundedSpots"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoGrid.LineColor">
            <summary>
            Gets or sets the color used in drawing grid markings.
            </summary>
            <value>
            The color defaults to a light gray.
            </value>
            <remarks>
            You may prefer a darker color for a Dot grid style,
            or a lighter color for a Line grid style.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoGrid.Style"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoGrid.MajorLineColor">
            <summary>
            Gets or sets the color used in drawing grid markings.
            </summary>
            <value>
            The color defaults to a gray.
            </value>
            <remarks>
            You may prefer a darker color for a Dot grid style,
            or a lighter color for a Line grid style.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoGrid.Style"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoGrid.LineWidth">
            <summary>
            Gets or sets the width of grid markings.  [Not in GoDiagram Pocket]
            </summary>
            <value>
            The width defaults to 0.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoGrid.LineDashStyle">
            <summary>
            Gets or sets the dash style for pens used in drawing the grid lines.  [Not in GoDiagram Pocket]
            </summary>
            <value>
            The dash style defaults to solid.
            </value>
            <remarks>
            This property is only used when the <see cref="P:Northwoods.GoWeb.GoGrid.Style"/> is
            <see cref="F:Northwoods.GoWeb.GoViewGridStyle.Line"/>, <see cref="F:Northwoods.GoWeb.GoViewGridStyle.HorizontalLine"/>, or
            <see cref="F:Northwoods.GoWeb.GoViewGridStyle.VerticalLine"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoGrid.LineDashPattern">
            <summary>
            Gets or sets the dash pattern drawn by grid lines,
            when <see cref="P:Northwoods.GoWeb.GoGrid.LineDashStyle"/> is <c>DashStyle.Custom</c>.  [Not in GoDiagram Pocket]
            </summary>
            <value>
            An array of singles floats describing the length of each (alternating)
            drawn and empty section, repeated to form the whole dashed line.
            Do not modify the array returned by this property;
            to change the pattern, you must set this property to a newly allocated array.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoGrid.MajorLineWidth">
            <summary>
            Gets or sets the width of grid markings.  [Not in GoDiagram Pocket]
            </summary>
            <value>
            The width defaults to 0.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoGrid.MajorLineDashStyle">
            <summary>
            Gets or sets the dash style for pens used in drawing the grid lines.  [Not in GoDiagram Pocket]
            </summary>
            <value>
            The dash style defaults to solid.
            </value>
            <remarks>
            This property is only used when the <see cref="P:Northwoods.GoWeb.GoGrid.Style"/> is
            <see cref="F:Northwoods.GoWeb.GoViewGridStyle.Line"/>, <see cref="F:Northwoods.GoWeb.GoViewGridStyle.HorizontalLine"/>, or
            <see cref="F:Northwoods.GoWeb.GoViewGridStyle.VerticalLine"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoGrid.MajorLineDashPattern">
            <summary>
            Gets or sets the dash pattern drawn by grid lines,
            when <see cref="P:Northwoods.GoWeb.GoGrid.MajorLineDashStyle"/> is <c>DashStyle.Custom</c>.  [Not in GoDiagram Pocket]
            </summary>
            <value>
            An array of singles floats describing the length of each (alternating)
            drawn and empty section, repeated to form the whole dashed line.
            Do not modify the array returned by this property;
            to change the pattern, you must set this property to a newly allocated array.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoGrid.MajorLineFrequency">
            <summary>
            Gets or sets how often grid lines should be drawn as major lines.
            </summary>
            <value>
            The Width indicates how often vertical lines should be drawn using
            <see cref="P:Northwoods.GoWeb.GoGrid.MajorLineColor"/> and if not Pocket, MajorLineWidth and MajorLineDashStyle.
            The Height indicates the same thing for horizontal lines.
            A value of zero means never; one means always; two means every other one, etc.
            The initial value is 0x0, so major lines are never drawn.
            </value>
            <remarks>
            Typically this will have the same values as the bounds of the <see cref="P:Northwoods.GoWeb.GoGrid.CellColors"/>
            array, or integral multiples of each other, if both are in use.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoGrid.CellColors">
            <summary>
            Gets or sets an array of colors to be used in drawing grid cell backgrounds.
            </summary>
            <value>
            A two-dimensional array of <c>Color</c>s.
            You must not modify the array that is returned by this property.
            To change any cell colors you must set this property, either by
            allocating a new array or by cloning the current value, modifying the copy,
            and then setting this property.
            When set the grid will keep a copy of the array.
            Initially the array has zero-by-zero bounds, so there is no cell color.
            </value>
            <remarks>
            This array is used by <see cref="M:Northwoods.GoWeb.GoGrid.FillGrid(System.Drawing.Graphics,Northwoods.GoWeb.GoView,System.Drawing.RectangleF)"/>.
            Typically this array's bounds will have the same values as <see cref="P:Northwoods.GoWeb.GoGrid.MajorLineFrequency"/>,
            or integral multiples of each other, if both are in use.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoGrid.SnapDrag">
            <summary>
            Gets or sets the interactive dragging behavior for positioning objects.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoWeb.GoViewSnapStyle.None"/>, so moving and copying
            objects is very smooth, to any point.
            </value>
            <remarks>
            This is used by the <see cref="T:Northwoods.GoWeb.GoToolDragging"/> tool.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoGrid.Style"/>
            <seealso cref="P:Northwoods.GoWeb.GoGrid.SnapResize"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoGrid.SnapResize">
            <summary>
            Gets or sets the interactive resizing behavior for resizing objects.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoWeb.GoViewSnapStyle.None"/>, so resizing
            objects is very smooth, to any size.
            </value>
            <seealso cref="P:Northwoods.GoWeb.GoGrid.Style"/>
            <seealso cref="P:Northwoods.GoWeb.GoGrid.SnapDrag"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoGrid.SnapDragWhole">
            <summary>
            Gets or sets whether <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="M:Northwoods.GoWeb.GoView.SnapPoint(System.Drawing.PointF,Northwoods.GoWeb.GoObject)"/>
            should try to fit the whole object being dragged within the grid.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoGrid.SnapOpaque">
            <summary>
            Gets or sets whether <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="M:Northwoods.GoWeb.GoView.SnapPoint(System.Drawing.PointF,Northwoods.GoWeb.GoObject)"/>
            should look at any grid that might be behind this one.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoGrid.SnapCellSpot">
            <summary>
            Gets or sets the spot in the cell that is returned by <see cref="M:Northwoods.GoWeb.GoGrid.FindNearestGridPoint(System.Drawing.PointF,Northwoods.GoWeb.GoObject)"/>.
            </summary>
            <value>The default value is <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="F:Northwoods.GoWeb.GoObject.TopLeft"/></value>
            <remarks>
            The most common values are <see cref="F:Northwoods.GoWeb.GoObject.TopLeft"/> and <see cref="F:Northwoods.GoWeb.GoObject.Middle"/>,
            corresponding to the most common spots used to control the <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="P:Northwoods.GoWeb.GoObject.Location"/>.
            The values <see cref="F:Northwoods.GoWeb.GoObject.MiddleLeft"/> and <see cref="F:Northwoods.GoWeb.GoObject.MiddleTop"/> are also useful.
            Values such as <see cref="F:Northwoods.GoWeb.GoObject.BottomRight"/> are effectively the same as <see cref="F:Northwoods.GoWeb.GoObject.TopLeft"/>
            in the adjacent cell,
            just as <see cref="F:Northwoods.GoWeb.GoObject.MiddleRight"/> is the same as <see cref="F:Northwoods.GoWeb.GoObject.MiddleLeft"/>
            in a different adjacent cell.
            </remarks>
        </member>
        <member name="T:Northwoods.GoWeb.GoGroup">
            <summary>
            Groups are a way of treating a collection of <see cref="T:Northwoods.GoWeb.GoObject"/> instances
            as a single object.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.IGoCollection">
            <summary>
            This interface specifies a collection of <see cref="T:Northwoods.GoWeb.GoObject"/>.
            </summary>
            <remarks>
            Classes implementing IGoCollection need not maintain an indexing
            of its objects--in other words, they need not implement <c>IList</c>.
            But at any one time each collection implementing this interface should maintain
            an ordering of all of its items, so that the enumerator will iterate
            "forwards" over the list, and so that the <see cref="P:Northwoods.GoWeb.IGoCollection.Backwards"/> enumerable's
            enumerator will iterate "backwards" over that list.
            This ordering should be guaranteed to remain stable as long as the collection
            is unchanged.  However, a call to <see cref="M:Northwoods.GoWeb.IGoCollection.Add(Northwoods.GoWeb.GoObject)"/> or <see cref="M:Northwoods.GoWeb.IGoCollection.Remove(Northwoods.GoWeb.GoObject)"/>
            may cause the ordering of the items to be altered.
            </remarks>
            <seealso cref="T:Northwoods.GoWeb.GoCollection"/>
            <seealso cref="T:Northwoods.GoWeb.GoDocument"/>
            <seealso cref="T:Northwoods.GoWeb.GoLayer"/>
            <seealso cref="T:Northwoods.GoWeb.GoGroup"/>
        </member>
        <member name="M:Northwoods.GoWeb.IGoCollection.Add(Northwoods.GoWeb.GoObject)">
            <summary>
            Add an object to this collection.
            </summary>
            <param name="obj">
            A <see cref="T:Northwoods.GoWeb.GoObject"/>.
            </param>
            <remarks>
            If the collection does not support duplicates, this method should
            do nothing if the <paramref name="obj"/> is already contained by
            the collection.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.IGoCollection.Remove(Northwoods.GoWeb.GoObject)">
            <summary>
            Remove an object from this collection.
            </summary>
            <param name="obj">
            A <see cref="T:Northwoods.GoWeb.GoObject"/>.
            </param>
            <remarks>
            If the collection does not support duplicates, this method should
            just make sure the <paramref name="obj"/> is no longer in the
            collection.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.IGoCollection.Contains(Northwoods.GoWeb.GoObject)">
            <summary>
            This predicate should be true when a given object is in this collection.
            </summary>
            <param name="obj">
            A <see cref="T:Northwoods.GoWeb.GoObject"/>.
            </param>
            <returns>
            True if the <paramref name="obj"/> is in the collection; false otherwise.
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.IGoCollection.Clear">
            <summary>
            Remove all objects from this collection.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.IGoCollection.CopyArray">
            <summary>
            Returns a newly allocated array of all of the GoObjects in this collection.
            </summary>
            <remarks>
            This is typically implemented in the following manner:
            <code>
            GoObject[] a = new GoObject[this.Count];
            CopyTo(a, 0);
            return a;
            </code>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.IGoCollection.CopyTo(Northwoods.GoWeb.GoObject[],System.Int32)">
            <summary>
            Provide a type-specific overload of <c>ICollection.CopyTo</c>.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:Northwoods.GoWeb.IGoCollection.IsEmpty">
            <summary>
            This predicate is true when there are no objects in this collection.
            </summary>
            <remarks>
            This is equivalent to <c>this.Count == 0</c>, but may be faster, and
            is usually easier to read by the programmer.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.IGoCollection.Backwards">
            <summary>
            Gets an enumerable whose enumerator will iterate over the GoObjects in reverse order.
            </summary>
            <remarks>
            The regular enumerator iterates over the GoObjects in this collection in the forwards order.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoGroup.InsertedObject">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGroup.RemovedObject">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGroup.ChangedZOrder">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGroup.ReplacedObject">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGroup.ChangedPickableBackground">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoGroup.PickableBackground"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGroup.AddedChildName">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGroup.RemovedChildName">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.#ctor">
            <summary>
            The constructor produces a group with no child objects.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.CopyObject(Northwoods.GoWeb.GoCopyDictionary)">
            <summary>
            Produces a copy of this object within the given copy dictionary.
            </summary>
            <param name="env"></param>
            <returns>
            The copied group with copies of all of its children.
            </returns>
            <remarks>
            This calls <see cref="M:Northwoods.GoWeb.GoGroup.CopyChildren(Northwoods.GoWeb.GoGroup,Northwoods.GoWeb.GoCopyDictionary)"/> to perform the copying.
            This temporarily sets <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="P:Northwoods.GoWeb.GoObject.Initializing"/> to true
            during the call to <see cref="M:Northwoods.GoWeb.GoGroup.CopyChildren(Northwoods.GoWeb.GoGroup,Northwoods.GoWeb.GoCopyDictionary)"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.CopyObject(Northwoods.GoWeb.GoCopyDictionary)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.CopyChildren(Northwoods.GoWeb.GoGroup,Northwoods.GoWeb.GoCopyDictionary)">
            <summary>
            Copy this group's children.
            </summary>
            <param name="newgroup"></param>
            <param name="env"></param>
            <remarks>
            This method is responsible for copying and adding this group's
            child objects to the <paramref name="newgroup"/>.
            By default, this simply calls
            <c>newgroup.Add(env.Copy(obj))</c> for each child <c>obj</c>.
            However, your group subclass may want to keep track of some or all
            of the children for its own purposes.  To that end you can override
            this method to do the copying manually, thereby correctly maintaining
            your subclass's internal pointers to children.
            You probably should not be calling <see cref="T:Northwoods.GoWeb.GoObject"/>'s <see cref="M:Northwoods.GoWeb.GoObject.CopyObject(Northwoods.GoWeb.GoCopyDictionary)"/>,
            but <see cref="T:Northwoods.GoWeb.GoCopyDictionary"/>'s <see cref="M:Northwoods.GoWeb.GoCopyDictionary.Copy(Northwoods.GoWeb.GoObject)"/>
            or indexed lookup instead.
            </remarks>
            <example>
            For example, a group holding an Icon, a Label, an InPort, and an OutPort
            might implement this method as follows:
            <code>
            base.CopyChildren(newgroup, env);
            MyNode newnode = (MyNode)newgroup;
            newnode.myIcon = (GoObject)env[myIcon];
            newnode.myLabel = (GoText)env[myLabel];
            newnode.myInPort = (GoPort)env[myInPort];
            newnode.myOutPort = (GoPort)env[myOutPort];
            </code>
            Note that this indexing use of <see cref="T:Northwoods.GoWeb.GoCopyDictionary"/> can handle null
            references--it returns null.
            </example>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.Add(Northwoods.GoWeb.GoObject)">
            <summary>
            Add an object to this group.
            </summary>
            <param name="obj"></param>
            <remarks>
            The <paramref name="obj"/> must not already belong to another group or to a layer.
            If the object already belongs to this group, nothing happens.
            Otherwise, afterwards, the <paramref name="obj"/>'s <see cref="P:Northwoods.GoWeb.GoObject.Parent"/>
            will be this group and its <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="P:Northwoods.GoWeb.GoObject.Layer"/>
            will be the same as this group's layer.
            When you add an object to a group, you will normally make that child object
            not <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="P:Northwoods.GoWeb.GoObject.Selectable"/>.
            If the child is supposed to be selectable, you need to consider whether users
            can move or copy the child on its own, or whether this parent group should be
            moved or copied instead.  For the latter case you should set the
            <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="P:Northwoods.GoWeb.GoObject.DragsNode"/> property to true for each such child, so
            that <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="P:Northwoods.GoWeb.GoObject.DraggingObject"/> will return the child's parent node.
            If instead you want to allow selected children to be able to move on their own,
            you should make sure <see cref="M:Northwoods.GoWeb.GoGroup.LayoutChildren(Northwoods.GoWeb.GoObject)"/> does not control the positioning
            of these child objects.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.IGoCollection.Add(Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.InsertBefore(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject)">
            <summary>
            Add or move an object to be before an existing child.
            </summary>
            <param name="child"></param>
            <param name="newobj"></param>
            <remarks>
            The children of a group are ordered with respect to each other.
            This method makes the <paramref name="newobj"/> be in the group at the position
            before the <paramref name="child"/>, so that the <paramref name="newobj"/>
            will be painted immediately before the <paramref name="child"/>.
            If the <paramref name="newobj"/> already belonged to this group, only its
            position in the list is changed.
            The <paramref name="newobj"/> must not already be part of a different group or be
            a top-level object in some layer.
            The existing <paramref name="child"/> must be either null or a member of this
            group (but not be the same as <paramref name="newobj"/>).
            If the <paramref name="child"/> is null, the <paramref name="newobj"/>
            is added at the beginning of the list, behind all other objects in this group.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.InsertAfter(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject)">
            <summary>
            Add or move an object to be after an existing child.
            </summary>
            <param name="child"></param>
            <param name="newobj"></param>
            <remarks>
            The children of a group are ordered with respect to each other.
            This method makes the <paramref name="newobj"/> be in the group at the position
            after the <paramref name="child"/>, so that the <paramref name="newobj"/>
            will be painted immediately after the <paramref name="child"/>.
            If the <paramref name="newobj"/> already belonged to this group, only its
            position in the list is changed.
            The <paramref name="newobj"/> must not already be part of a different group or be
            a top-level object in some layer.
            The existing <paramref name="child"/> must be either null or a member of this
            group (but not be the same as <paramref name="newobj"/>).
            If the <paramref name="child"/> is null, the <paramref name="newobj"/>
            is added at the end of the list, in front of all other objects in this group.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.Remove(Northwoods.GoWeb.GoObject)">
            <summary>
            Remove an object from this group.
            </summary>
            <param name="obj"></param>
            <remarks>
            The <paramref name="obj"/> must not belong to a different group.
            This method does nothing if the <paramref name="obj"/> has already been
            removed from this group.
            Afterwards, the <paramref name="obj"/>'s <see cref="P:Northwoods.GoWeb.GoObject.Parent"/> will
            be null and its <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="P:Northwoods.GoWeb.GoObject.Layer"/> will also be null, because
            it will be removed from the layer if the group and it belonged to a layer.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.IGoCollection.Remove(Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.AddCollection(Northwoods.GoWeb.IGoCollection,System.Boolean)">
            <summary>
            Move some objects into this group, as immediate children of this group, even if they
            are part of other groups in this same layer.
            </summary>
            <param name="coll">a collection of <see cref="T:Northwoods.GoWeb.GoObject"/>s</param>
            <param name="reparentLinks">
            whether to make sure all connected links belong to the proper subgraph or layer;
            if true, this will call <see cref="T:Northwoods.GoWeb.GoSubGraphBase"/>.<see cref="M:Northwoods.GoWeb.GoSubGraphBase.ReparentAllLinksToSubGraphs(Northwoods.GoWeb.IGoCollection,System.Boolean,Northwoods.GoWeb.GoLayer)"/>
            </param>
            <remarks>
            <para>
            This method tries to preserve the links connecting any ports of the objects
            being moved into this group.
            Of course, none of the objects to be added to this group may be the group itself
            nor a parent of this group.
            </para>
            <para>
            Just as with the <see cref="M:Northwoods.GoWeb.GoGroup.Add(Northwoods.GoWeb.GoObject)"/> method, you may find that you will want to 
            set the <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="P:Northwoods.GoWeb.GoObject.Selectable"/> property to false for each of the objects
            being added to this group.  The need for this depends on the behavior you want
            in your application.
            </para>
            <para>
            This method is normally called on instances of <see cref="T:Northwoods.GoWeb.GoSubGraphBase"/>.
            If calling this method on a group that is not a subgraph, you will probably want
            to specify the value of <paramref name="reparentLinks"/> to be false, since otherwise
            any links that you think you are adding to the group will be taken right out again
            to be added to the enclosing subgraph or to be a top-level object.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.Contains(Northwoods.GoWeb.GoObject)">
            <summary>
            This predicate is true when an object belongs to this group.
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <remarks>
            This predicate is false if the <paramref name="obj"/> is null, or
            if its <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="P:Northwoods.GoWeb.GoObject.Parent"/> is not this group.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.IGoCollection.Contains(Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.Clear">
            <summary>
            Remove all children from this group.
            </summary>
            <remarks>
            This repeatedly calls <see cref="M:Northwoods.GoWeb.GoGroup.Remove(Northwoods.GoWeb.GoObject)"/>.
            The default implementation tries to avoid duplicate removals,
            in case removing one object automatically removes another one.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.CopyArray">
            <summary>
            Returnss a newly allocated array of all of the immediate child objects in this group.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.IGoCollection.CopyArray"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.Add(System.Object)">
            <summary>
            Implement the <c>IList</c> method, which just calls <see cref="M:Northwoods.GoWeb.GoGroup.Add(Northwoods.GoWeb.GoObject)"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <seealso cref="M:Northwoods.GoWeb.GoGroup.InsertBefore(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject)"/>
            <seealso cref="M:Northwoods.GoWeb.GoGroup.InsertAfter(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.Contains(System.Object)">
            <summary>
            Implement the <c>IList</c> method, which just calls <see cref="M:Northwoods.GoWeb.GoGroup.Contains(Northwoods.GoWeb.GoObject)"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.IndexOf(System.Object)">
            <summary>
            Implement the <c>IList</c> method.
            </summary>
            <param name="obj"></param>
            <returns>the non-negative position in the array, or -1 if not present</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.IndexOf(Northwoods.GoWeb.GoObject)">
            <summary>
            Provide a <see cref="T:Northwoods.GoWeb.GoObject"/>-specific implementation of IndexOf.
            </summary>
            <param name="obj"></param>
            <returns>the non-negative position in the array, or -1 if not present</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.Insert(System.Int32,System.Object)">
            <summary>
            Implement the <c>IList</c> method, which just calls <see cref="M:Northwoods.GoWeb.GoGroup.Insert(System.Int32,Northwoods.GoWeb.GoObject)"/>
            </summary>
            <param name="index"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.Insert(System.Int32,Northwoods.GoWeb.GoObject)">
            <summary>
            Provide a <see cref="T:Northwoods.GoWeb.GoObject"/>-specific implementation of Insert,
            which just calls <see cref="M:Northwoods.GoWeb.GoGroup.Add(Northwoods.GoWeb.GoObject)"/> or <see cref="M:Northwoods.GoWeb.GoGroup.InsertBefore(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject)"/>.
            </summary>
            <param name="index"></param>
            <param name="obj"></param>
            <seealso cref="M:Northwoods.GoWeb.GoGroup.InsertBefore(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject)"/>
            <seealso cref="M:Northwoods.GoWeb.GoGroup.InsertAfter(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject)"/>
            <seealso cref="M:Northwoods.GoWeb.GoGroup.Remove(Northwoods.GoWeb.GoObject)"/>
            <seealso cref="M:Northwoods.GoWeb.GoGroup.RemoveAt(System.Int32)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.Remove(System.Object)">
            <summary>
            Implement the <c>IList</c> method, which just calls <see cref="M:Northwoods.GoWeb.GoGroup.Remove(Northwoods.GoWeb.GoObject)"/>.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.RemoveAt(System.Int32)">
            <summary>
            Implement the <c>IList</c> method, which just calls <see cref="M:Northwoods.GoWeb.GoGroup.Remove(Northwoods.GoWeb.GoObject)"/>.
            </summary>
            <param name="index"></param>
            <seealso cref="M:Northwoods.GoWeb.GoGroup.InsertBefore(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject)"/>
            <seealso cref="M:Northwoods.GoWeb.GoGroup.InsertAfter(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject)"/>
            <seealso cref="M:Northwoods.GoWeb.GoGroup.Add(Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.CopyTo(System.Array,System.Int32)">
            <summary>
            Copy references to this group's immediate children into the given array.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.CopyTo(Northwoods.GoWeb.GoObject[],System.Int32)">
            <summary>
            Copy references to this group's immediate children into the given array.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.FindName(Northwoods.GoWeb.GoObject)">
            <summary>
            Return a name for a child object of this group.
            </summary>
            <param name="child">a <see cref="T:Northwoods.GoWeb.GoObject"/> that is an immediate child of this group</param>
            <returns>a String, perhaps an empty one if no name is known</returns>
            <remarks>
            A child object will not have a name unless you call <see cref="M:Northwoods.GoWeb.GoGroup.AddChildName(System.String,Northwoods.GoWeb.GoObject)"/>
            first, or unless this method is overridden to provide a name.
            This is frequently overridden when defining a group or node that
            has well-known parts.  Often such parts are also accessible as a property
            on the class, and the name of the part will be the same as the name of
            the property.
            If you override this, you will probably also need to override <see cref="M:Northwoods.GoWeb.GoGroup.FindChild(System.String)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.FindChild(System.String)">
            <summary>
            Return a child object that is known by the given name.
            </summary>
            <param name="name">a String, which may be the same as the property name
            for those child objects that are also accessible via a property</param>
            <returns>a child of this group, or null if no such named child object is known</returns>
            <remarks>
            A child object will not have a name unless you call <see cref="M:Northwoods.GoWeb.GoGroup.AddChildName(System.String,Northwoods.GoWeb.GoObject)"/>
            first, or unless this method is overridden to provide a name.
            This is frequently overridden when defining a group or node that
            has well-known parts.  Often such parts are also accessible as a property
            on the class, and the name of the part will be the same as the name of
            the property.
            If you override this, you will probably also need to override <see cref="M:Northwoods.GoWeb.GoGroup.FindName(Northwoods.GoWeb.GoObject)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.AddChildName(System.String,Northwoods.GoWeb.GoObject)">
            <summary>
            Add an association of a string name with a child object.
            </summary>
            <param name="name">must not be an empty string or the name of an existing child</param>
            <param name="child">must be an immediate child of this group and must not already be known by a name</param>
            <remarks>
            If successful, this will create the <see cref="P:Northwoods.GoWeb.GoGroup.ChildNames"/> hash table if needed,
            and add two entries: one to map the name to the object and another to map the object to the name.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.RemoveChildName(System.String)">
            <summary>
            Remove any association of a string name with a child object.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.RemoveChildName(Northwoods.GoWeb.GoObject)">
            <summary>
            Remove any association of a string name with a child object.
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.GetEnumerator">
            <summary>
            Get an enumerator for iterating over the group's children, starting with
            the first child, which is painted behind all other children in the group.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)">
            <summary>
            Painting a group just paints all of its children.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <remarks>
            This method paints first the first child in the group's ordered list.
            This calls <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="M:Northwoods.GoWeb.GoObject.CanView"/> to decide if the child
            should be painted.
            When <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="P:Northwoods.GoWeb.GoView.IsPrinting"/> is true, it calls
            <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="M:Northwoods.GoWeb.GoObject.CanPrint"/> instead of <see cref="M:Northwoods.GoWeb.GoObject.CanView"/>
            to decide about calling the <paramref name="obj"/>'s <see cref="M:Northwoods.GoWeb.GoObject.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)"/> method.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.GoWeb.GoView)">
            <summary>
            The expanded paint bounds for a group is just the union of expanded
            paint bounds for all of its children.
            </summary>
            <param name="rect"></param>
            <param name="view"></param>
            <returns></returns>
            <seealso cref="M:Northwoods.GoWeb.GoObject.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.GoWeb.GoView)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.ContainsPoint(System.Drawing.PointF)">
            <summary>
            A group contains a point if any of its visible children contain that point.
            </summary>
            <param name="p">
            A <c>PointF</c> in document coordinates.
            </param>
            <returns></returns>
            <remarks>
            This ignores child objects that are not <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="P:Northwoods.GoWeb.GoObject.Visible"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.ContainsPoint(System.Drawing.PointF)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.GetNearestIntersectionPoint(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)">
            <summary>
            A group's closest intersection point with a line is the closest such
            point among all of the visible children.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="result"></param>
            <returns></returns>
            <remarks>
            Currently, this means that a point on a child object that does not
            intersect the line from <paramref name="p1"/> to <paramref name="p2"/>
            may be closer than a point on some other child that actually does
            intersect the line.
            This ignores child objects that are not <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="P:Northwoods.GoWeb.GoObject.Visible"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.Pick(System.Drawing.PointF,System.Boolean)">
            <summary>
            Picking a group first tries to pick a child, starting with
            the last one which is most in front.
            </summary>
            <param name="p"></param>
            <param name="selectableOnly"></param>
            <returns></returns>
            <remarks>
            If <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="M:Northwoods.GoWeb.GoObject.CanView"/> is false for this group, this method returns null.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.Pick(System.Drawing.PointF,System.Boolean)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.PickObjects(System.Drawing.PointF,System.Boolean,Northwoods.GoWeb.IGoCollection,System.Int32)">
            <summary>
            Return a collection of objects that can be picked at a particular point.
            </summary>
            <param name="p">A <c>PointF</c> location in document coordinates.</param>
            <param name="selectableOnly">If true, only consider objects for which <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="M:Northwoods.GoWeb.GoObject.CanSelect"/> is true.</param>
            <param name="coll">An <see cref="T:Northwoods.GoWeb.IGoCollection"/> that is modified by adding results and then returned.
            If this value is null, a <see cref="T:Northwoods.GoWeb.GoCollection"/> is allocated and returned.</param>
            <param name="max">A limit on the number of objects to be found and added to the result collection.</param>
            <returns>The <paramref name="coll"/> argument, or a newly allocated one if that was null.</returns>
            <remarks>
            For a group, this is implemented to add the object found by a call to <see cref="M:Northwoods.GoWeb.GoGroup.Pick(System.Drawing.PointF,System.Boolean)"/>,
            if any object is found.
            Thus for a typical node that happens to have several objects underneath each other, only
            the top-most (front-most) object is added.
            If <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="M:Northwoods.GoWeb.GoObject.CanView"/> is false for this group, no children are added to the collection.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.ComputeBounds">
            <summary>
            The bounding rectangle of a group is just the union of the bounds of its children.
            </summary>
            <returns></returns>
            <seealso cref="M:Northwoods.GoWeb.GoObject.ComputeBounds"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.OnBoundsChanged(System.Drawing.RectangleF)">
            <summary>
            Provides default behavior, assuming all children are already correctly
            placed and sized, and only need to be moved and/or scaled to fit the
            new bounds of this GoGroup.
            </summary>
            <param name="old"></param>
            <remarks>
            The default behavior, if the size did not change, is just to call
            <see cref="M:Northwoods.GoWeb.GoGroup.MoveChildren(System.Drawing.RectangleF)"/>.
            If the size did change, we call <see cref="M:Northwoods.GoWeb.GoGroup.RescaleChildren(System.Drawing.RectangleF)"/>
            to rescale and proportionally reposition all of the children, and
            then we call <see cref="M:Northwoods.GoWeb.GoGroup.LayoutChildren(Northwoods.GoWeb.GoObject)"/> to give the node a chance
            to do special positioning of any of the children.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.OnBoundsChanged(System.Drawing.RectangleF)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.OnChildBoundsChanged(Northwoods.GoWeb.GoObject,System.Drawing.RectangleF)">
            <summary>
            Called after a child of this group has had its bounds changed.
            </summary>
            <param name="child">
            The child object whose <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="P:Northwoods.GoWeb.GoObject.Bounds"/> were changed.
            </param>
            <param name="old">
            A <c>RectangleF</c> in document coordinates holding the child's previous bounds.
            </param>
            <remarks>
            By default this method just calls <see cref="M:Northwoods.GoWeb.GoGroup.LayoutChildren(Northwoods.GoWeb.GoObject)"/>,
            thus giving the group a chance to adjust to the changed bounds of
            one of its children by moving and/or resizing the other children.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoGroup.OnChildBoundsChanged(Northwoods.GoWeb.GoObject,System.Drawing.RectangleF)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.MoveChildren(System.Drawing.RectangleF)">
            <summary>
            This just moves all the children from the group's former location.
            </summary>
            <param name="old">
            The original bounds, in document coordinates.
            </param>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.RescaleChildren(System.Drawing.RectangleF)">
            <summary>
            This handles the general case of a resize by scaling and repositioning all the children.
            </summary>
            <param name="old">
            The original bounds, in document coordinates.
            </param>
            <remarks>
            Any children whose <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="P:Northwoods.GoWeb.GoObject.AutoRescales"/> property is false is not
            resized and repositioned.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.LayoutChildren(Northwoods.GoWeb.GoObject)">
            <summary>
            Reposition this group's children to achieve a particular appearance.
            </summary>
            <param name="childchanged"></param>
            <remarks>
            <para>
            By default this method does nothing.
            However, this method is frequently overridden.
            </para>
            <para>
            Implementations of this method probably should not refer, directly or
            indirectly, to this group's <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="P:Northwoods.GoWeb.GoObject.Bounds"/> property.
            Instead, you should just position and size the children based on the
            bounds of the children (not this group's bounds), and let this
            group's bounds be determined by the union of the bounds of the children.
            </para>
            <para>
            For groups that may have many children, overrides will often
            check the <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="P:Northwoods.GoWeb.GoObject.Initializing"/> flag.  If true, this method
            usually does nothing; later when all the changes have been performed is
            that flag set to false and this method is called explicitly with a null
            argument.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroup.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Performs changes for undo and redo.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoObject.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoGroup.First">
            <summary>
            Gets the first child object of this group.
            </summary>
            <value>
            The value may be null if this group is empty.
            </value>
            <remarks>
            The first object will appear behind all other objects in this group.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoGroup.Last"/>.
        </member>
        <member name="P:Northwoods.GoWeb.GoGroup.Last">
            <summary>
            Gets the last child object of this group.
            </summary>
            <value>
            The value may be null if this group is empty.
            </value>
            <remarks>
            The last object will appear in front of all other objects in this group.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoGroup.First"/>.
        </member>
        <member name="P:Northwoods.GoWeb.GoGroup.IsEmpty">
            <summary>
            This predicate is true when there are no objects in this group.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.IGoCollection.IsEmpty"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoGroup.IsFixedSize">
            <summary>
            Implement the <c>IList</c> property.
            </summary>
            <value>
            This defaults to false.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoGroup.IsReadOnly">
            <summary>
            Implement the <c>IList</c> property.
            </summary>
            <value>
            This defaults to false.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoGroup.System#Collections#IList#Item(System.Int32)">
            <summary>
            Implement the <c>IList</c> indexed property, which just uses the
            <see cref="T:Northwoods.GoWeb.GoObject"/> type-specific indexed property.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoGroup.InsertBefore(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject)"/>
            <seealso cref="M:Northwoods.GoWeb.GoGroup.InsertAfter(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoGroup.Item(System.Int32)">
            <summary>
            This <c>IList</c> indexed property gets or sets the object at
            a position in the group's array of children.
            </summary>
            <remarks>
            You can also refer to objects by name (a string) if they have
            been named, either with a call to <see cref="M:Northwoods.GoWeb.GoGroup.AddChildName(System.String,Northwoods.GoWeb.GoObject)"/>
            or with an override of <see cref="M:Northwoods.GoWeb.GoGroup.FindChild(System.String)"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoGroup.InsertBefore(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject)"/>
            <seealso cref="M:Northwoods.GoWeb.GoGroup.InsertAfter(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject)"/>
            <seealso cref="M:Northwoods.GoWeb.GoGroup.RemoveAt(System.Int32)"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoGroup.Count">
            <summary>
            Gets the number of child objects in this group.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoGroup.IsSynchronized">
            <summary>
            Gets whether this collection of child objects is thread-safe.
            </summary>
            <value>
            This defaults to false.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoGroup.SyncRoot">
            <summary>
            Gets an object to be used for synchronizing access to this collection.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoGroup.ChildNames">
            <summary>
            Gets a Hashtable of name/child mappings.
            </summary>
            <value>
            A <c>Hashtable</c>, but will be null/nothing until you call <see cref="M:Northwoods.GoWeb.GoGroup.AddChildName(System.String,Northwoods.GoWeb.GoObject)"/>.
            </value>
            <remarks>
            <para>
            The hash table should contain mappings in both directions--
            from String name to child GoObject, and the reverse, from object to name.
            In order to save space, overrides of <see cref="M:Northwoods.GoWeb.GoGroup.FindName(Northwoods.GoWeb.GoObject)"/> and <see cref="M:Northwoods.GoWeb.GoGroup.FindChild(System.String)"/>
            will handle common child names rather than using a hash table data structure.
            For example, <see cref="T:Northwoods.GoWeb.GoBasicNode"/> provides the name "Label" for its
            <see cref="T:Northwoods.GoWeb.GoText"/> part that is the value of its <see cref="P:Northwoods.GoWeb.GoBasicNode.Label"/> property.
            </para>
            <para>
            To modify this hash table, call <see cref="M:Northwoods.GoWeb.GoGroup.AddChildName(System.String,Northwoods.GoWeb.GoObject)"/>,
            <see cref="M:Northwoods.GoWeb.GoGroup.RemoveChildName(System.String)"/>, or <see cref="M:Northwoods.GoWeb.GoGroup.RemoveChildName(Northwoods.GoWeb.GoObject)"/>.
            If you modify this hash table directly, such changes are not recorded
            by the undo manager.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoGroup.Item(System.String)">
            <summary>
            For convenience, you can access named child objects using an indexer.
            </summary>
            <remarks>
            <para>
            The getter just calls <see cref="M:Northwoods.GoWeb.GoGroup.FindChild(System.String)"/>.
            The setter just calls <see cref="M:Northwoods.GoWeb.GoGroup.AddChildName(System.String,Northwoods.GoWeb.GoObject)"/>.
            </para>
            <para>
            For example:
            <code>
            GoBasicNode n = ...;
            System.Diagnostics.Debug.Assert(n["Label"] == n.Label);
            </code>
            Remember that you can also refer to a particular child object
            by its position (integer index) in this group, since <see cref="T:Northwoods.GoWeb.GoGroup"/>
            implements <c>IList</c>.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoGroup.Backwards">
            <summary>
            Gets an enumerable whose enumerator will iterate over the group's child GoObjects in reverse order,
            starting with the last child, which is painted in front of all other children in the group.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.IGoCollection.Backwards"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoGroup.PickableBackground">
            <summary>
            Gets or sets whether <see cref="M:Northwoods.GoWeb.GoGroup.Pick(System.Drawing.PointF,System.Boolean)"/> returns this node when the tested point
            is in the background of this group, not on any of its child objects.
            </summary>
            <value>
            This defaults to false.
            </value>
        </member>
        <member name="T:Northwoods.GoWeb.GoGroupEnumerator">
            <summary>
            Iterate over the immediate child objects of this group, either forwards or backwards.
            </summary>
            <remarks>
            Although this structure is public, it is rarely used explicitly.
            Instead you should use the <c>foreach</c> (or <c>For Each</c>) construct to
            iterate through the children of a group.  In C#:
            <code>
            foreach (GoObject obj in aGroup) {
              . . .
            }
            </code>
            In VB.NET:
            <code>
            Dim obj As GoObject
            For Each obj in aGroup
              . . .
            Next
            </code>
            Also, since <see cref="T:Northwoods.GoWeb.GoGroup"/> implements the <c>IList</c> interface,
            you can refer to the items of the group by a zero-based index.
            <para>
            Remember that you must not modify the group collection, by adding,
            removing, or re-ordering the child objects, while you are
            iterating over the children.
            This structure type does not support comparison for equality.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroupEnumerator.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the child GoObjects of this group.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroupEnumerator.MoveNext">
            <summary>
            Advance the enumerator to the next child GoObject.
            </summary>
            <returns>True if there is a next GoObject; false if it has finished iterating over the collection.</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoGroupEnumerator.Reset">
            <summary>
            Reset the enumerator to its original position.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoGroupEnumerator.Current">
            <summary>
             Gets the current object in the group.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoHandleStyle">
            <summary>
            Specifies the shape of the handle.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoHandleStyle.None">
            <summary>
            An appearance style for <see cref="T:Northwoods.GoWeb.GoHandle"/>
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoHandleStyle.Rectangle">
            <summary>
            An appearance style for <see cref="T:Northwoods.GoWeb.GoHandle"/>
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoHandleStyle.Ellipse">
            <summary>
            An appearance style for <see cref="T:Northwoods.GoWeb.GoHandle"/>
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoHandleStyle.Diamond">
            <summary>
            An appearance style for <see cref="T:Northwoods.GoWeb.GoHandle"/>
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoHandleStyle.TriangleTopLeft">
            <summary>
            An appearance style for <see cref="T:Northwoods.GoWeb.GoHandle"/>: a triangle with a point at the TopLeft.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoHandleStyle.TriangleTopRight">
            <summary>
            An appearance style for <see cref="T:Northwoods.GoWeb.GoHandle"/>: a triangle with a point at the TopRight.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoHandleStyle.TriangleBottomRight">
            <summary>
            An appearance style for <see cref="T:Northwoods.GoWeb.GoHandle"/>: a triangle with a point at the BottomRight.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoHandleStyle.TriangleBottomLeft">
            <summary>
            An appearance style for <see cref="T:Northwoods.GoWeb.GoHandle"/>: a triangle with a point at the BottomLeft.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoHandleStyle.TriangleMiddleTop">
            <summary>
            An appearance style for <see cref="T:Northwoods.GoWeb.GoHandle"/>: a triangle with a point at the MiddleTop.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoHandleStyle.TriangleMiddleRight">
            <summary>
            An appearance style for <see cref="T:Northwoods.GoWeb.GoHandle"/>: a triangle with a point at the MiddleRight.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoHandleStyle.TriangleMiddleBottom">
            <summary>
            An appearance style for <see cref="T:Northwoods.GoWeb.GoHandle"/>: a triangle with a point at the MiddleBottom.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoHandleStyle.TriangleMiddleLeft">
            <summary>
            An appearance style for <see cref="T:Northwoods.GoWeb.GoHandle"/>: a triangle with a point at the MiddleLeft.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoHexagonReshapeBehavior">
            <summary>
            Specifies the resize behavior of a GoHexagon.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoHexagonReshapeBehavior.FreeForm">
            <summary>
            A resize behavior for <see cref="T:Northwoods.GoWeb.GoHexagon"/>
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoHexagonReshapeBehavior.CrosswiseSymmetry">
            <summary>
            A resize behavior for <see cref="T:Northwoods.GoWeb.GoHexagon"/>
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoHexagonReshapeBehavior.LengthwiseSymmetry">
            <summary>
            A resize behavior for <see cref="T:Northwoods.GoWeb.GoHexagon"/>
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoHexagonReshapeBehavior.CompleteSymmetry">
            <summary>
            A resize behavior for <see cref="T:Northwoods.GoWeb.GoHexagon"/>
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoHexagon">
            <summary>
            An object with six sides which has one pair of parallel sides.
            </summary>
            <remarks>
            If you need a six-sided shape without the constraints that this class
            imposes, use <see cref="T:Northwoods.GoWeb.GoPolygon"/> instead.
            You may find that this class is useful for implementing pentagonal
            shapes where three adjacent sides form two right angles.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoHexagon.ChangedDistanceLeft">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoHexagon.DistanceLeft"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoHexagon.ChangedDistanceRight">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoHexagon.DistanceRight"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoHexagon.ChangedDistanceTop">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoHexagon.DistanceTop"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoHexagon.ChangedDistanceBottom">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoHexagon.DistanceBottom"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoHexagon.ChangedOrientation">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoHexagon.Orientation"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoHexagon.ChangedReshapeBehavior">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoHexagon.ReshapeBehavior"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoHexagon.ChangedReshapableCorner">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoHexagon.ReshapableCorner"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoHexagon.LeftTopSideHandleID">
            <summary>
            A special handle ID for a handle which controls the variable corner length.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoHexagon.RightBottomSideHandleID">
            <summary>
            A special handle ID for a handle which controls the location of the tips.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoHexagon.LeftTopPointHandleID">
            <summary>
            A special handle ID for a handle which controls the variable corner length.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoHexagon.RightBottomPointHandleID">
            <summary>
            A special handle ID for a handle which controls the location of the tips.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoHexagon.ChangedKeepsLengthwiseSymmetry">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoHexagon.KeepsLengthwiseSymmetry"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoHexagon.ChangedKeepsCrosswiseSymmetry">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoHexagon.KeepsCrosswiseSymmetry"/> property.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoHexagon.#ctor">
            <summary>
            The constructor produces a hexagon with a standard black <see cref="P:Northwoods.GoWeb.GoShape.Pen"/>
            outline, no <see cref="T:System.Drawing.Brush"/> fill, <see cref="P:Northwoods.GoWeb.GoHexagon.Orientation"/> of <c>Orientation.Vertical</c>,
            and default distance dimensions.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoHexagon.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)">
            <summary>
            Paint a possibly shadowed Hexagon.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoHexagon.ContainsPoint(System.Drawing.PointF)">
            <summary>
            Consider the actual shape of the hexagon to determine
            if a given point is inside.
            </summary>
            <param name="p"></param>
            <returns></returns>
            <remarks>
            Currently this does not take the pen width into account.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoHexagon.GetNearestIntersectionPoint(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)">
            <summary>
            The closest point of a hexagon that intersects with a given line
            is the closest such point of each of its six line segments.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoHexagon.MakePath">
            <summary>
            Produce a <c>GraphicsPath</c> by adding lines between the points.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoHexagon.DoResize(Northwoods.GoWeb.GoView,System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,Northwoods.GoWeb.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Support either allowing the user to move a corner control handle,
            or treating the hexagon as a whole object, maintaining either or
            both kinds of symmetry.
            </summary>
            <param name="view"></param>
            <param name="origRect"></param>
            <param name="newPoint"></param>
            <param name="whichHandle"></param>
            <param name="evttype"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoHexagon.AddSelectionHandles(Northwoods.GoWeb.GoSelection,Northwoods.GoWeb.GoObject)">
            <summary>
            If <see cref="M:Northwoods.GoWeb.GoObject.CanReshape"/> and <see cref="P:Northwoods.GoWeb.GoHexagon.ReshapableCorner"/>
            are true, this supports corner control handles.
            </summary>
            <param name="sel"></param>
            <param name="selectedObj"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoHexagon.DetermineReshapeBehavior(System.Boolean@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="cross"></param>
            <param name="length"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoHexagon.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle this class's property changes for undo and redo
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.GoWeb.GoHexagon.DistanceLeft">
             <summary>
             The distance between the left/top point and the Hexagon's left border.
             </summary>
             <value>
             This defaults to 10.
             A negative number yields a concave figure. 
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoHexagon.DistanceRight">
            <summary>
            The distance between the right/bottom point and the Hexagon's right border.
            </summary>
            <value>
            This defaults to 10.
            A negative number yields a concave figure.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoHexagon.DistanceTop">
            <summary>
            The distance between the left/top point and the Hexagon's top border.
            </summary>
            <value>
            This defaults to 10.
            A negative number yields a concave figure.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoHexagon.DistanceBottom">
            <summary>
            The distance between the right/bottom point and the Hexagon's bottom border.
            </summary>
            <value>
            This defaults to 10.
            A negative number yields a concave figure.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoHexagon.Orientation">
            <summary>
            Gets or sets how to draw the hexagon, based on whether its
            prominent pair of verticies point vertically or horizontally.
            </summary>
            <value>
            This defaults to <c>"Orientation.Horizontal"</c>.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoHexagon.ReshapeBehavior">
            <summary>
            Determines the resize behavior when the user manipulates
            the resize handles.
            </summary>
            <value>
            This defaults to <c>GoHexagonResizeBehavior.FreeForm</c>.
            </value>
            <remarks>
            Note, however, that the actual resize behavior is constrained by the
            <see cref="P:Northwoods.GoWeb.GoHexagon.KeepsLengthwiseSymmetry"/> and <see cref="P:Northwoods.GoWeb.GoHexagon.KeepsCrosswiseSymmetry"/>
            properties.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoHexagon.KeepsLengthwiseSymmetry">
            Gets or sets whether to maintain the lengthwise distances at one half the crosswise bounds size member.
            (eg. Orientation == Orientation.Horizontal;
                 DistanceTop = Bounds.Height/2; DistanceBottom = Bounds.Height/2)
            <summary>
            Gets or sets whether to maintain symmetry in respect to the lengthwise axis.
            </summary>
            <value>
            This defaults to true.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoHexagon.KeepsCrosswiseSymmetry">
            Gets or sets whether to maintain the crosswise distances equal to each other and
            the crosswise distances equal to each other.
            (eg. Orientation == Orientation.Horizontal;
                 DistanceTop = Bounds.Height/2; DistanceBottom = Bounds.Height/2)
            <summary>
            Gets or sets whether to maintain symmetry in respect to the crosswise axis.
            </summary>
            <value>
            This defaults to true.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoHexagon.ReshapableCorner">
            <summary>
            Gets or sets whether to add the corner reshaping handles.
            </summary>
            <value>
            This defaults to true.
            </value>
        </member>
        <member name="T:Northwoods.GoWeb.GoImage">
            <summary>
            An object that displays a image such as a bitmap or JPEG file.
            </summary>
            <remarks>
            <para>
            This <see cref="T:Northwoods.GoWeb.GoObject"/> is responsible for painting an <b>Image</b>.
            The <see cref="P:Northwoods.GoWeb.GoImage.ResourceManager"/>, and <see cref="P:Northwoods.GoWeb.GoImage.Name"/> properties
            are used by <see cref="M:Northwoods.GoWeb.GoImage.LoadImage"/> in order to procure the
            actual <b>Image</b> that is painted.
            If you change any of these properties, <see cref="M:Northwoods.GoWeb.GoImage.LoadImage"/>
            will be called again to find a new image.
            </para>
            <para>
            When you set any of those properties,
            if <see cref="P:Northwoods.GoWeb.GoImage.AutoResizes"/> is true (which is the default value),
            <see cref="M:Northwoods.GoWeb.GoImage.LoadImage"/> will be called immediately to determine
            whether the new <b>Image</b> has a new <b>Size</b>, in order to
            resize this <b>GoImage</b> object to the <b>Image</b>'s natural size.
            However, when <see cref="P:Northwoods.GoWeb.GoImage.AutoResizes"/> is false, <see cref="M:Northwoods.GoWeb.GoImage.LoadImage"/>
            will only get called when the <see cref="P:Northwoods.GoWeb.GoImage.Image"/> property is needed
            by a call to <see cref="M:Northwoods.GoWeb.GoImage.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)"/>.
            Hence if you have a large diagram with many different <b>Image</b>s
            to be shown, it is advantageous to have GoDiagram only load images
            on demand due to painting.  You can achieve this effect by setting
            <see cref="P:Northwoods.GoWeb.GoImage.AutoResizes"/> to false and by setting the
            <see cref="P:Northwoods.GoWeb.GoObject.Size"/> explicitly to the size that you want,
            before setting the <see cref="P:Northwoods.GoWeb.GoImage.Name"/> property.
            </para>
            <para>
            If <see cref="P:Northwoods.GoWeb.GoImage.Name"/> is non-null and non-empty, this tries
            to display the correspondingly named <b>Image</b> in the
            <see cref="P:Northwoods.GoWeb.GoImage.ResourceManager"/>.
            If <see cref="P:Northwoods.GoWeb.GoImage.ResourceManager"/> is null, this uses the value of
            <see cref="P:Northwoods.GoWeb.GoImage.DefaultResourceManager"/> instead.
            If no <b>Image</b> is found in any <b>ResourceManager</b> for the
            given name, the <see cref="P:Northwoods.GoWeb.GoImage.Name"/> is treated as a URI to be gotten
            via a <b>WebClient</b> if <see cref="P:Northwoods.GoWeb.GoImage.NameIsUri"/> is true, or as a
            file pathname for an image file stored on disk if <see cref="P:Northwoods.GoWeb.GoImage.NameIsUri"/>
            is false.
            </para>
            <para>
            <b>Image</b>s loaded by <see cref="M:Northwoods.GoWeb.GoImage.LoadImage"/> from a
            <b>ResourceManager</b> or from a file on disk or from the web
            are cached in a static/shared hash table.  Future calls to
            <see cref="M:Northwoods.GoWeb.GoImage.LoadImage"/> with the same source and name
            will just share the same <b>Image</b>.
            You can clear the whole cache by calling <see cref="M:Northwoods.GoWeb.GoImage.ClearCachedImages"/>,
            or you can clear individual cache entries by calling one of the
            <b>ClearCachedImage</b> overloaded methods.
            Call <see cref="M:Northwoods.GoWeb.GoImage.UnloadImage"/> to cause an individual <see cref="T:Northwoods.GoWeb.GoImage"/>
            to call <see cref="M:Northwoods.GoWeb.GoImage.LoadImage"/> again the next time it needs to show an <b>Image</b>.
            </para>
            <para>
            A newly constructed <see cref="T:Northwoods.GoWeb.GoImage"/> will get its initial value
            for <see cref="P:Northwoods.GoWeb.GoImage.ResourceManager"/> from <see cref="P:Northwoods.GoWeb.GoImage.DefaultResourceManager"/>.
            </para>
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoImage.ChangedImage">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoImage.Image"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoImage.ChangedResourceManager">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoImage.ResourceManager"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoImage.ChangedName">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoImage.Name"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoImage.ChangedAlignment">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoImage.Alignment"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoImage.ChangedAutoResizes">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoImage.AutoResizes"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoImage.ChangedImageList">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <c>ImageList</c> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoImage.ChangedIndex">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <c>Index</c> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoImage.ChangedThrowsExceptions">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoImage.ThrowsExceptions"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoImage.ChangedNameIsUri">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoImage.NameIsUri"/> property.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoImage.#ctor">
            <summary>
            The constructor produces an image that is not reshapable by
            the user and that automatically recalculates its size when the
            <c>Image</c> is replaced.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoImage.UnloadImage">
            <summary>
            Clear the <see cref="P:Northwoods.GoWeb.GoImage.Image"/> reference that this object maintains,
            so that the next use of that property (for example, in <see cref="M:Northwoods.GoWeb.GoImage.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)"/>)
            will result in a call to <see cref="M:Northwoods.GoWeb.GoImage.LoadImage"/>.
            </summary>
            <remarks>
            This is different from setting the <see cref="P:Northwoods.GoWeb.GoImage.Image"/> property to null,
            because that change would actually modify the state of this <see cref="T:Northwoods.GoWeb.GoImage"/>,
            a change that could be undone and redone.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoImage.LoadImage"/>
            <seealso cref="M:Northwoods.GoWeb.GoImage.ClearCachedImages"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoImage.LoadImage">
            <summary>
            This method is responsible for getting an Image.
            </summary>
            <returns>
            An <c>Image</c>.
            </returns>
            <remarks>
            <para>
            We use the <see cref="P:Northwoods.GoWeb.GoImage.Name"/>
            to get an Image object from the <see cref="P:Northwoods.GoWeb.GoImage.ResourceManager"/>.
            If there is no ResourceManager, we try using the
            <see cref="P:Northwoods.GoWeb.GoImage.DefaultResourceManager"/>, and if that fails, we
            try treating the name as a filename.
            </para>
            <para>
            The resulting Image is normally cached by this object as the
            <see cref="P:Northwoods.GoWeb.GoImage.Image"/> property.  If it loads the image from a file,
            the file may remain locked until the image is garbage collected.
            </para>
            <para>
            If an exception occurs trying to load an image, the message
            is sent to trace listeners.  Also, if <see cref="P:Northwoods.GoWeb.GoImage.ThrowsExceptions"/>
            is true, the catch handler will rethrow the exception.
            If the <see cref="P:Northwoods.GoWeb.GoImage.Name"/> is not found in the <see cref="P:Northwoods.GoWeb.GoImage.ResourceManager"/>,
            this will fail silently--no exception is thrown.
            </para>
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoImage.UnloadImage"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoImage.ClearCachedImages">
            <summary>
            Clear out GoDiagram's internal cache of loaded Images.
            </summary>
            <remarks>
            Calling this method does not modify any existing <see cref="T:Northwoods.GoWeb.GoImage"/>,
            so no Images will be "lost".  However, future calls to <see cref="M:Northwoods.GoWeb.GoImage.LoadImage"/>
            will have to re-load all named images from <b>ResourceManager</b>s or from disk,
            or (in Windows Forms) re-load all indexed images from <b>ImageList</b>s.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoImage.UnloadImage"/>
            <seealso cref="M:Northwoods.GoWeb.GoImage.ClearCachedImage(System.Resources.ResourceManager,System.String,System.Globalization.CultureInfo)"/>
            <seealso cref="M:Northwoods.GoWeb.GoImage.ClearCachedImage(System.String)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoImage.ClearCachedImage(System.Resources.ResourceManager,System.String,System.Globalization.CultureInfo)">
            <summary>
            Remove any cached image identified by a ResourceManager and a name in a particular culture.
            </summary>
            <param name="resmgr">a <b>ResourceManager</b></param>
            <param name="name">the name of a particular image object;
            if this value is null, this clears all cached images associated
            with the <paramref name="resmgr"/></param>
            <param name="cinfo">a <b>CultureInfo</b></param>
            <remarks>
            Calling this method does not modify any existing <see cref="T:Northwoods.GoWeb.GoImage"/>,
            so no Images will be "lost".  However, future calls to <see cref="M:Northwoods.GoWeb.GoImage.LoadImage"/>
            will have to re-load any image with the given name from the given ResourceManager.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoImage.UnloadImage"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoImage.ClearCachedImage(System.String)">
            <summary>
            Remove any cached image identified by a pathname on disk.
            </summary>
            <param name="path">a filename</param>
            <remarks>
            Calling this method does not modify any existing <see cref="T:Northwoods.GoWeb.GoImage"/>,
            so no Images will be "lost".  However, future calls to <see cref="M:Northwoods.GoWeb.GoImage.LoadImage"/>
            will have to re-load from disk any image with the given file pathname.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoImage.UnloadImage"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoImage.SetSizeKeepingLocation(System.Drawing.SizeF)">
            <summary>
            This method can be called to change the size of this object without
            changing its location.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoImage.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)">
            <summary>
            Draw this Image within the bounds of this object.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoImage.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.GoWeb.GoView)">
            <summary>
            Consider any shadow when calculating the actual paint bounds.
            </summary>
            <param name="rect"></param>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoImage.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Performs changes for undo and redo.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoObject.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoImage.Image">
            <summary>
            The Image displayed by this GoImage.
            </summary>
            <value>
            If set to null, the next get will call <see cref="M:Northwoods.GoWeb.GoImage.LoadImage"/>.
            </value>
            <remarks>
            <see cref="M:Northwoods.GoWeb.GoImage.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)"/> will draw the Image that is the value of this property.
            When an Image is not yet available, it calls <see cref="M:Northwoods.GoWeb.GoImage.LoadImage"/>
            and remembers that returned Image as this property's value.
            The cached Image value is not serialized.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoImage.ResourceManager">
            <summary>
            Gets or sets the ResourceManager used to look up and load images by Name.
            </summary>
            <value>
            When this value is changed, any cached Image is forgotten so that it can be
            reloaded from the new ResourceManager by <see cref="M:Northwoods.GoWeb.GoImage.LoadImage"/>.
            </value>
            <remarks>
            The ResourceManager is not serialized; after deserialization, you will
            need to reset this property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoImage.Name">
            <summary>
            Gets or sets the resource name or filename for loading images.
            </summary>
            <value>
            A null value causes <see cref="M:Northwoods.GoWeb.GoImage.LoadImage"/> to avoid looking for
            an image in a <c>ResourceManager</c> or as a file.
            </value>
            <remarks>
            When this value is changed, any cached Image is forgotten so that it can be
            reloaded from the ResourceManager, if any, or from the file system.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoImage.NameIsUri">
            <summary>
            Gets or sets whether the <see cref="P:Northwoods.GoWeb.GoImage.Name"/> property is a URI instead of a disk file path.
            [Not in GoDiagram Pocket]
            </summary>
            <value>The default is false.</value>
            <remarks>
            You might want to set this property to true before setting the <see cref="P:Northwoods.GoWeb.GoImage.Name"/> property,
            so that <see cref="M:Northwoods.GoWeb.GoImage.LoadImage"/> doesn't waste time trying to look up the <see cref="P:Northwoods.GoWeb.GoImage.Name"/>
            as if it were a pathname for a disk file.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoImage.Location">
            <summary>
            The natural location depends on this object's Alignment.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoImage.Alignment">
            <summary>
            Gets or sets the alignment for the image, which governs its <see cref="P:Northwoods.GoWeb.GoImage.Location"/>.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoWeb.GoObject.TopLeft"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoImage.AutoResizes">
            <summary>
            Gets or sets whether the bounds are recalculated when the image changes.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoImage.ThrowsExceptions">
            <summary>
            Gets or sets whether to (re-)throw an exception that may occur while trying
            to load an Image.
            </summary>
            <value>
            The default value is false.
            </value>
            <remarks>
            <para>
            You may want to set this to true to help debug why an image does not appear.
            <see cref="M:Northwoods.GoWeb.GoImage.LoadImage"/> will first send the exception's message to
            trace listeners.  Then if this property is true, the catch handler will
            rethrow the exception.
            </para>
            <para>
            This flag may help you debug any image loading exceptions, but there can be
            other reasons for an image not to appear.  Perhaps the most common problem
            is that information, such as the <see cref="P:Northwoods.GoWeb.GoImage.Name"/>, is not present for
            <see cref="M:Northwoods.GoWeb.GoImage.LoadImage"/> to be able to find the image data.  This will
            occur, for example, if you set the <see cref="P:Northwoods.GoWeb.GoImage.Image"/> property alone
            and then serialize/deserialize this <c>GoImage</c>, because <c>Image</c>
            data and <c>ResourceManager</c>s are not serialized.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoImage.DefaultResourceManager">
            <summary>
            Gets or sets the static/shared ResourceManager for newly constructed GoImage objects.
            </summary>
            <value>
            The initial value is null--no ResourceManager is used for any <see cref="M:Northwoods.GoWeb.GoImage.LoadImage"/>
            calls unless the <see cref="P:Northwoods.GoWeb.GoImage.ResourceManager"/> property is set for a given
            <c>GoImage</c> object.
            </value>
        </member>
        <member name="T:Northwoods.GoWeb.GoOctagon">
            <summary>
            An object with eight sides which is kept convex and symmetrical in relation
            to its X and Y axis
            </summary>
            <remarks>
            If you need an eight-sided shape without the constraints that this class
            imposes, use <see cref="T:Northwoods.GoWeb.GoPolygon"/> instead.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoOctagon.ChangedCorner">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoOctagon.Corner"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoOctagon.ChangedReshapableCorner">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoOctagon.ReshapableCorner"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoOctagon.CornerWidthHandleID">
            <summary>
            A special handle ID for a handle which controls the corner's width.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoOctagon.CornerHeightHandleID">
            <summary>
            A special handle ID for a handle which controls the corner's height.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoOctagon.#ctor">
            <summary>
            The constructor produces an octagon with a standard black <see cref="P:Northwoods.GoWeb.GoShape.Pen"/>
            outline, no <see cref="T:System.Drawing.Brush"/> fill, and a default corner dimensions.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoOctagon.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)">
            <summary>
            Paint a possibly shadowed octagon.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <seealso cref="P:Northwoods.GoWeb.GoOctagon.Corner"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoOctagon.ContainsPoint(System.Drawing.PointF)">
            <summary>
            Consider the actual shape of the octagon to determine
            if a given point is inside.
            </summary>
            <param name="p"></param>
            <returns></returns>
            <remarks>
            Currently this does not take the pen width into account.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoOctagon.MakePath">
            <summary>
            Produce a <c>GraphicsPath</c> by adding lines between the points.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoOctagon.DoResize(Northwoods.GoWeb.GoView,System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,Northwoods.GoWeb.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Support either allowing the user to move the corner control handles,
            or treating the octagon as a whole object.
            </summary>
            <param name="view"></param>
            <param name="origRect"></param>
            <param name="newPoint"></param>
            <param name="whichHandle"></param>
            <param name="evttype"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoOctagon.AddSelectionHandles(Northwoods.GoWeb.GoSelection,Northwoods.GoWeb.GoObject)">
            <summary>
            If <see cref="M:Northwoods.GoWeb.GoObject.CanReshape"/> and <see cref="P:Northwoods.GoWeb.GoOctagon.ReshapableCorner"/>
            are true, this supports corner control handles.
            </summary>
            <param name="sel"></param>
            <param name="selectedObj"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoOctagon.GetNearestIntersectionPoint(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)">
            <summary>
            The closest point of a octagon that intersects with a given line
            is the closest such point of each of its eight line segments.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoOctagon.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle this class's property changes for undo and redo
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.GoWeb.GoOctagon.Corner">
            <summary>
            Gets or sets the width and height of each corner.
            </summary>
            <value>
            This defaults to 10x10.
            If given a negative value, it is set to 0.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoOctagon.ReshapableCorner">
            <summary>
            Gets or sets whether to add the corner reshaping handles.
            </summary>
            <value>
            This defaults to true.
            </value>
        </member>
        <member name="T:Northwoods.GoWeb.GoParallelogram">
            <summary>
            An object in the shape of a parallelogram.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoParallelogram.ChangedSkew">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoParallelogram.Skew"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoParallelogram.ChangedReshapableSkew">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoParallelogram.ReshapableSkew"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoParallelogram.SkewHandleID">
            <summary>
            A special handle ID for a handle which controls the skew length of a parallelogram.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoParallelogram.ChangedDirection">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoParallelogram.Direction"/> property.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoParallelogram.#ctor">
            <summary>
            The constructor produces a parallelogramwith a standard black <see cref="P:Northwoods.GoWeb.GoShape.Pen"/>
            outline and no <see cref="T:System.Drawing.Brush"/> fill, whose "tiltedness" is specified by <see cref="P:Northwoods.GoWeb.GoParallelogram.Skew"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoParallelogram.CopyObject(Northwoods.GoWeb.GoCopyDictionary)">
            <summary>
            Make sure any internal state is copied correctly.
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoParallelogram.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)">
            <summary>
            Paint a parallelogram shape, possibly with a shadow.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoParallelogram.ContainsPoint(System.Drawing.PointF)">
            <summary>
            Consider the sides of the parallelogram when determining if a point is inside.
            </summary>
            <param name="p"></param>
            <returns></returns>
            <remarks>
            Currently this does not take the pen width into account.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoParallelogram.MakePath">
            <summary>
            Produce a <c>GraphicsPath</c> by adding lines between the points.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoParallelogram.DoResize(Northwoods.GoWeb.GoView,System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,Northwoods.GoWeb.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Support either allowing the user to move the skew control handle,
            or treating the parallelogram as a whole object.
            </summary>
            <param name="view"></param>
            <param name="origRect"></param>
            <param name="newPoint"></param>
            <param name="whichHandle"></param>
            <param name="evttype"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoParallelogram.AddSelectionHandles(Northwoods.GoWeb.GoSelection,Northwoods.GoWeb.GoObject)">
            <summary>
            If <see cref="M:Northwoods.GoWeb.GoObject.CanReshape"/> and <see cref="P:Northwoods.GoWeb.GoParallelogram.ReshapableSkew"/>
            are true, this supports a skew control handle.
            </summary>
            <param name="sel"></param>
            <param name="selectedObj"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoParallelogram.GetNearestIntersectionPoint(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)">
            <summary>
            The closest point of a parallelogram that intersects with a given line
            is the closest such point of each of its four line segments.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoParallelogram.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle this class's property changes for undo and redo
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.GoWeb.GoParallelogram.Direction">
            <summary>
            Gets or sets the direction of the fixed diagonal.
            True is Top Right to Bottom Left; False is Bottom Right to Top Left.
            </summary>
            <value>
            This defaults to true.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoParallelogram.Skew">
            <summary>
            Gets or sets the tiltedness of the parallelogram, in both directions.
            </summary>
            <value>
            By default the value is 10x0, so that the top-left corner is shifted to
            the right by 10 document units but kept at the same Y coordinate.
            Similar shifts occur along the Y axis according to the skew height.
            If given a negative value, it is set to 0.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoParallelogram.ReshapableSkew">
            <summary>
            Gets or sets whether to add the skew reshaping handle.
            </summary>
            <value>
            This defaults to true.
            </value>
        </member>
        <member name="T:Northwoods.GoWeb.GoPartInfo">
            <summary>
            This class holds information to be transmitted to the client as a JavaScript
            object with property values, describing some <see cref="T:Northwoods.GoWeb.GoObject"/>.
            [Not in GoDiagram Pocket]
            </summary>
            <remarks>
            The standard set of properties to be generated include <see cref="P:Northwoods.GoWeb.GoPartInfo.ID"/>,
            <see cref="P:Northwoods.GoWeb.GoPartInfo.Text"/>, <see cref="P:Northwoods.GoWeb.GoPartInfo.SingleClick"/>, <see cref="P:Northwoods.GoWeb.GoPartInfo.DoubleClick"/>, 
            and <see cref="P:Northwoods.GoWeb.GoPartInfo.ContextClick"/>.
            You can add whatever properties your web application needs to have on
            the client by calling the <see cref="M:Northwoods.GoWeb.GoPartInfo.SetProperty(System.String,System.Object)"/> method.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoPartInfo.#ctor(Northwoods.GoWeb.IGoPartInfoRenderer)">
            <summary>
            Construct an empty GoPartInfo.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoPartInfo.Equals(System.Object)">
            <summary>
            Compare all of the properties.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoPartInfo.GetHashCode">
            <summary>
            Consider all of the properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoPartInfo.ToString">
            <summary>
            Produce a JavaScript expression that constructs a JavaScript object
            holding all of the property/value pairs described by this GoPartInfo.
            </summary>
            <returns></returns>
            <remarks>
            For property values that are strings, they are just transmitted as
            string literals.
            For property values that are not strings, this calls <c>Object.ToString()</c>
            to produce an expression that JavaScript can evaluate to produce a
            number, string, array or object.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoPartInfo.DQuote(System.String)">
            <summary>
            Given a string, produce the contents of a JavaScript string literal
            with single-quote and double-quote characters back-slashified,
            surrounded by double quote marks.
            </summary>
            <param name="s"></param>
            <returns>a string containing a JavaScript string literal surrounded by double quote marks</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoPartInfo.SQuote(System.String)">
            <summary>
            Given a string, produce the contents of a JavaScript string literal
            with single-quote and double-quote characters back-slashified,
            surrounded by single quote marks.
            </summary>
            <param name="s"></param>
            <returns>a string containing a JavaScript string literal surrounded by single quote marks</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoPartInfo.Quote(System.String,System.Char)">
            <summary>
            Given a string, produce the contents of a JavaScript string literal
            with single-quote and double-quote characters back-slashified.
            </summary>
            <param name="s"></param>
            <param name="quote"></param>
            <returns>a string literal surrounded by <paramref name="quote"/> characters</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoPartInfo.GetProperty(System.String)">
            <summary>
            This method provides a general way to get the value for any property.
            </summary>
            <param name="p">a String</param>
            <returns>null if the property name is not present</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoPartInfo.SetProperty(System.String,System.Object)">
            <summary>
            This method provides a general way to set the value for any property.
            </summary>
            <param name="p">a String</param>
            <param name="v">a value of null makes this property disappear from the generated JavaScript</param>
            <remarks>
            If the property name is not already present, it is added.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoPartInfo.ID">
            <summary>
            Gets or sets an identifier describing an object.
            </summary>
            <value>
            <para>
            By default this gets the <see cref="T:Northwoods.GoWeb.IGoIdentifiablePart"/>.<see cref="P:Northwoods.GoWeb.IGoIdentifiablePart.PartID"/>,
            if the object is an <see cref="T:Northwoods.GoWeb.IGoIdentifiablePart"/> and the <see cref="P:Northwoods.GoWeb.IGoIdentifiablePart.PartID"/>
            is not -1.
            Otherwise this value is null, and you will probably want to set this to whatever
            value you are using in your application.
            </para>
            <para>
            This is not the same as the "id" property for a DHTML element.
            </para>
            </value>
            <remarks>
            This just gets or sets the "ID" property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoPartInfo.Text">
            <summary>
            Gets or sets a text string describing an object.
            </summary>
            <value>
            By default this gets the <see cref="T:Northwoods.GoWeb.IGoLabeledNode"/>.<see cref="P:Northwoods.GoWeb.IGoLabeledPart.Text"/>,
            if the object is an <see cref="T:Northwoods.GoWeb.IGoLabeledNode"/>.
            Otherwise this value is null, and you may find it convenient to set this to whatever
            descriptive text that would be useful to your application.
            This just gets or sets the "Text" property.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoPartInfo.SingleClick">
            <summary>
            Gets or sets the JavaScript to be executed when the user clicks an object.
            </summary>
            <value>This defaults to null</value>
            <remarks>
            This just gets or sets the "SingleClick" property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoPartInfo.DoubleClick">
            <summary>
            Gets or sets the JavaScript to be executed when the user double-clicks an object.
            </summary>
            <value>This defaults to null</value>
            <remarks>
            This just gets or sets the "DoubleClick" property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoPartInfo.ContextClick">
            <summary>
            Gets or sets the JavaScript to be executed when the user context-clicks an object.
            </summary>
            <value>This defaults to null</value>
            <remarks>
            This code (if present) takes precedence over any context menus that are associated
            with this object, so this property is not frequently used.
            This just gets or sets the "ContextClick" property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoPartInfo.Item(System.String)">
            <summary>
            This indexed property makes it syntactically easier to get and
            set properties.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoPartInfo.GetProperty(System.String)"/>
            <seealso cref="M:Northwoods.GoWeb.GoPartInfo.SetProperty(System.String,System.Object)"/>
        </member>
        <member name="T:Northwoods.GoWeb.GoPie">
            <summary>
            An object in the shape of a section or "slice" of an ellipse.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPie.ChangedStartAngle">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoPie.StartAngle"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPie.ChangedSweepAngle">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoPie.SweepAngle"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPie.ChangedResizableStartAngle">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoPie.ResizableStartAngle"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPie.ChangedResizableEndAngle">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoPie.ResizableEndAngle"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPie.StartAngleHandleID">
            <summary>
            A special handle ID for a handle which controls the start angle of the pie.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPie.EndAngleHandleID">
            <summary>
            A special handle ID for a handle which controls the end angle of the pie.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoPie.#ctor">
            <summary>
            The constructor produces a pie section with a standard black <see cref="P:Northwoods.GoWeb.GoShape.Pen"/>
            outline and no <see cref="T:System.Drawing.Brush"/> fill.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoPie.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)">
            <summary>
            Draw a possibly shadowed pie section.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoPie.MakePath">
            <summary>
            Produce a <c>GraphicsPath</c> by adding a pie shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoPie.DoResize(Northwoods.GoWeb.GoView,System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,Northwoods.GoWeb.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Support allowing the user to move the angle control handles.
            </summary>
            <param name="view"></param>
            <param name="origRect"></param>
            <param name="newPoint"></param>
            <param name="whichHandle"></param>
            <param name="evttype"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoPie.AddSelectionHandles(Northwoods.GoWeb.GoSelection,Northwoods.GoWeb.GoObject)">
            <summary>
            If <see cref="M:Northwoods.GoWeb.GoObject.CanReshape"/> is true, supports angle control handles if
            <see cref="P:Northwoods.GoWeb.GoPie.ResizableStartAngle"/> and/or <see cref="P:Northwoods.GoWeb.GoPie.ResizableEndAngle"/> are true.
            </summary>
            <param name="sel"></param>
            <param name="selectedObj"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoPie.ContainsPoint(System.Drawing.PointF)">
            <summary>
            A point is in this object only if it really is inside the section of the ellipse.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoPie.GetNearestIntersectionPoint(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)">
            <summary>
            Find the intersection points of a pie and the infinite line p1-p2
            that is closest to point p1.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoPie.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle this class's property changes for undo and redo
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.GoWeb.GoPie.StartAngle">
            <summary>
            Gets or sets the initial angle of the section of the ellipse to be drawn.
            </summary>
            <value>
            This value is in degrees, measured clockwise from zero along the positive X axis.
            The value should range from zero to just below 360.  Values outside this range
            are adjusted to equivalent angles that fall in this range.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoPie.SweepAngle">
            <summary>
            Gets or sets the angle of the width of the section of the ellipse to be drawn.
            </summary>
            <value>
            This value is in degrees, measured clockwise from the <see cref="P:Northwoods.GoWeb.GoPie.StartAngle"/>.
            Absolute values equal to or greater than 360 degrees are adjusted to the equivalent
            angles less than 360 degrees.
            The default value is 60.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoPie.ResizableStartAngle">
            <summary>
            Gets or sets whether to add the resizing handle controlling the start angle.
            </summary>
            <value>
            This defaults to true.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoPie.ResizableEndAngle">
            <summary>
            Gets or sets whether to add the resizing handle controlling the end angle.
            </summary>
            <value>
            This defaults to true.
            </value>
        </member>
        <member name="T:Northwoods.GoWeb.GoPolygonStyle">
            <summary>
            Specifies the kind of curve drawn between the points of the polygon.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPolygonStyle.Line">
            <summary>
            A straight line is drawn between each two consecutive points in the <see cref="T:Northwoods.GoWeb.GoPolygon"/>,
            and between the last and first points to close the curve.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPolygonStyle.Bezier">
            <summary>
            A Bezier curve is drawn using four points: a start point, two control points, and an end point.
            Additional sets of three points specify additional Bezier curves, where the new start point
            is the old end point.
            </summary>
            <remarks>
            If the first point and the last point are not at exactly the same position, there is
            a straight line drawn between the two to complete the closed shape.
            </remarks>
        </member>
        <member name="T:Northwoods.GoWeb.GoPolygon">
            <summary>
            A shape whose number, style, and location of sides can be specified.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPolygon.AddedPoint">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPolygon.ChangedAddPoint">
            <summary>
            This is a synonym for <see cref="F:Northwoods.GoWeb.GoPolygon.AddedPoint"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPolygon.RemovedPoint">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPolygon.ChangedRemovePoint">
            <summary>
            This is a synonym for <see cref="F:Northwoods.GoWeb.GoPolygon.RemovedPoint"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPolygon.ModifiedPoint">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPolygon.ChangedModifiedPoint">
            <summary>
            This is a synonym for <see cref="F:Northwoods.GoWeb.GoPolygon.ModifiedPoint"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPolygon.ChangedAllPoints">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPolygon.ChangedStyle">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoPolygon.Style"/> property.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoPolygon.#ctor">
            <summary>
            The constructor produces a polygon that users can resize in real time.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoPolygon.CopyObject(Northwoods.GoWeb.GoCopyDictionary)">
            <summary>
            Make sure the cloned polygon does not share any data references with the
            original polygon.
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoPolygon.AddPoint(System.Drawing.PointF)">
            <summary>
            Add another point to the end of this polygon's curve.
            </summary>
            <param name="p">A <c>PointF</c> in document coordinates</param>
            <returns>the zero-based index of the point that was added</returns>
            <seealso cref="M:Northwoods.GoWeb.GoPolygon.InsertPoint(System.Int32,System.Drawing.PointF)"/>
            <seealso cref="M:Northwoods.GoWeb.GoPolygon.RemovePoint(System.Int32)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoPolygon.AddPoint(System.Single,System.Single)">
            <summary>
            This method is just a convenience overload of <see cref="M:Northwoods.GoWeb.GoPolygon.AddPoint(System.Drawing.PointF)"/>.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>the zero-based index of the point that was added</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoPolygon.InsertPoint(System.Int32,System.Drawing.PointF)">
            <summary>
            Add a point at a particular index, thereby increasing the number of points by one.
            </summary>
            <param name="i">the zero-based index</param>
            <param name="p">A <c>PointF</c> in document coordinates</param>
            <remarks>
            This method throws an <c>ArgumentException</c> if the index <paramref name="i"/>
            is less than zero.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoPolygon.AddPoint(System.Drawing.PointF)"/>
            <seealso cref="M:Northwoods.GoWeb.GoPolygon.RemovePoint(System.Int32)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoPolygon.RemovePoint(System.Int32)">
            <summary>
            Remove the point at a particular index, thereby reducing the number of points by one.
            </summary>
            <param name="i">the zero-based index</param>
            <remarks>
            This method does nothing if <paramref name="i"/> is out of bounds.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoPolygon.AddPoint(System.Drawing.PointF)"/>
            <seealso cref="M:Northwoods.GoWeb.GoPolygon.InsertPoint(System.Int32,System.Drawing.PointF)"/>
            <seealso cref="P:Northwoods.GoWeb.GoPolygon.PointsCount"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoPolygon.GetPoint(System.Int32)">
            <summary>
            Get the point at a particular index.
            </summary>
            <param name="i">the zero-based index</param>
            <returns>A <c>PointF</c> in document coordinates</returns>
            <remarks>
            This method throws an exception if <paramref name="i"/> is out of bounds.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoPolygon.SetPoint(System.Int32,System.Drawing.PointF)"/>
            <seealso cref="P:Northwoods.GoWeb.GoPolygon.PointsCount"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoPolygon.SetPoint(System.Int32,System.Drawing.PointF)">
            <summary>
            Replace the point at a particular index;
            </summary>
            <param name="i">the zero-based index</param>
            <param name="p">A <c>PointF</c> in document coordinates</param>
            <remarks>
            This method throws an exception if <paramref name="i"/> is out of bounds.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoPolygon.GetPoint(System.Int32)"/>
            <seealso cref="P:Northwoods.GoWeb.GoPolygon.PointsCount"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoPolygon.ClearPoints">
            <summary>
            Remove all of the points for this polygon.
            </summary>
            <remarks>
            Afterwards, this polygon is not likely to participate usefully in many
            operations, such as painting, until more points are added by calling
            <see cref="M:Northwoods.GoWeb.GoPolygon.AddPoint(System.Drawing.PointF)"/> or <see cref="M:Northwoods.GoWeb.GoPolygon.SetPoints(System.Drawing.PointF[])"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoPolygon.SetPoints(System.Drawing.PointF[])">
            <summary>
            Replace all of the points for this polygon.
            </summary>
            <param name="points">A <c>PointF</c> array whose points are in document coordinates</param>
            <remarks>
            Afterwards, <see cref="P:Northwoods.GoWeb.GoPolygon.PointsCount"/> should equal the length of the
            <paramref name="points"/> array.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoPolygon.CopyPointsArray"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoPolygon.CopyPointsArray">
            <summary>
            Returns a copy of the array of points in this polygon.
            </summary>
            <value>
            An array of <c>PointF</c> values.
            </value>
        </member>
        <member name="M:Northwoods.GoWeb.GoPolygon.MakePath">
            <summary>
            Returns a <c>GraphicsPath</c> representation of what will be drawn.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoPolygon.OnBoundsChanged(System.Drawing.RectangleF)">
            <summary>
            Changing the bounds of a polygon may change all of its points.
            </summary>
            <param name="old">the earlier bounds, a <c>RectangleF</c> in document coordinates</param>
            <remarks>
            All of the points are modified to reflect the translation and
            scaling of the new bounding rectangle from the old one.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoPolygon.ComputeBounds">
            <summary>
            The bounding rectangle of a polygon is computed as the smallest
            rectangle that includes all of its points.
            </summary>
            <returns></returns>
            <remarks>
            If there are only zero or one points, the size will be zero.
            The computed bounds for Bezier-sided polygons are not necessarily the closest fitting.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoPolygon.ContainsPoint(System.Drawing.PointF)">
            <summary>
            A point is in a polygon only if it is inside its fill area,
            even if it has no Brush.
            </summary>
            <param name="p"></param>
            <returns></returns>
            <remarks>
            This currently does not take pen width into account.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoPolygon.GetSegmentNearPoint(System.Drawing.PointF,System.Single)">
            <summary>
            Return the index of the first point of a segment of this polygon
            that is close to a given point.
            </summary>
            <param name="pnt">A <c>PointF</c> in document coordinates</param>
            <param name="pickMargin">
            the approximate distance from each line segment that is allowed,
            in addition to the width of the Pen; assumed to be non-negative
            </param>
            <returns>
            The zero-based index of the first point of a segment,
            or <c>-1</c> if no segment is near <paramref name="pnt"/>.
            </returns>
            <remarks>
            This ignores the filled area and only considers the boundary
            defined by the polygon points that is drawn by the Pen
            (or if there is no Pen, what would be drawn if there were a Pen).
            For Bezier style polygons, this returns the index of the first of
            each set of points, e.g. 0, 3, 7, ....
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoPolygon.GetNearestIntersectionPoint(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)">
            <summary>
            The closest intersection point of a polygon with a line is the
            closest such point for each of its segments.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="result"></param>
            <returns></returns>
            <remarks>
            This currently does not always take into account any Pen width.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoPolygon.DoResize(Northwoods.GoWeb.GoView,System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,Northwoods.GoWeb.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            When the resize handles are at each point of the polygon, the user's
            dragging of a resize handle should just change that point in the curve.
            </summary>
            <param name="view"></param>
            <param name="origRect"></param>
            <param name="newPoint"></param>
            <param name="whichHandle"></param>
            <param name="evttype"></param>
            <param name="min"></param>
            <param name="max"></param>
            <remarks>
            When <see cref="P:Northwoods.GoWeb.GoObject.ResizesRealtime"/> is true, this method always calls
            <see cref="M:Northwoods.GoWeb.GoPolygon.SetPoint(System.Int32,System.Drawing.PointF)"/>.
            Otherwise it only calls <see cref="M:Northwoods.GoWeb.GoPolygon.SetPoint(System.Int32,System.Drawing.PointF)"/> when the <paramref name="evttype"/>
            is <see cref="F:Northwoods.GoWeb.GoInputState.Finish"/> or <see cref="F:Northwoods.GoWeb.GoInputState.Cancel"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoPolygon.AddSelectionHandles(Northwoods.GoWeb.GoSelection,Northwoods.GoWeb.GoObject)">
            <summary>
            Display the appropriate selected appearance, normally, resize selection handles
            at each point of the polygon.
            </summary>
            <param name="sel"></param>
            <param name="selectedObj"></param>
            <remarks>
            If this polygon is resizable and reshapable, we add resize selection
            handles at each polygon point, with handle IDs equal to
            <see cref="F:Northwoods.GoWeb.GoObject.LastHandle"/> plus the index of the point.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoPolygon.CopyOldValueForUndo(Northwoods.GoWeb.GoChangedEventArgs)">
            <summary>
            Copies state to permit an undo.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoObject.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoPolygon.CopyNewValueForRedo(Northwoods.GoWeb.GoChangedEventArgs)">
            <summary>
            Copies state to permit a redo.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoObject.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoPolygon.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Performs changes for undo and redo.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoObject.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoPolygon.Style">
            <summary>
            Gets or sets the style of curve drawn using this polygon's points.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoWeb.GoPolygonStyle.Line"/>, straight lines
            between the points.  A value of <see cref="F:Northwoods.GoWeb.GoPolygonStyle.Bezier"/>
            results in a closed poly-Bezier shape, with a straight line segment
            closing the shape between the last and first point if they are
            not the same point.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoPolygon.PointsCount">
            <summary>
            Gets the number of points in this polygon.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoPolygon.GetPoint(System.Int32)"/>.
            <seealso cref="M:Northwoods.GoWeb.GoPolygon.SetPoint(System.Int32,System.Drawing.PointF)"/>.
            <seealso cref="M:Northwoods.GoWeb.GoPolygon.AddPoint(System.Drawing.PointF)"/>.
            <seealso cref="M:Northwoods.GoWeb.GoPolygon.InsertPoint(System.Int32,System.Drawing.PointF)"/>.
            <seealso cref="M:Northwoods.GoWeb.GoPolygon.RemovePoint(System.Int32)"/>.
        </member>
        <member name="T:Northwoods.GoWeb.GoRoundedRectangle">
            <summary>
            An object in the shape of a rectangle or square, whose corners are quarter
            ellipses at the corners of the bounding rectangle.
            </summary>
            <remarks>
            Although by default all four corners are rounded by the value of <see cref="P:Northwoods.GoWeb.GoRoundedRectangle.Corner"/>,
            you can control which ones are rounded by setting <see cref="P:Northwoods.GoWeb.GoRoundedRectangle.RoundedCornerSpots"/>.
            For example, if you just want the top corners to be rounded-off, but you want to
            keep the bottom corners squared-off:
            <code>r.RoundedCornerSpots = GoObject.TopLeft | GoObject.TopRight;</code>
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoRoundedRectangle.ChangedCorner">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoRoundedRectangle.Corner"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoRoundedRectangle.ChangedRoundedCornerSpots">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoRoundedRectangle.RoundedCornerSpots"/> property.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoRoundedRectangle.#ctor">
            <summary>
            The constructor produces a rectangle with a standard black <see cref="P:Northwoods.GoWeb.GoShape.Pen"/>
            outline and no <see cref="T:System.Drawing.Brush"/> fill, whose corners are rounded.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoRoundedRectangle.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)">
            <summary>
            Paint a possibly shadowed rectangle with rounded corners.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <seealso cref="P:Northwoods.GoWeb.GoRoundedRectangle.Corner"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoRoundedRectangle.MakePath">
            <summary>
            Returns a <c>GraphicsPath</c> representation of what will be drawn.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoRoundedRectangle.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle this class's property changes for undo and redo
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.GoWeb.GoRoundedRectangle.Corner">
            <summary>
            Gets or sets the maximum radial width and height of each corner.
            </summary>
            <value>
            The default value is 10x10.  Both the width and the height must be
            non-negative; only when both are positive will there be arcs at each corner.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoRoundedRectangle.RoundedCornerSpots">
            <summary>
            Gets or sets which corners are rounded off.
            </summary>
            <value>
            A bitwise combination of the following four <see cref="T:Northwoods.GoWeb.GoObject"/> spots:
            <see cref="F:Northwoods.GoWeb.GoObject.TopLeft"/>, <see cref="F:Northwoods.GoWeb.GoObject.TopRight"/>,
            <see cref="F:Northwoods.GoWeb.GoObject.BottomRight"/>, <see cref="F:Northwoods.GoWeb.GoObject.BottomLeft"/>.
            By default this includes all four corners.
            </value>
        </member>
        <member name="T:Northwoods.GoWeb.GoBrushStyle">
            <summary>
            An enumeration of all of the kinds of simple brushes that <see cref="T:Northwoods.GoWeb.GoShape"/> supports.
            </summary>
            <remarks>
            <para>
            This is used by the <see cref="P:Northwoods.GoWeb.GoShape.BrushStyle"/> property, in coordination
            with the <see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>, <see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>,
            and <see cref="P:Northwoods.GoWeb.GoShape.BrushMidColor"/> properties.
            </para>
            <para>
            Note that diagonal linear gradients always go from one corner spot to the opposite
            corner spot, following the aspect ratio of the shape, not at 45 or 135 degree angles.
            </para>
            <para>
            When a linear gradient brush or a path gradient brush is drawn very small,
            due to a combination of small size and small <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="P:Northwoods.GoWeb.GoView.DocScale"/>,
            GoDiagram may substitute a solid brush or not draw anything at all,
            both for efficiency as well as to avoid GDI+ errors.
            When a path gradient brush is drawn very large,
            due to a combination of large size and large <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="P:Northwoods.GoWeb.GoView.DocScale"/>,
            GoDiagram may substitute a solid brush, both for efficiency as well as to avoid GDI+ errors.
            </para>
            <para>
            This enum, along with the <see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>, <see cref="P:Northwoods.GoWeb.GoShape.BrushMidColor"/>,
            and <see cref="P:Northwoods.GoWeb.GoShape.BrushMidFraction"/> properties, are not used in GoDiagram Pocket,
            but exist for source-code compatibility.  Only the <see cref="F:Northwoods.GoWeb.GoBrushStyle.Solid"/> and
            <see cref="F:Northwoods.GoWeb.GoBrushStyle.None"/> enum values are defined in GoDiagram Pocket.
            </para>
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.None">
            <summary>
            Nothing is painted.
            If you do not want <see cref="M:Northwoods.GoWeb.GoObject.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)"/> to fill the region inside a shape,
            it is most efficient to set <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.Brush"/> to null or Nothing.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.Solid">
            <summary>
            The default brush style, a uniform color using a <b>SolidBrush</b>;
            the color that is drawn may be partially or totally transparent.
            You can specify the color by setting <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>.
            Alternatively, you can set the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.Brush"/>
            to an instance of a <b>System.Drawing.SolidBrush</b>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.SimpleGradientVertical">
            <summary>
            A simple two color linear gradient,
            with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/> at the top
            and with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/> at the bottom.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.SimpleGradientHorizontal">
            <summary>
            A simple two color linear gradient,
            with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/> at the left
            and with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/> at the right.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.SimpleGradientForwardDiagonal">
            <summary>
            A simple two color linear gradient,
            with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/> at the top-left
            and with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/> at the bottom-right.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.SimpleGradientBackwardDiagonal">
            <summary>
            A simple two color linear gradient,
            with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/> at the top-right
            and with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/> at the bottom-left.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.MiddleGradientVertical">
            <summary>
            A three color linear gradient,
            with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/> at the top,
            with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushMidColor"/> at the middle,
            and with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/> at the bottom.
            If the <see cref="P:Northwoods.GoWeb.GoShape.BrushMidColor"/> is <b>Color.Empty</b>, it uses the <see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/> at the middle.
            Due to a bug in GDI+ in .NET 1.1, the middle gradient color is ignored.
            All three colors are shown in .NET 2.0.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.MiddleGradientHorizontal">
            <summary>
            A three color linear gradient,
            with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/> at the left,
            with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushMidColor"/> at the middle,
            and with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/> at the right.
            If the <see cref="P:Northwoods.GoWeb.GoShape.BrushMidColor"/> is <b>Color.Empty</b>, it uses the <see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/> at the middle.
            Due to a bug in GDI+ in .NET 1.1, the middle gradient color is ignored.
            All three colors are shown in .NET 2.0.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.MiddleGradientForwardDiagonal">
            <summary>
            A three color linear gradient,
            with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/> at the top-left,
            with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushMidColor"/> at the middle,
            and with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/> at the bottom-right.
            If the <see cref="P:Northwoods.GoWeb.GoShape.BrushMidColor"/> is <b>Color.Empty</b>, it uses the <see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/> at the middle.
            Due to a bug in GDI+ in .NET 1.1, the middle gradient color is ignored.
            All three colors are shown in .NET 2.0.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.MiddleGradientBackwardDiagonal">
            <summary>
            A three color linear gradient,
            with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/> at the top-right,
            with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushMidColor"/> at the middle,
            and with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/> at the bottom-left.
            If the <see cref="P:Northwoods.GoWeb.GoShape.BrushMidColor"/> is <b>Color.Empty</b>, it uses the <see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/> at the middle.
            Due to a bug in GDI+ in .NET 1.1, the middle gradient color is ignored.
            All three colors are shown in .NET 2.0.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.SingleEdgeGradientTop">
            <summary>
            A three color linear gradient,
            with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/> along the top,
            with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushMidColor"/> in the middle,
            and with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/> at the bottom.
            If the <see cref="P:Northwoods.GoWeb.GoShape.BrushMidColor"/> is <b>Color.Empty</b>, it uses the <see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/> at the middle.
            Due to a bug in GDI+ in .NET 1.1, the middle gradient color is ignored.
            All three colors are shown in .NET 2.0.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.SingleEdgeGradientLeft">
            <summary>
            A three color linear gradient,
            with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/> along the left,
            with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushMidColor"/> in the middle,
            and with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/> at the right.
            If the <see cref="P:Northwoods.GoWeb.GoShape.BrushMidColor"/> is <b>Color.Empty</b>, it uses the <see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/> at the middle.
            Due to a bug in GDI+ in .NET 1.1, the middle gradient color is ignored.
            All three colors are shown in .NET 2.0.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.SingleEdgeGradientRight">
            <summary>
            A three color linear gradient,
            with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/> along the right,
            with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushMidColor"/> in the middle,
            and with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/> at the left.
            If the <see cref="P:Northwoods.GoWeb.GoShape.BrushMidColor"/> is <b>Color.Empty</b>, it uses the <see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/> at the middle.
            Due to a bug in GDI+ in .NET 1.1, the middle gradient color is ignored.
            All three colors are shown in .NET 2.0.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.SingleEdgeGradientBottom">
            <summary>
            A three color linear gradient,
            with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/> along the bottom,
            with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushMidColor"/> in the middle,
            and with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/> at the top.
            If the <see cref="P:Northwoods.GoWeb.GoShape.BrushMidColor"/> is <b>Color.Empty</b>, it uses the <see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/> at the middle.
            Due to a bug in GDI+ in .NET 1.1, the middle gradient color is ignored.
            All three colors are shown in .NET 2.0.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.DoubleEdgeGradientVertical">
            <summary>
            A three color linear gradient,
            with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/> along the top and the bottom,
            with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/> at the center, and
            with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushMidColor"/> in between.
            If the <see cref="P:Northwoods.GoWeb.GoShape.BrushMidColor"/> is <b>Color.Empty</b>, it uses the <see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/> at the middle.
            Due to a bug in GDI+ in .NET 1.1, the middle gradient color is ignored.
            All three colors are shown in .NET 2.0.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.DoubleEdgeGradientHorizontal">
            <summary>
            A three color linear gradient,
            with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/> along the left and the right sides,
            with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/> at the center, and
            with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushMidColor"/> in between.
            If the <see cref="P:Northwoods.GoWeb.GoShape.BrushMidColor"/> is <b>Color.Empty</b>, it uses the <see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/> at the middle.
            Due to a bug in GDI+ in .NET 1.1, the middle gradient color is ignored.
            All three colors are shown in .NET 2.0.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.DoubleEdgeGradientForwardDiagonal">
            <summary>
            A three color linear gradient,
            with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/> at the top-left and bottom-right corners,
            with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/> at the center, and
            with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushMidColor"/> in between.
            If the <see cref="P:Northwoods.GoWeb.GoShape.BrushMidColor"/> is <b>Color.Empty</b>, it uses the <see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/> at the middle.
            Due to a bug in GDI+ in .NET 1.1, the middle gradient color is ignored.
            All three colors are shown in .NET 2.0.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.DoubleEdgeGradientBackwardDiagonal">
            <summary>
            A three color linear gradient,
            with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/> at the top-right and bottom-left corners,
            with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/> at the center, and
            with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushMidColor"/> in between.
            If the <see cref="P:Northwoods.GoWeb.GoShape.BrushMidColor"/> is <b>Color.Empty</b>, it uses the <see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/> at the middle.
            Due to a bug in GDI+ in .NET 1.1, the middle gradient color is ignored.
            All three colors are shown in .NET 2.0.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.ShapeSimpleGradient">
            <summary>
            A two color path gradient,
            with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/> along the edges of the shape,
            gradually turning into the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/> at the very middle.
            This gradient works best with convex shapes.
            This should not be used for very large shapes; in some cases the system will automatically
            use a simple solid brush instead.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.ShapeFringeGradient">
            <summary>
            A three color path gradient,
            with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/> along the edges of the shape,
            and with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/> and
            <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushMidColor"/> in most of the middle.
            If the <see cref="P:Northwoods.GoWeb.GoShape.BrushMidColor"/> is <b>Color.Empty</b>, it uses the <see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/> at the middle.
            This gradient works best with convex shapes.
            This should not be used for very large shapes; in some cases the system will automatically
            use a simple solid brush instead.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.ShapeHighlightGradient">
            <summary>
            A two color path gradient,
            with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/> in most of the shape,
            but with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/> near the top-left corner.
            This gradient works best with convex shapes.
            This should not be used for very large shapes; in some cases the system will automatically
            use a simple solid brush instead.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.RectangleGradient">
            <summary>
            A three color path gradient,
            with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/> along the edges of a rectangle
            whose Bounds are the same as the shape,
            gradually turning into the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/> at the very middle.
            If the <see cref="P:Northwoods.GoWeb.GoShape.BrushMidColor"/> is <b>Color.Empty</b>, it uses the <see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/> at the middle.
            This has the same effect as <see cref="F:Northwoods.GoWeb.GoBrushStyle.ShapeSimpleGradient"/> when the shape is a rectangle,
            but when the shape is not a rectangle, the brush continues to paint a rectangular gradient.
            This should not be used for very large shapes; in some cases the system will automatically
            use a simple solid brush instead.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.EllipseGradient">
            <summary>
            A three color path gradient,
            with the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/> along the edges of an ellipse
            whose Bounds are the same as the shape,
            gradually turning into the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/> at the very middle.
            If the <see cref="P:Northwoods.GoWeb.GoShape.BrushMidColor"/> is <b>Color.Empty</b>, it uses the <see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/> at the middle.
            This has the same effect as <see cref="F:Northwoods.GoWeb.GoBrushStyle.ShapeSimpleGradient"/> when the shape is an ellipse,
            but when the shape is not an ellipse, the brush continues to paint an elliptical gradient.
            This should not be used for very large shapes; in some cases the system will automatically
            use a simple solid brush instead.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.Texture">
            <summary>
            A pattern of tiled images, using a <b>TextureBrush</b>.
            You can set the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.Brush"/>
            to an instance of a <b>System.Drawing.TextureBrush</b>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.CustomLinearGradient">
            <summary>
            A <b>LinearGradientBrush</b> not constructed by setting the various <see cref="T:Northwoods.GoWeb.GoShape"/>.<b>Brush...</b>
            properties or calling the various <see cref="T:Northwoods.GoWeb.GoShape"/>.<b>Fill...</b> methods.
            Such a brush is not likely to be serializable, and will need to be reconstructed dynamically.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.CustomPathGradient">
            <summary>
            A <b>PathGradientBrush</b> not constructed by setting the various <see cref="T:Northwoods.GoWeb.GoShape"/>.<b>Brush...</b>
            properties or calling the various <see cref="T:Northwoods.GoWeb.GoShape"/>.<b>Fill...</b> methods.
            Such a brush is not likely to be serializable, and will need to be reconstructed dynamically.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchHorizontal">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchVertical">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchForwardDiagonal">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchBackwardDiagonal">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchCross">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchDiagonalCross">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchPercent05">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchPercent10">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchPercent20">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchPercent25">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchPercent30">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchPercent40">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchPercent50">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchPercent60">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchPercent70">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchPercent75">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchPercent80">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchPercent90">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchLightDownwardDiagonal">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchLightUpwardDiagonal">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchDarkDownwardDiagonal">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchDarkUpwardDiagonal">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchWideDownwardDiagonal">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchWideUpwardDiagonal">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchLightVertical">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchLightHorizontal">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchNarrowVertical">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchNarrowHorizontal">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchDarkVertical">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchDarkHorizontal">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchDashedDownwardDiagonal">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchDashedUpwardDiagonal">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchDashedHorizontal">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchDashedVertical">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchSmallConfetti">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchLargeConfetti">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchZigZag">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchWave">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchDiagonalBrick">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchHorizontalBrick">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchWeave">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchPlaid">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchDivot">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchDottedGrid">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchDottedDiamond">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchShingle">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchTrellis">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchSphere">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchSmallGrid">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchSmallCheckerBoard">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchLargeCheckerBoard">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchOutlinedDiamond">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBrushStyle.HatchSolidDiamond">
            <summary>
            A hatch pattern, using a <b>HatchBrush</b>,
            that uses the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/>
            and the <see cref="T:Northwoods.GoWeb.GoShape"/>.<see cref="P:Northwoods.GoWeb.GoShape.BrushForeColor"/>.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoStrokeStyle">
            <summary>
            Specifies the kind of curve drawn between the points of the stroke.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoStrokeStyle.Line">
            <summary>
            A straight line is drawn between each two consecutive points in the <see cref="T:Northwoods.GoWeb.GoStroke"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoStrokeStyle.RoundedLine">
            <summary>
            Rounded line is like <see cref="F:Northwoods.GoWeb.GoStrokeStyle.Line"/> but with curves at each point where the lines intersect.
            Currently this is only implemented for adjacent segments that intersect at right angles.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoStrokeStyle.Bezier">
            <summary>
            A Bezier curve is drawn using four points: a start point, two control points, and an end point.
            Additional sets of three points specify additional Bezier curves, where the new start point
            is the old end point.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoStrokeStyle.RoundedLineWithJumpOvers">
            <summary>
            Like <see cref="F:Northwoods.GoWeb.GoStrokeStyle.RoundedLine"/> but the path also "jumps" or "hops" over intersections with
            other strokes that have this style.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoStrokeArrowheadStyle">
            <summary>
            Specifies the general shape of an arrowhead.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoStrokeArrowheadStyle.Polygon">
            <summary>
            The arrow head is drawn as a polygon.
            </summary>
            <remarks>
            The number of sides for the polygon is determined by <see cref="M:Northwoods.GoWeb.GoStroke.GetArrowheadPointsCount(System.Boolean)"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoStrokeArrowheadStyle.Circle">
            <summary>
            The arrowhead is drawn as a circle.
            </summary>
            <remarks>
            The circle's diameter is specified by the stroke's arrow shaft length,
            <see cref="P:Northwoods.GoWeb.GoStroke.ToArrowShaftLength"/> or <see cref="P:Northwoods.GoWeb.GoStroke.FromArrowShaftLength"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoStrokeArrowheadStyle.Cross">
            <summary>
            The arrowhead is a line crossing perpendicularly to the shaft.
            </summary>
            <remarks>
            The arrow length determines the distance of the line from the end point,
            <see cref="P:Northwoods.GoWeb.GoStroke.ToArrowLength"/> or <see cref="P:Northwoods.GoWeb.GoStroke.FromArrowLength"/>.
            The arrow width determines the length of the line,
            <see cref="P:Northwoods.GoWeb.GoStroke.ToArrowWidth"/> or <see cref="P:Northwoods.GoWeb.GoStroke.FromArrowWidth"/>.
            The arrow shaft length should normally be zero,
            <see cref="P:Northwoods.GoWeb.GoStroke.ToArrowShaftLength"/> or <see cref="P:Northwoods.GoWeb.GoStroke.FromArrowShaftLength"/>.
            If the maximum of the arrow length and the arrow shaft length exceed
            the end line segment length, the whole arrowhead is scaled down to fit.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoStrokeArrowheadStyle.Slash">
            <summary>
            The arrowhead is a line crossing at an angle across the shaft.
            </summary>
            <remarks>
            The arrow length determines the distance of the line from the end point,
            <see cref="P:Northwoods.GoWeb.GoStroke.ToArrowLength"/> or <see cref="P:Northwoods.GoWeb.GoStroke.FromArrowLength"/>.
            The arrow width determines the length of the line,
            <see cref="P:Northwoods.GoWeb.GoStroke.ToArrowWidth"/> or <see cref="P:Northwoods.GoWeb.GoStroke.FromArrowWidth"/>.
            The arrow shaft length should normally be zero,
            <see cref="P:Northwoods.GoWeb.GoStroke.ToArrowShaftLength"/> or <see cref="P:Northwoods.GoWeb.GoStroke.FromArrowShaftLength"/>.
            If the maximum of the arrow length and the arrow shaft length exceed
            the end line segment length, the whole arrowhead is scaled down to fit.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoStrokeArrowheadStyle.BackSlash">
            <summary>
            The arrowhead is a line crossing at an angle across the shaft.
            </summary>
            <remarks>
            The arrow length determines the distance of the line from the end point,
            <see cref="P:Northwoods.GoWeb.GoStroke.ToArrowLength"/> or <see cref="P:Northwoods.GoWeb.GoStroke.FromArrowLength"/>.
            The arrow width determines the length of the line,
            <see cref="P:Northwoods.GoWeb.GoStroke.ToArrowWidth"/> or <see cref="P:Northwoods.GoWeb.GoStroke.FromArrowWidth"/>.
            The arrow shaft length should normally be zero,
            <see cref="P:Northwoods.GoWeb.GoStroke.ToArrowShaftLength"/> or <see cref="P:Northwoods.GoWeb.GoStroke.FromArrowShaftLength"/>.
            If the maximum of the arrow length and the arrow shaft length exceed
            the end line segment length, the whole arrowhead is scaled down to fit.
            </remarks>
        </member>
        <member name="T:Northwoods.GoWeb.GoStroke">
            <summary>
            An unfilled shape composed of lines or curves whose number and location can be specified.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoStroke.AddedPoint">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoStroke.ChangedAddPoint">
            <summary>
            This is a synonym for <see cref="F:Northwoods.GoWeb.GoStroke.AddedPoint"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoStroke.RemovedPoint">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoStroke.ChangedRemovePoint">
            <summary>
            This is a synonym for <see cref="F:Northwoods.GoWeb.GoStroke.RemovedPoint"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoStroke.ModifiedPoint">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoStroke.ChangedModifiedPoint">
            <summary>
            This is a synonym for <see cref="F:Northwoods.GoWeb.GoStroke.ModifiedPoint"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoStroke.ChangedAllPoints">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoStroke.ChangedStyle">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoStroke.Style"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoStroke.ChangedCurviness">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoStroke.Curviness"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoStroke.ChangedHighlightPen">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoStroke.HighlightPen"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoStroke.ChangedHighlight">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoStroke.Highlight"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoStroke.ChangedHighlightWhenSelected">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoStroke.HighlightWhenSelected"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoStroke.ChangedToArrowHead">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoStroke.ToArrow"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoStroke.ChangedToArrowLength">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoStroke.ToArrowLength"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoStroke.ChangedToArrowShaftLength">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoStroke.ToArrowShaftLength"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoStroke.ChangedToArrowWidth">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoStroke.ToArrowWidth"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoStroke.ChangedToArrowFilled">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoStroke.ToArrowFilled"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoStroke.ChangedToArrowStyle">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoStroke.ToArrowStyle"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoStroke.ChangedFromArrowHead">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoStroke.FromArrow"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoStroke.ChangedFromArrowLength">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoStroke.FromArrowLength"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoStroke.ChangedFromArrowShaftLength">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoStroke.FromArrowShaftLength"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoStroke.ChangedFromArrowWidth">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoStroke.FromArrowWidth"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoStroke.ChangedFromArrowFilled">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoStroke.FromArrowFilled"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoStroke.ChangedFromArrowStyle">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoStroke.FromArrowStyle"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoStroke.ChangedPenWidth">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoShape.PenWidth"/> property.  [Used in GoDiagram Pocket]
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoStroke.ChangedHighlightPenWidth">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoStroke.HighlightPenWidth"/> property.  [Used in GoDiagram Pocket]
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoStroke.#ctor">
            <summary>
            The constructor produces a shape whose arrowheads are filled with black and
            that the user can resize in realtime.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoStroke.CopyObject(Northwoods.GoWeb.GoCopyDictionary)">
            <summary>
            Make sure the cloned stroke does not share any data references with the
            original stroke.
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoStroke.AddPoint(System.Drawing.PointF)">
            <summary>
            Add another point to the end of this stroke.
            </summary>
            <param name="p">A <c>PointF</c> in document coordinates</param>
            <returns>the zero-based index of the point that was added</returns>
            <seealso cref="M:Northwoods.GoWeb.GoStroke.InsertPoint(System.Int32,System.Drawing.PointF)"/>
            <seealso cref="M:Northwoods.GoWeb.GoStroke.RemovePoint(System.Int32)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoStroke.AddPoint(System.Single,System.Single)">
            <summary>
            This method is just a convenience overload of <see cref="M:Northwoods.GoWeb.GoStroke.AddPoint(System.Drawing.PointF)"/>.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>the zero-based index of the point that was added</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoStroke.InsertPoint(System.Int32,System.Drawing.PointF)">
            <summary>
            Add a point at a particular index, thereby increasing the number of points by one.
            </summary>
            <param name="i">the zero-based index</param>
            <param name="p">A <c>PointF</c> in document coordinates</param>
            <remarks>
            This method throws an <c>ArgumentException</c> if the index <paramref name="i"/>
            is less than zero.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoStroke.AddPoint(System.Drawing.PointF)"/>
            <seealso cref="M:Northwoods.GoWeb.GoStroke.RemovePoint(System.Int32)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoStroke.RemovePoint(System.Int32)">
            <summary>
            Remove the point at a particular index, thereby reducing the number of points by one.
            </summary>
            <param name="i">the zero-based index</param>
            <remarks>
            This method does nothing if <paramref name="i"/> is out of bounds.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoStroke.AddPoint(System.Drawing.PointF)"/>
            <seealso cref="M:Northwoods.GoWeb.GoStroke.InsertPoint(System.Int32,System.Drawing.PointF)"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.PointsCount"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoStroke.GetPoint(System.Int32)">
            <summary>
            Get the point at a particular index.
            </summary>
            <param name="i">the zero-based index</param>
            <returns>A <c>PointF</c> in document coordinates</returns>
            <remarks>
            This method throws an exception if <paramref name="i"/> is out of bounds.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoStroke.SetPoint(System.Int32,System.Drawing.PointF)"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.PointsCount"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoStroke.SetPoint(System.Int32,System.Drawing.PointF)">
            <summary>
            Replace the point at a particular index;
            </summary>
            <param name="i"></param>
            <param name="p">A <c>PointF</c> in document coordinates</param>
            <remarks>
            This method throws an exception if <paramref name="i"/> is out of bounds.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoStroke.GetPoint(System.Int32)"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.PointsCount"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoStroke.ClearPoints">
            <summary>
            Remove all of the points for this stroke.
            </summary>
            <remarks>
            Afterwards, this stroke is not likely to participate usefully in many
            operations, such as painting, until more points are added by calling
            <see cref="M:Northwoods.GoWeb.GoStroke.AddPoint(System.Drawing.PointF)"/> or <see cref="M:Northwoods.GoWeb.GoStroke.SetPoints(System.Drawing.PointF[])"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoStroke.SetPoints(System.Drawing.PointF[])">
            <summary>
            Replace all of the points for this stroke.
            </summary>
            <param name="points">A <c>PointF</c> array whose points are in document coordinates</param>
            <remarks>
            Afterwards, <see cref="P:Northwoods.GoWeb.GoStroke.PointsCount"/> should equal the length of the
            <paramref name="points"/> array.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoStroke.CopyPointsArray"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoStroke.CopyPointsArray">
            <summary>
            Returns a copy of the array of points in this stroke.
            </summary>
            <value>
            A newly-allocated array of <c>PointF</c> values in document coordinates.
            </value>
        </member>
        <member name="M:Northwoods.GoWeb.GoStroke.DoResize(Northwoods.GoWeb.GoView,System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,Northwoods.GoWeb.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            When the resize handles are at each point of the stroke, the user's
            dragging of a resize handle should just change that point in the stroke.
            </summary>
            <param name="view">
            the <see cref="T:Northwoods.GoWeb.GoView"/> whose <see cref="T:Northwoods.GoWeb.GoToolResizing"/> is calling this method
            </param>
            <param name="origRect">
            the original Bounds of the object, but probably not useful for strokes
            </param>
            <param name="newPoint">
            the PointF, in document coordinates, to which the resize handle is being dragged
            </param>
            <param name="whichHandle">
            The <see cref="T:Northwoods.GoWeb.IGoHandle"/>.<see cref="P:Northwoods.GoWeb.IGoHandle.HandleID"/> of the handle being dragged;
            for strokes this usually means that a value greater or equal to <see cref="F:Northwoods.GoWeb.GoObject.LastHandle"/>
            is actually the index of a point in the stroke, when one subtracts <see cref="F:Northwoods.GoWeb.GoObject.LastHandle"/>.
            </param>
            <param name="evttype">
            <list type="bullet">
            <item><term><c>GoInputState.Start</c></term><description>when called from <see cref="M:Northwoods.GoWeb.GoToolResizing.Start"/></description></item>
            <item><term><c>GoInputState.Continue</c></term><description>when called from <see cref="M:Northwoods.GoWeb.GoToolResizing.DoMouseMove"/></description></item>
            <item><term><c>GoInputState.Finish</c></term><description>when called from <see cref="M:Northwoods.GoWeb.GoToolResizing.DoMouseUp"/></description></item>
            <item><term><c>GoInputState.Cancel</c></term><description>when the <see cref="M:Northwoods.GoWeb.GoToolResizing.DoCancelMouse"/></description></item>
            </list>
            </param>
            <param name="min">
            the value of <see cref="T:Northwoods.GoWeb.GoToolResizing"/>.<see cref="P:Northwoods.GoWeb.GoToolResizing.MinimumSize"/>,
            but probably not useful for strokes
            </param>
            <param name="max">
            the value of <see cref="T:Northwoods.GoWeb.GoToolResizing"/>.<see cref="P:Northwoods.GoWeb.GoToolResizing.MaximumSize"/>,
            but probably not useful for strokes
            </param>
            <remarks>
            When <see cref="P:Northwoods.GoWeb.GoObject.ResizesRealtime"/> is true, this method always calls
            <see cref="M:Northwoods.GoWeb.GoStroke.SetPoint(System.Int32,System.Drawing.PointF)"/>.
            Otherwise it only calls <see cref="M:Northwoods.GoWeb.GoStroke.SetPoint(System.Int32,System.Drawing.PointF)"/> when the <paramref name="evttype"/>
            is <see cref="F:Northwoods.GoWeb.GoInputState.Finish"/> or <see cref="F:Northwoods.GoWeb.GoInputState.Cancel"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoStroke.AddSelectionHandles(Northwoods.GoWeb.GoSelection,Northwoods.GoWeb.GoObject)">
            <summary>
            Display the appropriate selected appearance, normally resize selection handles
            at each point of the stroke.
            </summary>
            <param name="sel"></param>
            <param name="selectedObj"></param>
            <remarks>
            If <see cref="P:Northwoods.GoWeb.GoStroke.HighlightWhenSelected"/> is true, we just set <see cref="P:Northwoods.GoWeb.GoStroke.Highlight"/>
            to true.
            Otherwise, if this stroke is resizable and reshapable, we add resize selection
            handles at each stroke point, with handle IDs equal to <see cref="F:Northwoods.GoWeb.GoObject.LastHandle"/>
            plus the index of the point.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoStroke.RemoveSelectionHandles(Northwoods.GoWeb.GoSelection)">
            <summary>
            Besides removing all selection handles, we also turn off any highlighting
            if <see cref="P:Northwoods.GoWeb.GoStroke.HighlightWhenSelected"/> is true.
            </summary>
            <param name="sel"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoStroke.OnBoundsChanged(System.Drawing.RectangleF)">
            <summary>
            Changing the bounds of a stroke may change all of the stroke's points.
            </summary>
            <param name="old">the earlier bounds, a <c>RectangleF</c> in document coordinates</param>
            <remarks>
            All of the points are modified to reflect the translation and
            scaling of the new bounding rectangle from the old one.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoStroke.ComputeBounds">
            <summary>
            The bounding rectangle of a stroke is computed as the smallest
            rectangle that includes all of the stroke's points.
            </summary>
            <returns></returns>
            <remarks>
            If there are only zero or one points, the size will be zero.
            The computed bounds for Bezier strokes are not necessarily the closest fitting,
            and do not include any arrowheads.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoStroke.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.GoWeb.GoView)">
            <summary>
            Consider Pen width, miter limit, drop shadow and highlight in computing the paint bounds.
            </summary>
            <param name="rect"></param>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoStroke.ContainsPoint(System.Drawing.PointF)">
            <summary>
            A point is in a stroke only if it is near one of its segments.
            </summary>
            <param name="p"></param>
            <returns></returns>
            <remarks>
            This just calls <see cref="M:Northwoods.GoWeb.GoStroke.GetSegmentNearPoint(System.Drawing.PointF)"/> to see if the
            point <paramref name="p"/> is near a segment.
            This is sensitive to the <see cref="P:Northwoods.GoWeb.GoStroke.PickMargin"/> value.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoStroke.GetSegmentNearPoint(System.Drawing.PointF)">
            <summary>
            Return the index of the first point of a segment of this stroke
            that is close to a given point.
            </summary>
            <param name="pnt">A <c>PointF</c> in document coordinates</param>
            <returns>
            The zero-based index of the first point of a segment,
            or <c>-1</c> if no segment is near <paramref name="pnt"/>.
            </returns>
            <remarks>
            This is sensitive to the <see cref="P:Northwoods.GoWeb.GoStroke.PickMargin"/> value.
            For Bezier style strokes, this returns the index of the first of
            each set of points, e.g. 0, 3, 7, ....
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoStroke.GetNearestIntersectionPoint(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)">
            <summary>
            The closest intersection point of a stroke with a line is the
            closest such point for each of its segments.
            </summary>
            <param name="p1">
            the point we are looking to be closest to, on the line formed with <paramref name="p2"/>
            </param>
            <param name="p2">
            forms a line with <paramref name="p1"/>
            </param>
            <param name="result">
            the point of this object that is closest to <paramref name="p1"/> and that is on
            the infinite line from <paramref name="p1"/> to <paramref name="p2"/>
            </param>
            <returns>
            true if the infinite line does intersect with this object; false otherwise
            </returns>
            <remarks>
            This currently does not take into account any Pen width.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoStroke.NearestPointOnLine(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)">
            <summary>
            Return a point on a straight line segment that is closest to a given point.
            </summary>
            <param name="a">One end of the line.</param>
            <param name="b">The other end of the line.</param>
            <param name="p">The point to be closest to.</param>
            <param name="result">
            A <c>PointF</c> that is on the finite length straight line segment from
            <paramref name="a"/> to <paramref name="b"/>
            </param>
            <returns>
            true if the point <paramref name="p"/> is on a perpendicular line to the line segment;
            false if the point <paramref name="p"/> is beyond either end of the line segment.
            When this returns false, the <paramref name="result"/> will be either
            <paramref name="a"/> or <paramref name="b"/>.
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoStroke.NearestIntersectionOnLine(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)">
            <summary>
            Find the intersection point of the finite line segment A-B and the infinite line P-Q
            that is closest to point P.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="p"></param>
            <param name="q"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoStroke.GetAngle(System.Single,System.Single)">
            <summary>
            Return the angle of the line going from the origin to a point.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>
            an angle in degrees, with <c>0</c> along the positive X axis, and
            with <c>90.0</c> along the positive Y axis.
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoStroke.GetArrowheadPointsCount(System.Boolean)">
            <summary>
            Gets the number of points to be used in the polygon representing an arrowhead.
            </summary>
            <param name="atEnd">true for the "To" end, false for the "From" end</param>
            <returns>
            By default this returns 4.  The value must be at least 3.
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoStroke.CalculateArrowhead(System.Drawing.PointF,System.Drawing.PointF,System.Boolean,System.Drawing.PointF[])">
            <summary>
            Modify an array of points to hold the four points of a polygon outlining an arrowhead
            </summary>
            <param name="anchor">The arrowhead anchor position, giving the spot the arrow is coming from</param>
            <param name="endPoint">The arrowhead end point</param>
            <param name="atEnd">true if for the "To" end, false if for the "From" end</param>
            <param name="poly">An array of <c>PointF</c> of at least length four to hold the results</param>
            <remarks>
            <para>
            By default the four points are as follows:
            <list type="bullet">
            <item> [0] the inner point on the shaft, arrow shaft length from the end point </item>
            <item> [1] and [3] the barbs of the arrowhead, arrow width apart </item>
            <item> [2] the tip of the arrowhead, at the end point </item>
            </list>
            If necessary, the length of the arrowhead is actually scaled down to
            fit in the distance between the <paramref name="anchor"/> and the
            <paramref name="endPoint"/>.
            </para>
            <para>
            This method is normally called by <see cref="M:Northwoods.GoWeb.GoStroke.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)"/> to produce a point array to
            be passed to <see cref="M:Northwoods.GoWeb.GoStroke.DrawArrowhead(System.Drawing.Graphics,Northwoods.GoWeb.GoView,System.Drawing.Pen,System.Drawing.Brush,System.Boolean,System.Single,System.Single,System.Drawing.PointF[])"/> in the following fashion:
            <code>
              if (this.ToArrow &amp;&amp; this.PointsCount &gt;= 2) {
                PointF[] toPoly = new PointF[GetArrowheadPointsCount(true)];
                PointF anchor = this.ToArrowAnchorPoint;
                PointF end = this.ToArrowEndPoint;
                CalculateArrowhead(anchor, end, true, toPoly);
                ... now use the toPoly array ...
              }
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoStroke.DrawArrowhead(System.Drawing.Graphics,Northwoods.GoWeb.GoView,System.Drawing.Pen,System.Drawing.Brush,System.Boolean,System.Single,System.Single,System.Drawing.PointF[])">
            <summary>
            This method is called by <see cref="M:Northwoods.GoWeb.GoStroke.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)"/> to actually draw an arrowhead.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <param name="pen"></param>
            <param name="brush"></param>
            <param name="atEnd">true if for the "To" end, false if for the "From" end</param>
            <param name="offsetw">the offset is normally used for drawing a shadow</param>
            <param name="offseth">the offset is normally used for drawing a shadow</param>
            <param name="poly">The result of a call to <see cref="M:Northwoods.GoWeb.GoStroke.CalculateArrowhead(System.Drawing.PointF,System.Drawing.PointF,System.Boolean,System.Drawing.PointF[])"/></param>
            <remarks>
            By default this will be called with a thin, solid pen derived from
            <see cref="P:Northwoods.GoWeb.GoShape.Pen"/> and this stroke's <see cref="P:Northwoods.GoWeb.GoShape.Brush"/>.
            When the arrowhead style is <see cref="F:Northwoods.GoWeb.GoStrokeArrowheadStyle.Circle"/>, the
            polygon's [0] and [2] points are used to position the circle.
            When the arrowhead style is one of the "crossed" styles, the
            polygon's [1] and [3] points are used as the points for the crossing line.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoStroke.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)">
            <summary>
            A stroke is drawn as a sequence of straight line segments or
            Bezier curves, with optional arrows at the ends.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <remarks>
            The kind of stroke is specified by <see cref="P:Northwoods.GoWeb.GoStroke.Style"/>, and the
            parameters of the stroke's segments are specified by the stroke's
            points.
            Each segment uses the points it needs until there are not enough
            more for an additional segment.
            If <see cref="P:Northwoods.GoWeb.GoObject.Shadowed"/> is true, the stroke is drawn
            with the <see cref="M:Northwoods.GoWeb.GoObject.GetShadowPen(Northwoods.GoWeb.GoView,System.Single)"/> at a offset given by
            <see cref="M:Northwoods.GoWeb.GoObject.GetShadowOffset(Northwoods.GoWeb.GoView)"/>.
            If <see cref="P:Northwoods.GoWeb.GoStroke.HighlightPen"/> is non-null, that pen is used to
            drawn the stroke first.
            Finally <see cref="P:Northwoods.GoWeb.GoShape.Pen"/> is used to draw the stroke.
            If <see cref="P:Northwoods.GoWeb.GoStroke.FromArrow"/> or <see cref="P:Northwoods.GoWeb.GoStroke.ToArrow"/> are true,
            the corresponding arrowheads are drawn according to the values
            of the ArrowAnchorPoint, ArrowLength, ArrowShaftLength,
            ArrowWidth, and ArrowFilled.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoStroke.MakePath">
            <summary>
            Returns a <c>GraphicsPath</c> representation of what will be drawn.
            </summary>
            <returns></returns>
            <remarks>The path will not include the arrowheads.</remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoStroke.CopyOldValueForUndo(Northwoods.GoWeb.GoChangedEventArgs)">
            <summary>
            Copies state to permit an undo.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoObject.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoStroke.CopyNewValueForRedo(Northwoods.GoWeb.GoChangedEventArgs)">
            <summary>
            Copies state to permit a redo.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoObject.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoStroke.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Performs changes for undo and redo.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoObject.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoStroke.Style">
            <summary>
            Gets or sets the kind of curve drawn using this stroke's points.
            </summary>
            <value>
            The initial value is <see cref="F:Northwoods.GoWeb.GoStrokeStyle.Line"/>
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoStroke.PointsCount">
            <summary>
            Gets the number of points in this stroke.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoStroke.GetPoint(System.Int32)"/>.
            <seealso cref="M:Northwoods.GoWeb.GoStroke.SetPoint(System.Int32,System.Drawing.PointF)"/>.
            <seealso cref="M:Northwoods.GoWeb.GoStroke.AddPoint(System.Drawing.PointF)"/>.
            <seealso cref="M:Northwoods.GoWeb.GoStroke.InsertPoint(System.Int32,System.Drawing.PointF)"/>.
            <seealso cref="M:Northwoods.GoWeb.GoStroke.RemovePoint(System.Int32)"/>.
        </member>
        <member name="P:Northwoods.GoWeb.GoStroke.FirstPickIndex">
            <summary>
            Gets the index of the first point that should get a selection handle.
            </summary>
            <remarks>
            This normally returns <c>0</c>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.LastPickIndex"/>
            <seealso cref="M:Northwoods.GoWeb.GoStroke.AddSelectionHandles(Northwoods.GoWeb.GoSelection,Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoStroke.LastPickIndex">
            <summary>
            Gets the index of the last point that should get a selection handle.
            </summary>
            <remarks>
            This normally returns <c>PointsCount-1</c>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FirstPickIndex"/>
            <seealso cref="M:Northwoods.GoWeb.GoStroke.AddSelectionHandles(Northwoods.GoWeb.GoSelection,Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoStroke.PickMargin">
            <summary>
            Gets the approximate width of the region across the stroke,
            in addition to the pen width,
            that is still considered "inside" the stroke when picking.
            </summary>
            <value>This value defaults to 3, and should be non-negative.</value>
            <remarks>
            This allows users to pick thin links more easily.
            You can override this property in order to have it return a different value.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoStroke.ToArrow">
            <summary>
            Gets or sets whether an arrow is drawn at the end of this stroke.
            </summary>
            <value>
            The default value is false.
            </value>
            <remarks>
            The arrow will be located near the last point of the stroke.
            By default this will be an arrowhead drawn pointing out
            with a thin pen and filled with the stroke's <see cref="T:System.Drawing.Brush"/>,
            which defaults to <c>Brushes.Black</c>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowStyle"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowEndPoint"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowAnchorPoint"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowLength"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowShaftLength"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowWidth"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowFilled"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrow"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoStroke.ToArrowStyle">
            <summary>
            Gets or sets the general shape of an arrowhead at the end of this stroke.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoWeb.GoStrokeArrowheadStyle.Polygon"/>.
            </value>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowStyle"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoStroke.ToArrowEndPoint">
            <summary>
            Gets the point at the tip of the arrowhead at the end of this stroke.
            </summary>
            <value>
            The default value is the last point of this stroke.
            </value>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrow"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowStyle"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowAnchorPoint"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowLength"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowShaftLength"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowWidth"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowFilled"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoStroke.ToArrowAnchorPoint">
            <summary>
            Gets a point which specifies the direction the arrow is coming from.
            </summary>
            <value>
            The default value is the next-to-last point of this stroke.
            </value>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrow"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowStyle"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowEndPoint"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowLength"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowShaftLength"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowWidth"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowFilled"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoStroke.ToArrowLength">
            <summary>
            Gets or sets the length of the arrowhead at the end of this stroke.
            </summary>
            <value>
            The default value is <c>10</c>.
            A negative value will produce an arrowhead that points inward instead of outward.
            </value>
            <remarks>
            The length is the distance measured along the shaft of the two "barbs" of
            the arrowhead from the end point.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrow"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowStyle"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowEndPoint"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowAnchorPoint"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowShaftLength"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowWidth"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowFilled"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoStroke.ToArrowShaftLength">
            <summary>
            Gets or sets the length of the shaft of the arrowhead at the end of this stroke.
            </summary>
            <value>
            The default value is <c>8</c>.
            A negative value, along with a negative value for the arrow length, will produce an
            arrowhead that points inward instead of outward.
            </value>
            <remarks>
            The shaft length is the length of the arrowhead on the shaft.
            You can make the arrowhead diamond shaped by having the shaft length twice the
            arrow length.
            A shaft length of zero will result in an arrowhead with no interior to fill with
            the <see cref="T:System.Drawing.Brush"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrow"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowStyle"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowEndPoint"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowAnchorPoint"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowLength"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowWidth"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowFilled"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoStroke.ToArrowWidth">
            <summary>
            Gets or sets the maximum width of the arrowhead at the end of this stroke.
            </summary>
            <value>
            The value is measured in document coordinates and must be non-negative.
            The default value is <c>8</c>.
            </value>
            <remarks>
            Smaller values make the arrowhead sharper.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrow"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowStyle"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowEndPoint"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowAnchorPoint"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowLength"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowShaftLength"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowFilled"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoStroke.ToArrowFilled">
            <summary>
            Gets or sets whether the arrowhead at the end of this stroke is filled with
            the brush.
            </summary>
            <value>
            The default value is true.
            </value>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrow"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowStyle"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowEndPoint"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowAnchorPoint"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowLength"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowShaftLength"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowWidth"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoStroke.FromArrow">
            <summary>
            Gets or sets whether an arrow is drawn at the start of this stroke.
            </summary>
            <value>
            The default value is false.
            </value>
            <remarks>
            The arrow will be located near the first point of the stroke.
            By default this will be an arrowhead drawn pointing out
            with a thin pen and filled with the stroke's <see cref="T:System.Drawing.Brush"/>,
            which defaults to <c>Brushes.Black</c>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowStyle"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowEndPoint"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowAnchorPoint"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowLength"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowShaftLength"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoStroke.FromArrowStyle">
            <summary>
            Gets or sets the general shape of an arrowhead at the start of this stroke.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoWeb.GoStrokeArrowheadStyle.Polygon"/>.
            </value>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.ToArrowStyle"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoStroke.FromArrowEndPoint">
            <summary>
            Gets the point at the tip of the arrowhead at the start of this stroke.
            </summary>
            <value>
            The default value is the last point of this stroke.
            </value>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrow"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowStyle"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowAnchorPoint"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowLength"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowShaftLength"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowWidth"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowFilled"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoStroke.FromArrowAnchorPoint">
            <summary>
            Gets a point which specifies the direction the arrow is coming from.
            </summary>
            <value>
            The default value is the second point of this stroke.
            </value>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrow"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowStyle"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowEndPoint"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowLength"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowShaftLength"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowWidth"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowFilled"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoStroke.FromArrowLength">
            <summary>
            Gets or sets the length of the arrowhead at the start of this stroke.
            </summary>
            <value>
            The default value is <c>10</c>.
            A negative value will produce an arrowhead that points inward instead of outward.
            </value>
            <remarks>
            The length is the distance measured along the shaft of the two "barbs" of
            the arrowhead from the end point.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrow"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowStyle"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowEndPoint"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowAnchorPoint"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowShaftLength"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowWidth"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowFilled"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoStroke.FromArrowShaftLength">
            <summary>
            Gets or sets the length of the shaft of the arrowhead at the start of this stroke.
            </summary>
            <value>
            The default value is <c>8</c>.
            A negative value, along with a negative value for the arrow length, will produce an
            arrowhead that points inward instead of outward.
            </value>
            <remarks>
            The shaft length is the length of the arrowhead on the shaft.
            You can make the arrowhead diamond shaped by having the shaft length twice the
            arrow length.
            A shaft length of zero will result in an arrowhead with no interior to fill with
            the <see cref="T:System.Drawing.Brush"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrow"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowStyle"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowEndPoint"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowAnchorPoint"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowLength"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowWidth"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowFilled"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoStroke.FromArrowWidth">
            <summary>
            Gets or sets the maximum width of the arrowhead at the start of this stroke.
            </summary>
            <value>
            The value is measured in document coordinates and must be non-negative.
            The default value is <c>8</c>.
            </value>
            <remarks>
            Smaller values make the arrowhead sharper.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrow"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowStyle"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowEndPoint"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowAnchorPoint"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowLength"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowShaftLength"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowFilled"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoStroke.FromArrowFilled">
            <summary>
            Gets or sets whether the arrowhead at the start of this stroke is filled with
            the brush.
            </summary>
            <value>
            The default value is true.
            </value>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrow"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowStyle"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowEndPoint"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowAnchorPoint"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowLength"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowShaftLength"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.FromArrowWidth"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoStroke.HighlightPenWidth">
            <summary>
            Gets or sets the width of the line drawn as the highlight for the stroke.
            </summary>
            <value>
            The value must be non-negative.
            The default value is 0, meaning a one-pixel wide line at any scale.
            Values other than zero cause slower drawing, particularly in GoDiagram Pocket.
            </value>
            <remarks>
            If there is no <see cref="T:System.Drawing.Pen"/>, setting this property might have no effect.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoShape.PenWidth"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoStroke.HighlightPenColor">
            <summary>
            Gets or sets the color of the <see cref="P:Northwoods.GoWeb.GoStroke.HighlightPen"/>.
            </summary>
            <value>
            The <b>Color</b> of the <see cref="P:Northwoods.GoWeb.GoStroke.HighlightPen"/>, or <b>Color.Empty</b> if there is no pen.
            Setting the new value to <b>Color.Empty</b> will set the <see cref="T:System.Drawing.Pen"/> to null.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoStroke.Curviness">
            <summary>
            Gets how rounded the corners are for adjacent line segments when the
            stroke style is <see cref="F:Northwoods.GoWeb.GoStrokeStyle.RoundedLine"/>.
            </summary>
            <value>
            This describes the maximum radius of rounded corners, in document coordinates.
            This also is used to determine the offset distance for the control points of
            a <see cref="F:Northwoods.GoWeb.GoStrokeStyle.Bezier"/> style link when connecting two ports
            whose spots are both <see cref="F:Northwoods.GoWeb.GoObject.NoSpot"/>.
            This defaults to 10.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoStroke.Highlight">
            <summary>
            Gets or sets whether this stroke displays a highlight along its path.
            </summary>
            <value>
            This defaults to false.
            </value>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.HighlightPen"/>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.HighlightWhenSelected"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoStroke.HighlightPen">
            <summary>
            Gets or sets the pen used to draw a highlight for this stroke.
            </summary>
            <value>
            This property defaults to null.
            </value>
            <remarks>
            You must not modify the pen after you have assigned it.
            Setting <see cref="P:Northwoods.GoWeb.GoStroke.Highlight"/> to true will not result in a visible
            markup until you specify a <c>Pen</c> for this property.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoStroke.HighlightWhenSelected"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoStroke.HighlightWhenSelected">
            <summary>
            Gets or sets whether the highlight is shown when this stroke becomes selected.
            </summary>
            <value>
            This defaults to false.
            </value>
            <remarks>
            When this property is true and this stroke is selected, we set the
            <see cref="P:Northwoods.GoWeb.GoStroke.Highlight"/> property to true.  Assuming there is a value for
            <see cref="P:Northwoods.GoWeb.GoStroke.HighlightPen"/>, the stroke will appear highlit.  When the stroke
            is no longer selected, the <see cref="P:Northwoods.GoWeb.GoStroke.Highlight"/> property is set to false.
            Under these circumstances the change to the <see cref="P:Northwoods.GoWeb.GoStroke.Highlight"/> property
            is not recorded by the undo manager (if any).
            This feature should only be used when there is only one view on the document, or
            if it is OK for all views on the document to display the highlight when the
            stroke is selected in just one of the views.
            </remarks>
        </member>
        <member name="T:Northwoods.GoWeb.GoTextEditorStyle">
            <summary>
            Supported ways of editing text.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoTextEditorStyle.TextBox">
            <summary>
            Use a TextBox Control.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoTextEditorStyle.NumericUpDown">
            <summary>
            Use a NumericUpDown Control for editing integers.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoTextEditorStyle.ComboBox">
            <summary>
            Use a ComboBox Control, to present predefined choices.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoText">
            <summary>
            An object that displays a text string.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoText.ChangedText">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoText.Text"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoText.ChangedFamilyName">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoText.FamilyName"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoText.ChangedFontSize">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoText.FontSize"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoText.ChangedAlignment">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoText.Alignment"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoText.ChangedTextColor">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoText.TextColor"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoText.ChangedBackgroundColor">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoText.BackgroundColor"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoText.ChangedTransparentBackground">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoText.TransparentBackground"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoText.ChangedBold">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoText.Bold"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoText.ChangedItalic">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoText.Italic"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoText.ChangedUnderline">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoText.Underline"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoText.ChangedStrikeThrough">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoText.StrikeThrough"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoText.ChangedMultiline">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoText.Multiline"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoText.ChangedBackgroundOpaqueWhenSelected">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoText.BackgroundOpaqueWhenSelected"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoText.ChangedClipping">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoText.Clipping"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoText.ChangedAutoResizes">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoText.AutoResizes"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoText.ChangedWrapping">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoText.Wrapping"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoText.ChangedWrappingWidth">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoText.WrappingWidth"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoText.ChangedGdiCharSet">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoText.GdiCharSet"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoText.ChangedEditorStyle">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoText.EditorStyle"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoText.ChangedMinimum">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoText.Minimum"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoText.ChangedMaximum">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoText.Maximum"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoText.ChangedDropDownList">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoText.DropDownList"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoText.ChangedChoices">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoText.Choices"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoText.ChangedRightToLeft">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoText.RightToLeft"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoText.ChangedRightToLeftFromView">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoText.RightToLeftFromView"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoText.ChangedBordered">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoText.Bordered"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoText.ChangedStringTrimming">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoText.StringTrimming"/> property.  [Not supported in GoDiagram Pocket]
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoText.ChangedEditableWhenSelected">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoText.EditableWhenSelected"/> property.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoText.#ctor">
            <summary>
            The constructor produces an object that is not resizable by the user
            and does not automatically rescale the font size when the size is changed.
            However, it does automatically change the size to fit the text when the
            text is changed.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoText.PaintGreek(System.Drawing.Graphics,Northwoods.GoWeb.GoView)">
            <summary>
            This method is responsible for alternative painting when the
            scale is small.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <returns>
            True if this method handled the Paint request; false if it did
            not and the regular painting should take place.
            </returns>
            <remarks>
            This paints nothing if the <paramref name="view"/>'s
            <see cref="P:Northwoods.GoWeb.GoView.DocScale"/> is less than the
            <see cref="P:Northwoods.GoWeb.GoView.PaintNothingScale"/>.
            It just draws a line if the scale is less than the
            <see cref="P:Northwoods.GoWeb.GoView.PaintGreekScale"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoText.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)">
            <summary>
            Draw a text string according to the attributes specified by this object's properties.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <remarks>
            If <see cref="P:Northwoods.GoWeb.GoText.TransparentBackground"/> is false, we fill the bounds with the
            <see cref="P:Northwoods.GoWeb.GoText.BackgroundColor"/>, and we paint a rectangular drop shadow if
            <see cref="P:Northwoods.GoWeb.GoObject.Shadowed"/>.
            If <see cref="P:Northwoods.GoWeb.GoText.TransparentBackground"/> is true, we draw the text (offset) using the shadow
            pen if <see cref="P:Northwoods.GoWeb.GoObject.Shadowed"/> is true.  Then we draw the text using the
            <see cref="P:Northwoods.GoWeb.GoText.TextColor"/>.
            The value of <see cref="P:Northwoods.GoWeb.GoText.Alignment"/> and either <see cref="P:Northwoods.GoWeb.GoText.RightToLeft"/> or
            <c>GoView.RightToLeft</c> determine the actual alignment of the text.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoText.SetSizeKeepingLocation(System.Drawing.SizeF)">
            <summary>
            This method can be called to change the size of this object without
            changing its location.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoText.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.GoWeb.GoView)">
            <summary>
            Consider any shadow when calculating the paint bounds.
            </summary>
            <param name="rect"></param>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoText.AddSelectionHandles(Northwoods.GoWeb.GoSelection,Northwoods.GoWeb.GoObject)">
            <summary>
            Implement a custom selection indicator if BackgroundOpaqueWhenSelected is true.
            </summary>
            <param name="sel"></param>
            <param name="selectedObj"></param>
            <remarks>
            When <see cref="P:Northwoods.GoWeb.GoText.BackgroundOpaqueWhenSelected"/> is true, selecting this object
            will cause the background to be shown; unselecting will make the
            background transparent again.
            This produces the effect of highlighting the text when selected,
            if the text normally has a transparent background and the
            <see cref="P:Northwoods.GoWeb.GoText.BackgroundColor"/> is a suitable highlight color.
            Changes to the <see cref="P:Northwoods.GoWeb.GoText.TransparentBackground"/> property are not recorded
            by the <see cref="T:Northwoods.GoWeb.GoUndoManager"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoText.RemoveSelectionHandles(Northwoods.GoWeb.GoSelection)">
            <summary>
            Implement a custom selection indicator if BackgroundOpaqueWhenSelected is true.
            </summary>
            <param name="sel"></param>
            <seealso cref="M:Northwoods.GoWeb.GoText.AddSelectionHandles(Northwoods.GoWeb.GoSelection,Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoText.OnBoundsChanged(System.Drawing.RectangleF)">
            <summary>
            Handle any change in size.
            </summary>
            <param name="old"></param>
            <remarks>
            If <see cref="P:Northwoods.GoWeb.GoObject.AutoRescales"/> is true, we rescale the font size
            so that the text fits in this object's bounds.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoText.OnLayerChanged(Northwoods.GoWeb.GoLayer,Northwoods.GoWeb.GoLayer,Northwoods.GoWeb.GoObject)">
            <summary>
            Handle any change in layers.
            </summary>
            <param name="oldlayer"></param>
            <param name="newlayer"></param>
            <param name="mainObj"></param>
            <remarks>
            If the layer changes, make sure we are no longer editing the text.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoText.OnSingleClick(Northwoods.GoWeb.GoInputEventArgs,Northwoods.GoWeb.GoView)">
            <summary>
            Start editing this text object on a single click if this object is editable.
            </summary>
            <param name="evt"></param>
            <param name="view"></param>
            <returns>
            True if it started editing; false if it could not.
            </returns>
            <remarks>
            To be able to call <see cref="M:Northwoods.GoWeb.GoObject.DoBeginEdit(Northwoods.GoWeb.GoView)"/>, both <see cref="M:Northwoods.GoWeb.GoObject.CanEdit"/>
            and the <paramref name="view"/>'s <see cref="M:Northwoods.GoWeb.GoView.CanEditObjects"/>
            property must both be true.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoText.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Performs changes for undo and redo.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoObject.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoText.Text">
            <summary>
            Gets or sets the string that this text object displays.
            </summary>
            <value>
            This defaults to the empty string.
            Setting this property to a null/nothing value will result
            in using an empty string instead.
            If <see cref="P:Northwoods.GoWeb.GoText.AutoResizes"/> is true, setting this property will resize
            this object to fit the text;
            otherwise if <see cref="P:Northwoods.GoWeb.GoObject.AutoRescales"/> is true, setting this property
            will change the font size so that the text fits the bounds.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoText.FamilyName">
            <summary>
            Gets or sets the font family face name.
            </summary>
            <value>
            Initially this is the value of <see cref="P:Northwoods.GoWeb.GoText.DefaultFontFamilyName"/>.
            Setting this value to null will result in the use of that default.
            If <see cref="P:Northwoods.GoWeb.GoText.AutoResizes"/> is true, setting this property will resize
            this object to fit the text;
            otherwise if <see cref="P:Northwoods.GoWeb.GoObject.AutoRescales"/> is true, setting this property
            will change the font size so that the text fits the bounds.
            </value>
            <seealso cref="P:Northwoods.GoWeb.GoText.FontSize"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoText.FontSize">
            <summary>
            Gets or sets the font size.
            </summary>
            <value>
            This value is in units of text points.
            Initially this is the value of <see cref="P:Northwoods.GoWeb.GoText.DefaultFontSize"/>.
            </value>
            <remarks>
            Setting this property when <see cref="P:Northwoods.GoWeb.GoText.AutoResizes"/> is true
            will cause this object's bounds to be updated to fit the text.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoText.FamilyName"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoText.Alignment">
            <summary>
            Gets or sets how the text is aligned.
            </summary>
            <value>
            This defaults to <see cref="F:Northwoods.GoWeb.GoObject.TopLeft"/>; you can use any of the predefined
            <see cref="T:Northwoods.GoWeb.GoObject"/> spot values.
            </value>
            <remarks>
            This property governs how each line of text is positioned in the bounding rectangle.
            In addition this property specifies the <see cref="P:Northwoods.GoWeb.GoText.Location"/> for this object.
            The value of this property is not changed by the value of <see cref="P:Northwoods.GoWeb.GoText.RightToLeft"/>
            or <c>Control.RightToLeft</c> for any <see cref="T:Northwoods.GoWeb.GoView"/>.
            However, the <c>GoView.RightToLeft</c> or <see cref="P:Northwoods.GoWeb.GoText.RightToLeft"/> property
            does affect where the text is drawn for that view.  When <c>GoView.RightToLeft</c>
            property value is <c>RightToLeft.Yes</c>, or when <see cref="P:Northwoods.GoWeb.GoText.RightToLeftFromView"/>
            is false and <see cref="P:Northwoods.GoWeb.GoText.RightToLeft"/> is true,
            then text whose <see cref="P:Northwoods.GoWeb.GoText.Alignment"/> is on the left (such as
            <see cref="F:Northwoods.GoWeb.GoObject.TopLeft"/>) will actually be drawn right-aligned.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoText.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
            <value>
            This defaults to <c>Color.Black</c>.
            </value>
            <seealso cref="P:Northwoods.GoWeb.GoText.BackgroundColor"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoText.BackgroundColor">
            <summary>
            Gets or sets the background color for this text object, shown when <see cref="P:Northwoods.GoWeb.GoText.TransparentBackground"/> is false.
            </summary>
            <value>
            This defaults to <c>Color.White</c>.
            </value>
            <remarks>
            The background is not painted if <see cref="P:Northwoods.GoWeb.GoText.TransparentBackground"/> is true.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoText.TextColor"/>
            <seealso cref="P:Northwoods.GoWeb.GoText.BackgroundOpaqueWhenSelected"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoText.TransparentBackground">
            <summary>
            Gets or sets whether the background color is painted.
            </summary>
            <value>
            This defaults to true--the background color is not painted, and only
            the characters are displayed.
            </value>
            <seealso cref="P:Northwoods.GoWeb.GoText.BackgroundColor"/>
            <seealso cref="P:Northwoods.GoWeb.GoText.BackgroundOpaqueWhenSelected"/>
            <seealso cref="P:Northwoods.GoWeb.GoText.TextColor"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoText.Bold">
            <summary>
            Gets or sets whether the font style is bold.
            </summary>
            <value>
            This defaults to false.
            </value>
            <remarks>
            If <see cref="P:Northwoods.GoWeb.GoText.AutoResizes"/> is true, setting this property will resize
            this object to fit the text;
            otherwise if <see cref="P:Northwoods.GoWeb.GoObject.AutoRescales"/> is true, setting this property
            will change the font size so that the text fits the bounds.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoText.Italic"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoText.Italic">
            <summary>
            Gets or sets whether the font style is italic.
            </summary>
            <value>
            This defaults to false.
            </value>
            <remarks>
            If <see cref="P:Northwoods.GoWeb.GoText.AutoResizes"/> is true, setting this property will resize
            this object to fit the text;
            otherwise if <see cref="P:Northwoods.GoWeb.GoObject.AutoRescales"/> is true, setting this property
            will change the font size so that the text fits the bounds.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoText.Bold"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoText.Underline">
            <summary>
            Gets or sets whether the font style includes underline.
            </summary>
            <value>
            This defaults to false.
            </value>
            <remarks>
            If <see cref="P:Northwoods.GoWeb.GoText.AutoResizes"/> is true, setting this property will resize
            this object to fit the text;
            otherwise if <see cref="P:Northwoods.GoWeb.GoObject.AutoRescales"/> is true, setting this property
            will change the font size so that the text fits the bounds.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoText.StrikeThrough"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoText.StrikeThrough">
            <summary>
            Gets or sets whether the font style includes strike-through.
            </summary>
            <value>
            This defaults to false.
            </value>
            <remarks>
            If <see cref="P:Northwoods.GoWeb.GoText.AutoResizes"/> is true, setting this property will resize
            this object to fit the text;
            otherwise if <see cref="P:Northwoods.GoWeb.GoObject.AutoRescales"/> is true, setting this property
            will change the font size so that the text fits the bounds.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoText.Underline"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoText.Bordered">
            <summary>
            Gets or sets whether a simple border is drawn around the text.
            </summary>
            <value>the default value is false, indicating no border</value>
            <remarks>
            The line drawn around the text is drawn using a solid Pen whose color
            is <see cref="P:Northwoods.GoWeb.GoText.TextColor"/>.  If you need more complex borders, wider
            margins around the text, or other visual effects, you will need to
            override <see cref="M:Northwoods.GoWeb.GoText.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)"/> or compose different objects using a <see cref="T:Northwoods.GoWeb.GoGroup"/>.
            Note that the <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/> of this object are not changed by
            setting this property.
            However, this property does affect the result of <see cref="M:Northwoods.GoWeb.GoText.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.GoWeb.GoView)"/>,
            just as the <see cref="P:Northwoods.GoWeb.GoObject.Shadowed"/> property also affects that method.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoText.GdiCharSet">
            <summary>
            Gets or sets the GDI character set used for the text.
            </summary>
            <value>
            The default value is 1, the default character set.
            </value>
            <remarks>
            If <see cref="P:Northwoods.GoWeb.GoText.AutoResizes"/> is true, setting this property will resize
            this object to fit the text;
            otherwise if <see cref="P:Northwoods.GoWeb.GoObject.AutoRescales"/> is true, setting this property
            will change the font size so that the text fits the bounds.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoText.RightToLeft">
            <summary>
            Gets or sets whether this text should be drawn from right to left,
            when the <see cref="P:Northwoods.GoWeb.GoText.RightToLeftFromView"/> property is false.
            </summary>
            <value>
            The default value is false.
            </value>
            <remarks>
            This property is ignored when <see cref="P:Northwoods.GoWeb.GoText.RightToLeftFromView"/> is true.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoText.RightToLeftFromView">
            <summary>
            Gets or sets whether the view's <c>RightToLeft</c> property governs
            how the string is drawn, or whether this text object's <see cref="P:Northwoods.GoWeb.GoText.RightToLeft"/>
            property takes precedence.
            </summary>
            <value>
            This defaults to true, which means the <see cref="T:Northwoods.GoWeb.GoView"/>'s <c>RightToLeft</c>
            property will affect the appearance of the text.
            However, for GoDiagram Web and GoDiagram Pocket, since the ASP.NET Web Forms
            and .NET Compact Framework Controls don't support a <c>RightToLeft</c> property,
            this property is ignored and the value is assumed to be false.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoText.Multiline">
            <summary>
            Gets or sets whether the text is displayed in multiple lines,
            according to any NewLine character sequences in
            the text string.
            </summary>
            <value>
            This defaults to false.
            </value>
            <remarks>
            If this is false, any text after the first NewLine is ignored.
            If <see cref="P:Northwoods.GoWeb.GoText.AutoResizes"/> is true, setting this property will resize
            this object to fit the text;
            otherwise if <see cref="P:Northwoods.GoWeb.GoObject.AutoRescales"/> is true, setting this property
            will change the font size so that the text fits the bounds.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoText.Alignment"/>
            <seealso cref="P:Northwoods.GoWeb.GoText.Wrapping"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoText.BackgroundOpaqueWhenSelected">
            <summary>
            Gets or sets whether the text background is displayed when selected.
            </summary>
            <value>
            This defaults to false.
            </value>
            <remarks>
            When this property is true and this text object is selected, we set the
            <see cref="P:Northwoods.GoWeb.GoText.TransparentBackground"/> property to false.  Assuming there is a suitable
            <see cref="P:Northwoods.GoWeb.GoText.BackgroundColor"/>, the text will appear highlit.  When the text
            object is no longer selected, the <see cref="P:Northwoods.GoWeb.GoText.TransparentBackground"/> property is set to true.
            Under these circumstances the change to the <see cref="P:Northwoods.GoWeb.GoText.TransparentBackground"/> property
            is not recorded by the undo manager (if any).
            Note that setting this property to true will prevent the normal selection handles
            from appearing, so that when <see cref="P:Northwoods.GoWeb.GoObject.Resizable"/> is true there won't be any
            resize handles for the user to manipulate.
            This feature should only be used when there is only one view on the document, or
            if it is OK for all views on the document to display the text highlight when the
            text object is selected in just one of the views.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoText.AddSelectionHandles(Northwoods.GoWeb.GoSelection,Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoText.Clipping">
            <summary>
            Gets or sets whether the text drawing is clipped by this object's bounds.
            </summary>
            <value>
            This defaults to false.
            </value>
            <remarks>
            <remarks>
            <para>
            This is not supported in GoDiagram Pocket.
            </para>
            </remarks>
            You should turn on clipping when <see cref="P:Northwoods.GoWeb.GoText.AutoResizes"/> is false,
            unless you can be sure the text will always fit within the bounds
            of this object.
            You may also wish to set the <c>StringTrimming</c> property,
            for additional control over how the text is truncated or elided.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoText.StringTrimming"/>
            <seealso cref="P:Northwoods.GoWeb.GoText.AutoResizes"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.AutoRescales"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoText.AutoResizes">
            <summary>
            Gets or sets whether the bounds are recalculated when the text changes.
            </summary>
            <value>
            This defaults to true.
            </value>
            <remarks>
            If both this property and <see cref="P:Northwoods.GoWeb.GoObject.AutoRescales"/> are false, and you change
            either the <see cref="P:Northwoods.GoWeb.GoText.Text"/> string or the <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/>,
            you must be careful not to make either the text too big or the bounds too small.
            It is then wise to turn on the <see cref="P:Northwoods.GoWeb.GoText.Clipping"/> property.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoText.Text"/>
            <seealso cref="P:Northwoods.GoWeb.GoText.Clipping"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoText.StringTrimming">
            <summary>
            Gets or sets how characters are removed when <see cref="P:Northwoods.GoWeb.GoText.AutoResizes"/> is false. [Not in GoDiagram Pocket]
            </summary>
            <value>
            The default value is <c>StringTrimming.None</c>.
            </value>
            <remarks>
            If you set this property to a value other than <c>StringTrimming.None</c>,
            you should set <see cref="P:Northwoods.GoWeb.GoText.AutoResizes"/> to false and <see cref="P:Northwoods.GoWeb.GoText.Clipping"/> to true.
            Clipping may be needed even if this value is different than <c>StringTrimming.None</c>.
            If <see cref="P:Northwoods.GoWeb.GoText.Multiline"/> is true, this applies to each virtual line,
            as separated by NewLine character sequences.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoText.Clipping"/>
            <seealso cref="P:Northwoods.GoWeb.GoText.AutoResizes"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoText.Wrapping">
            <summary>
            Gets or sets whether the text is wrapped when the text reaches the wrapping width.
            </summary>
            <value>
            This defaults to false.
            </value>
            <remarks>
            If <see cref="P:Northwoods.GoWeb.GoText.AutoResizes"/> is true, setting this property will resize
            this object to fit the text;
            otherwise if <see cref="P:Northwoods.GoWeb.GoObject.AutoRescales"/> is true, setting this property
            will change the font size so that the text fits the bounds.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoText.WrappingWidth"/>
            <seealso cref="P:Northwoods.GoWeb.GoText.Multiline"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoText.WrappingWidth">
            <summary>
            Gets or sets the width at which text is wrapped.
            </summary>
            <value>
            This distance is in document coordinates.
            This defaults to <c>150</c>.
            The new value must be positive and at least as wide as any single character.
            </value>
            <remarks>
            Text is wrapped to the next line when the <see cref="P:Northwoods.GoWeb.GoText.Wrapping"/> property is true and
            the text gets wider than this value.
            If <see cref="P:Northwoods.GoWeb.GoText.Multiline"/> is true, a NewLine character sequence (Carriage Return/
            LineFeed) forces a line break.
            If <see cref="P:Northwoods.GoWeb.GoText.AutoResizes"/> is true, setting this property will resize
            this object to fit the text;
            otherwise if <see cref="P:Northwoods.GoWeb.GoObject.AutoRescales"/> is true, setting this property
            will change the font size so that the text fits the bounds.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoText.EditorStyle">
            <summary>
            The kind of editor Control used when the user edits the text string in-place.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoText.Minimum">
            <summary>
            When the <see cref="P:Northwoods.GoWeb.GoText.EditorStyle"/> is <see cref="F:Northwoods.GoWeb.GoTextEditorStyle.NumericUpDown"/>,
            this specifies the minimum value.
            </summary>
            <value>
            This defaults to zero.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoText.Maximum">
            <summary>
            When the <see cref="P:Northwoods.GoWeb.GoText.EditorStyle"/> is <see cref="F:Northwoods.GoWeb.GoTextEditorStyle.NumericUpDown"/>,
            this specifies the maximum value.
            </summary>
            <value>
            This defaults to 100.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoText.DropDownList">
            <summary>
            When the <see cref="P:Northwoods.GoWeb.GoText.EditorStyle"/> is <see cref="F:Northwoods.GoWeb.GoTextEditorStyle.ComboBox"/>,
            this controls whether the user must choose from the list of <see cref="P:Northwoods.GoWeb.GoText.Choices"/>,
            or whether the user can type in an arbitrary string.
            </summary>
            <value>
            This defaults to false.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoText.Choices">
            <summary>
            When the <see cref="P:Northwoods.GoWeb.GoText.EditorStyle"/> is <see cref="F:Northwoods.GoWeb.GoTextEditorStyle.ComboBox"/>,
            this holds the list of choices that are presented in the drop down list.
            </summary>
            <value>
            This defaults to an empty list.  The value may be shared by more than
            one <c>GoText</c> object.
            </value>
            <remarks>
            Modifying the items in the list is not controlled.  Any such changes are not
            recorded by the undo manager.  Only replacing the list is recorded for undo/redo,
            and even then, it is only the reference to an <c>ArrayList</c> that is remembered
            and restored.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoText.Font">
            <summary>
            Gets the <c>Font</c> currently being used by this text object.
            </summary>
            <remarks>
            If <see cref="P:Northwoods.GoWeb.GoText.AutoResizes"/> is true, setting this property will resize
            this object to fit the text;
            otherwise if <see cref="P:Northwoods.GoWeb.GoObject.AutoRescales"/> is true, setting this property
            will change the font size so that the text fits the bounds.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoText.LineCount">
            <summary>
            Compute how many lines of text are displayed.
            </summary>
            <value>the number of physical lines of text that are drawn, including
            line breaks caused by newlines and by wrapping, if any</value>
        </member>
        <member name="P:Northwoods.GoWeb.GoText.Location">
            <summary>
            A text object's natural location is determined by its Alignment.
            </summary>
            <remarks>
            The value of this property is not changed by the value of <see cref="P:Northwoods.GoWeb.GoText.RightToLeft"/>
            or <c>Control.RightToLeft</c> for any <see cref="T:Northwoods.GoWeb.GoView"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoText.EditableWhenSelected">
            <summary>
            Gets or sets whether <see cref="M:Northwoods.GoWeb.GoText.OnSingleClick(Northwoods.GoWeb.GoInputEventArgs,Northwoods.GoWeb.GoView)"/> should only start editing
            if this label is part of an object that was already selected before it was clicked.
            </summary>
            <value>The default value is false</value>
            <remarks>
            This property only affects the behavior of <see cref="M:Northwoods.GoWeb.GoText.OnSingleClick(Northwoods.GoWeb.GoInputEventArgs,Northwoods.GoWeb.GoView)"/>,
            and is only effective when <see cref="P:Northwoods.GoWeb.GoObject.Editable"/> is also true.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoText.DefaultFontFamilyName">
            <summary>
            Gets or sets the font family face name used when constructing a <see cref="T:Northwoods.GoWeb.GoText"/> object.
            </summary>
            <value>
            This defaults to "Microsoft Sans Serif".  The value must not be null.
            </value>
            <seealso cref="P:Northwoods.GoWeb.GoText.DefaultFontSize"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoText.DefaultFontSize">
            <summary>
            Gets or sets the font size used when constructing a <see cref="T:Northwoods.GoWeb.GoText"/> object.
            </summary>
            <value>
            This defaults to <c>10</c>.
            </value>
            <seealso cref="P:Northwoods.GoWeb.GoText.DefaultFontFamilyName"/>
        </member>
        <member name="T:Northwoods.GoWeb.GoTrapezoid">
            <summary>
            A four-sided figure in which two of the sides run parrallel
            and the others do not.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoTrapezoid.ChangedPointA">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoTrapezoid.A"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoTrapezoid.ChangedPointB">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoTrapezoid.B"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoTrapezoid.ChangedPointC">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoTrapezoid.C"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoTrapezoid.ChangedPointD">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoTrapezoid.D"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoTrapezoid.ChangedAllPoints">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoTrapezoid.ChangedMultiplePoints">
            <summary>
            This <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint is a synonym for <see cref="F:Northwoods.GoWeb.GoTrapezoid.ChangedAllPoints"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoTrapezoid.ChangedOrientation">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoTrapezoid.Orientation"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoTrapezoid.PointAHandleID">
            <summary>
            A special handle ID for a handle at Point A.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoTrapezoid.PointBHandleID">
            <summary>
            A special handle ID for a handle at Point B.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoTrapezoid.PointCHandleID">
            <summary>
            A special handle ID for a handle at Point C.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoTrapezoid.PointDHandleID">
            <summary>
            A special handle ID for a handle at Point D.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoTrapezoid.#ctor">
            <summary>
            The constructor produces a trapazoid with a standard black <see cref="P:Northwoods.GoWeb.GoShape.Pen"/>
            outline, no <see cref="T:System.Drawing.Brush"/> fill.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoTrapezoid.CopyObject(Northwoods.GoWeb.GoCopyDictionary)">
            <summary>
            Make sure the cloned trapezoid does not share any internal data references with the
            original one.
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoTrapezoid.ComputeBounds">
            <summary>
            Calculate the minimum rectangle that includes all four points.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoTrapezoid.OnBoundsChanged(System.Drawing.RectangleF)">
            <summary>
            When the bounds change, update the points appropriately.
            </summary>
            <param name="old"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoTrapezoid.SetPoints(System.Drawing.PointF[])">
            <summary>
            Reset all of the trapezoid's points.
            </summary>
            <param name="points">an array of <c>PointF</c> of length 4</param>
            <remarks>
            The first element of the array corresponds to point <see cref="P:Northwoods.GoWeb.GoTrapezoid.A"/>,
            the second to point <see cref="P:Northwoods.GoWeb.GoTrapezoid.B"/>, the third to <see cref="P:Northwoods.GoWeb.GoTrapezoid.C"/>,
            and the fourth to <see cref="P:Northwoods.GoWeb.GoTrapezoid.D"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoTrapezoid.ContainsPoint(System.Drawing.PointF)">
            <summary>
            Consider the actual shape of the trapezoid to determine
            if a given point is inside.
            </summary>
            <param name="p"></param>
            <returns></returns>
            <remarks>
            Currently this does not take the pen width into account.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoTrapezoid.GetNearestIntersectionPoint(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)">
            <summary>
            The closest point of a trapezoid that intersects with a given line
            is the closest such point of each of its four line segments.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoTrapezoid.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)">
            <summary>
            Paint a possibly shadowed trapezoid.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoTrapezoid.MakePath">
            <summary>
            Produce a <c>GraphicsPath</c> by adding lines between the points.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoTrapezoid.DoResize(Northwoods.GoWeb.GoView,System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,Northwoods.GoWeb.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            If reshapeable, ensures that the set pair of sides maintains
            their perpecidularity when the figure is altered
            </summary>
            <param name="view"></param>
            <param name="origRect"></param>
            <param name="newPoint"></param>
            <param name="whichHandle"></param>
            <param name="evttype"></param>
            <param name="min"></param>
            <param name="max"></param>
            <remarks>
            When <see cref="P:Northwoods.GoWeb.GoObject.ResizesRealtime"/> is true, this method always sets
            the corresponding point property to <paramref name="newPoint"/>.
            Otherwise it only sets it when the <paramref name="evttype"/>
            is <see cref="F:Northwoods.GoWeb.GoInputState.Finish"/> or <see cref="F:Northwoods.GoWeb.GoInputState.Cancel"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoTrapezoid.ComputeResize(System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,System.Drawing.SizeF,System.Drawing.SizeF,System.Boolean)">
            <summary>
            Calculate a new bounding rectangle for this object.
            </summary>
            <param name="origRect"></param>
            <param name="newPoint"></param>
            <param name="handle"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="reshape"></param>
            <returns>
            A new <c>RectangleF</c> bounding rectangle, in document coordinates.
            </returns>
            <remarks>
            This is normally called from <see cref="M:Northwoods.GoWeb.GoTrapezoid.DoResize(Northwoods.GoWeb.GoView,System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,Northwoods.GoWeb.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoTrapezoid.AddSelectionHandles(Northwoods.GoWeb.GoSelection,Northwoods.GoWeb.GoObject)">
            <summary>
            If Resizable and Reshapable, support individual triangle vertex
            resize handles.
            </summary>
            <param name="sel"></param>
            <param name="selectedObj"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoTrapezoid.CopyOldValueForUndo(Northwoods.GoWeb.GoChangedEventArgs)">
            <summary>
            Copies state to permit an undo.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoObject.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoTrapezoid.CopyNewValueForRedo(Northwoods.GoWeb.GoChangedEventArgs)">
            <summary>
            Copies state to permit a redo.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoObject.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoTrapezoid.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Performs changes for undo and redo.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoObject.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoTrapezoid.Orientation">
            <summary>
            Gets or sets how to draw the trapezoid, based on whether its
            parallel pair of sides run vertically or horizontally.
            </summary>
            <value>
            This defaults to <c>Orientation.Horizontal</c>.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoTrapezoid.A">
            <summary>
            Gets or sets the first of the four trapezoid's points.
            </summary>
            <value>
            The <c>PointF</c> value is in document coordinates.
            The initial value is (0, 0).
            </value>
            <seealso cref="P:Northwoods.GoWeb.GoTrapezoid.B"/>
            <seealso cref="P:Northwoods.GoWeb.GoTrapezoid.C"/>
            <seealso cref="P:Northwoods.GoWeb.GoTrapezoid.D"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoTrapezoid.B">
            <summary>
            Gets or sets the second of the four trapezoid's points.
            </summary>
            <value>
            The <c>PointF</c> value is in document coordinates.
            The initial value is (8, 0).
            </value>
            <seealso cref="P:Northwoods.GoWeb.GoTrapezoid.A"/>
            <seealso cref="P:Northwoods.GoWeb.GoTrapezoid.C"/>
            <seealso cref="P:Northwoods.GoWeb.GoTrapezoid.D"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoTrapezoid.C">
            <summary>
            Gets or sets the third of the four trapezoid's points.
            </summary>
            <value>
            The <c>PointF</c> value is in document coordinates.
            The initial value is (10, 10).
            </value>
            <seealso cref="P:Northwoods.GoWeb.GoTrapezoid.A"/>
            <seealso cref="P:Northwoods.GoWeb.GoTrapezoid.B"/>
            <seealso cref="P:Northwoods.GoWeb.GoTrapezoid.D"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoTrapezoid.D">
            <summary>
            Gets or sets the fourth of the four trapezoid's points;
            </summary>
            <value>
            The <c>PointF</c> value is in document coordinates.
            The initial value is (0, 10).
            </value>
            <seealso cref="P:Northwoods.GoWeb.GoTrapezoid.A"/>
            <seealso cref="P:Northwoods.GoWeb.GoTrapezoid.B"/>
            <seealso cref="P:Northwoods.GoWeb.GoTrapezoid.C"/>
        </member>
        <member name="T:Northwoods.GoWeb.GoTriangle">
            <summary>
            A shape with three straight sides.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoTriangle.ChangedPointA">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoTriangle.A"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoTriangle.ChangedPointB">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoTriangle.B"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoTriangle.ChangedPointC">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoTriangle.C"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoTriangle.ChangedAllPoints">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoTriangle.#ctor">
            <summary>
            The constructor produces a triangle that the user cannot resize in realtime.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoTriangle.CopyObject(Northwoods.GoWeb.GoCopyDictionary)">
            <summary>
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoTriangle.ComputeBounds">
            <summary>
            Calculate the minimum rectangle that includes all three points.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoTriangle.OnBoundsChanged(System.Drawing.RectangleF)">
            <summary>
            When the bounds change, update the points appropriately.
            </summary>
            <param name="old"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoTriangle.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)">
            <summary>
            Paint a triangle, possibly shadowed.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoTriangle.ContainsPoint(System.Drawing.PointF)">
            <summary>
            Consider the actual shape of the triangle to determine
            if a given point is inside.
            </summary>
            <param name="p"></param>
            <returns></returns>
            <remarks>
            Currently this does not take the pen width into account.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoTriangle.GetNearestIntersectionPoint(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)">
            <summary>
            The closest point of a triangle that intersects with a given line
            is the closest such point of each of its three line segments.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoTriangle.MakePath">
            <summary>
            Produce a <c>GraphicsPath</c> by adding lines between the points.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoTriangle.DoResize(Northwoods.GoWeb.GoView,System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,Northwoods.GoWeb.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Support either allowing the user to move the triangle vertices around
            individually, or treating the triangle as a whole object.
            </summary>
            <param name="view"></param>
            <param name="origRect"></param>
            <param name="newPoint"></param>
            <param name="whichHandle"></param>
            <param name="evttype"></param>
            <param name="min"></param>
            <param name="max"></param>
            <remarks>
            When <see cref="P:Northwoods.GoWeb.GoObject.ResizesRealtime"/> is true, this method always sets
            the corresponding point property to <paramref name="newPoint"/>.
            Otherwise it only sets it when the <paramref name="evttype"/>
            is <see cref="F:Northwoods.GoWeb.GoInputState.Finish"/> or <see cref="F:Northwoods.GoWeb.GoInputState.Cancel"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoTriangle.AddSelectionHandles(Northwoods.GoWeb.GoSelection,Northwoods.GoWeb.GoObject)">
            <summary>
            If Resizable and Reshapable, support individual triangle vertex
            resize handles.
            </summary>
            <param name="sel"></param>
            <param name="selectedObj"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoTriangle.CopyOldValueForUndo(Northwoods.GoWeb.GoChangedEventArgs)">
            <summary>
            Copies state to permit an undo.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoObject.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoTriangle.CopyNewValueForRedo(Northwoods.GoWeb.GoChangedEventArgs)">
            <summary>
            Copies state to permit a redo.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoObject.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoTriangle.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Performs changes for undo and redo.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoObject.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoTriangle.A">
            <summary>
            Gets or sets this triangle's first point.
            </summary>
            <value>
            The <c>PointF</c> value is in document coordinates.
            The initial value is (0, 0).
            </value>
            <remarks>
            <see cref="P:Northwoods.GoWeb.GoTriangle.B"/>.
            <see cref="P:Northwoods.GoWeb.GoTriangle.C"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoTriangle.B">
            <summary>
            Gets or sets this triangle's second point.
            </summary>
            <value>
            The <c>PointF</c> value is in document coordinates.
            The initial value is (10, 0).
            </value>
            <remarks>
            <see cref="P:Northwoods.GoWeb.GoTriangle.A"/>.
            <see cref="P:Northwoods.GoWeb.GoTriangle.C"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoTriangle.C">
            <summary>
            Gets or sets this triangle's third point.
            </summary>
            <value>
            The <c>PointF</c> value is in document coordinates.
            The initial value is (5, 10).
            </value>
            <remarks>
            <see cref="P:Northwoods.GoWeb.GoTriangle.A"/>.
            <see cref="P:Northwoods.GoWeb.GoTriangle.B"/>.
            </remarks>
        </member>
        <member name="T:Northwoods.GoWeb.IGoControlObject">
            <summary>
            This interface specifies the properties that a <c>Control</c> may have
            to be best used by a <see cref="P:Northwoods.GoWeb.IGoControlObject.GoControl"/> as a graphical object.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.IGoControlObject.GoControl">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.IGoControlObject.GoControl"/> that is managing this <c>Control</c>.
            </summary>
            <remarks>
            This backpointer is set right after <see cref="P:Northwoods.GoWeb.IGoControlObject.GoControl"/>.<c>CreateControl</c>
            creates this <c>Control</c>.
            Access to the <see cref="P:Northwoods.GoWeb.IGoControlObject.GoControl"/> is important at several times:
            for initializing the control using state available in the GoControl,
            for saving any modified state to the GoControl, and for ending the edit.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.IGoControlObject.GoView">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.IGoControlObject.GoView"/> that contains this <c>Control</c>.
            </summary>
            <remarks>
            This backpointer is set right after <see cref="P:Northwoods.GoWeb.IGoControlObject.GoControl"/>.<c>CreateControl</c>
            creates this <c>Control</c>.
            You can probably also find the <see cref="P:Northwoods.GoWeb.IGoControlObject.GoView"/> by looking at this
            <c>Control</c>'s <c>Parent</c> property.
            </remarks>
        </member>
        <member name="T:Northwoods.GoWeb.IGoPartInfoRenderer">
            <summary>
            This interface should be implemented by classes that generate JavaScript
            along with the rendering of a view
            and that want to generate property/value collections
            as JavaScript objects to be associated with particular
            <see cref="T:Northwoods.GoWeb.GoObject"/>s in that rendering.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.IGoPartInfoRenderer.CreatePartInfo">
            <summary>
            Allocate and return a <see cref="T:Northwoods.GoWeb.GoPartInfo"/> for this renderer.
            </summary>
            <returns>a <see cref="T:Northwoods.GoWeb.GoPartInfo"/></returns>
            <remarks>
            An override of <see cref="M:Northwoods.GoWeb.GoObject.GetPartInfo(Northwoods.GoWeb.GoView,Northwoods.GoWeb.IGoPartInfoRenderer)"/> can call this to
            allocate an empty <see cref="T:Northwoods.GoWeb.GoPartInfo"/> in order to specify all
            of the properties without getting the standard property values
            that the renderer would produce in a call to <see cref="M:Northwoods.GoWeb.IGoPartInfoRenderer.GetStandardPartInfo(Northwoods.GoWeb.GoObject)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.IGoPartInfoRenderer.GetStandardPartInfo(Northwoods.GoWeb.GoObject)">
            <summary>
            Produce the standard <see cref="T:Northwoods.GoWeb.GoPartInfo"/> for a given object.
            </summary>
            <param name="obj"></param>
            <returns>
            This may be null if the given object is not interesting enough to warrant
            generating property/value information.
            </returns>
            <remarks>
            This is called by <see cref="M:Northwoods.GoWeb.GoObject.GetPartInfo(Northwoods.GoWeb.GoView,Northwoods.GoWeb.IGoPartInfoRenderer)"/> to get the
            renderer's standard property values for the given object.
            An override of <see cref="M:Northwoods.GoWeb.GoObject.GetPartInfo(Northwoods.GoWeb.GoView,Northwoods.GoWeb.IGoPartInfoRenderer)"/> will normally
            call the base method and modify the result, but if that result is
            null it may want to call <see cref="M:Northwoods.GoWeb.IGoPartInfoRenderer.CreatePartInfo"/> in order to
            pass along its specific information for that object.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.IGoPartInfoRenderer.AssociatePartInfo(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoPartInfo)">
            <summary>
            Tell the renderer to associate a given <see cref="T:Northwoods.GoWeb.GoPartInfo"/>
            with a particular <see cref="T:Northwoods.GoWeb.GoObject"/>, so that the user agent
            will be able to find the JavaScript object as information describing
            the <see cref="T:Northwoods.GoWeb.GoObject"/>.
            </summary>
            <param name="obj"></param>
            <param name="info"></param>
        </member>
        <member name="M:Northwoods.GoWeb.IGoPartInfoRenderer.AddPartInfo(Northwoods.GoWeb.GoObject)">
            <summary>
            This higher-level method is called to produce a <see cref="T:Northwoods.GoWeb.GoPartInfo"/> for a given
            object and then call <see cref="M:Northwoods.GoWeb.IGoPartInfoRenderer.AssociatePartInfo(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoPartInfo)"/>.
            </summary>
            <param name="obj"></param>
            <remarks>
            Overrides of <see cref="M:Northwoods.GoWeb.GoObject.GetPartInfo(Northwoods.GoWeb.GoView,Northwoods.GoWeb.IGoPartInfoRenderer)"/> may want to call this
            method in order to provide information about child objects as well as
            returning information for the given (parent) object.
            </remarks>
        </member>
        <member name="T:Northwoods.GoWeb.GoBalloon">
            <summary>
            A GoBalloon is a kind of <see cref="T:Northwoods.GoWeb.GoComment"/> that is associated with another object.
            </summary>
            <remarks>
            <para>
            The <see cref="P:Northwoods.GoWeb.GoComment.Background"/> object is implemented as a <see cref="T:Northwoods.GoWeb.GoPolygon"/>.
            It is shaped to "point" at the <see cref="P:Northwoods.GoWeb.GoBalloon.Anchor"/> object.
            The actual <b>PointF</b> point is calculated by <see cref="M:Northwoods.GoWeb.GoBalloon.ComputeAnchorPoint"/>.
            When there is no <see cref="P:Northwoods.GoWeb.GoBalloon.Anchor"/>, it uses <see cref="P:Northwoods.GoWeb.GoBalloon.UnanchoredOffset"/>
            to determine a point near the <see cref="P:Northwoods.GoWeb.GoComment.Label"/>.
            </para>
            <para>
            When <see cref="P:Northwoods.GoWeb.GoBalloon.Reanchorable"/> is true, an additional selection handle is
            placed at the "point", to allow users to interactively choose another object.
            You can override <see cref="M:Northwoods.GoWeb.GoBalloon.PickNewAnchor(System.Drawing.PointF,Northwoods.GoWeb.GoView,Northwoods.GoWeb.GoInputState)"/> to determine which objects
            may be chosen as new anchors for this balloon comment.  By default it allows
            any selectable document object, but you could just have it return objects
            of a certain type, depending on the state of your application.
            </para>
            </remarks>
        </member>
        <member name="T:Northwoods.GoWeb.GoComment">
            <summary>
            A simple group displaying text with a shadowed background.
            </summary>
            <remarks>
            <para>
            The <see cref="P:Northwoods.GoWeb.GoComment.Background"/> is normally a <see cref="T:Northwoods.GoWeb.GoRectangle"/>,
            but could be any kind of <see cref="T:Northwoods.GoWeb.GoObject"/>.  Hence you can easily
            customize that rectangle's appearance by setting properties on the
            <see cref="P:Northwoods.GoWeb.GoComment.Shape"/>, such as:
            <code>
              comment.Shape.BrushColor = Color.LightSkyBlue
              comment.Shape.PenColor = Color.DeepSkyBlue
            </code>
            Or you could replace the <see cref="P:Northwoods.GoWeb.GoComment.Background"/> with a different <see cref="T:Northwoods.GoWeb.GoShape"/>.
            </para>
            <para>
            <see cref="M:Northwoods.GoWeb.GoComment.LayoutChildren(Northwoods.GoWeb.GoObject)"/> sizes the <see cref="P:Northwoods.GoWeb.GoComment.Background"/> to fit around
            the <see cref="P:Northwoods.GoWeb.GoComment.Label"/>, using the <see cref="P:Northwoods.GoWeb.GoComment.TopLeftMargin"/> and the
            <see cref="P:Northwoods.GoWeb.GoComment.BottomRightMargin"/> to leave space between the <see cref="P:Northwoods.GoWeb.GoComment.Label"/>
            and the bounds of the <see cref="P:Northwoods.GoWeb.GoComment.Background"/> shape.  If you use other shapes,
            you may need to increase these margins.
            </para>
            <para>
            Because this class has a <see cref="P:Northwoods.GoWeb.GoComment.Label"/>, it implements the
            <see cref="T:Northwoods.GoWeb.IGoLabeledNode"/> interface, even though this class is not a "node".
            It also implements <see cref="T:Northwoods.GoWeb.IGoIdentifiablePart"/>, to make it easier to keep
            track of the different comments that might be in your diagram, if you have set
            <see cref="P:Northwoods.GoWeb.GoDocument.MaintainsPartID"/> to true in your <see cref="T:Northwoods.GoWeb.GoDocument"/>.
            </para>
            </remarks>
        </member>
        <member name="T:Northwoods.GoWeb.IGoLabeledNode">
            <summary>
            This interface inherits from <see cref="T:Northwoods.GoWeb.IGoLabeledPart"/> to add
            access to a <see cref="T:Northwoods.GoWeb.GoText"/> label.
            </summary>
            <remarks>
            <see cref="T:Northwoods.GoWeb.GoNode"/> implements this interface, as does <see cref="T:Northwoods.GoWeb.GoComment"/>.
            Typically you will want to implement or override this method to provide
            efficient access to a particular <see cref="T:Northwoods.GoWeb.GoText"/> object in your group.
            Note that this interface is independent of <see cref="T:Northwoods.GoWeb.IGoNode"/>--in other words,
            not all <see cref="T:Northwoods.GoWeb.GoObject"/> classes that implement <see cref="T:Northwoods.GoWeb.IGoLabeledPart"/>
            or <see cref="T:Northwoods.GoWeb.IGoLabeledNode"/> will implement <see cref="T:Northwoods.GoWeb.IGoNode"/>.
            </remarks>
        </member>
        <member name="T:Northwoods.GoWeb.IGoLabeledPart">
            <summary>
            Provide access to a text string for a <see cref="T:Northwoods.GoWeb.GoObject"/>.
            </summary>
            <remarks>
            The text string is used by <see cref="M:Northwoods.GoWeb.GoDocument.FindNode(System.String)"/> and
            <see cref="M:Northwoods.GoWeb.GoView.SelectNextNode(System.Char)"/> to search for objects meeting certain criteria.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.IGoLabeledPart.Text">
            <summary>
            Gets a text string for this <see cref="T:Northwoods.GoWeb.GoObject"/>.
            </summary>
            <value>
            This may return null.
            </value>
            <remarks>
            For <see cref="T:Northwoods.GoWeb.IGoLabeledNode"/>s, this is normally implemented to return
            the <see cref="P:Northwoods.GoWeb.IGoLabeledNode.Label"/>'s <see cref="P:Northwoods.GoWeb.GoText.Text"/> value.
            You may wish to implement this differently if there is no label but
            there is a string naturally associated with the object, or if the
            desired string might be different than the label's text string.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.IGoLabeledNode.Label">
            <summary>
            Gets a <see cref="T:Northwoods.GoWeb.GoText"/> representing an object's label.
            </summary>
            <remarks>
            This property is typically used by an implementation of the
            <see cref="T:Northwoods.GoWeb.IGoLabeledPart"/>'s <see cref="P:Northwoods.GoWeb.IGoLabeledPart.Text"/> property.
            Normally the <c>F2</c> key will invoke <see cref="M:Northwoods.GoWeb.GoView.EditEdit"/>
            to start the user's in-place editing of this text label.
            </remarks>
        </member>
        <member name="T:Northwoods.GoWeb.IGoIdentifiablePart">
            <summary>
            This interface provides a unique identifier for a part of a document.
            </summary>
            <remarks>
            <see cref="T:Northwoods.GoWeb.GoLink"/>, <see cref="T:Northwoods.GoWeb.GoLabeledLink"/>, <see cref="T:Northwoods.GoWeb.GoNode"/>,
            <see cref="T:Northwoods.GoWeb.GoPort"/>, and <see cref="T:Northwoods.GoWeb.GoComment"/> all implement this interface.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.IGoIdentifiablePart.PartID">
            <summary>
            Gets or sets the unique ID of this part in its document, a non-negative integer.
            </summary>
            <value>
            This value is invalid unless this <see cref="T:Northwoods.GoWeb.GoObject"/> is part of a
            <see cref="T:Northwoods.GoWeb.GoDocument"/> whose <see cref="P:Northwoods.GoWeb.GoDocument.MaintainsPartID"/> property is true.
            This property should not be set when this object is part of a document.
            The initial value should be -1, which instructs the document,
            when the object is added to the document, to find a unique ID and assign
            it to this object.
            </value>
            <remarks>
            When <see cref="P:Northwoods.GoWeb.GoDocument.MaintainsPartID"/> is false, you may set and get this
            <c>PartID</c>property.  However, you will need to manage any uniqueness of values,
            and (if desired) you will need to manage a hashtable to make finding parts fast.
            <see cref="T:Northwoods.GoWeb.GoDocument"/> will not set any <c>PartID</c> unless
            <see cref="P:Northwoods.GoWeb.GoDocument.MaintainsPartID"/> is true or unless you call
            <see cref="M:Northwoods.GoWeb.GoDocument.EnsureUniquePartID"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoComment.ChangedTopLeftMargin">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoComment.TopLeftMargin"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoComment.ChangedBottomRightMargin">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoComment.BottomRightMargin"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoComment.ChangedPartID">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoComment.PartID"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoComment.ChangedBackground">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoComment.Background"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoComment.ChangedLabel">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoComment.Label"/> property.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoComment.#ctor">
            <summary>
            Create a GoComment displaying an empty string.
            </summary>
            <remarks>
            This calls <see cref="M:Northwoods.GoWeb.GoComment.CreateBackground"/> and <see cref="M:Northwoods.GoWeb.GoComment.CreateLabel"/>
            to provide initial values for <see cref="P:Northwoods.GoWeb.GoComment.Background"/> and <see cref="P:Northwoods.GoWeb.GoComment.Label"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoComment.CreateBackground">
            <summary>
            Create and initialize the background for the comment, which is normally a
            <see cref="T:Northwoods.GoWeb.GoRectangle"/> with a light yellow <see cref="P:Northwoods.GoWeb.GoShape.Brush"/>
            and a drop-shadow effect.
            </summary>
            <returns></returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoObject CreateBackground() {
               GoRectangle r = new GoRectangle();
               r.Shadowed = true;
               r.Selectable = false;
               r.Pen = GoShape.Pens_LightGray;
               r.Brush = GoShape.Brushes_LemonChiffon;
               return r;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.GoWeb.GoComment.CreateLabel">
            <summary>
            Create and initialize the <see cref="T:Northwoods.GoWeb.GoText"/> label for displaying the
            comment, which normally supports multiple lines and is editable.
            </summary>
            <returns></returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoText CreateLabel() {
               GoText l = new GoText();
               l.Selectable = false;
               l.Multiline = true;
               l.Editable = true;
               this.Editable = true;
               return l;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.GoWeb.GoComment.CopyChildren(Northwoods.GoWeb.GoGroup,Northwoods.GoWeb.GoCopyDictionary)">
            <summary>
            Make copies of the background and the text object.
            </summary>
            <param name="newgroup"></param>
            <param name="env"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoComment.Remove(Northwoods.GoWeb.GoObject)">
            <summary>
            If any part is removed from this group,
            be sure to remove any references in local fields.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoComment.LayoutChildren(Northwoods.GoWeb.GoObject)">
            <summary>
            This method uses the <see cref="P:Northwoods.GoWeb.GoComment.TopLeftMargin"/> and <see cref="P:Northwoods.GoWeb.GoComment.BottomRightMargin"/>
            properties to decide how much bigger the background should be than the text label.
            </summary>
            <param name="childchanged"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoComment.DoBeginEdit(Northwoods.GoWeb.GoView)">
            <summary>
            Start editing the label.
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoComment.FindName(Northwoods.GoWeb.GoObject)">
            <summary>
            The properties referring to parts of this group
            are also the names of those parts.
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoComment.FindChild(System.String)">
            <summary>
            The properties referring to parts of this group
            are also the names of those parts.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoComment.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle this class's property changes for undo and redo
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.GoWeb.GoComment.Shadowed">
            <summary>
            Giving this comment a shadow really means giving the background a shadow.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoComment.TopLeftMargin">
            <summary>
            Gets or sets the space between the top and left sides of the text label
            with the top and left sides of the background.
            </summary>
            <remarks>
            If you change the background to be a different shape by overriding
            <see cref="M:Northwoods.GoWeb.GoComment.CreateBackground"/>, you will probably want to set this margin
            and <see cref="P:Northwoods.GoWeb.GoComment.BottomRightMargin"/> appropriately so that the text fits.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoComment.BottomRightMargin">
            <summary>
            Gets or sets the space between the bottom and right sides of the text label
            with the bottom and right sides of the background.
            </summary>
            <remarks>
            If you change the background to be a different shape by overriding
            <see cref="M:Northwoods.GoWeb.GoComment.CreateBackground"/>, you will probably want to set this margin
            and <see cref="P:Northwoods.GoWeb.GoComment.TopLeftMargin"/> appropriately so that the text fits.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoComment.Label">
            <summary>
            Gets or sets the label for this group, implementing <see cref="T:Northwoods.GoWeb.IGoLabeledNode"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoComment.Text">
            <summary>
            Gets or sets the text string for this group, implementing <see cref="T:Northwoods.GoWeb.IGoLabeledNode"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoComment.Background">
            <summary>
            Gets the background object for this comment.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoComment.Shape">
            <summary>
            Gets this comment's background shape, assuming it is a <see cref="T:Northwoods.GoWeb.GoShape"/>, as it usually is.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoComment.PartID">
            <summary>
            Gets or sets the unique ID of this part within its document.
            </summary>
            <value>
            The value is invalid unless this object is part of a <see cref="T:Northwoods.GoWeb.GoDocument"/>
            whose <see cref="P:Northwoods.GoWeb.GoDocument.MaintainsPartID"/> property is true.
            Setting this property is normally done only by <see cref="T:Northwoods.GoWeb.GoDocument"/>
            when this object is added to the document, or by code deserializing
            a document, before this object is part of the document.
            The default value is -1, to indicate to the document that it needs
            to find and assign a unique PartID for this object when it is added
            to the document.
            </value>
        </member>
        <member name="T:Northwoods.GoWeb.IGoRoutable">
            <summary>
            This interface is implemented by those <see cref="T:Northwoods.GoWeb.GoObject"/>s that have a shape
            determined by the positions of more than one object.
            </summary>
            <seealso cref="T:Northwoods.GoWeb.GoLink"/>
            <seealso cref="T:Northwoods.GoWeb.GoLabeledLink"/>
        </member>
        <member name="M:Northwoods.GoWeb.IGoRoutable.CalculateRoute">
            <summary>
            This method should modify the shape of this <see cref="T:Northwoods.GoWeb.GoObject"/> according
            to the bounds of the objects in the document.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.IGoRoutable.UpdateRoute">
            <summary>
            Request the recalculation of the shape of this object.
            </summary>
            <remarks>
            <para>
            If this <see cref="T:Northwoods.GoWeb.GoObject"/> is part of a <see cref="T:Northwoods.GoWeb.GoDocument"/>
            this should possibly delay the call to <see cref="M:Northwoods.GoWeb.IGoRoutable.CalculateRoute"/>
            by calling <see cref="T:Northwoods.GoWeb.GoDocument"/>.<see cref="M:Northwoods.GoWeb.GoDocument.UpdateRoute(Northwoods.GoWeb.IGoRoutable)"/>.
            Otherwise this should just call <see cref="M:Northwoods.GoWeb.IGoRoutable.CalculateRoute"/>
            to determine a new route immediately.
            </para>
            <para>
            This is typically implemented as:
            <code>
            public virtual void UpdateRoute() {
              GoDocument doc = this.Document;
              if (doc != null)
                doc.UpdateRoute(this);
              else
                CalculateRoute();
            }
            </code>
            </para>
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoBalloon.AnchorHandle">
            <summary>
            This is a special handle ID, to allow the user to reanchor the balloon.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBalloon.ChangedAnchor">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoBalloon.Anchor"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBalloon.ChangedCorner">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoBalloon.Corner"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBalloon.ChangedBaseWidth">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoBalloon.BaseWidth"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBalloon.ChangedUnanchoredOffset">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoBalloon.UnanchoredOffset"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBalloon.ChangedReanchorable">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoBalloon.Reanchorable"/> property.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoBalloon.#ctor">
            <summary>
            Create a balloon comment that initially has no text and no anchor
            object to point to.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoBalloon.CopyObject(Northwoods.GoWeb.GoCopyDictionary)">
            <summary>
            The <see cref="P:Northwoods.GoWeb.GoBalloon.Anchor"/> object may or may not be copied;
            let <see cref="M:Northwoods.GoWeb.GoBalloon.CopyObjectDelayed(Northwoods.GoWeb.GoCopyDictionary,Northwoods.GoWeb.GoObject)"/> handle it.
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoBalloon.CopyObjectDelayed(Northwoods.GoWeb.GoCopyDictionary,Northwoods.GoWeb.GoObject)">
            <summary>
            Make sure the <see cref="P:Northwoods.GoWeb.GoBalloon.Anchor"/> is the copied object, and update the
            background polygon's shape appropriately.
            </summary>
            <param name="env"></param>
            <param name="newobj"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoBalloon.CreateBackground">
            <summary>
            Change the background from a rectangle to a polygon that stretches out towards
            the <see cref="P:Northwoods.GoWeb.GoBalloon.Anchor"/> object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoBalloon.ComputeBounds">
            <summary>
            The bounds of a balloon comment are just the bounds of the label plus the margins.
            </summary>
            <returns></returns>
            <remarks>
            The bounds do not include the part of the background polygon that points to the anchor.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoBalloon.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.GoWeb.GoView)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoBalloon.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.GoWeb.GoView)">
            <summary>
            Since the bounds include only part of the background polygon, the area that
            needs repainting is really determined by the polygon.
            </summary>
            <param name="rect"></param>
            <param name="view"></param>
            <returns>a rectangle in document coordinates that includes the background object</returns>
            <seealso cref="M:Northwoods.GoWeb.GoBalloon.ComputeBounds"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoBalloon.MoveChildren(System.Drawing.RectangleF)">
            <summary>
            Moving a balloon should change the size and shape, because the
            anchor might not be moving along.
            </summary>
            <param name="old"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoBalloon.LayoutChildren(Northwoods.GoWeb.GoObject)">
            <summary>
            Make sure the background polygon is moved along with the text label
            and shaped so that it points at the anchor.
            </summary>
            <param name="childchanged"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoBalloon.ComputeAnchorPoint">
            <summary>
            Determine the end point of the balloon, near the <see cref="P:Northwoods.GoWeb.GoBalloon.Anchor"/>.
            </summary>
            <returns>
            Normally this returns the <see cref="M:Northwoods.GoWeb.GoObject.GetNearestIntersectionPoint(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)"/>
            of the <see cref="P:Northwoods.GoWeb.GoBalloon.Anchor"/> from the <see cref="P:Northwoods.GoWeb.GoComment.Label"/>'s center.
            However, if there is no anchor, this method returns the point at the
            <see cref="P:Northwoods.GoWeb.GoBalloon.UnanchoredOffset"/> from the label's Position.
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoBalloon.OnObservedChanged(Northwoods.GoWeb.GoObject,System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)">
            <summary>
            If the <see cref="P:Northwoods.GoWeb.GoBalloon.Anchor"/> moves or resizes, we need to update the
            background polygon's shape.
            </summary>
            <param name="observed"></param>
            <param name="subhint"></param>
            <param name="oldI"></param>
            <param name="oldVal"></param>
            <param name="oldRect"></param>
            <param name="newI"></param>
            <param name="newVal"></param>
            <param name="newRect"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoBalloon.CalculateRoute">
            <summary>
            Just call <see cref="M:Northwoods.GoWeb.GoBalloon.LayoutChildren(Northwoods.GoWeb.GoObject)"/> to determine
            the new shape for this balloon's polygon background.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoBalloon.UpdateRoute">
            <summary>
            Request the reshaping of the balloon's polygon background.
            </summary>
            <remarks>
            If this is part of a <see cref="T:Northwoods.GoWeb.GoDocument"/>,
            this calls <see cref="T:Northwoods.GoWeb.GoDocument"/>.<see cref="M:Northwoods.GoWeb.GoDocument.UpdateRoute(Northwoods.GoWeb.IGoRoutable)"/> in order to maybe delay
            the call to <see cref="M:Northwoods.GoWeb.GoBalloon.CalculateRoute"/> (depending on the value of <see cref="P:Northwoods.GoWeb.GoDocument.RoutingTime"/>).
            If there is no <see cref="T:Northwoods.GoWeb.GoDocument"/>, this just calls <see cref="M:Northwoods.GoWeb.GoBalloon.CalculateRoute"/> immediately.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoBalloon.OnLayerChanged(Northwoods.GoWeb.GoLayer,Northwoods.GoWeb.GoLayer,Northwoods.GoWeb.GoObject)">
            <summary>
            If this balloon is removed from the document,
            set the <see cref="P:Northwoods.GoWeb.GoBalloon.Anchor"/> property to null.
            </summary>
            <param name="oldlayer"></param>
            <param name="newlayer"></param>
            <param name="mainObj"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoBalloon.PickNewAnchor(System.Drawing.PointF,Northwoods.GoWeb.GoView,Northwoods.GoWeb.GoInputState)">
            <summary>
            This method is called repeatedly by <see cref="M:Northwoods.GoWeb.GoBalloon.DoResize(Northwoods.GoWeb.GoView,System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,Northwoods.GoWeb.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)"/> while
            the user is dragging the <see cref="F:Northwoods.GoWeb.GoBalloon.AnchorHandle"/> resize handle.
            </summary>
            <param name="p">the point (in document coordinates) currently specified by the user's mouse</param>
            <param name="view"></param>
            <param name="evttype"></param>
            <remarks>
            When <paramref name="evttype"/> is <c>GoInputState.</c><see cref="F:Northwoods.GoWeb.GoInputState.Finish"/>,
            this calls <see cref="M:Northwoods.GoWeb.GoView.PickObject(System.Boolean,System.Boolean,System.Drawing.PointF,System.Boolean)"/> to
            find the selectable document object at the given point <paramref name="p"/>.
            The <see cref="P:Northwoods.GoWeb.GoBalloon.Anchor"/> is set to that object.
            If no object is found at that point, the <see cref="P:Northwoods.GoWeb.GoBalloon.Anchor"/> is set to null
            and the <see cref="P:Northwoods.GoWeb.GoBalloon.UnanchoredOffset"/> is set to the offset between that
            point and the <see cref="P:Northwoods.GoWeb.GoComment.Label"/>'s Position.
            If the user tries to reanchor this balloon to itself, no change is made.
            This method does nothing unless the <paramref name="evttype"/> is <see cref="F:Northwoods.GoWeb.GoInputState.Finish"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoBalloon.DoResize(Northwoods.GoWeb.GoView,System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,Northwoods.GoWeb.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            When resizing the <see cref="F:Northwoods.GoWeb.GoBalloon.AnchorHandle"/>, call
            <see cref="M:Northwoods.GoWeb.GoBalloon.PickNewAnchor(System.Drawing.PointF,Northwoods.GoWeb.GoView,Northwoods.GoWeb.GoInputState)"/> to consider other objects as anchors for this balloon.
            </summary>
            <param name="view"></param>
            <param name="origRect"></param>
            <param name="newPoint"></param>
            <param name="whichHandle"></param>
            <param name="evttype"></param>
            <param name="min"></param>
            <param name="max"></param>
            <remarks>
            <para>
            <see cref="M:Northwoods.GoWeb.GoBalloon.PickNewAnchor(System.Drawing.PointF,Northwoods.GoWeb.GoView,Northwoods.GoWeb.GoInputState)"/> is called each time this method is called,
            as long as the handle is <see cref="F:Northwoods.GoWeb.GoBalloon.AnchorHandle"/>.
            The implementation of <see cref="M:Northwoods.GoWeb.GoBalloon.PickNewAnchor(System.Drawing.PointF,Northwoods.GoWeb.GoView,Northwoods.GoWeb.GoInputState)"/> will actually set <see cref="P:Northwoods.GoWeb.GoBalloon.Anchor"/>
            when <paramref name="evttype"/> is <see cref="F:Northwoods.GoWeb.GoInputState.Finish"/>.
            </para>
            <para>
            Instead of reusing the resizing mechanism to reanchor a balloon,
            we may replace this mechanism with a separate reanchoring tool,
            if the need for more flexibility becomes apparent.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoBalloon.AddSelectionHandles(Northwoods.GoWeb.GoSelection,Northwoods.GoWeb.GoObject)">
            <summary>
            When <see cref="P:Northwoods.GoWeb.GoBalloon.Reanchorable"/> is true, add a special handle that lets the user change the <see cref="P:Northwoods.GoWeb.GoBalloon.Anchor"/>
            by dragging the end point of the balloon to another object.
            </summary>
            <param name="sel"></param>
            <param name="selectedObj"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoBalloon.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Perform the usual undo and redo changes.
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.GoWeb.GoBalloon.UnanchoredOffset">
            <summary>
            Gets or sets the offset from the <see cref="P:Northwoods.GoWeb.GoComment.Label"/> for the result of <see cref="M:Northwoods.GoWeb.GoBalloon.ComputeAnchorPoint"/>
            when there is no <see cref="P:Northwoods.GoWeb.GoBalloon.Anchor"/>.
            </summary>
            <value>
            This defaults to -30 x -30.
            </value>
            <seealso cref="M:Northwoods.GoWeb.GoBalloon.ComputeAnchorPoint"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoBalloon.BaseWidth">
            <summary>
            Gets or sets the width of the base of the triangular region of the balloon,
            near the text label.
            </summary>
            <value>
            This value defaults to 30.  The value must be greater than zero.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoBalloon.Corner">
            <summary>
            Gets or sets the maximum radial width and height of each corner.
            </summary>
            <value>
            The default value is 4x4.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoBalloon.Anchor">
            <summary>
            This is the object that the balloon always seems to be pointing to.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoBalloon.Reanchorable">
            <summary>
            Gets or sets whether the user may reanchor this balloon comment,
            by reattaching it or leaving it unattached.
            </summary>
            <value>
            This defaults to false.
            </value>
        </member>
        <member name="T:Northwoods.GoWeb.GoBasicNode">
            <summary>
            A simple node with a <see cref="P:Northwoods.GoWeb.GoBasicNode.Shape"/>, a single <see cref="P:Northwoods.GoWeb.GoBasicNode.Port"/> and an optional text <see cref="P:Northwoods.GoWeb.GoBasicNode.Label"/>.
            </summary>
            <remarks>
            <para>
            By default the <see cref="P:Northwoods.GoWeb.GoBasicNode.Shape"/> is a <see cref="T:Northwoods.GoWeb.GoEllipse"/>.
            You can easily replace that shape with a <see cref="T:Northwoods.GoWeb.GoRectangle"/> or other <see cref="T:Northwoods.GoWeb.GoShape"/>.
            If you call the <see cref="M:Northwoods.GoWeb.GoBasicNode.#ctor(Northwoods.GoWeb.GoFigure)"/> constructor, the shape will be a <see cref="T:Northwoods.GoWeb.GoDrawing"/>
            initialized to have that <see cref="T:Northwoods.GoWeb.GoFigure"/>.
            </para>
            <para>
            The position and size of the <see cref="P:Northwoods.GoWeb.GoBasicNode.Label"/> relative to the <see cref="P:Northwoods.GoWeb.GoBasicNode.Shape"/>
            is determined by the <see cref="P:Northwoods.GoWeb.GoBasicNode.LabelSpot"/> property.
            When the spot is <see cref="F:Northwoods.GoWeb.GoObject.Middle"/>, the shape is automatically
            resized to fit the label's text (if <see cref="P:Northwoods.GoWeb.GoBasicNode.AutoResizes"/> is true)
            plus the <see cref="P:Northwoods.GoWeb.GoBasicNode.MiddleLabelMargin"/>,
            and the port is hidden and resized to be the same size as the shape itself.
            </para>
            <para>
            When <see cref="P:Northwoods.GoWeb.GoBasicNode.AutoResizes"/> is false, the <see cref="P:Northwoods.GoWeb.GoBasicNode.Label"/> is sized to
            fit inside the bounds of the <see cref="P:Northwoods.GoWeb.GoBasicNode.Shape"/>, minus the margins.
            The label (a <see cref="T:Northwoods.GoWeb.GoText"/>) is automatically wrapped and clipped.
            </para>
            <para>
            Since the default value for <see cref="P:Northwoods.GoWeb.GoBasicNode.LabelSpot"/> is <c>GoObject.MiddleTop</c>,
            you will need to explicitly set the <see cref="P:Northwoods.GoWeb.GoBasicNode.LabelSpot"/> to <c>GoObject.Middle</c>
            to get this appearance and behavior.  Otherwise the default appearance is to have the
            <see cref="P:Northwoods.GoWeb.GoBasicNode.Label"/> be positioned outside of the <see cref="P:Northwoods.GoWeb.GoBasicNode.Shape"/>, with the
            <see cref="P:Northwoods.GoWeb.GoBasicNode.Port"/> small and positioned in the middle of the <see cref="P:Northwoods.GoWeb.GoBasicNode.Shape"/>.
            </para>
            <para>
            Unless you set the <see cref="P:Northwoods.GoWeb.GoBasicNode.Text"/> or the <see cref="P:Northwoods.GoWeb.GoBasicNode.Label"/> property,
            there will be no <see cref="P:Northwoods.GoWeb.GoBasicNode.Label"/>.
            However, the <see cref="M:Northwoods.GoWeb.GoBasicNode.#ctor(Northwoods.GoWeb.GoFigure)"/> constructor does create a <see cref="P:Northwoods.GoWeb.GoBasicNode.Label"/>,
            in addition to having the label be in the middle of the shape.
            </para>
            <para>
            When the <see cref="P:Northwoods.GoWeb.GoBasicNode.Shape"/> is an instance of <see cref="T:Northwoods.GoWeb.GoDrawing"/>,
            you can get and set the <see cref="P:Northwoods.GoWeb.GoBasicNode.Figure"/> property, if you want to dynamically
            change the appearance of the node.  More generally, you can modify that <see cref="T:Northwoods.GoWeb.GoDrawing"/>
            or replace the <see cref="P:Northwoods.GoWeb.GoBasicNode.Shape"/> with another kind of <see cref="T:Northwoods.GoWeb.GoShape"/>.
            </para>
            <para>
            Setting the <see cref="P:Northwoods.GoWeb.GoNode.Location"/>, <see cref="P:Northwoods.GoWeb.GoNode.Resizable"/>,
            <see cref="P:Northwoods.GoWeb.GoNode.Reshapable"/> and <see cref="P:Northwoods.GoWeb.GoNode.Shadowed"/> properties
            actually set the same properties on the node's
            <see cref="P:Northwoods.GoWeb.GoBasicNode.SelectionObject"/>, which is the <see cref="P:Northwoods.GoWeb.GoBasicNode.Shape"/>.
            </para>
            </remarks>
            <example>
            Typical usage might be something like:
            <code>
            GoBasicNode node1 = new GoBasicNode();
            node1.LabelSpot = GoObject.Middle;
            node1.Text = "basic node 1";
            node1.Shape.BrushColor = Color.LightGreen;
            node1.Location = new PointF(75, 50);
            goView1.Document.Add(node1);
            
            GoBasicNode node2 = new GoBasicNode(GoFigure.CreateRequest);
            node2.Text = "basic node 2";
            node2.Shape.BrushColor = Color.LightYellow;
            node2.Location = new PointF(200, 50);
            goView1.Document.Add(node2);
            
            GoLink link = new GoLink();
            link.ToArrow = true;
            link.FromPort = node1.Port;
            link.ToPort = node2.Port;
            goView1.Document.Add(link);
            </code>
            </example>
        </member>
        <member name="T:Northwoods.GoWeb.GoNode">
            <summary>
            This class provides the standard implementation of <see cref="T:Northwoods.GoWeb.IGoNode"/>
            as a <see cref="P:Northwoods.GoWeb.GoNode.GoObject"/>.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.IGoNode">
            <summary>
            This interface represents an abstract object that is connected to other
            nodes using links.
            </summary>
            <remarks>
            Every <c>IGoNode</c> also implements <see cref="P:Northwoods.GoWeb.IGoGraphPart.GoObject"/>,
            <see cref="P:Northwoods.GoWeb.IGoGraphPart.UserFlags"/>, and <see cref="P:Northwoods.GoWeb.IGoGraphPart.UserObject"/>.
            </remarks>
            <seealso cref="T:Northwoods.GoWeb.GoNode"/>
            <seealso cref="T:Northwoods.GoWeb.IGoPort"/>
            <seealso cref="T:Northwoods.GoWeb.IGoLink"/>
            <seealso cref="T:Northwoods.GoWeb.IGoLabeledPart"/>
        </member>
        <member name="T:Northwoods.GoWeb.IGoGraphPart">
            <summary>
            This interface represents an abstract part of a graph, and is the supertype for
            <see cref="T:Northwoods.GoWeb.IGoNode"/>, <see cref="T:Northwoods.GoWeb.IGoPort"/>, and <see cref="T:Northwoods.GoWeb.IGoLink"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.IGoGraphPart.GoObject">
            <summary>
            Gets a <see cref="P:Northwoods.GoWeb.IGoGraphPart.GoObject"/> associated with this node, port, or link.
            </summary>
            <remarks>
            This property is how an abstract network created with <see cref="T:Northwoods.GoWeb.IGoNode"/>,
            <see cref="T:Northwoods.GoWeb.IGoPort"/>, and <see cref="T:Northwoods.GoWeb.IGoLink"/> can be tied to concrete
            subclasses of <see cref="P:Northwoods.GoWeb.IGoGraphPart.GoObject"/> that can be added to a
            <see cref="T:Northwoods.GoWeb.GoDocument"/> and displayed in a <see cref="T:Northwoods.GoWeb.GoView"/>.
            <see cref="T:Northwoods.GoWeb.GoNode"/>, <see cref="T:Northwoods.GoWeb.GoPort"/>, and <see cref="T:Northwoods.GoWeb.GoLink"/> are all
            subclasses of <see cref="P:Northwoods.GoWeb.IGoGraphPart.GoObject"/>, so those implementations of this
            property just return themselves and don't allow the property to be set.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.IGoGraphPart.UserFlags">
            <summary>
            Gets or sets an integer value associated with this port.
            </summary>
            <remarks>
            You can use this property for many different purposes, such as associating
            some application specific data with the node, port, or link.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.IGoGraphPart.UserObject"/>
        </member>
        <member name="P:Northwoods.GoWeb.IGoGraphPart.UserObject">
            <summary>
            Gets or sets an object associated with this port.
            </summary>
            <remarks>
            You can use this property for many different purposes, such as associating
            some application specific data with the node, port, or link.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.IGoGraphPart.UserFlags"/>
        </member>
        <member name="P:Northwoods.GoWeb.IGoNode.Sources">
            <summary>
            Gets an enumerator over all of the nodes that have links coming into this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all nodes that have ports that have any
            destination links coming into any port of this node.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.IGoNode.Destinations">
            <summary>
            Gets an enumerator over all of the nodes that have links going out of this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all nodes that have ports that have any
            source links going out of any port of this node.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.IGoNode.Nodes">
            <summary>
            Gets an enumerator over all of the nodes that have links going out of or coming into this node.
            </summary>
            <remarks>
            The enumerator iterates over the all nodes that have ports that have any
            links connected to any port of this node.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.IGoNode.SourceLinks">
            <summary>
            Gets an enumerator over all of the links coming into this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all links that come into
            any port of this node.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.IGoNode.DestinationLinks">
            <summary>
            Gets an enumerator over all of the links going out of this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all links that go out of
            any port of this node.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.IGoNode.Links">
            <summary>
            Gets an enumerator over all of the links connected at this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all links that are connected
            at any port of this node.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.IGoNode.Ports">
            <summary>
            Gets an enumerator over all of the ports that are part of this node.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoNode.ChangedNodeUserFlags">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoNode.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoNode.ChangedNodeUserObject">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoNode.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoNode.ChangedToolTipText">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoNode.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoNode.ChangedPropertiesDelegatedToSelectionObject">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoNode.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoNode.ChangedPartID">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoNode.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoNode.#ctor">
            <summary>
            The constructor produces an empty node--no child objects (and thus no ports
            nor connected links) at no particular location.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoNode.CopyObject(Northwoods.GoWeb.GoCopyDictionary)">
            <summary>
            Make sure cached information is not copied.
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoNode.MoveChildren(System.Drawing.RectangleF)">
            <summary>
            This just moves all the children from the group's former location.
            </summary>
            <param name="prevRect">
            The original bounds, in document coordinates.
            </param>
            <remarks>
            This first moves all <see cref="T:Northwoods.GoWeb.IGoLink"/>s, and then all the other child objects.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoNode.RescaleChildren(System.Drawing.RectangleF)">
            <summary>
            This handles the general case of a resize by scaling and repositioning all the children.
            </summary>
            <param name="prevRect">
            The original bounds, in document coordinates.
            </param>
            <remarks>
            Any children whose <c>AutoRescales</c> property is false is not
            resized and repositioned.
            This first rescales all <see cref="T:Northwoods.GoWeb.IGoLink"/>s, and then all the other child objects.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoNode.DoBeginEdit(Northwoods.GoWeb.GoView)">
            <summary>
            Start editing the label.
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoNode.GetToolTip(Northwoods.GoWeb.GoView)">
            <summary>
            Return a string to be displayed in a tooltip, or null for none.
            </summary>
            <param name="view"></param>
            <returns>
            By default this returns this node's <see cref="P:Northwoods.GoWeb.GoNode.ToolTipText"/>.
            Override this method if you want dynamically computed tooltips.
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoNode.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Performs changes for undo and redo.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoNode.GoObject">
            <summary>
            Returns itself as a <see cref="P:Northwoods.GoWeb.GoNode.GoObject"/>.
            </summary>
            <remarks>
            This property cannot be set.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.IGoGraphPart.GoObject"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoNode.UserFlags">
            <summary>
            Gets or sets an integer value associated with this node.
            </summary>
            <value>
            The initial value is zero.
            </value>
            <seealso cref="P:Northwoods.GoWeb.IGoGraphPart.UserFlags"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoNode.UserObject">
            <summary>
            Gets or sets an object associated with this node.
            </summary>
            <value>
            The initial value is null.
            </value>
            <seealso cref="P:Northwoods.GoWeb.IGoGraphPart.UserObject"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoNode.Sources">
            <summary>
            Gets an enumerator over all of the nodes that have links coming into this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all nodes that have ports that have any
            destination links coming into any port of this node.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.IGoNode.Sources"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoNode.Destinations">
            <summary>
            Gets an enumerator over all of the nodes that have links going out of this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all nodes that have ports that have any
            source links going out of any port of this node.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.IGoNode.Destinations"/>
            <seealso cref="P:Northwoods.GoWeb.IGoNode.Nodes"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoNode.Nodes">
            <summary>
            Gets an enumerator over all of the nodes that are connected to this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all nodes that have ports that are
            connected in either direction to any port of this node.
            Note that this does NOT enumerate over all of the child objects that are
            <see cref="T:Northwoods.GoWeb.IGoNode"/>s.  It enumerates all connected <see cref="T:Northwoods.GoWeb.IGoNode"/>s,
            which will include any child nodes that are connected to any child ports.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.IGoNode.Sources"/>
            <seealso cref="P:Northwoods.GoWeb.IGoNode.Destinations"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoNode.SourceLinks">
            <summary>
            Gets an enumerator over all of the links coming into this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all links that come into
            any port of this node.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.IGoNode.SourceLinks"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoNode.DestinationLinks">
            <summary>
            Gets an enumerator over all of the links going out of this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all links that go out of
            any port of this node.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.IGoNode.DestinationLinks"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoNode.Links">
            <summary>
            Gets an enumerator over all of the links connected to this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all links that come into
            or go out of any port of this node.
            Note that this does NOT enumerate over all of the child objects that are
            <see cref="T:Northwoods.GoWeb.IGoLink"/>s.  It enumerates all connected <see cref="T:Northwoods.GoWeb.IGoLink"/>s,
            which will include any child links that are connected to any child ports.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.IGoNode.SourceLinks"/>
            <seealso cref="P:Northwoods.GoWeb.IGoNode.DestinationLinks"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoNode.Ports">
            <summary>
            Gets an enumerator over all of the ports that are part of this node.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.IGoNode.Ports"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoNode.Text">
            <summary>
            Get the principal text string associated with a node.
            </summary>
            <value>
            By default this will just get and set the <see cref="P:Northwoods.GoWeb.GoNode.Label"/>'s
            <see cref="P:Northwoods.GoWeb.GoText.Text"/> property.
            If no such label exists, get returns an empty string and set
            does nothing.
            </value>
            <remarks>
            This property can be used by code that needs to get some string
            that may identify this node, albeit not necessarily uniquely and
            not necessarily visibly.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoNode.Label">
            <summary>
            Get the main GoText object associated with a node.
            </summary>
            <value>
            By default this searches for and returns the first child that is a <see cref="T:Northwoods.GoWeb.GoText"/>.
            </value>
            <remarks>
            By default setting this property does nothing.
            However, some derived classes may implement setting this property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoNode.ToolTipText">
            <summary>
            Gets or sets a string to be displayed in a tooltip.
            </summary>
            <value>
            The initial value is null, which means don't display a tooltip.
            </value>
            <remarks>
            Returning an empty string will display an empty tooltip.
            If you want to generate the tooltip text string dynamically,
            override <see cref="M:Northwoods.GoWeb.GoNode.GetToolTip(Northwoods.GoWeb.GoView)"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.IGoGraphPart.UserFlags"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoNode.Location">
            <summary>
            Assume the natural location of a node is the center of the <see cref="P:Northwoods.GoWeb.GoNode.GoObject"/>.<c>SelectionObject</c>,
            if it is different from the whole group itself.
            </summary>
            <remarks>
            If there is no separate <see cref="P:Northwoods.GoWeb.GoNode.GoObject"/>.<c>SelectionObject</c>, then
            the <c>Location</c> is the same as the <c>Position</c>.
            Setting the location would naturally be implemented as
            <code>this.SelectionObject.Center = value</code>
            but for efficiency, it instead is implemented by setting this node's
            <c>Position</c> so that the <see cref="P:Northwoods.GoWeb.GoNode.GoObject"/>.<c>SelectionObject</c>'s
            <c>Center</c> is at the new location.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoNode.Shadowed">
            <summary>
            Giving this node a shadow really means giving the <c>SelectionObject</c> a shadow.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoNode.Resizable">
            <summary>
            Whether this node is resizable is really determined by whether the <c>SelectionObject</c> is resizable.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoNode.Reshapable">
            <summary>
            Whether this node is reshapable is really determined by whether the <c>SelectionObject</c> is reshapable.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoNode.ResizesRealtime">
            <summary>
            Whether the user can resize this node continuously is really determined by the <c>SelectionObject</c>.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoNode.PartID">
            <summary>
            Gets or sets the unique ID of this part within its document.
            </summary>
            <value>
            The value is invalid unless this object is part of a <see cref="T:Northwoods.GoWeb.GoDocument"/>
            whose <see cref="P:Northwoods.GoWeb.GoDocument.MaintainsPartID"/> property is true.
            Setting this property is normally done only by <see cref="T:Northwoods.GoWeb.GoDocument"/>
            when this object is added to the document, or by code deserializing
            a document, before this object is part of the document.
            The default value is -1, to indicate to the document that it needs
            to find and assign a unique PartID for this object when it is added
            to the document.
            </value>
        </member>
        <member name="F:Northwoods.GoWeb.GoBasicNode.ChangedLabelSpot">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoBasicNode.LabelSpot"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBasicNode.ChangedShape">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoBasicNode.Shape"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBasicNode.ChangedLabel">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoBasicNode.Label"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBasicNode.ChangedPort">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoBasicNode.Port"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBasicNode.ChangedMiddleLabelMargin">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoBasicNode.MiddleLabelMargin"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBasicNode.ChangedAutoResizes">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoBasicNode.AutoResizes"/> property.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoBasicNode.#ctor">
            <summary>
            Create a GoBasicNode with just a port and a shape centered behind the port,
            but no label.
            </summary>
            <remarks>
            This calls <see cref="M:Northwoods.GoWeb.GoBasicNode.CreatePort"/> and <see cref="M:Northwoods.GoWeb.GoBasicNode.CreateShape(Northwoods.GoWeb.GoPort)"/>
            to get initial values for <see cref="P:Northwoods.GoWeb.GoBasicNode.Port"/> and <see cref="P:Northwoods.GoWeb.GoBasicNode.Shape"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoBasicNode.#ctor(Northwoods.GoWeb.GoFigure)">
            <summary>
            Create a GoBasicNode with a port and a label and a <see cref="T:Northwoods.GoWeb.GoDrawing"/> shape,
            initialized to have the figure <paramref name="fig"/> and a Middle <see cref="P:Northwoods.GoWeb.GoBasicNode.LabelSpot"/>.
            [Not in GoDiagram Pocket]
            </summary>
            <param name="fig">a <see cref="T:Northwoods.GoWeb.GoFigure"/> enumeration value</param>
            <remarks>
            This constructor basically does the following, but more efficiently:
            <code>
            GoBasicNode n = new GoBasicNode();
            n.LabelSpot = GoObject.Middle;
            n.Text = "";
            n.Shape = new GoDrawing(fig);
            </code>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoBasicNode.CreatePort">
            <summary>
            Create and initialize a <see cref="T:Northwoods.GoWeb.GoPort"/>.
            </summary>
            <returns>
            a <see cref="T:Northwoods.GoWeb.GoPort"/> that is a shape with no particular
            link spot for links either coming into or going out of the port
            </returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
              protected virtual GoPort CreatePort() {
                GoPort p = new GoPort();
                p.Style = GoPortStyle.Ellipse;  // black circle/ellipse
                // use custom link spots for both links coming in and going out
                p.FromSpot = GoObject.NoSpot;
                p.ToSpot = GoObject.NoSpot;
                p.Size = new SizeF(7, 7);
                return p;
              }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.GoWeb.GoBasicNode.CreateShape(Northwoods.GoWeb.GoPort)">
            <summary>
            Create and initialize a <see cref="T:Northwoods.GoWeb.GoShape"/>.
            </summary>
            <param name="p">the <see cref="T:Northwoods.GoWeb.GoPort"/> created for this node by <see cref="M:Northwoods.GoWeb.GoBasicNode.CreatePort"/></param>
            <returns>
            By default this returns a <see cref="T:Northwoods.GoWeb.GoEllipse"/> that is somewhat larger than the port <paramref name="p"/>.
            </returns>
            <remarks>
            By default the ellipse uses a white brush--set the <see cref="P:Northwoods.GoWeb.GoBasicNode.Pen"/>
            and <see cref="P:Northwoods.GoWeb.GoBasicNode.Brush"/> properties to change the appearance.
            The shape is not itself selectable, resizable, or reshapable.
            </remarks>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoShape CreateShape(GoPort p) {
               // create the bigger circle/ellipse around and behind the port
               GoShape e = new GoEllipse();
               SizeF psize = p.Size;
               e.Size = new SizeF(psize.Width + 2*7, psize.Height + 2*7);
               e.Selectable = false;
               e.Resizable = false;
               e.Reshapable = false;
               e.Brush = GoShape.Brushes_White;
               return e;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.GoWeb.GoBasicNode.CreateLabel(System.String)">
            <summary>
            Create and initialize a <see cref="T:Northwoods.GoWeb.GoText"/> as the label.
            </summary>
            <param name="name"></param>
            <returns>
            a non-selectable, non-editable, non-rescaling <see cref="T:Northwoods.GoWeb.GoText"/>
            displaying <paramref name="name"/>
            </returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoText CreateLabel(String name) {
               // create a label with a transparent background that is centered
               GoText l = new GoText();
               l.Text = name;
               l.Selectable = false;
               l.Alignment = SpotOpposite(this.LabelSpot);
               return l;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.GoWeb.GoBasicNode.CopyChildren(Northwoods.GoWeb.GoGroup,Northwoods.GoWeb.GoCopyDictionary)">
            <summary>
            Make copies of the shape, label and port.
            </summary>
            <param name="newgroup"></param>
            <param name="env"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoBasicNode.Remove(Northwoods.GoWeb.GoObject)">
            <summary>
            If any part is removed from this group,
            be sure to remove any references in local fields.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoBasicNode.LayoutChildren(Northwoods.GoWeb.GoObject)">
            <summary>
            The port is centered in the <see cref="P:Northwoods.GoWeb.GoBasicNode.Shape"/>; the <see cref="P:Northwoods.GoWeb.GoBasicNode.Label"/> is positioned according
            to <see cref="P:Northwoods.GoWeb.GoBasicNode.LabelSpot"/> relative to the shape.
            </summary>
            <param name="childchanged"></param>
            <remarks>
            When the <see cref="P:Northwoods.GoWeb.GoBasicNode.LabelSpot"/> is <see cref="F:Northwoods.GoWeb.GoObject.Middle"/>
            and <see cref="P:Northwoods.GoWeb.GoBasicNode.AutoResizes"/> is true,
            we automatically resize the shape to be somewhat larger than the label,
            and we size the port to be the same size as the shape.
            If <see cref="P:Northwoods.GoWeb.GoBasicNode.AutoResizes"/> is false, the <see cref="P:Northwoods.GoWeb.GoBasicNode.Label"/> is
            resized to fit within the <see cref="P:Northwoods.GoWeb.GoBasicNode.Shape"/>'s bounds minus the margins.
            Also the <see cref="P:Northwoods.GoWeb.GoBasicNode.Label"/>'s <see cref="T:Northwoods.GoWeb.GoText"/>.<see cref="P:Northwoods.GoWeb.GoText.WrappingWidth"/>
            is set to the same value as the label's width.
            When the <see cref="P:Northwoods.GoWeb.GoBasicNode.LabelSpot"/> is not <see cref="F:Northwoods.GoWeb.GoObject.Middle"/>,
            the label is just positioned relative to the <see cref="P:Northwoods.GoWeb.GoBasicNode.Shape"/>
            according to the <see cref="P:Northwoods.GoWeb.GoBasicNode.LabelSpot"/>.
            This method does nothing if there is no <see cref="P:Northwoods.GoWeb.GoBasicNode.Shape"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoBasicNode.OnLabelSpotChanged(System.Int32)">
            <summary>
            Determine how to change the whole node when the <see cref="P:Northwoods.GoWeb.GoBasicNode.LabelSpot"/> changes.
            </summary>
            <param name="old">the former <see cref="P:Northwoods.GoWeb.GoBasicNode.LabelSpot"/> value</param>
            <remarks>
            By default, setting the <see cref="P:Northwoods.GoWeb.GoBasicNode.LabelSpot"/> to <see cref="F:Northwoods.GoWeb.GoObject.Middle"/>
            will make the shape big enough to hold the text and the port the same size as
            the shape, and will make the node not <see cref="P:Northwoods.GoWeb.GoObject.Resizable"/>.
            It also changes the port's <see cref="P:Northwoods.GoWeb.GoPort.Style"/>
            to <see cref="F:Northwoods.GoWeb.GoPortStyle.None"/>, so that the port does not obscure the label.
            Changing the <see cref="P:Northwoods.GoWeb.GoBasicNode.LabelSpot"/> from <see cref="F:Northwoods.GoWeb.GoObject.Middle"/> to some
            other value will reset the shape and port sizes to their initial, default values.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoBasicNode.OnAutoResizesChanged(System.Boolean)">
            <summary>
            This method is called when the value of <see cref="P:Northwoods.GoWeb.GoBasicNode.AutoResizes"/> changes.
            </summary>
            <remarks>
            This just changes the <see cref="P:Northwoods.GoWeb.GoBasicNode.Label"/>'s <see cref="P:Northwoods.GoWeb.GoText.Wrapping"/>
            and <see cref="P:Northwoods.GoWeb.GoText.Clipping"/> properties to be true when the
            <see cref="P:Northwoods.GoWeb.GoBasicNode.AutoResizes"/> property is false, and vice-versa.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoBasicNode.FindName(Northwoods.GoWeb.GoObject)">
            <summary>
            The properties referring to parts of this node
            are also the names of those parts.
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoBasicNode.FindChild(System.String)">
            <summary>
            The properties referring to parts of this node
            are also the names of those parts.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoBasicNode.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle this class's property changes for undo and redo
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.GoWeb.GoBasicNode.SelectionObject">
            <summary>
            The user appears to select the <see cref="P:Northwoods.GoWeb.GoBasicNode.Shape"/>, not the node as a whole.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoBasicNode.LabelSpot">
            <summary>
            Gets or sets the spot at which the <see cref="P:Northwoods.GoWeb.GoBasicNode.Label"/>, if any, should be positioned
            relative to the <see cref="P:Northwoods.GoWeb.GoBasicNode.Shape"/>.
            </summary>
            <remarks>
            This calls the virtual method <see cref="M:Northwoods.GoWeb.GoBasicNode.OnLabelSpotChanged(System.Int32)"/> to determine
            how to change all of the parts of the node appropriately.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoBasicNode.MiddleLabelMargin">
            <summary>
            Gets or sets the how much larger the <see cref="P:Northwoods.GoWeb.GoBasicNode.Shape"/> should be on each side of
            the <see cref="P:Northwoods.GoWeb.GoBasicNode.Label"/> when the <see cref="P:Northwoods.GoWeb.GoBasicNode.LabelSpot"/> is <see cref="F:Northwoods.GoWeb.GoObject.Middle"/>.
            </summary>
            <value>
            The default value is a width of 20 and a height of 10, which is adequate for an ellipse
            around short text strings.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoBasicNode.AutoResizes">
            <summary>
            Gets or sets whether the size of the background is changed as the text label's size changes,
            when the <see cref="P:Northwoods.GoWeb.GoBasicNode.LabelSpot"/> is <c>GoObject.Middle</c>.
            </summary>
            <value>
            The default value is true.
            </value>
            <remarks>
            Setting this property will call <see cref="M:Northwoods.GoWeb.GoBasicNode.OnAutoResizesChanged(System.Boolean)"/> with the old value
            to determine how to change the properties of the <see cref="T:Northwoods.GoWeb.GoText"/> label.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoBasicNode.Pen">
            <summary>
            Gets or sets the shape's <see cref="P:Northwoods.GoWeb.GoShape.Pen"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoBasicNode.Brush">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoBasicNode.Shape"/>'s <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoBasicNode.Text">
            <summary>
            The text is of course just the <see cref="P:Northwoods.GoWeb.GoBasicNode.Label"/>'s text.
            </summary>
            <remarks>
            If there is no <see cref="P:Northwoods.GoWeb.GoBasicNode.Label"/>, the value is an empty string.
            Setting this property will create and position the label, if needed.
            Setting it to a null value will remove the text label from this node.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoBasicNode.Figure">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoWeb.GoDrawing"/>.<see cref="P:Northwoods.GoWeb.GoDrawing.Figure"/>
            of the <see cref="P:Northwoods.GoWeb.GoBasicNode.Shape"/> if the shape is a <see cref="T:Northwoods.GoWeb.GoDrawing"/>.
            [Not in GoDiagram Pocket]
            </summary>
            <value>
            This returns <see cref="T:Northwoods.GoWeb.GoFigure"/>.<see cref="F:Northwoods.GoWeb.GoFigure.None"/>
            in the typical case where the <see cref="P:Northwoods.GoWeb.GoBasicNode.Shape"/> is a <see cref="T:Northwoods.GoWeb.GoEllipse"/>
            or other non-<see cref="T:Northwoods.GoWeb.GoDrawing"/> shape.
            Setting this property has no effect if the <see cref="P:Northwoods.GoWeb.GoBasicNode.Shape"/> is not a <see cref="T:Northwoods.GoWeb.GoDrawing"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoBasicNode.Shape">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoWeb.GoShape"/>, the background for this node.
            </summary>
            <value>
            The new value may be null, to simply remove the background shape.
            </value>
            <remarks>
            Instead of setting the shape after creating a node, you may find it
            easier to override the <see cref="M:Northwoods.GoWeb.GoBasicNode.CreateShape(Northwoods.GoWeb.GoPort)"/> method.
            The new shape will have its Center location,
            Selectable, Resizable, Reshapable, ResizesRealtime, and Shadowed
            properties copied from the old shape.
            Setting this property will also set the <see cref="P:Northwoods.GoWeb.GoBasicNode.Port"/>'s
            <see cref="P:Northwoods.GoWeb.GoPort.PortObject"/> to be the new shape.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoBasicNode.Label">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoWeb.GoText"/>, the label for this node (or null if there is no label).
            </summary>
            <value>
            Initially this value may be null.  You can set the <see cref="P:Northwoods.GoWeb.GoBasicNode.Text"/> value
            to a non-null string in order to create the label.
            The new value may be null, to simply remove the label.
            If non-null, the new text object should have the <see cref="P:Northwoods.GoWeb.GoObject.Selectable"/>
            property set to false.
            </value>
            <remarks>
            If you need to use your own subclass of <see cref="T:Northwoods.GoWeb.GoText"/>,
            instead of setting the label after creating a node, you may find it
            easier to override the <see cref="M:Northwoods.GoWeb.GoBasicNode.CreateLabel(System.String)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoBasicNode.Port">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoWeb.GoPort"/> for this node.
            </summary>
            <value>
            The new value may be null, to simply remove the port.
            If non-null, the port should have the <see cref="P:Northwoods.GoWeb.GoObject.Selectable"/>
            property set to false.
            </value>
            <remarks>
            Setting this property to a new port will also set that port's
            <see cref="P:Northwoods.GoWeb.GoPort.PortObject"/> to be this node's <see cref="P:Northwoods.GoWeb.GoBasicNode.Shape"/>,
            if it didn't already have a <see cref="P:Northwoods.GoWeb.GoPort.PortObject"/>.
            Instead of setting the port after creating a node, you may find it
            easier to override the <see cref="M:Northwoods.GoWeb.GoBasicNode.CreatePort"/> method.
            </remarks>
        </member>
        <member name="T:Northwoods.GoWeb.GoBoxNode">
            <summary>
            A GoBoxNode has a single rectangular port that surrounds another object, named the <see cref="P:Northwoods.GoWeb.GoBoxNode.Body"/>.
            This is most useful when that body object is basically rectangular, and when links
            can connect at any side, determined dynamically.
            </summary>
            <remarks>
            <para>
            This class uses a <see cref="T:Northwoods.GoWeb.GoBoxPort"/> to allow links to come in orthogonally
            and (optionally) be positioned intelligently apart from each other.
            The <see cref="P:Northwoods.GoWeb.GoBoxNode.Port"/> is slightly larger than the <see cref="P:Northwoods.GoWeb.GoBoxNode.Body"/>, so that it appears as if
            it were a border for the body object.  Thus users can start drawing links
            by mouse-down and dragging along the edge of the GoBoxNode.
            You can customize the appearance of that "border" by setting the <see cref="P:Northwoods.GoWeb.GoBoxNode.Port"/>'s
            properties.  For example:
            <code>
            GoBoxNode node1 = new GoBoxNode();
            node1.Text = "box node\n1";
            node1.Label.Alignment = GoObject.Middle;
            node1.Port.PenColor = Color.Black;
            node1.Port.BrushColor = Color.Pink;
            node1.PortBorderMargin = new SizeF(6, 6);
            node1.LinksPointsSpread = true;
            </code>
            </para>
            <para>
            The <see cref="P:Northwoods.GoWeb.GoBoxNode.Body"/> is normally a <see cref="T:Northwoods.GoWeb.GoText"/>, but could
            be any kind of <see cref="T:Northwoods.GoWeb.GoObject"/>, including complex <see cref="T:Northwoods.GoWeb.GoGroup"/>s.
            In this case you may find it advantageous to override the <see cref="P:Northwoods.GoWeb.GoNode.Label"/>
            property to return (and possibly to set) the appropriate <see cref="T:Northwoods.GoWeb.GoText"/>
            object inside your group.
            </para>
            <para>
            As you connect links to this node's <see cref="P:Northwoods.GoWeb.GoBoxNode.Port"/>,
            when <see cref="P:Northwoods.GoWeb.GoBoxNode.LinkPointsSpread"/> is true, other links on the same side
            are not actually spread out until you either move the node or call
            <see cref="M:Northwoods.GoWeb.GoBoxNode.UpdateAllLinkPoints"/>.
            </para>
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoBoxNode.ChangedBody">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoBoxNode.Body"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBoxNode.ChangedPortBorderMargin">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoBoxNode.PortBorderMargin"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBoxNode.ChangedPort">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoBoxNode.Port"/> property.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoBoxNode.#ctor">
            <summary>
            Construct a GoBoxNode that by default has a body that is a multiline
            <see cref="T:Northwoods.GoWeb.GoText"/> object with a white background.
            </summary>
            <remarks>
            This calls <see cref="M:Northwoods.GoWeb.GoBoxNode.CreatePort"/> and <see cref="M:Northwoods.GoWeb.GoBoxNode.CreateBody"/>
            to get initial values for <see cref="P:Northwoods.GoWeb.GoBoxNode.Port"/> and <see cref="P:Northwoods.GoWeb.GoBoxNode.Body"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoBoxNode.CreateBody">
            <summary>
            This method is called by the <see cref="T:Northwoods.GoWeb.GoBoxNode"/> constructor to
            provide the object in the middle of the rectangular port.
            </summary>
            <returns>
            By default this returns a multiline <see cref="T:Northwoods.GoWeb.GoText"/> with a white background.
            </returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoObject CreateBody() {
               GoText t = new GoText();
               t.TransparentBackground = false;
               t.BackgroundColor = Color.White;
               t.Multiline = true;
               t.Selectable = false;
               return t;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.GoWeb.GoBoxNode.CreatePort">
            <summary>
            This method is called by the <see cref="T:Northwoods.GoWeb.GoBoxNode"/> constructor to
            provide the node's single port.
            </summary>
            <returns>
            By default this just returns a <see cref="T:Northwoods.GoWeb.GoBoxPort"/>.
            </returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoPort CreatePort() {
               GoBoxPort p = new GoBoxPort();
               return p;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.GoWeb.GoBoxNode.CopyChildren(Northwoods.GoWeb.GoGroup,Northwoods.GoWeb.GoCopyDictionary)">
            <summary>
            Copy the <see cref="P:Northwoods.GoWeb.GoBoxNode.Port"/> and <see cref="P:Northwoods.GoWeb.GoBoxNode.Body"/>.
            </summary>
            <param name="newgroup"></param>
            <param name="env"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoBoxNode.LayoutChildren(Northwoods.GoWeb.GoObject)">
            <summary>
            Position the <see cref="P:Northwoods.GoWeb.GoBoxNode.Port"/> to be centered on the <see cref="P:Northwoods.GoWeb.GoBoxNode.Body"/>,
            but sized larger by <see cref="P:Northwoods.GoWeb.GoBoxNode.PortBorderMargin"/> width and height on
            each side.
            </summary>
            <param name="childchanged"></param>
            <remarks>
            This method does nothing if there is no <see cref="P:Northwoods.GoWeb.GoBoxNode.Body"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoBoxNode.Remove(Northwoods.GoWeb.GoObject)">
            <summary>
            If any part is removed from this group,
            be sure to remove any references in local fields.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoBoxNode.FindName(Northwoods.GoWeb.GoObject)">
            <summary>
            The properties referring to parts of this node
            are also the names of those parts.
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoBoxNode.FindChild(System.String)">
            <summary>
            The properties referring to parts of this node
            are also the names of those parts.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoBoxNode.UpdateAllLinkPoints">
            <summary>
            Reroute all of the links connected at this port,
            if <see cref="P:Northwoods.GoWeb.GoBoxNode.LinkPointsSpread"/> is true, so that
            all of the link points are up-to-date.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoBoxNode.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Perform changes to the body or port margin for undo.
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.GoWeb.GoBoxNode.Body">
            <summary>
            Gets or sets the main object that this node is displaying.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoBoxNode.PortBorderMargin">
            <summary>
            Gets or sets the margin that is always visible for the port on each side of the body.
            </summary>
            <value>
            This specifies the width of each side margin and the height of top margin and the
            height of the bottom margin, in document coordinates.
            By default the width and height are each <c>4</c>, so that the port is <c>8</c>
            units wider and taller than the <see cref="P:Northwoods.GoWeb.GoBoxNode.Body"/>.
            The width and height must be non-negative.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoBoxNode.Port">
            <summary>
            Gets or sets the port for this node.
            </summary>
            <value>
            The new value may be null, to simply remove the port.
            If non-null, the port should have the <see cref="P:Northwoods.GoWeb.GoObject.Selectable"/>
            property set to false.
            </value>
            <remarks>
            Instead of setting the port after creating a node, you may find it
            easier to override the <see cref="M:Northwoods.GoWeb.GoBoxNode.CreatePort"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoBoxNode.LinkPointsSpread">
            <summary>
            Gets or sets whether the link points of the links connected to this node's <see cref="T:Northwoods.GoWeb.GoBoxPort"/>
            are spread evenly along the side of the port, or if they are all at the
            mid-point of the side.
            </summary>
            <value>
            The value actually comes from the <see cref="P:Northwoods.GoWeb.GoBoxNode.Port"/>, which is normally a <see cref="T:Northwoods.GoWeb.GoBoxPort"/>.
            </value>
        </member>
        <member name="T:Northwoods.GoWeb.GoBoxPort">
            <summary>
            A rectangular port that is smart about where each of its
            links is connected, centered or distributed on each side,
            meeting the edge of the port orthogonally.
            </summary>
            <remarks>
            <para>
            Although this class is normally used as part of a <see cref="T:Northwoods.GoWeb.GoBoxNode"/>
            to act as a port that surrounds another object, you can use
            GoBoxPort as part of other nodes, such as <see cref="T:Northwoods.GoWeb.GoIconicNode"/>.
            </para>
            <para>
            Normally links can connect at any of the four sides.
            If you want to permit links at only particular sides, you can set the
            <see cref="P:Northwoods.GoWeb.GoBoxPort.FromSides"/> and/or <see cref="P:Northwoods.GoWeb.GoBoxPort.ToSides"/> properties.
            </para>
            </remarks>
        </member>
        <member name="T:Northwoods.GoWeb.GoPort">
            <summary>
            This class provides the standard implementation of <see cref="T:Northwoods.GoWeb.IGoPort"/>
            as a <see cref="P:Northwoods.GoWeb.GoPort.GoObject"/>.
            </summary>
            <remarks>
            <para>
            A port is an object to which one or more links may be connected.
            Ports are normally part of a <see cref="T:Northwoods.GoWeb.GoNode"/>,
            although they may also be part of a <see cref="T:Northwoods.GoWeb.GoLabeledLink"/>.
            A node will only need more than one port when you want to make sure there is a
            logical distinction between the links or when you want to position the
            links connections at one physical location.  Both reasons apply, for example,
            when wanting to represent an electronic logic gate or arithmetic or database
            operator: you don't want to confuse where each input is getting its value from.
            </para>
            <para>
            Since GoPort inherits from <see cref="T:Northwoods.GoWeb.GoShape"/>, it is easy to customize
            the appearance of a port by setting the <see cref="P:Northwoods.GoWeb.GoShape.BrushColor"/> and/or the
            <see cref="P:Northwoods.GoWeb.GoShape.PenColor"/> properties.  The <see cref="P:Northwoods.GoWeb.GoPort.Style"/> property
            controls the shape of the port within the port's bounds.
            The default style is <see cref="F:Northwoods.GoWeb.GoPortStyle.Ellipse"/>.  When the style is
            <see cref="F:Northwoods.GoWeb.GoPortStyle.None"/>, nothing is painted for the port, but it
            continues to behave normally.
            </para>
            <para>
            A less common approach to providing a port appearance is to specify a style
            that is <see cref="F:Northwoods.GoWeb.GoPortStyle.Object"/>.  For this case you will need to
            set the <see cref="P:Northwoods.GoWeb.GoPort.PortObject"/> property to refer to a <see cref="P:Northwoods.GoWeb.GoPort.GoObject"/>
            that is not part of any group or layer.  This <see cref="P:Northwoods.GoWeb.GoPort.PortObject"/> may be
            shared by many ports.
            When there is a port object, the appearance comes totally from that object --
            the port's brush and pen are ignored.  You'll need to make sure that that
            object can be resized to the same size as the port.  If you use a <see cref="T:Northwoods.GoWeb.GoText"/>
            as a port object, be sure to either set <see cref="P:Northwoods.GoWeb.GoText.AutoResizes"/> true,
            or resize the port to be able to show all of the text.
            </para>
            <para>
            The links that are attached to a port are conceptually divided into two categories:
            ones that come into the port, and ones that go out from the port.  But often you
            won't care about the direction, so some of the properties and methods apply to all links.
            The <see cref="P:Northwoods.GoWeb.GoPort.SourceLinks"/> property allows you to enumerate the links that are
            coming into a port -- e.g. the links whose <see cref="P:Northwoods.GoWeb.IGoLink.ToPort"/> is this port.
            The <see cref="P:Northwoods.GoWeb.GoPort.DestinationLinks"/> property allows you to enumerate the links that are
            going out of a port -- e.g. the links whose <see cref="P:Northwoods.GoWeb.IGoLink.FromPort"/> is this port.
            The <see cref="P:Northwoods.GoWeb.GoPort.Links"/> property allows you to enumerate all links connected at this port.
            The <see cref="P:Northwoods.GoWeb.GoPort.SourceLinksCount"/>, <see cref="P:Northwoods.GoWeb.GoPort.DestinationLinksCount"/>, and
            <see cref="P:Northwoods.GoWeb.GoPort.LinksCount"/> properties give you the size of each of those three collections.
            The User Guide provides examples for how to traverse a graph.
            </para>
            <para>
            GoPort provides a fair bit of control for where and how each link will appear
            to connect to it.
            The most common case is that links connect at a particular spot on the port,
            usually the middle of some side.  You can get this behavior by setting the
            <see cref="P:Northwoods.GoWeb.GoPort.FromSpot"/> and <see cref="P:Northwoods.GoWeb.GoPort.ToSpot"/> properties.
            For example, setting <see cref="P:Northwoods.GoWeb.GoPort.FromSpot"/> to <c>GoObject.MiddleRight</c>
            will cause all destination links to come out of the port at the middle of the right side.
            Similarly, you can set the <see cref="P:Northwoods.GoWeb.GoPort.ToSpot"/> to be the same spot, or perhaps
            a different spot, say <c>GoObject.MiddleLeft</c> if you want links to go
            into the port from the left side.
            When the spot(s) are set in this manner, each link will have a short end segment
            at the port.
            </para>
            <para>
            More generally, you can override the <see cref="M:Northwoods.GoWeb.GoPort.GetToLinkPoint(Northwoods.GoWeb.IGoLink)"/> and/or
            <see cref="M:Northwoods.GoWeb.GoPort.GetFromLinkPoint(Northwoods.GoWeb.IGoLink)"/> methods to control the exact end point for the link,
            for source links and for destination links, respectively.
            Similarly, you can override the <see cref="M:Northwoods.GoWeb.GoPort.GetToLinkDir(Northwoods.GoWeb.IGoLink)"/> and/or
            <see cref="M:Northwoods.GoWeb.GoPort.GetFromLinkDir(Northwoods.GoWeb.IGoLink)"/> methods to control what direction each link's end
            segment should travel.
            <see cref="M:Northwoods.GoWeb.GoPort.GetEndSegmentLength(Northwoods.GoWeb.IGoLink,System.Boolean)"/> controls how long each end segment should be,
            assuming there is one at all.  If the port spot is <c>GoObject.NoSpot</c>,
            there usually won't be an end segment in the link at that port.
            </para>
            <para>
            Many applications do not want to permit the user to draw links between any two ports.
            There are semantic rules that may make linking particular pairs of ports invalid.
            Or there may be some ports for which only one direction link may be connected.
            You can easily specify the most common restrictions by setting one or more of the
            following properties: <see cref="P:Northwoods.GoWeb.GoPort.IsValidFrom"/>, <see cref="P:Northwoods.GoWeb.GoPort.IsValidTo"/>,
            <see cref="P:Northwoods.GoWeb.GoPort.IsValidSelfNode"/>, <see cref="P:Northwoods.GoWeb.GoPort.IsValidDuplicateLinks"/>, and
            <see cref="P:Northwoods.GoWeb.GoPort.IsValidSingleLink"/>.
            </para>
            <para>
            For the most general or dynamic cases, you can override the <see cref="M:Northwoods.GoWeb.GoPort.IsValidLink(Northwoods.GoWeb.IGoPort)"/>
            method, either here on <see cref="T:Northwoods.GoWeb.GoPort"/>, or on the <see cref="T:Northwoods.GoWeb.GoToolLinkingNew"/>
            and <see cref="T:Northwoods.GoWeb.GoToolRelinking"/> tools associated with your <see cref="T:Northwoods.GoWeb.GoView"/>.
            Also consider setting the <see cref="P:Northwoods.GoWeb.GoDocument.ValidCycle"/> property.
            </para>
            </remarks>
        </member>
        <member name="T:Northwoods.GoWeb.IGoPort">
            <summary>
            This interface represents an abstract connection point for a link to
            be attached to a node.
            </summary>
            <remarks>
            Every <c>IGoPort</c> also implements <see cref="P:Northwoods.GoWeb.IGoGraphPart.GoObject"/>,
            <see cref="P:Northwoods.GoWeb.IGoGraphPart.UserFlags"/>, and <see cref="P:Northwoods.GoWeb.IGoGraphPart.UserObject"/>.
            </remarks>
            <seealso cref="T:Northwoods.GoWeb.GoPort"/>
            <seealso cref="T:Northwoods.GoWeb.IGoNode"/>
            <seealso cref="T:Northwoods.GoWeb.IGoLink"/>
        </member>
        <member name="M:Northwoods.GoWeb.IGoPort.AddSourceLink(Northwoods.GoWeb.IGoLink)">
            <summary>
            Add a link whose <see cref="P:Northwoods.GoWeb.IGoLink.ToPort"/> should be this port.
            </summary>
            <param name="l"></param>
        </member>
        <member name="M:Northwoods.GoWeb.IGoPort.AddDestinationLink(Northwoods.GoWeb.IGoLink)">
            <summary>
            Add a link whose <see cref="P:Northwoods.GoWeb.IGoLink.FromPort"/> should be this port.
            </summary>
            <param name="l"></param>
        </member>
        <member name="M:Northwoods.GoWeb.IGoPort.RemoveLink(Northwoods.GoWeb.IGoLink)">
            <summary>
            Remove a link from the collection of links connected to this port.
            </summary>
            <param name="l"></param>
        </member>
        <member name="M:Northwoods.GoWeb.IGoPort.ContainsLink(Northwoods.GoWeb.IGoLink)">
            <summary>
            This predicate is true if the given link is connected to this port.
            </summary>
            <param name="l"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.IGoPort.ClearLinks">
            <summary>
            Remove all links connected at this port.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.IGoPort.CopyLinksArray">
            <summary>
            Returns a newly allocated array containing references to all of the
            links connected to this port.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.IGoPort.IsValidLink(Northwoods.GoWeb.IGoPort)">
            <summary>
            This predicate should be true when it is valid to create a link from
            this port to another port.
            </summary>
            <param name="toPort"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.IGoPort.CanLinkFrom">
            <summary>
            This predicate should be true if, by itself, there is no known
            reason why one couldn't create a valid link from this port to some port.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.IGoPort.CanLinkTo">
            <summary>
            This predicate should be true if, by itself, there is no known
            reason why one couldn't create a valid link from some port to this one.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.IGoPort.OnLinkChanged(Northwoods.GoWeb.IGoLink,System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)">
            <summary>
            This method is called when a link connected to this port is changed.
            </summary>
            <param name="link"></param>
            <param name="subhint"></param>
            <param name="oldI"></param>
            <param name="oldVal"></param>
            <param name="oldRect"></param>
            <param name="newI"></param>
            <param name="newVal"></param>
            <param name="newRect"></param>
        </member>
        <member name="P:Northwoods.GoWeb.IGoPort.Links">
            <summary>
            Gets an enumerator over all of the links connected at this port.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.IGoPort.SourceLinks">
            <summary>
            Gets an enumerator over all of the links coming into this port.
            </summary>
            <remarks>
            Each source link's <see cref="P:Northwoods.GoWeb.IGoLink.ToPort"/> will be this port.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.IGoPort.DestinationLinks">
            <summary>
            Gets an enumerator over all of the links going out of this port.
            </summary>
            <remarks>
            Each destination link's <see cref="P:Northwoods.GoWeb.IGoLink.FromPort"/> will be this port.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.IGoPort.LinksCount">
            <summary>
            Gets the total number of links connected at this port.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.IGoPort.SourceLinksCount">
            <summary>
            Gets the number of links coming into this port.
            </summary>
            <remarks>
            This is the number of links whose <see cref="P:Northwoods.GoWeb.IGoLink.ToPort"/>
            is this port.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.IGoPort.DestinationLinksCount">
            <summary>
            Gets the number of links going out of this port.
            </summary>
            <remarks>
            This is the number of links whose <see cref="P:Northwoods.GoWeb.IGoLink.FromPort"/>
            is this port.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.IGoPort.Node">
            <summary>
            Gets the node that this port is part of.
            </summary>
            <remarks>
            If this port is not part of any node, this should return null.
            If this port is part of a node that in turn is part of another node,
            this should return the highest-level (most encompassing) node.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoPort.ChangedPortUserFlags">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoPort.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPort.ChangedPortUserObject">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoPort.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPort.ChangedStyle">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoPort.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPort.ChangedObject">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoPort.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPort.ChangedValidFrom">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoPort.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPort.ChangedValidTo">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoPort.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPort.ChangedValidSelfNode">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoPort.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPort.ChangedFromSpot">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoPort.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPort.ChangedToSpot">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoPort.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPort.ChangedAddedLink">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoPort.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPort.ChangedRemovedLink">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoPort.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPort.ChangedValidDuplicateLinks">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoPort.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPort.ChangedEndSegmentLength">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoPort.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPort.ChangedPartID">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoPort.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPort.ChangedClearsLinksWhenRemoved">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoPort.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPort.ChangedValidSingleLink">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoPort.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoPort.#ctor">
            <summary>
            The constructor produces a port whose appearance is a filled black ellipse,
            that is both a valid source and destination for linking, that assumes that
            source links come in from the left and that destination links depart out
            to the right, and that is not selectable or resizable by the user.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoPort.CopyObject(Northwoods.GoWeb.GoCopyDictionary)">
            <summary>
            Copying a port does not immediately cause its links to be copied.
            </summary>
            <param name="env"></param>
            <remarks>
            The <see cref="P:Northwoods.GoWeb.GoPort.PortObject"/> is only copied if it belongs to
            a document; otherwise it remains shared with the original port.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoPort.CopyObjectDelayed(Northwoods.GoWeb.GoCopyDictionary,Northwoods.GoWeb.GoObject)">
            <summary>
            Make sure any unshared <see cref="P:Northwoods.GoWeb.GoPort.PortObject"/> is copied.
            </summary>
            <param name="env"></param>
            <param name="newobj"></param>
            <remarks>
            If the <see cref="P:Northwoods.GoWeb.GoPort.PortObject"/> is a shared object, both the
            new port and the old port refer to the same object.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoPort.AddSourceLink(Northwoods.GoWeb.IGoLink)">
            <summary>
            Add a link to this port's collection of connected links,
            making sure the link's ToPort is this port so that the
            link is a connection from another source port.
            </summary>
            <param name="link"></param>
            <remarks>
            If the link is actually added to this port's collection of links,
            this will call <see cref="M:Northwoods.GoWeb.GoPort.OnLinkChanged(Northwoods.GoWeb.IGoLink,System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> to allow the port to
            update itself.  For example, this may be useful to change the
            appearance of the port as the number of connected links changes.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoPort.AddDestinationLink(Northwoods.GoWeb.IGoLink)">
            <summary>
            Add a link to this port's collection of connected links,
            making sure the link's FromPort is this port so that the
            link is a connection to another destination port.
            </summary>
            <param name="link"></param>
            <remarks>
            If the link is actually added to this port's collection of links,
            this will call <see cref="M:Northwoods.GoWeb.GoPort.OnLinkChanged(Northwoods.GoWeb.IGoLink,System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> to allow the port to
            update itself.  For example, this may be useful to change the
            appearance of the port as the number of connected links changes.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoPort.RemoveLink(Northwoods.GoWeb.IGoLink)">
            <summary>
            Remove a link from this port's collection of connected links.
            </summary>
            <param name="link"></param>
            <remarks>
            If the link is actually removed from this port's collection of links,
            this will call <see cref="M:Northwoods.GoWeb.GoPort.OnLinkChanged(Northwoods.GoWeb.IGoLink,System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> to allow the port to
            update itself.  For example, this may be useful to change the
            appearance of the port as the number of connected links changes.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoPort.ContainsLink(Northwoods.GoWeb.IGoLink)">
            <summary>
            Determine if a link is connected at this port.
            </summary>
            <param name="l"></param>
            <returns>
            True if <paramref name="l"/> is in this port's collection of connected links.
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoPort.ClearLinks">
            <summary>
            Remove all links connected to this port.
            </summary>
            <remarks>
            Normally this will just call <see cref="M:Northwoods.GoWeb.IGoLink.Unlink"/> on each link.
            However, this method does not do so if the link is in a document
            but the port is in a view, or vice versa.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoPort.CopyLinksArray">
            <summary>
            Returns a newly allocated array containing references to all of the
            links connected to this port.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.IGoPort.CopyLinksArray"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoPort.FindTopNode(Northwoods.GoWeb.GoObject)">
            <summary>
            Return the most inclusive node containing an object.
            </summary>
            <param name="x"></param>
            <returns>
            An <see cref="T:Northwoods.GoWeb.IGoNode"/> that is as close to top-level in the
            <see cref="P:Northwoods.GoWeb.GoPort.GoObject"/>.<c>Parent</c> hierarchy as possible.
            If <paramref name="x"/> is null, this returns null;
            If there is no <see cref="T:Northwoods.GoWeb.IGoNode"/> that contains the object,
            this will return null.
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoPort.FindParentNode(Northwoods.GoWeb.GoObject)">
            <summary>
            Return the node that immediately contains an object, or return the object
            itself if it is an <see cref="T:Northwoods.GoWeb.IGoNode"/>.
            </summary>
            <param name="x"></param>
            <returns>
            An <see cref="T:Northwoods.GoWeb.IGoNode"/> that either is <paramref name="x"/> or the first
            <see cref="P:Northwoods.GoWeb.GoPort.GoObject"/>.<c>Parent</c> going up the part hierarchy.
            If <paramref name="x"/> is null, this returns null.
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoPort.IsValidLink(Northwoods.GoWeb.IGoPort)">
            <summary>
            True if it is valid to create a link from this port to <paramref name="toPort"/>.
            </summary>
            <param name="toPort"></param>
            <remarks>
            <para>
            By default this is true when <paramref name="toPort"/> is not the same as this
            port, <see cref="M:Northwoods.GoWeb.GoPort.CanLinkFrom"/> is true, and <see cref="M:Northwoods.GoWeb.GoPort.CanLinkTo"/> is true
            for the <paramref name="toPort"/> port.
            Furthermore, this considers the <see cref="P:Northwoods.GoWeb.GoPort.IsValidSelfNode"/>, the
            <see cref="P:Northwoods.GoWeb.GoPort.IsValidDuplicateLinks"/>, and the <see cref="P:Northwoods.GoWeb.GoDocument.ValidCycle"/>
            properties.
            </para>
            <para>
            This is called by <see cref="T:Northwoods.GoWeb.GoToolLinkingNew"/>.<see cref="M:Northwoods.GoWeb.GoToolLinking.IsValidLink(Northwoods.GoWeb.IGoPort,Northwoods.GoWeb.IGoPort)"/> and
            <see cref="T:Northwoods.GoWeb.GoToolRelinking"/>.<see cref="M:Northwoods.GoWeb.GoToolLinking.IsValidLink(Northwoods.GoWeb.IGoPort,Northwoods.GoWeb.IGoPort)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoPort.CanLinkFrom">
            <summary>
            This predicate should be true if, by itself, there is no known
            reason why one couldn't create a valid link from this port to some port.
            </summary>
            <remarks>
            To be true, this port must pass <see cref="P:Northwoods.GoWeb.GoPort.IsValidFrom"/>,
            <see cref="P:Northwoods.GoWeb.GoPort.GoObject"/>.<c>CanView</c>, and <c>.Layer.CanLinkObjects</c> (if it
            belongs to a layer).
            Furthermore, if <see cref="P:Northwoods.GoWeb.GoPort.IsValidSingleLink"/> is true,
            the value of <see cref="P:Northwoods.GoWeb.GoPort.LinksCount"/> must be zero.
            To control the validity of link creation considering two ports,
            override <see cref="M:Northwoods.GoWeb.GoPort.IsValidLink(Northwoods.GoWeb.IGoPort)"/> or set one of the properties
            that that method depends on.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoPort.CanLinkTo">
            <summary>
            This predicate should be true if, by itself, there is no known
            reason why one couldn't create a valid link from some port to this one.
            </summary>
            <remarks>
            To be true, this port must pass <see cref="P:Northwoods.GoWeb.GoPort.IsValidTo"/>,
            <see cref="P:Northwoods.GoWeb.GoPort.GoObject"/>.<c>CanView</c>, and <c>.Layer.CanLinkObjects</c> (if it
            belongs to a layer).
            Furthermore, if <see cref="P:Northwoods.GoWeb.GoPort.IsValidSingleLink"/> is true,
            the value of <see cref="P:Northwoods.GoWeb.GoPort.LinksCount"/> must be zero.
            To control the validity of link creation considering two ports,
            override <see cref="M:Northwoods.GoWeb.GoPort.IsValidLink(Northwoods.GoWeb.IGoPort)"/> or set one of the properties
            that that method depends on.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoPort.IsInSameNode(Northwoods.GoWeb.IGoPort,Northwoods.GoWeb.IGoPort)">
            <summary>
            This static method determines if both arguments belong to the same IGoNode.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>
            True if both ports are part of the same <see cref="T:Northwoods.GoWeb.IGoNode"/>.
            If the ports are not part of an <see cref="T:Northwoods.GoWeb.IGoNode"/> (but only contained
            by a <see cref="T:Northwoods.GoWeb.GoGroup"/>), their <see cref="P:Northwoods.GoWeb.GoPort.GoObject"/>.<c>TopLevelObject</c>s
            are compared instead.
            </returns>
            <seealso cref="P:Northwoods.GoWeb.GoPort.Node"/>
            <seealso cref="M:Northwoods.GoWeb.GoPort.IsInSameNode(Northwoods.GoWeb.IGoPort)"/>
            <seealso cref="M:Northwoods.GoWeb.GoPort.FindParentNode(Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoPort.IsInSameNode(Northwoods.GoWeb.IGoPort)">
            <summary>
            Determine if this port is in the same group as another port.
            </summary>
            <param name="p"></param>
            <returns>
            True if this port is part of the same <see cref="T:Northwoods.GoWeb.GoGroup"/>
            as <paramref name="p"/>.
            </returns>
            <seealso cref="M:Northwoods.GoWeb.GoPort.IsInSameNode(Northwoods.GoWeb.IGoPort,Northwoods.GoWeb.IGoPort)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoPort.IsLinked(Northwoods.GoWeb.IGoPort,Northwoods.GoWeb.IGoPort)">
            <summary>
            This static method determines if there is a link going from one port to another.
            </summary>
            <param name="a">a source port</param>
            <param name="b">a destination port</param>
            <returns>
            True if there is an <see cref="T:Northwoods.GoWeb.IGoLink"/> from <paramref name="a"/>
            to <paramref name="b"/>.
            Note that a link in the opposite direction will not satisfy this predicate.
            </returns>
            <seealso cref="M:Northwoods.GoWeb.GoPort.IsLinked(Northwoods.GoWeb.IGoPort)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoPort.IsLinked(Northwoods.GoWeb.IGoPort)">
            <summary>
            Determine if there is a link from this port to another port.
            </summary>
            <param name="p">a destination port</param>
            <returns>
            True if there is an <see cref="T:Northwoods.GoWeb.IGoLink"/> from this port
            to <paramref name="p"/>.
            Note that a link in the opposite direction, that is one whose
            <see cref="P:Northwoods.GoWeb.IGoLink.FromPort"/> is <paramref name="p"/> and
            whose <see cref="P:Northwoods.GoWeb.IGoLink.ToPort"/> is this port,
            will not satisfy this predicate.
            </returns>
            <seealso cref="M:Northwoods.GoWeb.GoPort.IsLinked(Northwoods.GoWeb.IGoPort,Northwoods.GoWeb.IGoPort)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoPort.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)">
            <summary>
            Draw a port as either a simple shape using a Pen and Brush,
            as an arbitrary object, or not at all.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <remarks>
            By default this method uses the <see cref="P:Northwoods.GoWeb.GoPort.Style"/> property to
            determine the general shape of the port.
            When the <see cref="P:Northwoods.GoWeb.GoPort.Style"/> is <see cref="T:Northwoods.GoWeb.GoPortStyle"/>.<see cref="F:Northwoods.GoWeb.GoPortStyle.None"/>,
            nothing is painted.
            When the <see cref="P:Northwoods.GoWeb.GoPort.Style"/> is <see cref="T:Northwoods.GoWeb.GoPortStyle"/>.<see cref="F:Northwoods.GoWeb.GoPortStyle.Object"/>
            and the <see cref="P:Northwoods.GoWeb.GoPort.PortObject"/> is an object that does not
            belong to any <see cref="T:Northwoods.GoWeb.GoLayer"/>,
            we set the <see cref="P:Northwoods.GoWeb.GoPort.PortObject"/>'s <c>Bounds</c>
            property to this port's bounds before painting that <see cref="P:Northwoods.GoWeb.GoPort.PortObject"/>.
            If the <see cref="P:Northwoods.GoWeb.GoPort.Style"/> is not <see cref="F:Northwoods.GoWeb.GoPortStyle.Object"/>,
            or if the <see cref="P:Northwoods.GoWeb.GoPort.PortObject"/> belongs to a layer
            (typically because it belongs to this port's node or it is the node itself),
            then the <see cref="P:Northwoods.GoWeb.GoPort.PortObject"/> is ignored here -- it will be
            painted by the normal mechanisms and not specially for this port.
            This ignores the <see cref="P:Northwoods.GoWeb.GoPort.GoObject"/>.<c>Shadowed</c> property.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoPort.MakePath">
            <summary>
            Produce a <c>GraphicsPath</c> representing this shape.
            </summary>
            <returns>a newly allocated <c>GraphicsPath</c></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoPort.PaintGreek(System.Drawing.Graphics,Northwoods.GoWeb.GoView)">
            <summary>
            Because ports are normally small objects, we heed the
            <see cref="P:Northwoods.GoWeb.GoView.PaintNothingScale"/> and <see cref="P:Northwoods.GoWeb.GoView.PaintGreekScale"/>
            properties.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <returns></returns>
            <remarks>
            Greeking of a port is accomplished by just drawing a rectangle with
            the port's bounds.
            If <see cref="P:Northwoods.GoWeb.GoView.IsPrinting"/> is true, we reduce the scales at
            which we paint nothing or paint greek, so that the printed representation
            will have more detail than the on-screen one.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoPort.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.GoWeb.GoView)">
            <summary>
            If the <see cref="P:Northwoods.GoWeb.GoPort.Style"/> is <see cref="F:Northwoods.GoWeb.GoPortStyle.Object"/>, we
            need to consider the <see cref="P:Northwoods.GoWeb.GoPort.PortObject"/>'s paint bounds.
            </summary>
            <param name="rect"></param>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoPort.GetNearestIntersectionPoint(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)">
            <summary>
            If there is a <see cref="P:Northwoods.GoWeb.GoPort.PortObject"/> and the <see cref="P:Northwoods.GoWeb.GoPort.Style"/>
            is not <see cref="T:Northwoods.GoWeb.GoPortStyle"/>.<see cref="F:Northwoods.GoWeb.GoPortStyle.Object"/>,
            return the closest intersection point of the given line with that object.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="result"></param>
            <returns></returns>
            <remarks>
            This supports the case where the <see cref="P:Northwoods.GoWeb.GoPort.PortObject"/> is either
            a child of this port's node, or is the whole node itself.
            If there is no <see cref="P:Northwoods.GoWeb.GoPort.PortObject"/> or if the <see cref="P:Northwoods.GoWeb.GoPort.Style"/>
            is <see cref="F:Northwoods.GoWeb.GoPortStyle.Object"/>, we just return the default
            result which assumes the port is just a rectangle.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoPort.GetCursorName(Northwoods.GoWeb.GoView)">
            <summary>
            Change the cursor to a "hand" cursor if the user can draw a new link at this port.
            </summary>
            <param name="view"></param>
            <returns>
            "hand" if the <see cref="M:Northwoods.GoWeb.GoView.CanLinkObjects"/> is true and if
            <see cref="M:Northwoods.GoWeb.GoPort.CanLinkFrom"/> or <see cref="M:Northwoods.GoWeb.GoPort.CanLinkTo"/> are true,
            null if the user cannot start drawing a new link from or to this port
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoPort.GetFromLinkPoint(Northwoods.GoWeb.IGoLink)">
            <summary>
            Determines the actual point at which
            a link coming out from this port should originate.
            </summary>
            <param name="link"></param>
            <returns></returns>
            <remarks>
            When the value of <see cref="P:Northwoods.GoWeb.GoPort.FromSpot"/> is not <c>GoObject.NoSpot</c>,
            this just returns that spot's location.
            Otherwise this returns <see cref="M:Northwoods.GoWeb.GoPort.GetLinkPointFromPoint(System.Drawing.PointF)"/> for
            a point near the end of the link.
            You may wish to override this method if you want to customize
            the link point connection dynamically.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoPort.GetToLinkPoint(Northwoods.GoWeb.IGoLink)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoPort.GetToLinkPoint(Northwoods.GoWeb.IGoLink)">
            <summary>
            Determine the actual point at which
            a link connected to this port should terminate.
            </summary>
            <param name="link"></param>
            <returns></returns>
            <remarks>
            When the value of <see cref="P:Northwoods.GoWeb.GoPort.ToSpot"/> is not <c>GoObject.NoSpot</c>,
            this just returns that spot's location.
            Otherwise this returns <see cref="M:Northwoods.GoWeb.GoPort.GetLinkPointFromPoint(System.Drawing.PointF)"/> for
            a point near the end of the link.
            You may wish to override this method if you want to customize
            the link point connection dynamically.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoPort.GetFromLinkPoint(Northwoods.GoWeb.IGoLink)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoPort.GetLinkPointFromPoint(System.Drawing.PointF)">
            <summary>
            Determine the actual point at which
            a link connected to this port should terminate when the spot is
            <c>GoObject.NoSpot</c>.
            </summary>
            <param name="p"></param>
            <returns></returns>
            <remarks>
            By default this is the same as <see cref="M:Northwoods.GoWeb.GoPort.GetNearestIntersectionPoint(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)"/>
            for the line from <paramref name="p"/> to the center of this port.
            But this will just return the <c>GoObject.Center</c> if the point is
            contained in this port (or <see cref="P:Northwoods.GoWeb.GoPort.PortObject"/>, if any).
            You may wish to override this method if you want to customize
            the link point connection dynamically.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoPort.GetFromLinkPoint(Northwoods.GoWeb.IGoLink)"/>
            <seealso cref="M:Northwoods.GoWeb.GoPort.GetToLinkPoint(Northwoods.GoWeb.IGoLink)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoPort.GetFromLinkDir(Northwoods.GoWeb.IGoLink)">
            <summary>
            Determine the direction that a link will go when coming out of this port.
            </summary>
            <param name="link"></param>
            <returns>
            A direction in degrees, where the positive X axis is zero, and where
            <c>90</c> is downward along the positive Y axis.
            </returns>
            <remarks>
            When the value of <see cref="P:Northwoods.GoWeb.GoPort.FromSpot"/> is not
            <c>GoObject.NoSpot</c> or <c>GoObject.Middle</c>,
            this just returns the result of calling <see cref="M:Northwoods.GoWeb.GoPort.GetLinkDir(System.Int32)"/>.
            Otherwise this returns one of the horizontal or vertical directions,
            based on the relative positions of the <paramref name="link"/>'s other port.
            You may wish to override this method if you want to customize dynamically
            the direction of the link at the link point.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoPort.GetToLinkDir(Northwoods.GoWeb.IGoLink)"/>
            <seealso cref="M:Northwoods.GoWeb.GoPort.GetLinkDir(System.Int32)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoPort.GetToLinkDir(Northwoods.GoWeb.IGoLink)">
            <summary>
            Determine the direction that a link will go when going into this port.
            </summary>
            <param name="link"></param>
            <returns>
            A direction in degrees, where the positive X axis is zero, and where
            <c>90</c> is downward along the positive Y axis.
            </returns>
            <remarks>
            When the value of <see cref="P:Northwoods.GoWeb.GoPort.ToSpot"/> is not
            <c>GoObject.NoSpot</c> or <c>GoObject.Middle</c>,
            this just returns the result of calling <see cref="M:Northwoods.GoWeb.GoPort.GetLinkDir(System.Int32)"/>.
            Otherwise this returns one of the horizontal or vertical directions,
            based on the relative positions of the <paramref name="link"/>'s other port.
            You may wish to override this method if you want to customize dynamically
            the direction of the link at the link point.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoPort.GetFromLinkDir(Northwoods.GoWeb.IGoLink)"/>
            <seealso cref="M:Northwoods.GoWeb.GoPort.GetLinkDir(System.Int32)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoPort.GetLinkDir(System.Int32)">
            <summary>
            Determine the direction in which the link should go from the link point.
            </summary>
            <param name="spot"></param>
            <returns>
            A direction in degrees, where the positive X axis is zero, and where
            <c>90</c> is downward along the positive Y axis.
            </returns>
            <remarks>
            By default this handles the eight standard object spots around the edges.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoPort.GetFromLinkPoint(Northwoods.GoWeb.IGoLink)"/>
            <seealso cref="M:Northwoods.GoWeb.GoPort.GetToLinkPoint(Northwoods.GoWeb.IGoLink)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoPort.GetFromEndSegmentLength(Northwoods.GoWeb.IGoLink)">
            <summary>
            Return the length of the link's first segment, at its <see cref="P:Northwoods.GoWeb.IGoLink.FromPort"/>.
            </summary>
            <param name="link"></param>
            <returns>By default this just returns the value of <see cref="P:Northwoods.GoWeb.GoPort.EndSegmentLength"/>.</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoPort.GetToEndSegmentLength(Northwoods.GoWeb.IGoLink)">
            <summary>
            Return the length of the link's last segment, at its <see cref="P:Northwoods.GoWeb.IGoLink.ToPort"/>.
            </summary>
            <param name="link"></param>
            <returns>By default this just returns the value of <see cref="P:Northwoods.GoWeb.GoPort.EndSegmentLength"/>.</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoPort.LinksOnPortChanged(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)">
            <summary>
            Tell any connected links about any change to this port
            </summary>
            <param name="subhint"></param>
            <param name="oldI"></param>
            <param name="oldVal"></param>
            <param name="oldRect"></param>
            <param name="newI"></param>
            <param name="newVal"></param>
            <param name="newRect"></param>
            <remarks>
            All the parameters just get passed on through calls to <see cref="M:Northwoods.GoWeb.IGoLink.OnPortChanged(Northwoods.GoWeb.IGoPort,System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoPort.OnLinkChanged(Northwoods.GoWeb.IGoLink,System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)">
            <summary>
            When a link connected to this port is changed, this method is called.
            </summary>
            <param name="l"></param>
            <param name="subhint"></param>
            <param name="oldI"></param>
            <param name="oldVal"></param>
            <param name="oldRect"></param>
            <param name="newI"></param>
            <param name="newVal"></param>
            <param name="newRect"></param>
            <remarks>
            This lets port subclasses handle changes to any links on this port.
            <paramref name="subhint"/> may include <see cref="F:Northwoods.GoWeb.GoPort.ChangedAddedLink"/>
            and <see cref="F:Northwoods.GoWeb.GoPort.ChangedRemovedLink"/>,
            as well as possibly some subhints such as <see cref="F:Northwoods.GoWeb.GoLink.ChangedFromPort"/>
            and <see cref="F:Northwoods.GoWeb.GoLink.ChangedToPort"/>.
            The default implementation of this method does nothing.
            If you override this, you will probably want to do nothing if the link parameter,
            <paramref name="l"/>, is null.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoPort.OnBoundsChanged(System.Drawing.RectangleF)">
            <summary>
            When a port is moved, we update any links connected to this port
            by calling <see cref="M:Northwoods.GoWeb.GoPort.LinksOnPortChanged(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>.
            </summary>
            <param name="old"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoPort.OnLayerChanged(Northwoods.GoWeb.GoLayer,Northwoods.GoWeb.GoLayer,Northwoods.GoWeb.GoObject)">
            <summary>
            When a port is removed from a layer, we remove all of the links connected
            to the port.
            </summary>
            <param name="oldlayer"></param>
            <param name="newlayer"></param>
            <param name="mainObj"></param>
            <remarks>
            This does not remove any links that are part of the <paramref name="mainObj"/>.
            Nor does it remove any links that belong to a view, if this port is part of a document.
            And conversely, it does not remove any links that belong to a document if this port
            is part of a view.
            Finally, this calls <see cref="M:Northwoods.GoWeb.GoPort.ClearLinks"/> only when <see cref="P:Northwoods.GoWeb.GoPort.ClearsLinksWhenRemoved"/>
            is true.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoPort.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Performs changes for undo and redo.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoPort.GoObject">
            <summary>
            Returns itself as a <see cref="P:Northwoods.GoWeb.GoPort.GoObject"/>.
            </summary>
            <remarks>
            This property cannot be set.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.IGoGraphPart.GoObject"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoPort.UserFlags">
            <summary>
            Gets or sets an integer value associated with this port.
            </summary>
            <value>
            The initial value is zero.
            </value>
            <seealso cref="P:Northwoods.GoWeb.IGoGraphPart.UserFlags"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoPort.UserObject">
            <summary>
            Gets or sets an object associated with this port.
            </summary>
            <value>
            The initial value is null.
            </value>
            <seealso cref="P:Northwoods.GoWeb.IGoGraphPart.UserObject"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoPort.Links">
            <summary>
            Gets an enumerator over all of the links connected at this port.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.IGoPort.Links"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoPort.SourceLinks">
            <summary>
            Gets an enumerator over all of the links coming into this port.
            </summary>
            <remarks>
            Each source link's <see cref="P:Northwoods.GoWeb.IGoLink.ToPort"/> will be this port.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.IGoPort.SourceLinks"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoPort.DestinationLinks">
            <summary>
            Gets an enumerator over all of the links going out of this port.
            </summary>
            <remarks>
            Each destination link's <see cref="P:Northwoods.GoWeb.IGoLink.FromPort"/> will be this port.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.IGoPort.DestinationLinks"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoPort.LinksCount">
            <summary>
            Gets the total number of links connected at this port.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.IGoPort.LinksCount"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoPort.SourceLinksCount">
            <summary>
            Gets the number of links coming into this port.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.IGoPort.SourceLinksCount"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoPort.DestinationLinksCount">
            <summary>
            Gets the number of links going out of this port.
            </summary>
            <remarks>
            This is the number of links whose <see cref="P:Northwoods.GoWeb.IGoLink.FromPort"/>
            is this port.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.IGoPort.DestinationLinksCount"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoPort.Node">
            <summary>
            Gets the node that this port is part of.
            </summary>
            <remarks>
            By default this uses <see cref="M:Northwoods.GoWeb.GoPort.FindParentNode(Northwoods.GoWeb.GoObject)"/>, but you
            may need to override this to use <see cref="M:Northwoods.GoWeb.GoPort.FindTopNode(Northwoods.GoWeb.GoObject)"/>
            instead if your node class contains other nodes as parts that
            you don't want to consider separate objects.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.IGoPort.Node"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoPort.IsValidFrom">
            <summary>
            Gets or sets whether this port can be a valid value for some
            link's <see cref="P:Northwoods.GoWeb.IGoLink.FromPort"/>.
            </summary>
            <value>
            This defaults to true.
            </value>
            <seealso cref="M:Northwoods.GoWeb.GoPort.CanLinkFrom"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoPort.IsValidTo">
            <summary>
            Gets or sets whether this port can be a valid value for some
            link's <see cref="P:Northwoods.GoWeb.IGoLink.ToPort"/>.
            </summary>
            <value>
            This defaults to true.
            </value>
            <seealso cref="M:Northwoods.GoWeb.GoPort.CanLinkTo"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoPort.IsValidSelfNode">
            <summary>
            Gets or sets whether a valid link can be made between two ports belonging to the same node.
            </summary>
            <value>
            This defaults to false.
            </value>
            <remarks>
            <see cref="M:Northwoods.GoWeb.GoPort.IsValidLink(Northwoods.GoWeb.IGoPort)"/> uses this property in the following manner:
            If this property is true, and the other port's <c>IsValidSelfNode</c> property is also
            true, then the proposed link may be valid.
            Otherwise, if <see cref="M:Northwoods.GoWeb.GoPort.IsInSameNode(Northwoods.GoWeb.IGoPort)"/> is true, it will not be a valid link.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoPort.IsValidDuplicateLinks">
            <summary>
            Gets or sets whether a valid link can be made between two ports already connected
            by a link in the same direction.
            </summary>
            <value>
            This defaults to false.
            </value>
            <remarks>
            <see cref="M:Northwoods.GoWeb.GoPort.IsValidLink(Northwoods.GoWeb.IGoPort)"/> uses this property in the following manner:
            If this property is true, and the other port's <c>IsValidDuplicateLinks</c> property is also
            true, then the proposed link may be valid.
            Otherwise, if <see cref="M:Northwoods.GoWeb.GoPort.IsLinked(Northwoods.GoWeb.IGoPort)"/> is true, it will not be a valid link.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoPort.IsValidLink(Northwoods.GoWeb.IGoPort)"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoPort.IsValidSingleLink">
            <summary>
            Gets or sets whether <see cref="M:Northwoods.GoWeb.GoPort.CanLinkFrom"/> and <see cref="M:Northwoods.GoWeb.GoPort.CanLinkTo"/>
            return false when there is already a link connected at this port.
            </summary>
            <value>
            This defaults to false -- an unlimited number of links can be valid.
            </value>
            <remarks>
            If you want to provide different or more general limitations on how
            many links can be connected to this port, you may need to override
            <see cref="M:Northwoods.GoWeb.GoPort.CanLinkFrom"/> and <see cref="M:Northwoods.GoWeb.GoPort.CanLinkTo"/>.
            For the most general way to control whether links might be valid,
            you may need to override <see cref="M:Northwoods.GoWeb.GoPort.IsValidLink(Northwoods.GoWeb.IGoPort)"/>.  But first consider
            all of the other <see cref="T:Northwoods.GoWeb.GoPort"/> properties governing link validity.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoPort.Style">
            <summary>
            Gets or sets the appearance style for this port.
            </summary>
            <value>
            This defaults to <see cref="F:Northwoods.GoWeb.GoPortStyle.Ellipse"/>.
            </value>
            <remarks>
            If the value changes, the setter will also call <see cref="M:Northwoods.GoWeb.GoPort.LinksOnPortChanged(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            to notify all connected links about the change.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoPort.PortObject"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoPort.PortObject">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoPort.GoObject"/> that may stand in for this port.
            </summary>
            <value>
            The initial value is null.
            </value>
            <remarks>
            When painting this port, if the <see cref="P:Northwoods.GoWeb.GoPort.Style"/> is
            <see cref="F:Northwoods.GoWeb.GoPortStyle.Object"/>, then the painting is delegated
            to the value of this property, which should be an object not
            owned by any layer or group.
            <see cref="M:Northwoods.GoWeb.GoPort.GetNearestIntersectionPoint(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)"/> delegates to the value of this property
            when the <see cref="P:Northwoods.GoWeb.GoPort.Style"/> is not <see cref="F:Northwoods.GoWeb.GoPortStyle.Object"/>
            and the port object does belong to a layer.
            The value must not be set to another port.
            If the value changes, the setter will also call <see cref="M:Northwoods.GoWeb.GoPort.LinksOnPortChanged(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            to notify all connected links about the change.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoPort.FromSpot">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoPort.GoObject"/> spot at which to connect
            links coming out from this port.
            </summary>
            <value>
            The default value is <c>GoObject.MiddleRight</c>.
            </value>
            <remarks>
            This property is used for the common case where we know where and
            in which direction we expect to attach links to ports.
            The default assumes a left-to-right flow for the graph.
            If the value changes, the setter will also call <see cref="M:Northwoods.GoWeb.GoPort.LinksOnPortChanged(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            to notify all connected links about the change.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoPort.GetFromLinkPoint(Northwoods.GoWeb.IGoLink)"/>
            <seealso cref="M:Northwoods.GoWeb.GoPort.GetToLinkPoint(Northwoods.GoWeb.IGoLink)"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoPort.ToSpot">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoPort.GoObject"/> spot at which to connect
            links going into this port.
            </summary>
            <value>
            The default value is <c>GoObject.MiddleLeft</c>.
            </value>
            <remarks>
            This property is used for the common case where we know where and
            in which direction we expect to attach links to ports.
            The default assumes a left-to-right flow for the graph.
            If the value changes, the setter will also call <see cref="M:Northwoods.GoWeb.GoPort.LinksOnPortChanged(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            to notify all connected links about the change.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoPort.GetFromLinkPoint(Northwoods.GoWeb.IGoLink)"/>
            <seealso cref="M:Northwoods.GoWeb.GoPort.GetToLinkPoint(Northwoods.GoWeb.IGoLink)"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoPort.EndSegmentLength">
            <summary>
            Gets or sets the length of the link segment closest to this port.
            </summary>
            <value>
            This <c>float</c> value is in document coordinates.
            By default this value is <c>10</c>.
            </value>
            <remarks>
            Basically this tells <see cref="M:Northwoods.GoWeb.GoLink.CalculateStroke"/> how long
            a line segment to draw straight out from the port before turning,
            assuming a well-defined (non-NoSpot) link spot for this port.
            If the value changes, the setter will also call <see cref="M:Northwoods.GoWeb.GoPort.LinksOnPortChanged(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            to notify all connected links about the change.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoPort.GetFromEndSegmentLength(Northwoods.GoWeb.IGoLink)"/>
            <seealso cref="M:Northwoods.GoWeb.GoPort.GetToEndSegmentLength(Northwoods.GoWeb.IGoLink)"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoPort.ClearsLinksWhenRemoved">
            <summary>
            Gets or sets whether this port calls <see cref="M:Northwoods.GoWeb.GoPort.ClearLinks"/> when it is
            removed from a <see cref="T:Northwoods.GoWeb.GoLayer"/> (i.e., from a document, normally).
            </summary>
            <value>
            This defaults to true.
            </value>
            <seealso cref="M:Northwoods.GoWeb.GoPort.OnLayerChanged(Northwoods.GoWeb.GoLayer,Northwoods.GoWeb.GoLayer,Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoPort.PartID">
            <summary>
            Gets or sets the unique ID of this part within its document.
            </summary>
            <value>
            The value is invalid unless this object is part of a <see cref="T:Northwoods.GoWeb.GoDocument"/>
            whose <see cref="P:Northwoods.GoWeb.GoDocument.MaintainsPartID"/> property is true.
            Setting this property is normally done only by <see cref="T:Northwoods.GoWeb.GoDocument"/>
            when this object is added to the document, or by code deserializing
            a document, before this object is part of the document.
            The default value is -1, to indicate to the document that it needs
            to find and assign a unique PartID for this object when it is added
            to the document.
            </value>
        </member>
        <member name="F:Northwoods.GoWeb.GoBoxPort.ChangedLinkPointsSpread">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoBoxPort.LinkPointsSpread"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBoxPort.ChangedFromSides">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoBoxPort.FromSides"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoBoxPort.ChangedToSides">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoBoxPort.ToSides"/> property.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoBoxPort.#ctor">
            <summary>
            Construct a rectangular port that is a solid gray.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoBoxPort.CopyObject(Northwoods.GoWeb.GoCopyDictionary)">
            <summary>
            Don't copy internally cached information.
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoBoxPort.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)">
            <summary>
            Unlike most ports, this kind of port will draw a drop-shadow, if expected of the parent
            <see cref="T:Northwoods.GoWeb.GoBoxNode"/>.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoBoxPort.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.GoWeb.GoView)">
            <summary>
            The expanded paint bounds for a shape includes any Pen width and miter
            limit and any drop shadow.
            </summary>
            <param name="rect"></param>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoBoxPort.GetFromLinkPoint(Northwoods.GoWeb.IGoLink)">
            <summary>
            Determine the link point by judging where the link is going
            to, and at what angle.
            </summary>
            <param name="link"></param>
            <returns>a <c>PointF</c> on the edge of the port, in document coordinates</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoBoxPort.GetToLinkPoint(Northwoods.GoWeb.IGoLink)">
            <summary>
            Determine the link point by judging where the link is coming
            from, and at what angle.
            </summary>
            <param name="link"></param>
            <returns>a <c>PointF</c> on the edge of the port, in document coordinates</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoBoxPort.GetFromLinkDir(Northwoods.GoWeb.IGoLink)">
            <summary>
            Make sure the link is going out perpendicularly from the
            sides of the port.
            </summary>
            <param name="link"></param>
            <returns>the angle in degrees</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoBoxPort.GetToLinkDir(Northwoods.GoWeb.IGoLink)">
            <summary>
            Make sure the link is coming in perpendicularly to the
            sides of the port.
            </summary>
            <param name="link"></param>
            <returns>the angle in degrees</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoBoxPort.IsOrthogonal(Northwoods.GoWeb.IGoLink)">
            <summary>
            This convenience method decides if the given link is supposed to
            be drawn with all of its segments orthogonal.
            </summary>
            <param name="link"></param>
            <returns>true if the link is believed to be drawn with orthogonal segments</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoBoxPort.GetAngle(Northwoods.GoWeb.IGoLink)">
            <summary>
            Determine the angle the port at the other end makes with this port.
            </summary>
            <param name="link"></param>
            <returns>the angle in degrees</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoBoxPort.GetDirection(Northwoods.GoWeb.IGoLink)">
            <summary>
            Determine the direction for a link at this port.
            </summary>
            <param name="link"></param>
            <returns>the angle in degrees</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoBoxPort.GetFromEndSegmentLength(Northwoods.GoWeb.IGoLink)">
            <summary>
            Be a little smarter about customizing the end-segment-length
            value used for the multiple links connected to the same side,
            to reduce the chances of overlapping segments of orthogonal
            links in some circumstances.
            </summary>
            <param name="link"></param>
            <returns>
            By default, the value of <see cref="P:Northwoods.GoWeb.GoPort.EndSegmentLength"/>,
            or a larger value to help position the adjacent segment of
            standard orthogonal links at different positions.
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoBoxPort.GetToEndSegmentLength(Northwoods.GoWeb.IGoLink)">
            <summary>
            Be a little smarter about customizing the end-segment-length
            value used for the multiple links connected to the same side,
            to reduce the chances of overlapping segments of orthogonal
            links in some circumstances.
            </summary>
            <param name="link"></param>
            <returns>
            By default, the value of <see cref="P:Northwoods.GoWeb.GoPort.EndSegmentLength"/>,
            or a larger value to help position the adjacent segment of
            standard orthogonal links at different positions.
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoBoxPort.SortLinkInfos(Northwoods.GoWeb.GoBoxPortLinkInfo[])">
            <summary>
            Sort an array of angle and side information about the links connected to this port.
            </summary>
            <param name="linkinfos">an array of <see cref="T:Northwoods.GoWeb.GoBoxPortLinkInfo"/> that is modified</param>
            <remarks>
            By default this just sorts by <see cref="P:Northwoods.GoWeb.GoBoxPortLinkInfo.Side"/> group, and by
            <see cref="P:Northwoods.GoWeb.GoBoxPortLinkInfo.Angle"/> for each side.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoBoxPort.AssignLinkPoints(Northwoods.GoWeb.GoBoxPortLinkInfo[])">
            <summary>
            Given a sorted array of angle and side information about the links connected to this port,
            assign the actual <see cref="T:Northwoods.GoWeb.GoBoxPortLinkInfo"/>.<see cref="P:Northwoods.GoWeb.GoBoxPortLinkInfo.LinkPoint"/>.
            </summary>
            <param name="linkinfos">an array of <see cref="T:Northwoods.GoWeb.GoBoxPortLinkInfo"/></param>
            <remarks>
            By default this just spreads the link points evenly along each side.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoBoxPort.AssignEndSegmentLengths(Northwoods.GoWeb.GoBoxPortLinkInfo[])">
            <summary>
            Given a sorted array of angle, side, and link-point information about the links
            connected to this port, assign the actual
            <see cref="T:Northwoods.GoWeb.GoBoxPortLinkInfo"/>.<see cref="P:Northwoods.GoWeb.GoBoxPortLinkInfo.EndSegmentLength"/>.
            </summary>
            <param name="linkinfos"></param>
            <remarks>
            By default this just specifies shorter values for links at the ends of each side,
            and longer values for links in the middle of each side.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoBoxPort.UpdateAllLinkPoints">
            <summary>
            Reroute all of the links connected at this port,
            if <see cref="P:Northwoods.GoWeb.GoBoxPort.LinkPointsSpread"/> is true, so that
            all of the link points are up-to-date.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoBoxPort.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle undo and redo changes.
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.GoWeb.GoBoxPort.LinkPointsSpread">
            <summary>
            Gets or sets whether the link points of the links connected to this port
            are spread evenly along the side of the port, or if they are all at the
            mid-point of the side.
            </summary>
            <value>
            The default value is false--all of the links connect at the mid-point of each side.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoBoxPort.FromSides">
            <summary>
            Gets or sets the spot(s) indicating the side(s) of the port from which links come out.
            </summary>
            <value>
            The default value is <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="F:Northwoods.GoWeb.GoObject.NoSpot"/>, indicating no restriction.
            The permitted values are <c>NoSpot</c> or a bitwise combination of any number of these side spots:
            <c>MiddleLeft</c>, <c>MiddleRight</c>, <c>MiddleTop</c>, <c>MiddleBottom</c>.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoBoxPort.ToSides">
            <summary>
            Gets or sets the spot(s) indicating the side(s) of the port to which links go.
            </summary>
            <value>
            The default value is <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="F:Northwoods.GoWeb.GoObject.NoSpot"/>, indicating no restriction.
            The permitted values are <c>NoSpot</c> or a bitwise combination of any number of these side spots:
            <c>MiddleLeft</c>, <c>MiddleRight</c>, <c>MiddleTop</c>, <c>MiddleBottom</c>.
            </value>
        </member>
        <member name="T:Northwoods.GoWeb.GoBoxPortLinkInfo">
            <summary>
            Information used when sorting the links connected at a <see cref="T:Northwoods.GoWeb.GoBoxPort"/>.
            </summary>
            <remarks>
            This is used by <see cref="M:Northwoods.GoWeb.GoBoxPort.SortLinkInfos(Northwoods.GoWeb.GoBoxPortLinkInfo[])"/>,
            <see cref="M:Northwoods.GoWeb.GoBoxPort.AssignLinkPoints(Northwoods.GoWeb.GoBoxPortLinkInfo[])"/>, and
            <see cref="M:Northwoods.GoWeb.GoBoxPort.AssignEndSegmentLengths(Northwoods.GoWeb.GoBoxPortLinkInfo[])"/>
            only when <see cref="P:Northwoods.GoWeb.GoBoxPort.LinkPointsSpread"/> is true.
            This information is transient, just used when calculating link points.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoBoxPortLinkInfo.Link">
            <summary>
            The <see cref="T:Northwoods.GoWeb.IGoLink"/> whose link point is being sorted around the <see cref="T:Northwoods.GoWeb.GoBoxPort"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoBoxPortLinkInfo.Angle">
            <summary>
            The effective angle at which the link connects with another node;
            this value corresponds to the result of calling <see cref="M:Northwoods.GoWeb.GoBoxPort.GetAngle(Northwoods.GoWeb.IGoLink)"/>.
            </summary>
            <value>
            The angle in degrees from this port to the other port.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoBoxPortLinkInfo.Side">
            <summary>
            The side at which the link connects;
            this value corresponds to the result of calling <see cref="M:Northwoods.GoWeb.GoBoxPort.GetDirection(Northwoods.GoWeb.IGoLink)"/>.
            </summary>
            <value>
            One of <see cref="F:Northwoods.GoWeb.GoObject.MiddleRight"/>,
            <see cref="F:Northwoods.GoWeb.GoObject.MiddleBottom"/>, <see cref="F:Northwoods.GoWeb.GoObject.MiddleLeft"/>,
            <see cref="F:Northwoods.GoWeb.GoObject.MiddleTop"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoBoxPortLinkInfo.CountOnSide">
            <summary>
            How many links are connected on this side;
            computed after calling <see cref="M:Northwoods.GoWeb.GoBoxPort.SortLinkInfos(Northwoods.GoWeb.GoBoxPortLinkInfo[])"/> and before calling <see cref="M:Northwoods.GoWeb.GoBoxPort.AssignLinkPoints(Northwoods.GoWeb.GoBoxPortLinkInfo[])"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoBoxPortLinkInfo.IndexOnSide">
            <summary>
            The index of this link on this side;
            computed after calling <see cref="M:Northwoods.GoWeb.GoBoxPort.SortLinkInfos(Northwoods.GoWeb.GoBoxPortLinkInfo[])"/> and before calling <see cref="M:Northwoods.GoWeb.GoBoxPort.AssignLinkPoints(Northwoods.GoWeb.GoBoxPortLinkInfo[])"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoBoxPortLinkInfo.LinkPoint">
            <summary>
            The document point at which the link should terminate;
            should be set in <see cref="M:Northwoods.GoWeb.GoBoxPort.AssignLinkPoints(Northwoods.GoWeb.GoBoxPortLinkInfo[])"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoBoxPortLinkInfo.EndSegmentLength">
            <summary>
            The value of length of the last segment for this link at this port;
            should be set in <see cref="M:Northwoods.GoWeb.GoBoxPort.AssignEndSegmentLengths(Northwoods.GoWeb.GoBoxPortLinkInfo[])"/>.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoButton">
            <summary>
            A GoButton looks like a regular button, with a text label and/or an icon,
            but is composed of GoObjects so that it is very light weight and flexible.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.GoWeb.GoButton.Background"/> is normally a <see cref="T:Northwoods.GoWeb.GoRectangle"/>,
            and the <see cref="P:Northwoods.GoWeb.GoButton.Icon"/> is normally null/nothing.  However both properties
            can be any kind of <see cref="T:Northwoods.GoWeb.GoObject"/>.
            </remarks>
        </member>
        <member name="T:Northwoods.GoWeb.IGoActionObject">
            <summary>
            This interface specifies ways for the <see cref="T:Northwoods.GoWeb.GoToolAction"/> tool to
            invoke actions on objects.  
            </summary>
            <remarks>
            Tools (<see cref="T:Northwoods.GoWeb.IGoTool"/>) are ways to easily specify behavior in response
            to mouse events for a whole <see cref="T:Northwoods.GoWeb.GoView"/>.
            To have a <see cref="T:Northwoods.GoWeb.GoObject"/> specify mouse-event behavior, have your
            object subclass implement this interface, and make sure the <see cref="T:Northwoods.GoWeb.GoView"/>'s
            <see cref="P:Northwoods.GoWeb.GoView.MouseDownTools"/> list starts with an instance of
            <see cref="T:Northwoods.GoWeb.GoToolAction"/>, as it does by default.
            The <see cref="T:Northwoods.GoWeb.GoToolAction"/> will handle mouse events and set the
            properties and invoke the methods of the object implementing this interface.
            Typically this will be some object where a click (and perhaps a drag)
            should execute some code.  One such class is <see cref="T:Northwoods.GoWeb.GoButton"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.IGoActionObject.OnActionActivated(Northwoods.GoWeb.GoView,Northwoods.GoWeb.GoInputEventArgs)">
            <summary>
            This method is called by <see cref="T:Northwoods.GoWeb.GoToolAction"/> as the user is
            starting to manipulate the object, normally by a mouse press.
            </summary>
            <param name="view">the <see cref="T:Northwoods.GoWeb.GoView"/> that the input event occurred in</param>
            <param name="e">the <see cref="T:Northwoods.GoWeb.GoInputEventArgs"/> describing the input event</param>
        </member>
        <member name="M:Northwoods.GoWeb.IGoActionObject.OnActionAdjusted(Northwoods.GoWeb.GoView,Northwoods.GoWeb.GoInputEventArgs)">
            <summary>
            This method is called by <see cref="T:Northwoods.GoWeb.GoToolAction"/> as the user is
            adjusting the object, normally by a mouse drag or move.
            </summary>
            <param name="view">the <see cref="T:Northwoods.GoWeb.GoView"/> that the input event occurred in</param>
            <param name="e">the <see cref="T:Northwoods.GoWeb.GoInputEventArgs"/> describing the input event</param>
        </member>
        <member name="M:Northwoods.GoWeb.IGoActionObject.OnAction(Northwoods.GoWeb.GoView,Northwoods.GoWeb.GoInputEventArgs)">
            <summary>
            This method is called by <see cref="T:Northwoods.GoWeb.GoToolAction"/> to perform the object's
            action, normally by a mouse button being released.
            </summary>
            <param name="view">the <see cref="T:Northwoods.GoWeb.GoView"/> that the input event occurred in</param>
            <param name="e">the <see cref="T:Northwoods.GoWeb.GoInputEventArgs"/> describing the input event</param>
        </member>
        <member name="M:Northwoods.GoWeb.IGoActionObject.OnActionCancelled(Northwoods.GoWeb.GoView)">
            <summary>
            This method is called by <see cref="T:Northwoods.GoWeb.GoToolAction"/> to notify the
            object that the tool is being cancelled.
            </summary>
            <param name="view">the <see cref="T:Northwoods.GoWeb.GoView"/> that the input event occurred in</param>
        </member>
        <member name="P:Northwoods.GoWeb.IGoActionObject.ActionEnabled">
            <summary>
            Gets or sets whether the <see cref="T:Northwoods.GoWeb.GoToolAction"/> tool should consider
            activating this object and invoking the object's action.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.IGoActionObject.ActionActivated">
            <summary>
            Gets or sets whether the object's Action is about to be invoked,
            normally by a mouse button being pressed.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoButton.ChangedBackground">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoButton.Background"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoButton.ChangedIcon">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoButton.Icon"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoButton.ChangedLabel">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoButton.Label"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoButton.ChangedTopLeftMargin">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoButton.TopLeftMargin"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoButton.ChangedBottomRightMargin">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoButton.BottomRightMargin"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoButton.ChangedActionEnabled">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoButton.ActionEnabled"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoButton.ChangedAutoRepeating">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoButton.AutoRepeating"/> property.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoButton.#ctor">
            <summary>
            Construct a <see cref="T:Northwoods.GoWeb.GoButton"/> with an empty text label and no icon.
            </summary>
            <remarks>
            This calls <see cref="M:Northwoods.GoWeb.GoButton.CreateBackground"/>, <see cref="M:Northwoods.GoWeb.GoButton.CreateIcon"/>, and
            <see cref="M:Northwoods.GoWeb.GoButton.CreateLabel"/> to provide initial values for this group's
            <see cref="P:Northwoods.GoWeb.GoButton.Background"/>, <see cref="P:Northwoods.GoWeb.GoButton.Icon"/>, and <see cref="P:Northwoods.GoWeb.GoButton.Label"/>
            properties.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoButton.CreateBackground">
            <summary>
            Make the background rectangle for the button.
            </summary>
            <returns>By default this returns a <see cref="T:Northwoods.GoWeb.GoRectangle"/></returns>
            <remarks>
            This is called by the constructor.
            </remarks>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoObject CreateBackground() {
               GoRectangle r = new GoRectangle();
               r.Selectable = false;
               r.Pen = null;
               r.Brush = GoShape.SystemBrushes_Control;
               return r;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.GoWeb.GoButton.CreateIcon">
            <summary>
            Make the icon for the button.
            </summary>
            <returns>By default this returns null</returns>
            <remarks>
            This is called by the constructor.
            You can override this to return a newly allocated <see cref="T:Northwoods.GoWeb.GoImage"/>,
            or some other object to serve as the decoration for the button.
            You can also set the <see cref="P:Northwoods.GoWeb.GoButton.Icon"/> property at any time.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoButton.CreateLabel">
            <summary>
            Make the text label for the button.
            </summary>
            <returns>By default this returns an empty <see cref="T:Northwoods.GoWeb.GoText"/> object</returns>
            <remarks>
            This is called by the constructor.
            </remarks>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoText CreateLabel() {
               GoText l = new GoText();
               l.Selectable = false;
               return l;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.GoWeb.GoButton.CopyChildren(Northwoods.GoWeb.GoGroup,Northwoods.GoWeb.GoCopyDictionary)">
            <summary>
            Copy the <see cref="P:Northwoods.GoWeb.GoButton.Background"/>, <see cref="P:Northwoods.GoWeb.GoButton.Label"/>, and <see cref="P:Northwoods.GoWeb.GoButton.Icon"/>.
            </summary>
            <param name="newgroup"></param>
            <param name="env"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoButton.LayoutChildren(Northwoods.GoWeb.GoObject)">
            <summary>
            Position the <see cref="P:Northwoods.GoWeb.GoButton.Icon"/> to the left of the <see cref="P:Northwoods.GoWeb.GoButton.Label"/>,
            and surround both with the <see cref="P:Northwoods.GoWeb.GoButton.Background"/>, leaving
            <see cref="P:Northwoods.GoWeb.GoButton.TopLeftMargin"/> and <see cref="P:Northwoods.GoWeb.GoButton.BottomRightMargin"/> space
            along the sides.
            </summary>
            <param name="childchanged"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoButton.Remove(Northwoods.GoWeb.GoObject)">
            <summary>
            If any part is removed from this group,
            be sure to remove any references in local fields.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoButton.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)">
            <summary>
            Call <see cref="M:Northwoods.GoWeb.GoButton.PaintButton(System.Drawing.Graphics,Northwoods.GoWeb.GoView)"/> in addition to painting the
            <see cref="P:Northwoods.GoWeb.GoButton.Background"/>, <see cref="P:Northwoods.GoWeb.GoButton.Label"/>, and <see cref="P:Northwoods.GoWeb.GoButton.Icon"/>.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoButton.PaintButton(System.Drawing.Graphics,Northwoods.GoWeb.GoView)">
            <summary>
            This method is called by <see cref="M:Northwoods.GoWeb.GoButton.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)"/> to display any button state,
            such as whether it is "pressed".
            </summary>
            <param name="g"></param>
            <param name="view"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoButton.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.GoWeb.GoView)">
            <summary>
            Additional painted area includes part of the border giving 3D control appearance.
            </summary>
            <param name="rect"></param>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoButton.FindName(Northwoods.GoWeb.GoObject)">
            <summary>
            The properties referring to parts of this node
            are also the names of those parts.
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoButton.FindChild(System.String)">
            <summary>
            The properties referring to parts of this node
            are also the names of those parts.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoButton.OnActionActivated(Northwoods.GoWeb.GoView,Northwoods.GoWeb.GoInputEventArgs)">
            <summary>
            If <see cref="P:Northwoods.GoWeb.GoButton.AutoRepeating"/> is true, have the <see cref="T:Northwoods.GoWeb.GoToolAction"/>
            tool start calling <see cref="M:Northwoods.GoWeb.GoButton.OnActionAdjusted(Northwoods.GoWeb.GoView,Northwoods.GoWeb.GoInputEventArgs)"/> repeatedly while
            the mouse is down.
            </summary>
            <param name="view"></param>
            <param name="e"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoButton.OnActionAdjusted(Northwoods.GoWeb.GoView,Northwoods.GoWeb.GoInputEventArgs)">
            <summary>
            We don't care about any mouse movement over a button.
            </summary>
            <param name="view"></param>
            <param name="e"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoButton.OnAction(Northwoods.GoWeb.GoView,Northwoods.GoWeb.GoInputEventArgs)">
            <summary>
            Call all of the Action event handlers.
            </summary>
            <param name="view">the <see cref="T:Northwoods.GoWeb.GoView"/> that is handling input events for this <see cref="T:Northwoods.GoWeb.IGoActionObject"/></param>
            <param name="e">assumed to be the same as the <paramref name="view"/>'s <see cref="P:Northwoods.GoWeb.GoView.LastInput"/></param>
            <remarks>
            This method is called when the user does a mouse press and release
            on this button.
            If the mouse point is no longer over this object, no Action
            event handlers are called, and <see cref="M:Northwoods.GoWeb.GoButton.OnActionCancelled(Northwoods.GoWeb.GoView)"/>
            is called instead.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoButton.OnActionCancelled(Northwoods.GoWeb.GoView)">
            <summary>
            We don't care if pressing the button was cancelled.
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoButton.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle undo and redo changes.
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.GoWeb.GoButton.Background">
            <summary>
            Gets or sets the background object for this button.
            </summary>
            <remarks>
            Instead of setting the background shape after creating a <c>GoButton</c>, you may find it
            easier to override the <see cref="M:Northwoods.GoWeb.GoButton.CreateBackground"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoButton.Icon">
            <summary>
            Gets or sets the icon object for this button.
            </summary>
            <remarks>
            Instead of setting the icon after allocation, you may find it
            easier to override the <see cref="M:Northwoods.GoWeb.GoButton.CreateIcon"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoButton.Text">
            <summary>
            Gets or sets the text string for this button.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoButton.Label">
            <summary>
            Gets or sets the text label for this button.
            </summary>
            <remarks>
            Instead of setting the label after allocation, you may find it
            easier to override the <see cref="M:Northwoods.GoWeb.GoButton.CreateLabel"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoButton.TopLeftMargin">
            <summary>
            Gets or sets the amount of space to leave at the top and left sides between
            the icon and label and the edge of the background.
            </summary>
            <value>
            This defaults to 3x2, in document coordinates.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoButton.BottomRightMargin">
            <summary>
            Gets or sets the amount of space to leave at the bottom and right sides between
            the icon and label and the edge of the background.
            </summary>
            <value>
            This defaults to 2x3, in document coordinates.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoButton.AutoRepeating">
            <summary>
            Gets or sets whether the button calls <see cref="M:Northwoods.GoWeb.GoButton.OnActionAdjusted(Northwoods.GoWeb.GoView,Northwoods.GoWeb.GoInputEventArgs)"/> repeatedly
            when the mouse remains down, after a delay.
            </summary>
            <value>
            This defaults to false.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoButton.ActionEnabled">
            <summary>
            Gets or sets whether the user can click on this button to get it to perform an action.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoButton.ActionActivated">
            <summary>
            Gets or sets whether the button appears "depressed".
            </summary>
            <value>
            This defaults to false.
            </value>
            <remarks>
            A change to this state is considered transient, and does not
            invoke <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>.
            </remarks>
        </member>
        <member name="E:Northwoods.GoWeb.GoButton.Action">
            <summary>
            An Action event happens whenever the user clicks on this button.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoCollapsibleHandleStyle">
            <summary>
            Specifies the appearance of a <see cref="T:Northwoods.GoWeb.GoCollapsibleHandle"/>,
            both when it is expanded and when it is collapsed.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoCollapsibleHandleStyle.PlusMinus">
            <summary>
            A "+" when the handle is collapsed; a "-" when the handle is expanded.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoCollapsibleHandleStyle.TriangleRight">
            <summary>
            A triangle pointing to the right when the handle is collapsed;
            a triangle pointing up when the handle is expanded.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoCollapsibleHandleStyle.TriangleUp">
            <summary>
            A triangle pointing down when the handle is collapsed;
            a triangle pointing up when the handle is expanded.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoCollapsibleHandleStyle.ChevronUp">
            <summary>
            Two open triangles pointing down when the handle is collapsed;
            two open triangles pointing up when the handle is expanded.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoCollapsibleHandle">
            <summary>
            This small rectangle is drawn with different shapes so that users
            can click on this to expand or collapse the <see cref="T:Northwoods.GoWeb.IGoCollapsible"/>
            parent object.
            </summary>
            <remarks>
            Specify the <see cref="P:Northwoods.GoWeb.GoCollapsibleHandle.Style"/> as one of the <see cref="T:Northwoods.GoWeb.GoCollapsibleHandleStyle"/>
            enum values.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoCollapsibleHandle.ChangedStyle">
            <summary>
            This is a <see cref="T:Northwoods.GoWeb.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoCollapsibleHandle.ChangedBordered">
            <summary>
            This is a <see cref="T:Northwoods.GoWeb.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoCollapsibleHandle.#ctor">
            <summary>
            The normal collapsible handle is 10x10 and has a Gold fill and Black lines.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoCollapsibleHandle.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)">
            <summary>
            Draw a plus/minus/zero inside a rectangle.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <remarks>
            If <see cref="P:Northwoods.GoWeb.GoCollapsibleHandle.Bordered"/> is true, this draws a rounded rectangle.
            Then it calls <see cref="M:Northwoods.GoWeb.GoCollapsibleHandle.PaintHandle(System.Drawing.Graphics,Northwoods.GoWeb.GoView)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoCollapsibleHandle.MakePath">
            <summary>
            The path is the same as a regular rectangle if <see cref="P:Northwoods.GoWeb.GoCollapsibleHandle.Bordered"/>,
            but augmented with the shape(s) determined by the <see cref="P:Northwoods.GoWeb.GoCollapsibleHandle.Style"/>.
            </summary>
            <returns>a <c>GraphicsPath</c></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoCollapsibleHandle.PaintHandle(System.Drawing.Graphics,Northwoods.GoWeb.GoView)">
            <summary>
            The appearance of this handle depends on the <see cref="P:Northwoods.GoWeb.IGoCollapsible.Collapsible"/>
            and <see cref="P:Northwoods.GoWeb.IGoCollapsible.IsExpanded"/> properties.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <remarks>
            If the parent is not <see cref="P:Northwoods.GoWeb.IGoCollapsible.Collapsible"/>,
            this draws a circle inside the rectangle.
            Otherwise, the appearance depends on the value of <see cref="P:Northwoods.GoWeb.GoCollapsibleHandle.Style"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoCollapsibleHandle.FindCollapsible">
            <summary>
            Search for a Parent object that implements <see cref="T:Northwoods.GoWeb.IGoCollapsible"/>.
            </summary>
            <returns>an <see cref="T:Northwoods.GoWeb.IGoCollapsible"/>, or null if none was found</returns>
            <remarks>
            Starting with this handle, this method searches the <c>Parent</c> chain for
            any <c>GoObject</c> that implements <see cref="T:Northwoods.GoWeb.IGoCollapsible"/>, and returns
            the first one that it finds.  Normally this will just be the <see cref="P:Northwoods.GoWeb.GoObject.Parent"/>,
            but it could be further up the parent chain.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoCollapsibleHandle.OnSingleClick(Northwoods.GoWeb.GoInputEventArgs,Northwoods.GoWeb.GoView)">
            <summary>
            Implement the single-click behavior for this handle, to toggle the
            expansion state of the <see cref="T:Northwoods.GoWeb.IGoCollapsible"/> that this handle is in.
            </summary>
            <param name="evt"></param>
            <param name="view"></param>
            <returns>true if the parent <see cref="P:Northwoods.GoWeb.IGoCollapsible.Collapsible"/> property is true</returns>
            <remarks>
            If <see cref="P:Northwoods.GoWeb.IGoCollapsible.IsExpanded"/> is true, this calls <see cref="M:Northwoods.GoWeb.IGoCollapsible.Collapse"/>;
            otherwise this calls <see cref="M:Northwoods.GoWeb.IGoCollapsible.Expand"/>.
            If the view is non-null, this method calls <see cref="M:Northwoods.GoWeb.GoView.StartTransaction"/>
            and <see cref="M:Northwoods.GoWeb.GoView.FinishTransaction(System.String)"/>, with a transaction name specified by
            the value of <see cref="F:Northwoods.GoWeb.GoUndoManager.CollapsedName"/> or <see cref="F:Northwoods.GoWeb.GoUndoManager.ExpandedName"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoCollapsibleHandle.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Performs changes for undo and redo.
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.GoWeb.GoCollapsibleHandle.Style">
            <summary>
            Gets or sets the appearance style for this handle.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoWeb.GoCollapsibleHandleStyle.PlusMinus"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoCollapsibleHandle.Bordered">
            <summary>
            Gets or sets whether to draw a rectangle's border, using a Pen of width 1.
            </summary>
            <value>
            This defaults to true.
            </value>
        </member>
        <member name="T:Northwoods.GoWeb.GoGeneralNode">
            <summary>
            A more complicated node that has an icon, optional labels at the top and bottom,
            and variable numbers of labeled ports on either side.
            </summary>
            <remarks>
            <para>
            Be sure to call the <b>Initialize</b> method to create all of the standard parts
            by calling the various <b>Create...</b> methods.  You can override those methods
            to customize the appearance or behavior of those parts.
            </para>
            <para>
            The positions of the <see cref="T:Northwoods.GoWeb.GoGeneralNodePort"/>s relative to the icon are determined by the
            <see cref="M:Northwoods.GoWeb.GoGeneralNode.LayoutLeftPorts"/> and <see cref="M:Northwoods.GoWeb.GoGeneralNode.LayoutRightPorts"/> methods.
            If you want to customize how the ports are laid out, you can
            override these methods.  For simple customization,
            you can set the <see cref="P:Northwoods.GoWeb.GoGeneralNode.LeftPortsAlignment"/> and <see cref="P:Northwoods.GoWeb.GoGeneralNode.RightPortsAlignment"/>
            properties to specify whether the port should go outside, straddle, or go inside
            of the icon's edge.
            </para>
            <para>
            The positions of the <see cref="T:Northwoods.GoWeb.GoGeneralNodePortLabel"/>s relative to the port are
            determined by the <see cref="T:Northwoods.GoWeb.GoGeneralNodePort"/>.<see cref="M:Northwoods.GoWeb.GoGeneralNodePort.LayoutLabel"/> method.
            However, you can set the <see cref="P:Northwoods.GoWeb.GoGeneralNode.LeftPortLabelsInside"/>, <see cref="P:Northwoods.GoWeb.GoGeneralNode.RightPortLabelsInside"/>,
            <see cref="P:Northwoods.GoWeb.GoGeneralNode.LeftPortsLabelSpacing"/>, and <see cref="P:Northwoods.GoWeb.GoGeneralNode.RightPortsLabelSpacing"/> properties on
            the node to customize the default layout for all port labels.
            </para>
            <para>
            If you don't want the ports to have labels at all, override <see cref="M:Northwoods.GoWeb.GoGeneralNode.CreatePortLabel(System.Boolean)"/>
            to return null/Nothing.
            </para>
            <para>
            If you want ports at the top and at the bottom of the icon,
            with optional labels at either left or right sides, set the <see cref="P:Northwoods.GoWeb.GoGeneralNode.Orientation"/>
            to <c>Orientation.Vertical</c>.
            "Left" ports will go on top; "right" ports will go underneath the icon.
            </para>
            <para>
            You can add ports at any time by calling <see cref="M:Northwoods.GoWeb.GoGeneralNode.MakePort(System.Boolean)"/>
            and then calling either <see cref="M:Northwoods.GoWeb.GoGeneralNode.Add(Northwoods.GoWeb.GoObject)"/> or <see cref="M:Northwoods.GoWeb.GoGeneralNode.InsertLeftPort(System.Int32,Northwoods.GoWeb.GoGeneralNodePort)"/>
            or <see cref="M:Northwoods.GoWeb.GoGeneralNode.InsertRightPort(System.Int32,Northwoods.GoWeb.GoGeneralNodePort)"/>.  You can remove ports at any time by calling
            <see cref="M:Northwoods.GoWeb.GoGroup.Remove(Northwoods.GoWeb.GoObject)"/>.
            </para>
            <para>
            The <see cref="P:Northwoods.GoWeb.GoGeneralNode.Icon"/> is normally a <see cref="T:Northwoods.GoWeb.GoNodeIcon"/>,
            but can be any kind of <see cref="T:Northwoods.GoWeb.GoObject"/>.
            Setting the <see cref="P:Northwoods.GoWeb.GoNode.Location"/>, <see cref="P:Northwoods.GoWeb.GoNode.Resizable"/>,
            <see cref="P:Northwoods.GoWeb.GoNode.Reshapable"/> and <see cref="P:Northwoods.GoWeb.GoNode.Shadowed"/>
            properties actually sets the same properties on the
            <see cref="P:Northwoods.GoWeb.GoGeneralNode.SelectionObject"/>, which is the <see cref="P:Northwoods.GoWeb.GoGeneralNode.Icon"/>.
            </para>
            </remarks>
        </member>
        <member name="T:Northwoods.GoWeb.IGoNodeIconConstraint">
            <summary>
            This interface is used by <see cref="T:Northwoods.GoWeb.GoNodeIcon"/> to constrain
            the resizing of the image.
            </summary>
            <remarks>
            <see cref="T:Northwoods.GoWeb.GoSimpleNode"/> and <see cref="T:Northwoods.GoWeb.GoGeneralNode"/> implement
            this interface.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.IGoNodeIconConstraint.MinimumIconSize">
            <summary>
            Gets the minimum non-negative size, in document coordinates, for the icon.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.IGoNodeIconConstraint.MaximumIconSize">
            <summary>
            Gets the maximum size not less than the <see cref="P:Northwoods.GoWeb.IGoNodeIconConstraint.MinimumIconSize"/>,
            in document coordinates, for the icon.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGeneralNode.InsertedPort">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGeneralNode.RemovedPort">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGeneralNode.ReplacedPort">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGeneralNode.ChangedTopLabel">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoGeneralNode.TopLabel"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGeneralNode.ChangedBottomLabel">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoGeneralNode.BottomLabel"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGeneralNode.ChangedIcon">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoGeneralNode.Icon"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGeneralNode.ChangedOrientation">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoGeneralNode.Orientation"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGeneralNode.ChangedFromEndSegmentLengthStep">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoGeneralNode.FromEndSegmentLengthStep"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGeneralNode.ChangedToEndSegmentLengthStep">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoGeneralNode.ToEndSegmentLengthStep"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGeneralNode.ChangedLeftPortsAlignment">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoGeneralNode.LeftPortsAlignment"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGeneralNode.ChangedRightPortsAlignment">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoGeneralNode.RightPortsAlignment"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGeneralNode.ChangedLeftPortsLabelSpacing">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoGeneralNode.LeftPortsLabelSpacing"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGeneralNode.ChangedRightPortsLabelSpacing">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoGeneralNode.RightPortsLabelSpacing"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGeneralNode.ChangedLeftPortLabelsInside">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoGeneralNode.LeftPortLabelsInside"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGeneralNode.ChangedRightPortLabelsInside">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoGeneralNode.RightPortLabelsInside"/> property.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNode.#ctor">
            <summary>
            Create an empty GoGeneralNode--call the
            <see cref="M:Northwoods.GoWeb.GoGeneralNode.Initialize(System.Resources.ResourceManager,System.String,System.String,System.String,System.Int32,System.Int32)"/> method(s)
            to create an icon, labels, and ports;
            or set all of the desired parts explicitly.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNode.Initialize(System.Resources.ResourceManager,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Initialize an empty GoGeneralNode to have an icon, some labels, and some ports.
            </summary>
            <param name="res">
            Provides the <c>ResourceManager</c> holding an <c>Image</c> resource named by
            <paramref name="iconname"/>.  If this parameter is null,
            <see cref="P:Northwoods.GoWeb.GoImage.DefaultResourceManager"/> is used instead.
            </param>
            <param name="iconname">
            <para>
            The name of the <c>Image</c> resource in the <c>ResourceManager</c>
            given by <paramref name="res"/>, or else a file name if no resource manager
            can be used (i.e., when both <paramref name="res"/> is null and
            <see cref="P:Northwoods.GoWeb.GoImage.DefaultResourceManager"/> is null).
            </para>
            <para>
            If the value is an empty string, the <c>Image</c> will be blank;
            you can set <see cref="P:Northwoods.GoWeb.GoGeneralNode.Image"/>.<see cref="P:Northwoods.GoWeb.GoImage.Name"/> to show or change
            the image displayed by the <see cref="T:Northwoods.GoWeb.GoImage"/> that is the <see cref="P:Northwoods.GoWeb.GoGeneralNode.Image"/>.
            </para>
            <para>
            If the value is null, the <see cref="P:Northwoods.GoWeb.GoGeneralNode.Icon"/> is not a <see cref="T:Northwoods.GoWeb.GoImage"/>
            but a <see cref="T:Northwoods.GoWeb.GoDrawing"/>; you can then set the <see cref="P:Northwoods.GoWeb.GoGeneralNode.Figure"/>
            to change the shape shown as the icon.
            </para>
            </param>
            <param name="top">
            The initial string value for the <see cref="P:Northwoods.GoWeb.GoGeneralNode.TopLabel"/>.
            If this value is null, no label is created at the top of this node.
            </param>
            <param name="bottom">
            The initial string value for the <see cref="P:Northwoods.GoWeb.GoGeneralNode.BottomLabel"/>.
            If this value is null, no label is created at the bottom of this node.
            </param>
            <param name="numinports">
            The number of ports to create on the left side (or top side) of this node.
            </param>
            <param name="numoutports">
            The number of ports to create on the right side (or bottom side) of this node.
            </param>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNode.CreateIcon(System.Resources.ResourceManager,System.String)">
            <summary>
            Create and initialize a <see cref="T:Northwoods.GoWeb.GoImage"/> or a <see cref="T:Northwoods.GoWeb.GoDrawing"/> to act as the node's icon.
            </summary>
            <param name="res"></param>
            <param name="iconname">
            a null value causes no <see cref="T:Northwoods.GoWeb.GoNodeIcon"/> to be allocated,
            but instead a <see cref="T:Northwoods.GoWeb.GoDrawing"/> initialized to look like a rectangle.
            </param>
            <returns>
            a <see cref="T:Northwoods.GoWeb.GoNodeIcon"/> that obeys this node's <see cref="P:Northwoods.GoWeb.GoGeneralNode.MinimumIconSize"/>
            and <see cref="P:Northwoods.GoWeb.GoGeneralNode.MaximumIconSize"/> properties
            </returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoObject CreateIcon(ResourceManager res, String iconname) {
               if (iconname != null) {
                 GoNodeIcon ni = new GoNodeIcon();
                 if (res != null)
                   ni.ResourceManager = res;
                 ni.Name = iconname;
                 ni.MinimumIconSize = new SizeF(20, 20);
                 ni.MaximumIconSize = new SizeF(1000, 2000);
                 ni.Size = ni.MinimumIconSize;
                 return ni;
               } else {
                 GoDrawing rect = new GoDrawing(GoFigure.Rectangle);
                 rect.Selectable = false;
                 rect.Resizable = false;
                 rect.Size = new SizeF(20, 20);
                 return rect;
               }
             }
            </code>
            In GoDiagram Pocket this just creates a <see cref="T:Northwoods.GoWeb.GoRectangle"/>
            when the <paramref name="iconname"/> is null.
            </example>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNode.CreateLabel(System.Boolean,System.String)">
            <summary>
            Create and initialize a text label for either the top or the bottom.
            </summary>
            <param name="top"></param>
            <param name="text">a null value causes no label to be allocated</param>
            <returns>an editable, non-selectable, middle-aligned, non-rescaling <see cref="T:Northwoods.GoWeb.GoText"/> object</returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoText CreateLabel(bool top, String text) {
               GoText l = null;
               if (text != null) {
                 l = new GoText();
                 l.Text = text;
                 l.Selectable = false;
                 if (this.Orientation == Orientation.Vertical) {
                   if (top)
                     l.Alignment = MiddleRight;
                   else
                     l.Alignment = MiddleLeft;
                 } else {
                   if (top)
                     l.Alignment = MiddleBottom;
                   else
                     l.Alignment = MiddleTop;
                 }
                 l.Editable = true;
                 this.Editable = true;
               }
               return l;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNode.CreatePort(System.Boolean)">
            <summary>
            Create and initialize a port that may go on either the left side or the right side.
            </summary>
            <param name="input">true to mean the left side or the top side</param>
            <returns>a <see cref="T:Northwoods.GoWeb.GoGeneralNodePort"/></returns>
            <remarks>
            This method is called by <see cref="M:Northwoods.GoWeb.GoGeneralNode.MakePort(System.Boolean)"/> to create a port,
            which it then associates with a port label.
            If the orientation is <b>Vertical</b>, the port will be either
            on the top side or on the bottom side of the node.
            </remarks>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoGeneralNodePort CreatePort(bool input) {
               GoGeneralNodePort p = new GoGeneralNodePort();
               p.LeftSide = input;
               p.IsValidFrom = !input;
               p.IsValidTo = input;
               return p;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNode.CreatePortLabel(System.Boolean)">
            <summary>
            Create a label for a port.
            </summary>
            <param name="input"></param>
            <returns>a <see cref="T:Northwoods.GoWeb.GoGeneralNodePortLabel"/></returns>
            <remarks>
            This method is called by <see cref="M:Northwoods.GoWeb.GoGeneralNode.MakePort(System.Boolean)"/> to create a
            label for a port.
            </remarks>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoGeneralNodePortLabel CreatePortLabel(bool input) {
               GoGeneralNodePortLabel l = new GoGeneralNodePortLabel();
               return l;
             }
            </code>
            If you don't want any port labels, you can override this method to return null.
            </example>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNode.MakePort(System.Boolean)">
            <summary>
            Create and initialize a new port and its label.
            </summary>
            <param name="input">true to mean the left side or the top side</param>
            <returns></returns>
            <remarks>
            Pass the result of this method to <see cref="M:Northwoods.GoWeb.GoGeneralNode.Add(Northwoods.GoWeb.GoObject)"/>,
            <see cref="M:Northwoods.GoWeb.GoGeneralNode.InsertLeftPort(System.Int32,Northwoods.GoWeb.GoGeneralNodePort)"/>, or <see cref="M:Northwoods.GoWeb.GoGeneralNode.InsertRightPort(System.Int32,Northwoods.GoWeb.GoGeneralNodePort)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNode.CopyChildren(Northwoods.GoWeb.GoGroup,Northwoods.GoWeb.GoCopyDictionary)">
            <summary>
            Make copies of the icon, label and the left and right ports.
            </summary>
            <param name="newgroup"></param>
            <param name="env"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNode.LayoutChildren(Northwoods.GoWeb.GoObject)">
            <summary>
            Position the parts of this node.
            </summary>
            <param name="childchanged"></param>
            <remarks>
            The icon is the primary part--the node labels are placed just above
            and below the icon.
            The ports go on their respective sides of the icon, positioned
            contiguously and centered vertically.  The ports are always next to
            the icon, and their respective labels are expected to be outside,
            as determined by <see cref="M:Northwoods.GoWeb.GoGeneralNodePort.LayoutLabel"/>.
            If there are too many ports to fit alongside the <see cref="P:Northwoods.GoWeb.GoGeneralNode.Icon"/>,
            the <see cref="P:Northwoods.GoWeb.GoGeneralNode.Icon"/> is stretched, unless the icon's
            <see cref="P:Northwoods.GoWeb.GoObject.AutoRescales"/> property is false.
            Of course when <see cref="P:Northwoods.GoWeb.GoGeneralNode.Orientation"/> is <c>Orientation.Vertical</c>,
            all of the left/right and up/down directions are exchanged.
            When <see cref="P:Northwoods.GoWeb.GoObject.Initializing"/> is true, this method does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNode.LayoutIcon">
            <summary>
            Resize the <see cref="P:Northwoods.GoWeb.GoGeneralNode.Icon"/> so that it meets the <see cref="P:Northwoods.GoWeb.GoGeneralNode.MinimumIconSize"/> requirement.
            </summary>
            <remarks>
            This only happens when <see cref="P:Northwoods.GoWeb.GoObject.AutoRescales"/> is true for the <see cref="P:Northwoods.GoWeb.GoGeneralNode.Icon"/>.
            <see cref="P:Northwoods.GoWeb.GoGeneralNode.MinimumIconSize"/> is computed to be large enough to hold all of the ports.
            If you want the Icon to automatically shrink in size when ports are removed,
            override this method as follows:
            <code>
                protected override void LayoutIcon() {
                  GoObject icon = this.Icon;
                  if (icon != null &amp;&amp; icon.AutoRescales) {
                    SizeF minIconSize = this.MinimumIconSize;
                    float newW = minIconSize.Width;
                    float newH = minIconSize.Height;
                    icon.Bounds = new RectangleF(icon.Left - (newW - icon.Width)/2, icon.Top - (newH - icon.Height)/2, newW, newH);
                  }
                }
            </code>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNode.LayoutLeftPorts">
            <summary>
            Position all of the left ports along the left (or top) edge of the icon.
            </summary>
            <remarks>
            Ports are placed adjacent to each other, centered along the icon's edge.
            The positioning depends on the values of
            <see cref="P:Northwoods.GoWeb.GoGeneralNode.LeftPortsAlignment"/>, <see cref="P:Northwoods.GoWeb.GoGeneralNode.LeftPortsLabelSpacing"/>,
            <see cref="P:Northwoods.GoWeb.GoGeneralNode.LeftPortLabelsInside"/>, and the result of calling
            <see cref="T:Northwoods.GoWeb.GoGeneralNodePort"/>.<see cref="M:Northwoods.GoWeb.GoGeneralNodePort.LayoutLabel"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNode.LayoutRightPorts">
            <summary>
            Position all of the right ports along the right (or bottom) edge of the icon.
            </summary>
            <remarks>
            Ports are placed adjacent to each other, centered along the icon's edge.
            The positioning depends on the values of
            <see cref="P:Northwoods.GoWeb.GoGeneralNode.RightPortsAlignment"/>, <see cref="P:Northwoods.GoWeb.GoGeneralNode.RightPortsLabelSpacing"/>,
            <see cref="P:Northwoods.GoWeb.GoGeneralNode.RightPortLabelsInside"/>, and the result of calling
            <see cref="T:Northwoods.GoWeb.GoGeneralNodePort"/>.<see cref="M:Northwoods.GoWeb.GoGeneralNodePort.LayoutLabel"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNode.LayoutLabels">
            <summary>
            Position the <see cref="P:Northwoods.GoWeb.GoGeneralNode.TopLabel"/> and the <see cref="P:Northwoods.GoWeb.GoGeneralNode.BottomLabel"/>
            above and below the <see cref="P:Northwoods.GoWeb.GoGeneralNode.Icon"/>.
            </summary>
            <remarks>
            When the <see cref="P:Northwoods.GoWeb.GoGeneralNode.Orientation"/> is <b>Vertical</b>,
            the <see cref="P:Northwoods.GoWeb.GoGeneralNode.TopLabel"/> will be on the left side of the <see cref="P:Northwoods.GoWeb.GoGeneralNode.Icon"/>,
            and the <see cref="P:Northwoods.GoWeb.GoGeneralNode.BottomLabel"/> will be on the right side.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNode.FindName(Northwoods.GoWeb.GoObject)">
            <summary>
            The properties referring to parts of this node
            are also the names of those parts.
            </summary>
            <param name="child"></param>
            <returns></returns>
            <remarks>
            LeftPorts and RightPorts have generated names that are of the form:
            "Lnnn" or "Rnnn", where "nnn" is the index of that port.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNode.FindChild(System.String)">
            <summary>
            The properties referring to parts of this node
            are also the names of those parts.
            </summary>
            <param name="name"></param>
            <returns></returns>
            <remarks>
            LeftPorts and RightPorts have generated names that are of the form:
            "Lnnn" or "Rnnn", where "nnn" is the index of that port.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNode.OnOrientationChanged(Northwoods.GoWeb.Orientation)">
            <summary>
            Determine how to change the whole node when the <see cref="P:Northwoods.GoWeb.GoGeneralNode.Orientation"/> changes.
            </summary>
            <param name="old">the former <see cref="P:Northwoods.GoWeb.GoGeneralNode.Orientation"/> value</param>
            <remarks>
            By default, changing the <see cref="P:Northwoods.GoWeb.GoGeneralNode.Orientation"/> property will reposition
            all of the ports appropriately and change the ports' <see cref="P:Northwoods.GoWeb.GoPort.ToSpot"/>
            and <see cref="P:Northwoods.GoWeb.GoPort.FromSpot"/> properties.
            When <see cref="P:Northwoods.GoWeb.GoGeneralNode.Orientation"/> is <c>Orientation.Horizontal</c>, "left" ports
            are in fact on the left side, "right" ports are on the right side, source links
            come into the left ports on the left side, and destination links go out of the
            right ports from the right side.
            When <see cref="P:Northwoods.GoWeb.GoGeneralNode.Orientation"/> is <c>Orientation.Vertical</c>, "left" ports are
            on top of the node, "right" ports are on the bottom, and links come in from the
            top and go out from the bottom.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNode.GetLeftPort(System.Int32)">
            <summary>
            Return a port by its index position on the left side of this node.
            </summary>
            <param name="i">a zero-based, non-negative index</param>
            <returns>null if <paramref name="i"/> is greater than or equal to <see cref="P:Northwoods.GoWeb.GoGeneralNode.LeftPortsCount"/></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNode.GetRightPort(System.Int32)">
            <summary>
            Return a port by its index position on the right side of this node.
            </summary>
            <param name="i">a zero-based, non-negative index</param>
            <returns>null if <paramref name="i"/> is greater than or equal to <see cref="P:Northwoods.GoWeb.GoGeneralNode.RightPortsCount"/></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNode.Add(Northwoods.GoWeb.GoObject)">
            <summary>
            If the new child is a <see cref="T:Northwoods.GoWeb.GoGeneralNodePort"/>,
            and if <see cref="P:Northwoods.GoWeb.GoObject.Initializing"/> is false,
            automatically add it (and its <see cref="P:Northwoods.GoWeb.GoGeneralNodePort.Label"/>)
            to the appropriate side, by calling either <see cref="M:Northwoods.GoWeb.GoGeneralNode.InsertLeftPort(System.Int32,Northwoods.GoWeb.GoGeneralNodePort)"/>
            or <see cref="M:Northwoods.GoWeb.GoGeneralNode.InsertRightPort(System.Int32,Northwoods.GoWeb.GoGeneralNodePort)"/>.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNode.AddLeftPort(Northwoods.GoWeb.GoGeneralNodePort)">
            <summary>
            Add a <see cref="T:Northwoods.GoWeb.GoGeneralNodePort"/> created by a call to <see cref="M:Northwoods.GoWeb.GoGeneralNode.MakePort(System.Boolean)"/>
            at the end of the list of ports on the left side of this node.
            </summary>
            <param name="p"></param>
            <remarks>
            This just calls <see cref="M:Northwoods.GoWeb.GoGeneralNode.InsertLeftPort(System.Int32,Northwoods.GoWeb.GoGeneralNodePort)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNode.AddRightPort(Northwoods.GoWeb.GoGeneralNodePort)">
            <summary>
            Add a <see cref="T:Northwoods.GoWeb.GoGeneralNodePort"/> created by a call to <see cref="M:Northwoods.GoWeb.GoGeneralNode.MakePort(System.Boolean)"/>
            at the end of the list of ports on the right side of this node.
            </summary>
            <param name="p"></param>
            <remarks>
            This just calls <see cref="M:Northwoods.GoWeb.GoGeneralNode.InsertRightPort(System.Int32,Northwoods.GoWeb.GoGeneralNodePort)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNode.InsertLeftPort(System.Int32,Northwoods.GoWeb.GoGeneralNodePort)">
            <summary>
            Insert a <see cref="T:Northwoods.GoWeb.GoGeneralNodePort"/> created by a call to <see cref="M:Northwoods.GoWeb.GoGeneralNode.MakePort(System.Boolean)"/>
            to be at a particular index position on the left side of this node.
            </summary>
            <param name="i">if beyond the number of ports, adds it at the end</param>
            <param name="p"></param>
            <remarks>
            This also adds the port's <see cref="P:Northwoods.GoWeb.GoGeneralNodePort.Label"/> to the node.
            This sets <see cref="P:Northwoods.GoWeb.GoGeneralNodePort.LeftSide"/> to true, and
            sets <see cref="P:Northwoods.GoWeb.GoGeneralNodePort.SideIndex"/> to the index <paramref name="i"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNode.InsertRightPort(System.Int32,Northwoods.GoWeb.GoGeneralNodePort)">
            <summary>
            Insert a <see cref="T:Northwoods.GoWeb.GoGeneralNodePort"/> created by a call to <see cref="M:Northwoods.GoWeb.GoGeneralNode.MakePort(System.Boolean)"/>
            to be at a particular index position on the right side of this node.
            </summary>
            <param name="i">if beyond the number of ports, adds it at the end</param>
            <param name="p"></param>
            <remarks>
            This also adds the port's <see cref="P:Northwoods.GoWeb.GoGeneralNodePort.Label"/> to the node.
            This sets <see cref="P:Northwoods.GoWeb.GoGeneralNodePort.LeftSide"/> to false, and
            sets <see cref="P:Northwoods.GoWeb.GoGeneralNodePort.SideIndex"/> to the index <paramref name="i"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNode.Remove(Northwoods.GoWeb.GoObject)">
            <summary>
            When a port is removed, make sure we also remove its label and adjust
            the positions of all of the other ports.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNode.RemoveLeftPort(System.Int32)">
            <summary>
            Remove the port and its label at a particular index position on the
            left side of this node.
            </summary>
            <param name="i">a zero-based non-negative index</param>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNode.RemoveRightPort(System.Int32)">
            <summary>
            Remove the port and its label at a particular index position on the
            right side of this node.
            </summary>
            <param name="i">a zero-based non-negative index</param>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNode.SetLeftPort(System.Int32,Northwoods.GoWeb.GoGeneralNodePort)">
            <summary>
            Replace the port and its label at a particular index position on the
            left side of this node.
            </summary>
            <param name="i">a zero-based non-negative index</param>
            <param name="p"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNode.SetRightPort(System.Int32,Northwoods.GoWeb.GoGeneralNodePort)">
            <summary>
            Replace the port and its label at a particular index position on the
            right side of this node.
            </summary>
            <param name="i">a zero-based non-negative index</param>
            <param name="p"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNode.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle this class's property changes for undo and redo
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.GoWeb.GoGeneralNode.MinimumIconSize">
            <summary>
            Assume the icon needs to be tall enough to hold all of the
            ports on its left and right sides without overlapping them or
            extending them out beyond the icon.
            </summary>
            <remarks>
            If the <see cref="P:Northwoods.GoWeb.GoGeneralNode.Icon"/> is actually a <see cref="T:Northwoods.GoWeb.GoNodeIcon"/>,
            this uses the maximum of the <see cref="P:Northwoods.GoWeb.GoNodeIcon.MinimumIconSize"/>
            and the total height (or width if <see cref="P:Northwoods.GoWeb.GoGeneralNode.Orientation"/>
            is <c>Orientation.Vertical</c>) of all of ports on each side.
            However, when the icon's <see cref="P:Northwoods.GoWeb.GoObject.AutoRescales"/>
            property is false, this does not take into account the total
            height/width of the ports.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoGeneralNode.MaximumIconSize">
            <summary>
            Assume a 1000x2000 maximum size for the icon.
            </summary>
            <value>
            The value comes from the <see cref="P:Northwoods.GoWeb.GoGeneralNode.Icon"/> if it is an instance of <see cref="T:Northwoods.GoWeb.GoNodeIcon"/>;
            otherwise the value defaults to 1000x2000.
            Setting this value sets the <see cref="P:Northwoods.GoWeb.GoNodeIcon.MaximumIconSize"/> property of the
            <see cref="P:Northwoods.GoWeb.GoGeneralNode.Icon"/> if it is a <see cref="T:Northwoods.GoWeb.GoNodeIcon"/>; it is a no-op otherwise.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoGeneralNode.SelectionObject">
            <summary>
            The selection object, what the user sees as being selected and what the user
            actually resizes, is the icon.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoGeneralNode.Label">
            <summary>
            Participate in standard textual node searches and editing,
            using the bottom label in preference to the top label if both
            are present.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoGeneralNode.Icon">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoWeb.GoObject"/>, normally a <see cref="T:Northwoods.GoWeb.GoImage"/>,
            acting as the central icon for this node.
            </summary>
            <value>
            The new value may be null, to simply remove the icon.
            If non-null, the icon object should have the <see cref="P:Northwoods.GoWeb.GoObject.Selectable"/>
            property set to false.
            </value>
            <remarks>
            Instead of setting the icon after creating a node, you may find it
            easier to override the <see cref="M:Northwoods.GoWeb.GoGeneralNode.CreateIcon(System.Resources.ResourceManager,System.String)"/> method(s).
            The new shape will have its Center location,
            Selectable, Resizable, Reshapable, ResizesRealtime, and Shadowed
            properties copied from the old shape.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoGeneralNode.Image">
            <summary>
            Gets the icon as a <see cref="T:Northwoods.GoWeb.GoImage"/>.
            </summary>
            <value>
            If, in an exceptional case, the icon does not exist or in fact is
            not a <see cref="T:Northwoods.GoWeb.GoImage"/>, this value is null.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoGeneralNode.Shape">
            <summary>
            Gets this node's icon, assuming it is a <see cref="T:Northwoods.GoWeb.GoShape"/>,
            as it would be if you call <see cref="M:Northwoods.GoWeb.GoGeneralNode.Initialize(System.Resources.ResourceManager,System.String,System.String,System.String,System.Int32,System.Int32)"/>
            with a null String icon name.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoGeneralNode.Figure">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoWeb.GoDrawing"/>.<see cref="P:Northwoods.GoWeb.GoDrawing.Figure"/>
            of the <see cref="P:Northwoods.GoWeb.GoGeneralNode.Shape"/> IF the icon is a <see cref="T:Northwoods.GoWeb.GoDrawing"/>.
            [Not in GoDiagram Pocket]
            </summary>
            <value>
            This returns <see cref="T:Northwoods.GoWeb.GoFigure"/>.<see cref="F:Northwoods.GoWeb.GoFigure.None"/>
            in the typical case where the <see cref="P:Northwoods.GoWeb.GoGeneralNode.Icon"/> is a <see cref="T:Northwoods.GoWeb.GoImage"/>.
            Setting this property has no effect if the <see cref="P:Northwoods.GoWeb.GoGeneralNode.Shape"/> is not a <see cref="T:Northwoods.GoWeb.GoDrawing"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoGeneralNode.Orientation">
            <summary>
            Gets or sets the general orientation of the node and how links connect to it.
            </summary>
            <value>
            This defaults to <c>Orientation.Horizontal</c>
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoGeneralNode.TopLabel">
            <summary>
            Gets or sets the label at the top of the node.
            </summary>
            <value>
            This must be a <see cref="T:Northwoods.GoWeb.GoText"/> object.
            The value may be set to null, to remove any existing label.
            If non-null, the text object should have the <see cref="P:Northwoods.GoWeb.GoObject.Selectable"/>
            property set to false.
            </value>
            <remarks>
            Instead of setting the label after creating a node, you may find it
            easier to override the <see cref="M:Northwoods.GoWeb.GoGeneralNode.CreateLabel(System.Boolean,System.String)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoGeneralNode.BottomLabel">
            <summary>
            Gets or sets the label at the bottom of the node.
            </summary>
            <value>
            This must be a <see cref="T:Northwoods.GoWeb.GoText"/> object.
            The value may be set to null, to remove any existing label.
            If non-null, the text object should have the <see cref="P:Northwoods.GoWeb.GoObject.Selectable"/>
            property set to false.
            </value>
            <remarks>
            Instead of setting the label after creating a node, you may find it
            easier to override the <see cref="M:Northwoods.GoWeb.GoGeneralNode.CreateLabel(System.Boolean,System.String)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoGeneralNode.FromEndSegmentLengthStep">
            <summary>
            Gets or sets the incremental distance at when the ports'
            <see cref="P:Northwoods.GoWeb.GoPort.EndSegmentLength"/> is extended by <see cref="T:Northwoods.GoWeb.GoGeneralNodePort"/>
            to help reduce the amount of overlapping orthogonal links coming out of this node.
            </summary>
            <value>
            This defaults to 8.  Set this to zero to have <see cref="M:Northwoods.GoWeb.GoPort.GetFromEndSegmentLength(Northwoods.GoWeb.IGoLink)"/>
            just return the value of <see cref="T:Northwoods.GoWeb.GoPort"/>.<see cref="P:Northwoods.GoWeb.GoPort.EndSegmentLength"/>
            for the "from" end of links.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoGeneralNode.ToEndSegmentLengthStep">
            <summary>
            Gets or sets the incremental distance at when the ports'
            <see cref="P:Northwoods.GoWeb.GoPort.EndSegmentLength"/> is extended by <see cref="T:Northwoods.GoWeb.GoGeneralNodePort"/>
            to help reduce the amount of overlapping orthogonal links going into this node.
            </summary>
            <value>
            This defaults to 4.  Set this to zero to have <see cref="M:Northwoods.GoWeb.GoPort.GetToEndSegmentLength(Northwoods.GoWeb.IGoLink)"/>
            just return the value of <see cref="T:Northwoods.GoWeb.GoPort"/>.<see cref="P:Northwoods.GoWeb.GoPort.EndSegmentLength"/>
            for the "to" end of links.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoGeneralNode.LeftPortsAlignment">
            <summary>
            Gets or sets the alignments of the "left ports" relative to the <see cref="P:Northwoods.GoWeb.GoGeneralNode.Icon"/>.
            </summary>
            <value>
            The default value is <b>GoObject.BottomRight</b>.
            If the <see cref="P:Northwoods.GoWeb.GoGeneralNode.Orientation"/> is <b>Horizontal</b>, the right side of the port
            is lined up with the left edge of the <see cref="P:Northwoods.GoWeb.GoGeneralNode.Icon"/>;
            otherwise for a <b>Vertical</b> orientation, the bottom side of the port
            is lined up with the top edge of the <see cref="P:Northwoods.GoWeb.GoGeneralNode.Icon"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoGeneralNode.RightPortsAlignment">
            <summary>
            Gets or sets the alignments of the "right ports" relative to the <see cref="P:Northwoods.GoWeb.GoGeneralNode.Icon"/>.
            </summary>
            <value>
            The default value is <b>GoObject.TopLeft</b>.
            If the <see cref="P:Northwoods.GoWeb.GoGeneralNode.Orientation"/> is <b>Horizontal</b>, the left side of the port
            is lined up with the right edge of the <see cref="P:Northwoods.GoWeb.GoGeneralNode.Icon"/>;
            otherwise for a <b>Vertical</b> orientation, the top side of the port
            is lined up with the bottom edge of the <see cref="P:Northwoods.GoWeb.GoGeneralNode.Icon"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoGeneralNode.LeftPortsLabelSpacing">
            <summary>
            Gets or sets the space between a <see cref="T:Northwoods.GoWeb.GoGeneralNodePort"/> and its <see cref="T:Northwoods.GoWeb.GoGeneralNodePortLabel"/>.
            </summary>
            <value>
            The default value is 2.  A negative value will result in overlap of the label and the port.
            </value>
            <remarks>
            You can customize the value for individual ports by overriding the
            <see cref="T:Northwoods.GoWeb.GoGeneralNodePort"/>.<see cref="P:Northwoods.GoWeb.GoGeneralNodePort.LabelSpacing"/> property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoGeneralNode.RightPortsLabelSpacing">
            <summary>
            Gets or sets the space between a <see cref="T:Northwoods.GoWeb.GoGeneralNodePort"/> and its <see cref="T:Northwoods.GoWeb.GoGeneralNodePortLabel"/>.
            </summary>
            <value>
            The default value is 2.  A negative value will result in overlap of the label and the port.
            </value>
            <remarks>
            You can customize the value for individual ports by overriding the
            <see cref="T:Northwoods.GoWeb.GoGeneralNodePort"/>.<see cref="P:Northwoods.GoWeb.GoGeneralNodePort.LabelSpacing"/> property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoGeneralNode.LeftPortLabelsInside">
            <summary>
            Gets or sets whether the labels for the left ports should go inside the ports
            (over the icon) or on the outside.
            </summary>
            <value>
            The default value is false.
            Note that when the value is true, long labels or narrow icons may result
            in overlapping labels.
            </value>
            <remarks>
            You can customize the value for individual ports by overriding the
            <see cref="T:Northwoods.GoWeb.GoGeneralNodePort"/>.<see cref="P:Northwoods.GoWeb.GoGeneralNodePort.LabelInside"/> property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoGeneralNode.RightPortLabelsInside">
            <summary>
            Gets or sets whether the labels for the right ports should go inside the ports
            (over the icon) or on the outside.
            </summary>
            <value>
            The default value is false.
            Note that when the value is true, long labels or narrow icons may result
            in overlapping labels.
            </value>
            <remarks>
            You can customize the value for individual ports by overriding the
            <see cref="T:Northwoods.GoWeb.GoGeneralNodePort"/>.<see cref="P:Northwoods.GoWeb.GoGeneralNodePort.LabelInside"/> property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoGeneralNode.LeftPortsCount">
            <summary>
            Gets the number of ports on the left side of this node.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoGeneralNode.RightPortsCount">
            <summary>
            Gets the number of ports on the right side of this node.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoGeneralNodePort">
            <summary>
            A <see cref="T:Northwoods.GoWeb.GoPort"/> that is part of a <see cref="T:Northwoods.GoWeb.GoGeneralNode"/>.
            </summary>
            <remarks>
            This is normally created by <see cref="T:Northwoods.GoWeb.GoGeneralNode"/>.<see cref="M:Northwoods.GoWeb.GoGeneralNode.CreatePort(System.Boolean)"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoGeneralNodePort.ChangedName">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoGeneralNodePort.Name"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGeneralNodePort.ChangedLabel">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoGeneralNodePort.Label"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGeneralNodePort.ChangedSideIndex">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoGeneralNodePort.SideIndex"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoGeneralNodePort.ChangedLeftSide">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoGeneralNodePort.LeftSide"/> property.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNodePort.#ctor">
            <summary>
            Create a GoGeneralNodePort, for use in a <see cref="T:Northwoods.GoWeb.GoGeneralNode"/>.
            </summary>
            <remarks>
            The port is normally a medium sized gray triangle with no name.
            It does not create a <see cref="T:Northwoods.GoWeb.GoGeneralNodePortLabel"/>--
            <see cref="T:Northwoods.GoWeb.GoGeneralNode"/> is responsible for creating it
            and associating the two with each other.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNodePort.CopyObject(Northwoods.GoWeb.GoCopyDictionary)">
            <summary>
            Copy the port's label too, and make sure its <see cref="P:Northwoods.GoWeb.GoGeneralNodePortLabel.Port"/>
            property points to the copied port.
            </summary>
            <param name="env"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNodePort.LayoutLabel">
            <summary>
            Position the port label to the appropriate side of the port,
            so that it doesn't overlap the icon or the port itself.
            </summary>
            <remarks>
            This depends on the <see cref="P:Northwoods.GoWeb.GoGeneralNodePort.LabelSpacing"/> property, and
            affects the link point for this port.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNodePort.GetToLinkPoint(Northwoods.GoWeb.IGoLink)">
            <summary>
            Override the calculation of the link point to take into account
            the size of any port label, so the link does not overlap the label.
            </summary>
            <param name="link"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNodePort.GetFromLinkPoint(Northwoods.GoWeb.IGoLink)">
            <summary>
            Override the calculation of the link point to take into account
            the size of any port label, so the link does not overlap the label.
            </summary>
            <param name="link"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNodePort.GetLinkPoint(System.Int32)">
            <summary>
            This is called by <see cref="M:Northwoods.GoWeb.GoGeneralNodePort.GetToLinkPoint(Northwoods.GoWeb.IGoLink)"/> and <see cref="M:Northwoods.GoWeb.GoGeneralNodePort.GetFromLinkPoint(Northwoods.GoWeb.IGoLink)"/>
            to calculate the appropriate point for a link to connect at, considering
            the width of the label and the <see cref="P:Northwoods.GoWeb.GoGeneralNodePort.LabelSpacing"/>.
            </summary>
            <param name="spot"></param>
            <returns>the link end point, a <b>PointF</b></returns>
            <remarks>
            If the <see cref="P:Northwoods.GoWeb.GoGeneralNodePort.LabelInside"/> property is true, this just returns
            <b>GetSpotLocation(spot)</b>.
            Otherwise it computes a point just outside of the label, so that the
            link does not cross over the label.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNodePort.GetToolTip(Northwoods.GoWeb.GoView)">
            <summary>
            Show the name of the port, in case the <see cref="P:Northwoods.GoWeb.GoGeneralNodePort.Label"/> is not present.
            </summary>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNodePort.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle this class's property changes for undo and redo
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.GoWeb.GoGeneralNodePort.LeftSide">
            <summary>
            Gets or sets which side of the <see cref="T:Northwoods.GoWeb.GoGeneralNode"/> this port should be on.
            </summary>
            <remarks>
            <para>
            This should only be set before it is actually added to the node.
            If <see cref="P:Northwoods.GoWeb.GoGeneralNode.Orientation"/> is <b>Vertical</b>,
            this actually refers to the "top" side, not the "left" side.
            This property is also set by <see cref="M:Northwoods.GoWeb.GoGeneralNode.InsertLeftPort(System.Int32,Northwoods.GoWeb.GoGeneralNodePort)"/>
            and <see cref="M:Northwoods.GoWeb.GoGeneralNode.InsertRightPort(System.Int32,Northwoods.GoWeb.GoGeneralNodePort)"/>.
            </para>
            <para>
            Changing this value will automatically set the <see cref="P:Northwoods.GoWeb.GoPort.IsValidFrom"/>
            and <see cref="P:Northwoods.GoWeb.GoPort.IsValidTo"/> properties in the standard manner.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoGeneralNodePort.SideIndex">
            <summary>
            Gets the index of this port in the <see cref="T:Northwoods.GoWeb.GoGeneralNode"/> list of ports on this side.
            </summary>
            <remarks>
            This should only be set by <see cref="T:Northwoods.GoWeb.GoGeneralNode"/> code.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoGeneralNodePort.Name">
            <summary>
            Gets or sets the name for this port, which is normally reflected by the label, if any.
            </summary>
            <remarks>
            This property is implemented separately from the <see cref="P:Northwoods.GoWeb.GoGeneralNodePort.Label"/>
            to allow the port to be "named" even if there is no <see cref="P:Northwoods.GoWeb.GoGeneralNodePort.Label"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoGeneralNodePort.Label">
            <summary>
            Gets or sets the text object displays the name of this port.
            </summary>
            <value>
            The new value may be null, to simply remove the label.
            If non-null, the text object should have the <see cref="P:Northwoods.GoWeb.GoObject.Selectable"/>
            property set to false.
            </value>
            <remarks>
            Instead of setting the label after creating a port, you may find it
            easier to override the <see cref="M:Northwoods.GoWeb.GoGeneralNode.CreatePortLabel(System.Boolean)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoGeneralNodePort.LabelInside">
            <summary>
            Return whether the <see cref="P:Northwoods.GoWeb.GoGeneralNodePort.Label"/> should go on the inside or
            on the outside of this port, relative to the <see cref="T:System.Drawing.Icon"/>.
            </summary>
            <value>
            This defaults to the value of the parent <see cref="T:Northwoods.GoWeb.GoGeneralNode"/>'s
            <see cref="P:Northwoods.GoWeb.GoGeneralNode.LeftPortLabelsInside"/> or
            <see cref="P:Northwoods.GoWeb.GoGeneralNode.RightPortLabelsInside"/> property.
            If there is no such parent, this returns false.
            </value>
            <remarks>
            You can override this property to customize the label positioning for individual ports.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoGeneralNodePort.LabelSpacing">
            <summary>
            Return the desired distance between the port label and the port itself 
            </summary>
            <value>
            This defaults to the value of the parent <see cref="T:Northwoods.GoWeb.GoGeneralNode"/>'s
            <see cref="P:Northwoods.GoWeb.GoGeneralNode.LeftPortsLabelSpacing"/> or
            <see cref="P:Northwoods.GoWeb.GoGeneralNode.RightPortsLabelSpacing"/> property.
            If there is no such parent, this returns 2.
            </value>
            <remarks>
            You can override this property to customize the spacing for individual ports.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoGeneralNodePort.PortAndLabelWidth">
            <summary>
            This is called by <see cref="M:Northwoods.GoWeb.GoGeneralNode.LayoutChildren(Northwoods.GoWeb.GoObject)"/> and
            related methods to determine how wide this port is.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoGeneralNodePort.PortAndLabelHeight">
            <summary>
            This is called by <see cref="M:Northwoods.GoWeb.GoGeneralNode.LayoutChildren(Northwoods.GoWeb.GoObject)"/> and
            related methods to determine how tall this port is.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoGeneralNodePortLabel">
            <summary>
            The label for a <see cref="T:Northwoods.GoWeb.GoGeneralNodePort"/>.
            </summary>
            <remarks>
            This is normally created by <see cref="T:Northwoods.GoWeb.GoGeneralNode"/>.<see cref="M:Northwoods.GoWeb.GoGeneralNode.CreatePortLabel(System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoGeneralNodePortLabel.#ctor">
            <summary>
            Create an editable, non-rescaling <see cref="T:Northwoods.GoWeb.GoText"/> that
            does not yet know which <see cref="P:Northwoods.GoWeb.GoGeneralNodePortLabel.Port"/> it is associated with.
            </summary>
            <remarks>
            <see cref="T:Northwoods.GoWeb.GoGeneralNode"/> is responsible for allocating a
            <see cref="T:Northwoods.GoWeb.GoGeneralNodePort"/> and associating it with this label.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoGeneralNodePortLabel.Port">
            <summary>
            Gets or sets the port corresponding to this label.
            </summary>
            <remarks>
            Setting this does not cause any Change notifications.
            This is normally set only by <see cref="T:Northwoods.GoWeb.GoGeneralNode"/>.<see cref="M:Northwoods.GoWeb.GoGeneralNode.MakePort(System.Boolean)"/>
            and by the <see cref="T:Northwoods.GoWeb.GoGeneralNodePort"/>.<see cref="P:Northwoods.GoWeb.GoGeneralNodePort.Label"/> setter.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoGeneralNodePortLabel.Text">
            <summary>
            When this label's text string changes, we update the port's name too.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoIconicNode">
            <summary>
            A node with an image for an icon, a label, and a single port centered on the image.
            </summary>
            <remarks>
            <para>
            Call the <c>Initialize</c> method to construct the standard parts of this kind of node.
            </para>
            <para>
            The <see cref="P:Northwoods.GoWeb.GoIconicNode.Icon"/> is normally a <see cref="T:Northwoods.GoWeb.GoImage"/>,
            but could be any kind of <see cref="T:Northwoods.GoWeb.GoObject"/>.
            When it is a <see cref="T:Northwoods.GoWeb.GoImage"/>, the <see cref="P:Northwoods.GoWeb.GoIconicNode.Image"/> property gives you
            convenient access to the icon's image properties.
            The image will normally be sized to match the natural size of the <c>Image</c>
            being drawn.  You may want to set the <c>Icon.Size</c> property to make sure the
            icon isn't too big or too small.
            </para>
            <para>
            When then first two arguments to <see cref="M:Northwoods.GoWeb.GoIconicNode.Initialize(System.Resources.ResourceManager,System.String,System.String)"/>
            are null, the node is initialized to use a <see cref="T:Northwoods.GoWeb.GoDrawing"/> instead of a
            <see cref="T:Northwoods.GoWeb.GoImage"/>.  After initialization you can set the <see cref="P:Northwoods.GoWeb.GoIconicNode.Figure"/>
            property if you want to display one of the standard <see cref="T:Northwoods.GoWeb.GoFigure"/>s.
            </para>
            <para>
            You can also set the <see cref="P:Northwoods.GoWeb.GoIconicNode.Icon"/> to be any kind of <see cref="T:Northwoods.GoWeb.GoObject"/>,
            including other kinds of <see cref="T:Northwoods.GoWeb.GoShape"/>s.  The <see cref="P:Northwoods.GoWeb.GoIconicNode.Shape"/> property
            provides convenient access to the icon when it is a <see cref="T:Northwoods.GoWeb.GoShape"/>, to allow
            you to initialize its brush and/or pen.  If your icon is a <see cref="T:Northwoods.GoWeb.GoGroup"/>,
            it might be convenient to override <see cref="P:Northwoods.GoWeb.GoIconicNode.Shape"/> and perhaps <see cref="P:Northwoods.GoWeb.GoIconicNode.Figure"/>
            to refer to the appropriate shape or drawing in the group.
            </para>
            <para>
            The <see cref="P:Northwoods.GoWeb.GoIconicNode.Label"/> is normally centered below the <see cref="P:Northwoods.GoWeb.GoIconicNode.Icon"/>.
            You can set the <see cref="P:Northwoods.GoWeb.GoIconicNode.LabelOffset"/> property to position it elsewhere
            relative to the <see cref="P:Northwoods.GoWeb.GoIconicNode.Icon"/>.
            Furthermore, you can set the <see cref="P:Northwoods.GoWeb.GoIconicNode.DraggableLabel"/> property to allow the
            user to move it around.
            </para>
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoIconicNode.ChangedDraggableLabel">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoIconicNode.DraggableLabel"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoIconicNode.ChangedIcon">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoIconicNode.Icon"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoIconicNode.ChangedLabel">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoIconicNode.Label"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoIconicNode.ChangedPort">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoIconicNode.Port"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoIconicNode.ChangedLabelOffset">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoIconicNode.LabelOffset"/> property.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoIconicNode.#ctor">
            <summary>
            Create an empty GoIconicNode--call the
            <see cref="M:Northwoods.GoWeb.GoIconicNode.Initialize(System.Resources.ResourceManager,System.String,System.String)"/> method(s)
            to create an icon, a label, and a port.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoIconicNode.Initialize(System.Resources.ResourceManager,System.String,System.String)">
            <summary>
            Initialize an empty GoIconicNode to have an icon, a label, and one port.
            </summary>
            <param name="res">
            Provides the <c>ResourceManager</c> holding an <c>Image</c> resource named by
            <paramref name="iconname"/>.  If this parameter is null,
            <see cref="P:Northwoods.GoWeb.GoImage.DefaultResourceManager"/> is used instead.
            </param>
            <param name="iconname">
            <para>
            The name of the <c>Image</c> resource in the <c>ResourceManager</c>
            given by <paramref name="res"/>, or else a file name if no resource manager
            can be used (i.e., when both <paramref name="res"/> is null and
            <see cref="P:Northwoods.GoWeb.GoImage.DefaultResourceManager"/> is null).
            </para>
            <para>
            If the value is an empty string, the <c>Image</c> will be blank;
            you can set <see cref="P:Northwoods.GoWeb.GoIconicNode.Image"/>.<see cref="P:Northwoods.GoWeb.GoImage.Name"/> to show or change
            the image displayed by the <see cref="T:Northwoods.GoWeb.GoImage"/> that is the <see cref="P:Northwoods.GoWeb.GoIconicNode.Image"/>.
            </para>
            <para>
            If the value is null, the <see cref="P:Northwoods.GoWeb.GoIconicNode.Icon"/> is not a <see cref="T:Northwoods.GoWeb.GoImage"/>
            but a <see cref="T:Northwoods.GoWeb.GoDrawing"/>; you can then set the <see cref="P:Northwoods.GoWeb.GoIconicNode.Figure"/>
            to change the shape shown as the icon.
            </para>
            </param>
            <param name="name">
            The initial string value for the <see cref="P:Northwoods.GoWeb.GoIconicNode.Label"/>.
            If this value is null, no label is created for this node.
            </param>
        </member>
        <member name="M:Northwoods.GoWeb.GoIconicNode.CreateIcon(System.Resources.ResourceManager,System.String)">
            <summary>
            Create and initialize a <see cref="T:Northwoods.GoWeb.GoImage"/> or a <see cref="T:Northwoods.GoWeb.GoDrawing"/> to act as the node's icon.
            </summary>
            <param name="res">
            Provides the <c>ResourceManager</c> holding an <c>Image</c> resource named by
            <paramref name="iconname"/>.  If this parameter is null,
            <see cref="P:Northwoods.GoWeb.GoImage.DefaultResourceManager"/> is used instead.
            </param>
            <param name="iconname">
            <para>
            The name of the <c>Image</c> resource in the <c>ResourceManager</c>
            given by <paramref name="res"/>, or else a file name if no resource manager
            can be used (i.e., when both <paramref name="res"/> is null and
            <see cref="P:Northwoods.GoWeb.GoImage.DefaultResourceManager"/> is null).
            </para>
            <para>
            If the value is an empty string, the <c>Image</c> will be blank;
            you can set <see cref="P:Northwoods.GoWeb.GoIconicNode.Image"/>.<see cref="P:Northwoods.GoWeb.GoImage.Name"/> to show or change
            the image displayed by the <see cref="T:Northwoods.GoWeb.GoImage"/> that is the <see cref="P:Northwoods.GoWeb.GoIconicNode.Image"/>.
            </para>
            <para>
            If the value is null, the <see cref="P:Northwoods.GoWeb.GoIconicNode.Icon"/> is not a <see cref="T:Northwoods.GoWeb.GoImage"/>
            but a <see cref="T:Northwoods.GoWeb.GoDrawing"/>; you can then set the <see cref="P:Northwoods.GoWeb.GoIconicNode.Figure"/>
            to change the shape shown as the icon.
            </para>
            </param>
            <returns>
            a <see cref="T:Northwoods.GoWeb.GoImage"/>
            </returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoObject CreateIcon(ResourceManager res, String iconname) {
               if (iconname != null) {
                 GoImage img = new GoImage();
                 if (res != null)
                   img.ResourceManager = res;
                 img.Name = iconname;
                 img.Selectable = false;
                 img.Resizable = false;
                 return img;
               } else {
                 GoDrawing rect = new GoDrawing(GoFigure.Rectangle);
                 rect.Selectable = false;
                 rect.Resizable = false;
                 rect.Size = new SizeF(40, 40);
                 return rect;
               }
             }
            </code>
            In GoDiagram Pocket this just creates a <see cref="T:Northwoods.GoWeb.GoRectangle"/>
            when the <paramref name="iconname"/> is null.
            </example>
        </member>
        <member name="M:Northwoods.GoWeb.GoIconicNode.CreateLabel(System.String)">
            <summary>
            Create and initialize a text label.
            </summary>
            <param name="name"></param>
            <returns>a non-editable, non-selectable, middle-aligned, non-rescaling <see cref="T:Northwoods.GoWeb.GoText"/> object</returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoText CreateLabel(String name) {
               GoText l = null;
               if (name != null) {
                 l = new GoText();
                 l.Text = name;
                 l.Selectable = this.DraggableLabel;
                 l.Alignment = MiddleTop;
               }
               return l;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.GoWeb.GoIconicNode.CreatePort">
            <summary>
            Create and initialize the node's port, which is normally not visible and at
            the middle of the icon.
            </summary>
            <returns>a <see cref="T:Northwoods.GoWeb.GoPort"/></returns>
            <remarks>
            <see cref="P:Northwoods.GoWeb.GoPort.IsValidFrom"/> and <see cref="P:Northwoods.GoWeb.GoPort.IsValidTo"/>
            are true, by default, thus allowing users to draw links from or
            to these nodes.  You may want to set those properties to false
            if you want prevent users from drawing links with a mouse-down
            and drag from the port, or to create a port with a different size
            or appearance.
            </remarks>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoPort CreatePort() {
               GoPort p = new GoPort();
               p.Style = GoPortStyle.None;
               p.Size = new SizeF(6, 6);
               p.FromSpot = NoSpot;
               p.ToSpot = NoSpot;
               p.PortObject = this;
               return p;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.GoWeb.GoIconicNode.CopyChildren(Northwoods.GoWeb.GoGroup,Northwoods.GoWeb.GoCopyDictionary)">
            <summary>
            Make copies of the icon, label and port.
            </summary>
            <param name="newgroup"></param>
            <param name="env"></param>
            <remarks>
            Remember to override this to copy any objects you add to this class.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoIconicNode.Remove(Northwoods.GoWeb.GoObject)">
            <summary>
            Because the label may be selectable and deleted by the user,
            be sure to remove any reference to the label.
            </summary>
            <param name="obj"></param>
            <remarks>
            Remember to override this to clear any child object references you add to this class.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoIconicNode.LayoutChildren(Northwoods.GoWeb.GoObject)">
            <summary>
            Position the label and port relative to the icon.
            </summary>
            <param name="childchanged"></param>
            <remarks>
            Initially the label is positioned below the icon.
            When <see cref="P:Northwoods.GoWeb.GoIconicNode.DraggableLabel"/> is true, the user may select
            and drag the label around independently of the node.
            This class maintains the last known offset of the label with
            respect to the icon, so that this method can place the label
            correctly when <see cref="P:Northwoods.GoWeb.GoIconicNode.DraggableLabel"/> is false or the
            <paramref name="childchanged"/> is not the label.
            When <see cref="P:Northwoods.GoWeb.GoObject.Initializing"/> is true, this method does nothing.
            This method also does nothing if there is no <see cref="P:Northwoods.GoWeb.GoIconicNode.Icon"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoIconicNode.FindName(Northwoods.GoWeb.GoObject)">
            <summary>
            The properties referring to parts of this node
            are also the names of those parts.
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoIconicNode.FindChild(System.String)">
            <summary>
            The properties referring to parts of this node
            are also the names of those parts.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoIconicNode.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle this class's property changes for undo and redo
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.GoWeb.GoIconicNode.Icon">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoWeb.GoObject"/> acting as the icon for this node.
            </summary>
            <remarks>
            You might want to override the <see cref="M:Northwoods.GoWeb.GoIconicNode.CreateIcon(System.Resources.ResourceManager,System.String)"/> method(s)
            if you want to create a different kind of <see cref="T:Northwoods.GoWeb.GoImage"/> when
            constructing this kind of node.
            The new shape will have its Center location,
            Selectable, Resizable, Reshapable, ResizesRealtime, and Shadowed
            properties copied from the old shape.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoIconicNode.Image">
            <summary>
            Gets this node's icon, assuming it is a <see cref="T:Northwoods.GoWeb.GoImage"/>, as it usually is.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoIconicNode.Shape">
            <summary>
            Gets this node's icon, assuming it is a <see cref="T:Northwoods.GoWeb.GoShape"/>,
            as it would be if you call <see cref="M:Northwoods.GoWeb.GoIconicNode.Initialize(System.Resources.ResourceManager,System.String,System.String)"/>
            with a null String icon name.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoIconicNode.Figure">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoWeb.GoDrawing"/>.<see cref="P:Northwoods.GoWeb.GoDrawing.Figure"/>
            of the <see cref="P:Northwoods.GoWeb.GoIconicNode.Shape"/> if the icon is a <see cref="T:Northwoods.GoWeb.GoDrawing"/>.
            [Not in GoDiagram Pocket]
            </summary>
            <value>
            This returns <see cref="T:Northwoods.GoWeb.GoFigure"/>.<see cref="F:Northwoods.GoWeb.GoFigure.None"/>
            in the typical case where the <see cref="P:Northwoods.GoWeb.GoIconicNode.Icon"/> is a <see cref="T:Northwoods.GoWeb.GoImage"/>.
            Setting this property has no effect if the <see cref="P:Northwoods.GoWeb.GoIconicNode.Shape"/> is not a <see cref="T:Northwoods.GoWeb.GoDrawing"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoIconicNode.Label">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoWeb.GoText"/> label.
            </summary>
            <remarks>
            You might want to override the <see cref="M:Northwoods.GoWeb.GoIconicNode.CreateLabel(System.String)"/> method
            if you want to create a different kind of <see cref="T:Northwoods.GoWeb.GoText"/> when
            constructing this kind of node.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoIconicNode.Port">
            <summary>
            Gets or sets the only port of this node, a <see cref="T:Northwoods.GoWeb.GoPort"/>.
            </summary>
            <remarks>
            Setting this property to a new port will also set that port's
            <see cref="P:Northwoods.GoWeb.GoPort.PortObject"/> to be this node,
            if it didn't already have a <see cref="P:Northwoods.GoWeb.GoPort.PortObject"/>.
            You might want to override the <see cref="M:Northwoods.GoWeb.GoIconicNode.CreatePort"/> method
            if you want to create a different kind of <see cref="T:Northwoods.GoWeb.GoPort"/> when
            constructing this kind of node.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoIconicNode.SelectionObject">
            <summary>
            The selection object, what the user sees as being selected and what the user
            actually resizes, is the icon.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoIconicNode.DraggableLabel">
            <summary>
            Gets or sets whether the user can drag the label around independently of the node.
            </summary>
            <value>
            Initially this value is false--the label is always positioned by
            <see cref="M:Northwoods.GoWeb.GoIconicNode.LayoutChildren(Northwoods.GoWeb.GoObject)"/> and users cannot move the
            label without moving the whole node.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoIconicNode.LabelOffset">
            <summary>
            Gets or sets the relative position of the <see cref="P:Northwoods.GoWeb.GoIconicNode.Label"/>'s position
            compared to the <see cref="P:Northwoods.GoWeb.GoIconicNode.Icon"/>'s position.
            </summary>
            <value>
            A very large negative offset causes <see cref="M:Northwoods.GoWeb.GoIconicNode.LayoutChildren(Northwoods.GoWeb.GoObject)"/> to
            ignore this value, resulting in the <see cref="P:Northwoods.GoWeb.GoIconicNode.Label"/> being
            placed underneath the <see cref="P:Northwoods.GoWeb.GoIconicNode.Icon"/>.
            </value>
            <remarks>
            This is automatically updated if the <see cref="P:Northwoods.GoWeb.GoIconicNode.DraggableLabel"/> is 
            true and the user drags the label around.
            </remarks>
        </member>
        <member name="T:Northwoods.GoWeb.GoLabeledLink">
            <summary>
            This class provides a standard implementation of <see cref="T:Northwoods.GoWeb.IGoLink"/>
            as a <see cref="P:Northwoods.GoWeb.GoLabeledLink.GoObject"/> with several other decoration objects.
            </summary>
            <remarks>
            <para>
            The <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/> property is the actual <see cref="T:Northwoods.GoWeb.GoLink"/>
            that this group uses to implement the link.  If you want to specify
            any arrow or highlighting or stroke point information, you should do
            so on the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/> rather than on this class.  However,
            for your convenience, many of the <see cref="T:Northwoods.GoWeb.GoLink"/> properties are
            available here, delegated to the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>.
            </para>
            <para>
            The labels, <see cref="P:Northwoods.GoWeb.GoLabeledLink.MidLabel"/>, <see cref="P:Northwoods.GoWeb.GoLabeledLink.FromLabel"/>, and <see cref="P:Northwoods.GoWeb.GoLabeledLink.ToLabel"/>,
            are normally either null or instances of <see cref="T:Northwoods.GoWeb.GoText"/>.  However,
            they can be other objects, including ports or groups of objects.
            Nevertheless, GoLabeledLink does not support link labels that are links.
            Nor may this link's ports be or be part of any of its own labels.
            </para>
            </remarks>
        </member>
        <member name="T:Northwoods.GoWeb.IGoLink">
            <summary>
            This interface represents an abstract connection between nodes, using ports
            to specify more specific connection points on the nodes.
            </summary>
            <remarks>
            Every <c>IGoLink</c> also implements <see cref="P:Northwoods.GoWeb.IGoGraphPart.GoObject"/>,
            <see cref="P:Northwoods.GoWeb.IGoGraphPart.UserFlags"/>, and <see cref="P:Northwoods.GoWeb.IGoGraphPart.UserObject"/>.
            </remarks>
            <seealso cref="T:Northwoods.GoWeb.GoLink"/>
            <seealso cref="T:Northwoods.GoWeb.GoLabeledLink"/>
            <seealso cref="T:Northwoods.GoWeb.IGoPort"/>
            <seealso cref="T:Northwoods.GoWeb.IGoNode"/>
        </member>
        <member name="M:Northwoods.GoWeb.IGoLink.GetOtherPort(Northwoods.GoWeb.IGoPort)">
            <summary>
            Given one of the ports connected to this link, return this link's other port.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.IGoLink.GetOtherNode(Northwoods.GoWeb.IGoNode)">
            <summary>
            Given one of the nodes connected to this link, return this link's other node.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.IGoLink.Unlink">
            <summary>
            Remove this link by disconnecting it from both of its ports.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.IGoLink.OnPortChanged(Northwoods.GoWeb.IGoPort,System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)">
            <summary>
            This method is called when one of this link's two ports is changed.
            </summary>
            <param name="port"></param>
            <param name="subhint"></param>
            <param name="oldI"></param>
            <param name="oldVal"></param>
            <param name="oldRect"></param>
            <param name="newI"></param>
            <param name="newVal"></param>
            <param name="newRect"></param>
        </member>
        <member name="P:Northwoods.GoWeb.IGoLink.FromPort">
            <summary>
            Gets or sets the port that the link is coming from.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.IGoLink.ToPort"/>
            <seealso cref="P:Northwoods.GoWeb.IGoLink.FromNode"/>
        </member>
        <member name="P:Northwoods.GoWeb.IGoLink.ToPort">
            <summary>
            Gets or sets the port that the link is going to.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.IGoLink.FromPort"/>
            <seealso cref="P:Northwoods.GoWeb.IGoLink.ToNode"/>
        </member>
        <member name="P:Northwoods.GoWeb.IGoLink.FromNode">
            <summary>
            Gets the node that the link is coming from.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.IGoLink.FromPort"/>
            <seealso cref="P:Northwoods.GoWeb.IGoLink.ToNode"/>
        </member>
        <member name="P:Northwoods.GoWeb.IGoLink.ToNode">
            <summary>
            Gets the node that the link is going to.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.IGoLink.ToPort"/>
            <seealso cref="P:Northwoods.GoWeb.IGoLink.FromNode"/>
        </member>
        <member name="F:Northwoods.GoWeb.GoLabeledLink.ChangedLink">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoLabeledLink.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLabeledLink.ChangedFromLabel">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoLabeledLink.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLabeledLink.ChangedMidLabel">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoLabeledLink.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLabeledLink.ChangedToLabel">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoLabeledLink.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLabeledLink.ChangedFromLabelCentered">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoLabeledLink.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLabeledLink.ChangedMidLabelCentered">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoLabeledLink.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLabeledLink.ChangedToLabelCentered">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoLabeledLink.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoLabeledLink.#ctor">
            <summary>
            The constructor produces a link with no labels that is connected to no ports,
            and is not movable by the user.
            </summary>
            <remarks>
            This calls <see cref="M:Northwoods.GoWeb.GoLabeledLink.CreateRealLink"/>, makes sure the resulting link is not
            selectable, and assigns it to <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLabeledLink.CreateRealLink">
            <summary>
            Create a GoLink to act as the real link for this group that is a labeled link.
            </summary>
            <returns>
            By default this allocates a new <see cref="T:Northwoods.GoWeb.GoLink"/>.
            </returns>
            <remarks>
            You may wish to override this in order to customize the initial appearance
            of the link or to substitute a subclass of <see cref="T:Northwoods.GoWeb.GoLink"/> for
            different behavior.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLabeledLink.CopyChildren(Northwoods.GoWeb.GoGroup,Northwoods.GoWeb.GoCopyDictionary)">
            <summary>
            Copying a labeled link is just a matter of copying the real link
            and the three label objects.
            </summary>
            <param name="newgroup"></param>
            <param name="env"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoLabeledLink.Remove(Northwoods.GoWeb.GoObject)">
            <summary>
            Make sure we remove any references to child objects that are removed from this group.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoLabeledLink.MoveChildren(System.Drawing.RectangleF)">
            <summary>
            Avoid repositioning the labels when a labeled link is moved.
            </summary>
            <param name="old"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoLabeledLink.GetOtherPort(Northwoods.GoWeb.IGoPort)">
            <summary>
            Return the port at the other end of this link from the given port.
            </summary>
            <param name="p"></param>
            <returns>
            An <see cref="T:Northwoods.GoWeb.IGoPort"/>, that may be null if the other end of the link is
            not connected, or that may return the same <paramref name="p"/> if both
            ends of the link are connected to the same port.
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoLabeledLink.GetOtherNode(Northwoods.GoWeb.IGoNode)">
            <summary>
            Return the node at the other end of this link from the given node.
            </summary>
            <param name="n"></param>
            <returns>
            An <see cref="T:Northwoods.GoWeb.IGoNode"/>, that may be null if the other end of the
            link is not connected or whose port may not be part of a node,
            or that may return the same <paramref name="n"/> if both ends of
            the link are connected to the same node, even if at different ports.
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoLabeledLink.Unlink">
            <summary>
            Remove this link from its layer.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoLabeledLink.OnPortChanged(Northwoods.GoWeb.IGoPort,System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)">
            <summary>
            Let links get notifications of changes to either port so labels
            can be moved and the real link's stroke can be recalculated.
            </summary>
            <param name="port"></param>
            <param name="subhint"></param>
            <param name="oldI"></param>
            <param name="oldVal"></param>
            <param name="oldRect"></param>
            <param name="newI"></param>
            <param name="newVal"></param>
            <param name="newRect"></param>
            <remarks>
            Most of the parameters are the same as for <see cref="P:Northwoods.GoWeb.GoLabeledLink.GoObject"/>.<c>Changed</c>.
            This just calls <see cref="M:Northwoods.GoWeb.GoLink.OnPortChanged(Northwoods.GoWeb.IGoPort,System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> on the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>,
            and then calls <see cref="M:Northwoods.GoWeb.GoLabeledLink.LayoutChildren(Northwoods.GoWeb.GoObject)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLabeledLink.Pick(System.Drawing.PointF,System.Boolean)">
            <summary>
            Respect the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.GoWeb.GoStroke.PickMargin"/>.
            </summary>
            <param name="p"></param>
            <param name="selectableOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoLabeledLink.LayoutChildren(Northwoods.GoWeb.GoObject)">
            <summary>
            Position each of the labels.
            </summary>
            <param name="childchanged"></param>
            <remarks>
            This method calls <see cref="M:Northwoods.GoWeb.GoLabeledLink.PositionEndLabel(Northwoods.GoWeb.GoObject,System.Boolean,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)"/> for the
            <see cref="P:Northwoods.GoWeb.GoLabeledLink.FromLabel"/> and <see cref="P:Northwoods.GoWeb.GoLabeledLink.ToLabel"/>, and calls
            <see cref="M:Northwoods.GoWeb.GoLabeledLink.LayoutMidLabel(Northwoods.GoWeb.GoObject)"/> which similarly calls
            <see cref="M:Northwoods.GoWeb.GoLabeledLink.PositionMidLabel(Northwoods.GoWeb.GoObject,System.Drawing.PointF,System.Drawing.PointF)"/> for the <see cref="P:Northwoods.GoWeb.GoLabeledLink.MidLabel"/>.
            If there are less than two points in the stroke of the
            <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>, this method does nothing.
            When <c>Initializing</c> is true, this method does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLabeledLink.PositionEndLabel(Northwoods.GoWeb.GoObject,System.Boolean,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Move a <see cref="P:Northwoods.GoWeb.GoLabeledLink.FromLabel"/> or <see cref="P:Northwoods.GoWeb.GoLabeledLink.ToLabel"/> to be near the link's corresponding end point.
            </summary>
            <param name="lab">The label object.</param>
            <param name="atEnd">Whether the <paramref name="lab"/> is the <see cref="P:Northwoods.GoWeb.GoLabeledLink.ToLabel"/>.</param>
            <param name="a">The port link point.</param>
            <param name="b">The inner point of the end segment.</param>
            <param name="c">The inner end point of the second line segment.</param>
            <remarks>
            Note that if there is no end segment, <paramref name="a"/> and <paramref name="b"/> will be the same <c>PointF</c>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLabeledLink.LayoutMidLabel(Northwoods.GoWeb.GoObject)">
            <summary>
            Decide which segment should get the middle label,
            and call <see cref="M:Northwoods.GoWeb.GoLabeledLink.PositionMidLabel(Northwoods.GoWeb.GoObject,System.Drawing.PointF,System.Drawing.PointF)"/> to perform that positioning.
            </summary>
            <param name="childchanged">passed on from <see cref="M:Northwoods.GoWeb.GoLabeledLink.LayoutChildren(Northwoods.GoWeb.GoObject)"/></param>
            <remarks>
            If there are an odd number of segments in the link's stroke, this calls
            <see cref="M:Northwoods.GoWeb.GoLabeledLink.PositionMidLabel(Northwoods.GoWeb.GoObject,System.Drawing.PointF,System.Drawing.PointF)"/> with the endpoints of the middle segment.
            Otherwise with an even number of segments, it uses the longer of the
            two middle segments.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLabeledLink.PositionMidLabel(Northwoods.GoWeb.GoObject,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Move the MidLabel to an appropriate location near the middle of the link.
            </summary>
            <param name="lab">The label object.</param>
            <param name="a">The start point of the middle segment of the link.</param>
            <param name="b">The end point of the middle segment of the link.</param>
        </member>
        <member name="M:Northwoods.GoWeb.GoLabeledLink.FindName(Northwoods.GoWeb.GoObject)">
            <summary>
            The properties referring to parts of this node
            are also the names of those parts.
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoLabeledLink.FindChild(System.String)">
            <summary>
            The properties referring to parts of this node
            are also the names of those parts.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoLabeledLink.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Performs changes for undo and redo.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoLabeledLink.CalculateRoute">
            <summary>
            This just calls the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>'s <see cref="M:Northwoods.GoWeb.GoLink.CalculateRoute"/> method.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoLabeledLink.UpdateRoute">
            <summary>
            Request the recalculation of the stroke for the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>.
            </summary>
            <remarks>
            If this is part of a <see cref="T:Northwoods.GoWeb.GoDocument"/> whose <see cref="P:Northwoods.GoWeb.GoDocument.SuspendsRouting"/>
            property is true, this calls <see cref="T:Northwoods.GoWeb.GoDocument"/>.<see cref="M:Northwoods.GoWeb.GoDocument.UpdateRoute(Northwoods.GoWeb.IGoRoutable)"/> in order to delay
            the call to <see cref="M:Northwoods.GoWeb.GoLabeledLink.CalculateRoute"/>.
            If there is no <see cref="T:Northwoods.GoWeb.GoDocument"/>, this just calls <see cref="M:Northwoods.GoWeb.GoLabeledLink.CalculateRoute"/> immediately.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLabeledLink.CalculateStroke">
            <summary>
            This just calls the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>'s <see cref="M:Northwoods.GoWeb.GoLink.CalculateStroke"/> method.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoLabeledLink.GetToolTip(Northwoods.GoWeb.GoView)">
            <summary>
            Return a string to be displayed in a tooltip, or null for none.
            </summary>
            <param name="view"></param>
            <returns>
            By default this returns the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.GoWeb.GoLabeledLink.ToolTipText"/>.
            Override this method if you want dynamically computed tooltips.
            </returns>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.GoObject">
            <summary>
            Returns itself as a <see cref="P:Northwoods.GoWeb.GoLabeledLink.GoObject"/>.
            </summary>
            <remarks>
            This property cannot be set.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.IGoGraphPart.GoObject"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.UserFlags">
            <summary>
            Gets or sets an integer value associated with this port.
            </summary>
            <value>
            The initial value is zero.
            </value>
            <seealso cref="P:Northwoods.GoWeb.IGoGraphPart.UserFlags"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.UserObject">
            <summary>
            Gets or sets an object associated with this port.
            </summary>
            <value>
            The initial value is null.
            </value>
            <seealso cref="P:Northwoods.GoWeb.IGoGraphPart.UserObject"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.FromPort">
            <summary>
            Gets or sets the port that the link is coming from.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.IGoLink.FromPort"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.ToPort">
            <summary>
            Gets or sets the port that the link is going to.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.IGoLink.ToPort"/>
            <seealso cref="P:Northwoods.GoWeb.GoLabeledLink.FromPort"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.FromNode">
            <summary>
            Gets the node that the link is coming from.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.IGoLink.FromNode"/>
            <seealso cref="P:Northwoods.GoWeb.GoLabeledLink.ToNode"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.ToNode">
            <summary>
            Gets the node that the link is going to.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.IGoLink.ToNode"/>
            <seealso cref="P:Northwoods.GoWeb.GoLabeledLink.FromNode"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.SelectionObject">
            <summary>
            Let the user see and manipulate the real link as if it were the selected object.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.Shadowed">
            <summary>
            Giving this node a shadow really means giving the icon a shadow.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.RealLink">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoWeb.GoLink"/> object in this group.
            </summary>
            <remarks>
            <c>GoLabeledLink</c> delegates more of the <see cref="T:Northwoods.GoWeb.IGoLink"/> interface
            to the value of this property.
            The real link also gets the selection handles when this labeled link is selected.
            Setting this property removes any previous <c>RealLink</c> value, and then adds the
            new value to this group.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoLink.AbstractLink"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.FromLabel">
            <summary>
            Gets or sets the label object associated with the source end of the link.
            </summary>
            <remarks>
            Setting this property removes any previous FromLabel value, and then adds the
            new value to this group.
            The label is positioned by <see cref="M:Northwoods.GoWeb.GoLabeledLink.LayoutChildren(Northwoods.GoWeb.GoObject)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.FromLabelCentered">
            <summary>
            Gets or sets whether the label at the start of the link is positioned on the stroke
            rather than to the side of the stroke.
            </summary>
            <value>
            By default this value is false;
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.MidLabel">
            <summary>
            Gets or sets the label object associated with the middle of the link.
            </summary>
            <remarks>
            Setting this property removes any previous MidLabel value, and then adds the
            new value to this group.
            The label is positioned by <see cref="M:Northwoods.GoWeb.GoLabeledLink.LayoutChildren(Northwoods.GoWeb.GoObject)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.MidLabelCentered">
            <summary>
            Gets or sets whether the label at the middle of the link is positioned on the stroke
            rather than to the side of the stroke.
            </summary>
            <value>
            By default this value is false;
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.ToLabel">
            <summary>
            Gets or sets the label object associated with the destination end of the link.
            </summary>
            <remarks>
            Setting this property removes any previous ToLabel value, and then adds the
            new value to this group.
            The label is positioned by <see cref="M:Northwoods.GoWeb.GoLabeledLink.LayoutChildren(Northwoods.GoWeb.GoObject)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.ToLabelCentered">
            <summary>
            Gets or sets whether the label at the end of the link is positioned on the stroke
            rather than to the side of the stroke.
            </summary>
            <value>
            By default this value is false;
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.ToolTipText">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.GoWeb.GoLink.ToolTipText"/> property.
            </summary>
            <remarks>
            If you want to generate the tooltip text string dynamically,
            override <see cref="M:Northwoods.GoWeb.GoLabeledLink.GetToolTip(Northwoods.GoWeb.GoView)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.Pen">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.GoWeb.GoShape.Pen"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.PenColor">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.GoWeb.GoShape.PenColor"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.PenWidth">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.GoWeb.GoShape.PenWidth"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.HighlightPenColor">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.GoWeb.GoStroke.HighlightPenColor"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.HighlightPenWidth">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.GoWeb.GoStroke.HighlightPenWidth"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.Brush">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.BrushColor">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.GoWeb.GoShape.Brush"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.AvoidsNodes">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.GoWeb.GoLink.AvoidsNodes"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.Orthogonal">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.GoWeb.GoLink.Orthogonal"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.Relinkable">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.GoWeb.GoLink.Relinkable"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.Resizable">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>'s <c>Resizable</c> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.Reshapable">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>'s <c>Reshapable</c> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.Style">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.GoWeb.GoStroke.Style"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.ToArrow">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.GoWeb.GoStroke.ToArrow"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.ToArrowStyle">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.GoWeb.GoStroke.ToArrowStyle"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.ToArrowLength">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.GoWeb.GoStroke.ToArrowLength"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.ToArrowShaftLength">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.GoWeb.GoStroke.ToArrowShaftLength"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.ToArrowWidth">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.GoWeb.GoStroke.ToArrowWidth"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.ToArrowFilled">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.GoWeb.GoStroke.ToArrowFilled"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.FromArrow">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.GoWeb.GoStroke.FromArrow"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.FromArrowStyle">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.GoWeb.GoStroke.FromArrowStyle"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.FromArrowLength">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.GoWeb.GoStroke.FromArrowLength"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.FromArrowShaftLength">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.GoWeb.GoStroke.FromArrowShaftLength"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.FromArrowWidth">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.GoWeb.GoStroke.FromArrowWidth"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.FromArrowFilled">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.GoWeb.GoStroke.FromArrowFilled"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.Curviness">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.GoWeb.GoStroke.Curviness"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.Highlight">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.GoWeb.GoStroke.Highlight"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.HighlightPen">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.GoWeb.GoStroke.HighlightPen"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.HighlightWhenSelected">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.GoWeb.GoStroke.HighlightWhenSelected"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.AdjustingStyle">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.GoWeb.GoLink.AdjustingStyle"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLabeledLink.PartID">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.GoWeb.GoLink.PartID"/> property.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoLinkAdjustingStyle">
            <summary>
            Specifies how <see cref="T:Northwoods.GoWeb.GoLink"/>.<see cref="M:Northwoods.GoWeb.GoLink.CalculateStroke"/> should determine the
            points of the link's stroke.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLinkAdjustingStyle.Calculate">
            <summary>
            Clear all of the existing points and add points for the standard kinds of strokes.
            </summary>
            <remarks>
            <see cref="T:Northwoods.GoWeb.GoLink"/> has a number of standard appearances:
            <list type="bullet">
            <item>
            When both ports have link spots that are <c>GoObject.NoSpot</c>,
            draw a straight line if the <see cref="P:Northwoods.GoWeb.GoStroke.Style"/> is <see cref="F:Northwoods.GoWeb.GoStrokeStyle.Line"/>
            or draw a Bezier curve if the stroke style is <see cref="F:Northwoods.GoWeb.GoStrokeStyle.Bezier"/>.
            </item>
            <item>
            When only one port has a link spot, draw a two segment straight line.
            </item>
            <item>
            When both ports have link spots, draw either a three-segment line
            or a Bezier curve, depending on the value of <see cref="P:Northwoods.GoWeb.GoStroke.Style"/>.
            </item>
            <item>
            If <see cref="P:Northwoods.GoWeb.GoLink.Orthogonal"/> is true, draw a five-segment line (either
            straight segments or with rounded corners) or a Bezier curve.
            </item>
            <item>
            If <see cref="P:Northwoods.GoWeb.GoLink.IsSelfLoop"/> is true, draw either a Bezier curve or
            a five-segment line if <see cref="P:Northwoods.GoWeb.GoLink.Orthogonal"/> is true.
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoLinkAdjustingStyle.Scale">
            <summary>
            When there are more than the standard number of points in the stroke,
            scale and rotate the intermediate points so that the link's shape stays
            approximately the same.
            </summary>
            <remarks>
            This style, implemented by <see cref="M:Northwoods.GoWeb.GoLink.RescalePoints(System.Int32,System.Drawing.PointF,System.Int32,System.Drawing.PointF)"/>, does not
            maintain the horizontal and vertical line segments of an orthogonal link.
            Orthogonal links with this adjusting style will instead recalculate
            the standard stroke path, as if the adjusting style were <see cref="F:Northwoods.GoWeb.GoLinkAdjustingStyle.Calculate"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoLinkAdjustingStyle.Stretch">
            <summary>
            When there are more than the standard number of points in the stroke,
            linearly interpolate the intermediate points along the X and Y dimensions
            between the ports.
            </summary>
            <remarks>
            This style, implemented by <see cref="M:Northwoods.GoWeb.GoLink.StretchPoints(System.Int32,System.Drawing.PointF,System.Int32,System.Drawing.PointF)"/>, does not
            maintain the horizontal and vertical line segments of an orthogonal link.
            Orthogonal links with this adjusting style will instead only modify the
            end points of the existing path, as if the adjusting style were <see cref="F:Northwoods.GoWeb.GoLinkAdjustingStyle.End"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoLinkAdjustingStyle.End">
            <summary>
            When there are more than the standard number of points in the stroke,
            or if the stroke is orthogonal, just modify the end points,
            while leaving the intermediate points unchanged.
            </summary>
            <remarks>
            This style maintains orthogonality for orthogonal links.
            </remarks>
        </member>
        <member name="T:Northwoods.GoWeb.GoLink">
            <summary>
            This class provides a standard implementation of <see cref="T:Northwoods.GoWeb.IGoLink"/>
            as a <see cref="P:Northwoods.GoWeb.GoLink.GoObject"/>.
            </summary>
            <remarks>
            A GoLink is a <see cref="T:Northwoods.GoWeb.GoStroke"/> that connects two <see cref="T:Northwoods.GoWeb.GoPort"/>s.
            Make a link by constructing a link, setting both the <see ref="FromPort"/>
            and the <see cref="P:Northwoods.GoWeb.GoLink.ToPort"/>, setting any other properties you want on the link,
            and adding the link to your <see cref="T:Northwoods.GoWeb.GoDocument"/>.
            Setting the two port properties will automatically add the link to each port's
            collection of links.
            Remove a link by calling <see cref="M:Northwoods.GoWeb.GoLink.Unlink"/>.
            That will automatically disconnect the link from both of its ports.
            <para>
            A link does not own either port to which it is connected  -- ports are
            normally owned by nodes.
            Ports hold references to the links that are connected to them -- they do
            not own the links.
            </para>
            <para>
            The appearance of a link is determined by the stroke <see cref="P:Northwoods.GoWeb.GoStroke.Style"/>,
            by the <see cref="P:Northwoods.GoWeb.GoShape.Pen"/>, as well as by various link properties.
            Any filled arrowheads are painted by the <see cref="P:Northwoods.GoWeb.GoShape.Brush"/>.
            Many examples are presented in the User Guide.
            </para>
            <para>
            The path of a link is determined by the points in its stroke, as plotted by
            <see cref="M:Northwoods.GoWeb.GoLink.CalculateStroke"/>.  For links of <see cref="P:Northwoods.GoWeb.GoStroke.Style"/>
            <see cref="F:Northwoods.GoWeb.GoStrokeStyle.Bezier"/>, it takes the <see cref="P:Northwoods.GoWeb.GoStroke.Curviness"/> into
            account to automatically give the link a curve.
            </para>
            <para>
            When the link is <see cref="P:Northwoods.GoWeb.GoLink.Orthogonal"/>, it is common to set the style to
            <see cref="F:Northwoods.GoWeb.GoStrokeStyle.RoundedLine"/>.  Then the <see cref="P:Northwoods.GoWeb.GoStroke.Curviness"/>
            property controls the size of the corners in the link.
            </para>
            <para>
            Whenever either port is moved (normally because the port's parent node moved),
            <see cref="M:Northwoods.GoWeb.GoLink.CalculateStroke"/> is called again.  By default this will calculate
            all of the stroke points again.  However, if you set the <see cref="P:Northwoods.GoWeb.GoLink.AdjustingStyle"/>
            property, <see cref="M:Northwoods.GoWeb.GoLink.CalculateStroke"/> will take the old path into account
            in calculating the new path.
            </para>
            </remarks>
            <example>
            Typical programmatic usage might be something like:
            <code>
            GoBasicNode node1 = new GoBasicNode();
            node1.LabelSpot = GoObject.Middle;
            node1.Text = "basic node 1";
            node1.Shape.BrushColor = Color.LightGreen;
            node1.Location = new PointF(75, 50);
            goView1.Document.Add(node1);
            
            GoBasicNode node2 = new GoBasicNode();
            node2.LabelSpot = GoObject.Middle;
            node2.Text = "basic node 2";
            node2.Shape.BrushColor = Color.LightYellow;
            node2.Location = new PointF(200, 50);
            goView1.Document.Add(node2);
            
            GoLink link = new GoLink();
            link.ToArrow = true;
            link.FromPort = node1.Port;
            link.ToPort = node2.Port;
            goView1.Document.Add(link);
            </code>
            </example>
        </member>
        <member name="F:Northwoods.GoWeb.GoLink.RelinkableFromHandle">
            <summary>
            This is a special handle ID.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLink.RelinkableToHandle">
            <summary>
            This is a special handle ID.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLink.ChangedLinkUserFlags">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoLink.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLink.ChangedLinkUserObject">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoLink.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLink.ChangedFromPort">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoLink.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLink.ChangedToPort">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoLink.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLink.ChangedOrthogonal">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoLink.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLink.ChangedRelinkable">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoLink.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLink.ChangedAbstractLink">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoLink.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLink.ChangedAvoidsNodes">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoLink.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLink.ChangedPartID">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoLink.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLink.ChangedAdjustingStyle">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoLink.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLink.ChangedToolTipText">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoLink.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLink.ChangedDraggableOrthogonalSegments">
            <summary>
            This is a <see cref="P:Northwoods.GoWeb.GoLink.GoObject"/>.<c>Changed</c> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoLink.#ctor">
            <summary>
            The constructor produces a link connected to no ports, and that is
            not movable by the user, but is relinkable.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoLink.CopyObject(Northwoods.GoWeb.GoCopyDictionary)">
            <summary>
            Copying a link does not immediately set the <see cref="P:Northwoods.GoWeb.IGoLink.FromPort"/>
            and <see cref="P:Northwoods.GoWeb.IGoLink.ToPort"/> of the copied link,
            but does add the link to the copy dictionary's
            <see cref="P:Northwoods.GoWeb.GoCopyDictionary.Delayeds"/> collection so that later
            processing can set those properties.
            </summary>
            <param name="env"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoLink.CopyObjectDelayed(Northwoods.GoWeb.GoCopyDictionary,Northwoods.GoWeb.GoObject)">
            <summary>
            Make sure both ports are newly copied ports, or else remove this link
            from the destination layer.
            </summary>
            <param name="env"></param>
            <param name="newobj"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoLink.GetOtherPort(Northwoods.GoWeb.IGoPort)">
            <summary>
            Return the port at the other end of this link from the given port.
            </summary>
            <param name="p"></param>
            <returns>
            <c>GoLink.GetOtherPort(this, p)</c>, an <see cref="T:Northwoods.GoWeb.IGoPort"/>.
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoLink.GetOtherNode(Northwoods.GoWeb.IGoNode)">
            <summary>
            Return the node at the other end of this link from the given node.
            </summary>
            <param name="n"></param>
            <returns>
            <c>GoLink.GetOtherNode(this, n)</c>, an <see cref="T:Northwoods.GoWeb.IGoNode"/>.
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoLink.Unlink">
            <summary>
            Remove this link from its layer.
            </summary>
            <remarks>
            This method also removes this link from both ports' collections of
            connected links, by the implementation of <see cref="M:Northwoods.GoWeb.GoLink.OnLayerChanged(Northwoods.GoWeb.GoLayer,Northwoods.GoWeb.GoLayer,Northwoods.GoWeb.GoObject)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLink.OnPortChanged(Northwoods.GoWeb.IGoPort,System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)">
            <summary>
            Let links get notifications of changes to either port or to the link itself.
            </summary>
            <param name="port">This <see cref="T:Northwoods.GoWeb.IGoPort"/> may be null for some events on the link.</param>
            <param name="subhint">
            This integer may include <see cref="F:Northwoods.GoWeb.GoLink.ChangedFromPort"/> and <see cref="F:Northwoods.GoWeb.GoLink.ChangedToPort"/>,
            stroke changes such as <see cref="F:Northwoods.GoWeb.GoStroke.ChangedAllPoints"/> and <see cref="F:Northwoods.GoWeb.GoStroke.ChangedStyle"/>,
            as well as some selected <c>GoPort.Changed...</c> subhints.
            </param>
            <param name="oldI"></param>
            <param name="oldVal"></param>
            <param name="oldRect"></param>
            <param name="newI"></param>
            <param name="newVal"></param>
            <param name="newRect"></param>
            <remarks>
            In general when this method is called, we call <see cref="M:Northwoods.GoWeb.GoLink.UpdateRoute"/>.
            Most of the parameters are the same as for <see cref="P:Northwoods.GoWeb.GoLink.GoObject"/>.<c>Changed</c>.
            This method does nothing when <paramref name="port"/> is null.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLink.PortsOnLinkChanged(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)">
            <summary>
            Notify both ports that there was a change to this link.
            </summary>
            <param name="subhint"></param>
            <param name="oldI"></param>
            <param name="oldVal"></param>
            <param name="oldRect"></param>
            <param name="newI"></param>
            <param name="newVal"></param>
            <param name="newRect"></param>
            <remarks>
            This calls <see cref="M:Northwoods.GoWeb.IGoPort.OnLinkChanged(Northwoods.GoWeb.IGoLink,System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> on both ports.
            Most of the parameters are the same as for <see cref="P:Northwoods.GoWeb.GoLink.GoObject"/>.<c>Changed</c>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLink.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)">
            <summary>
            If one of the stroke's points has changed, we notify this link's AbstractLink
            about the change, so that it has a chance to recalculate its stroke.
            </summary>
            <param name="subhint"></param>
            <param name="oldI"></param>
            <param name="oldVal"></param>
            <param name="oldRect"></param>
            <param name="newI"></param>
            <param name="newVal"></param>
            <param name="newRect"></param>
            <remarks>
            This notification is useful for <see cref="T:Northwoods.GoWeb.GoLabeledLink"/> to be notified about
            changes in the stroke so that its labels can be repositioned.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLink.GetToolTip(Northwoods.GoWeb.GoView)">
            <summary>
            Return a string to be displayed in a tooltip, or null for none.
            </summary>
            <param name="view"></param>
            <returns>
            By default this returns this link's <see cref="P:Northwoods.GoWeb.GoLink.ToolTipText"/>.
            Override this method if you want dynamically computed tooltips.
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoLink.GetOtherPort(Northwoods.GoWeb.IGoLink,Northwoods.GoWeb.IGoPort)">
            <summary>
            Return the IGoPort of an IGoLink other than the given one.
            </summary>
            <param name="l">an <see cref="T:Northwoods.GoWeb.IGoLink"/></param>
            <param name="p">an <see cref="T:Northwoods.GoWeb.IGoPort"/> that the link <paramref name="l"/> is connected to</param>
            <returns>
            An <see cref="T:Northwoods.GoWeb.IGoPort"/>, that may be null if the other end of the link is
            not connected, or that may return the same <paramref name="p"/> if both
            ends of the link are connected to the same port.
            </returns>
            <remarks>
            If neither this link's <see cref="P:Northwoods.GoWeb.GoLink.FromPort"/> nor its <see cref="P:Northwoods.GoWeb.GoLink.ToPort"/>
            is the given port <paramref name="p"/>, this will return either the
            <see cref="P:Northwoods.GoWeb.GoLink.FromPort"/> or the <see cref="P:Northwoods.GoWeb.GoLink.ToPort"/>, whichever is farther away.
            Otherwise this will return null.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLink.GetOtherNode(Northwoods.GoWeb.IGoLink,Northwoods.GoWeb.IGoNode)">
            <summary>
            Return the IGoNode connected to the other end of an IGoLink.
            </summary>
            <param name="l">an <see cref="T:Northwoods.GoWeb.IGoLink"/></param>
            <param name="n">an <see cref="T:Northwoods.GoWeb.IGoNode"/> that the link <paramref name="l"/> is connected to</param>
            <returns>
            An <see cref="T:Northwoods.GoWeb.IGoNode"/>, that may be null if the other end of the
            link is not connected or whose port may not be part of a node,
            or that may return the same <paramref name="n"/> if both ends of
            the link are connected to the same node, even if at different ports.
            </returns>
            <remarks>
            If neither this link's <see cref="P:Northwoods.GoWeb.GoLink.FromPort"/> nor its <see cref="P:Northwoods.GoWeb.GoLink.ToPort"/>
            is part of the given node <paramref name="n"/>, this will return null.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLink.DoResize(Northwoods.GoWeb.GoView,System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,Northwoods.GoWeb.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Handle resizing in the same manner as <see cref="T:Northwoods.GoWeb.GoStroke"/>,
            but when <see cref="P:Northwoods.GoWeb.GoLink.Orthogonal"/> is true, we move both points
            of the middle segment in order to maintain orthogonality.
            </summary>
            <param name="view">
            the <see cref="T:Northwoods.GoWeb.GoView"/> whose <see cref="T:Northwoods.GoWeb.GoToolResizing"/> is calling this method
            </param>
            <param name="origRect">
            the original Bounds of the object, but probably not useful for links
            </param>
            <param name="newPoint">
            the PointF, in document coordinates, to which the resize handle is being dragged
            </param>
            <param name="whichHandle">
            The <see cref="T:Northwoods.GoWeb.IGoHandle"/>.<see cref="P:Northwoods.GoWeb.IGoHandle.HandleID"/> of the handle being dragged.
            Possible values include:
            <list type="bullet">
            <item><term><c>GoObject.MiddleTop</c></term><description>
            movement of this handle near the FromPort is constrained to be in the vertical direction
            because this link is <see cref="P:Northwoods.GoWeb.GoLink.Orthogonal"/>
            </description></item>
            <item><term><c>GoObject.MiddleLeft</c></term><description>
            movement of this handle near the FromPort is constrained to be in the horizontal direction
            because this link is <see cref="P:Northwoods.GoWeb.GoLink.Orthogonal"/>
            </description></item>
            <item><term><c>GoObject.MiddleBottom</c></term><description>
            movement of this handle near the ToPort is constrained to be in the vertical direction
            because this link is <see cref="P:Northwoods.GoWeb.GoLink.Orthogonal"/>
            </description></item>
            <item><term><c>GoObject.MiddleRight</c></term><description>
            movement of this handle near the ToPort is constrained to be in the horizontal direction
            because this link is <see cref="P:Northwoods.GoWeb.GoLink.Orthogonal"/>
            </description></item>
            <item><term><c>GoObject.LastHandle + 1000000</c>, or more</term><description>
            move both ends of the segment starting with the point whose index is the value
            minus <c>GoObject.LastHandle</c> minus 1000000,
            because <see cref="P:Northwoods.GoWeb.GoLink.Orthogonal"/> and <see cref="P:Northwoods.GoWeb.GoLink.DraggableOrthogonalSegments"/> are both true
            </description></item>
            <item><term><c>GoObject.LastHandle</c> or more</term><description>
            set the point whose index is the value minus <c>GoObject.LastHandle</c>
            </description></item>
            <item><term><c>GoLink.RelinkableFromHandle</c></term><description>
            this case is normally handled by <see cref="T:Northwoods.GoWeb.GoToolRelinking"/> rather than by this method
            </description></item>
            <item><term><c>GoLink.RelinkableToHandle</c></term><description>
            this case is normally handled by <see cref="T:Northwoods.GoWeb.GoToolRelinking"/> rather than by this method
            </description></item>
            <item><term><c>GoObject.NoHandle</c></term><description>
            this case usually means that the <see cref="T:Northwoods.GoWeb.GoHandle"/> should not be dragged
            </description></item>
            </list>
            </param>
            <param name="evttype">
            <list type="bullet">
            <item><term><c>GoInputState.Start</c></term><description>when called from <see cref="M:Northwoods.GoWeb.GoToolResizing.Start"/></description></item>
            <item><term><c>GoInputState.Continue</c></term><description>when called from <see cref="M:Northwoods.GoWeb.GoToolResizing.DoMouseMove"/></description></item>
            <item><term><c>GoInputState.Finish</c></term><description>when called from <see cref="M:Northwoods.GoWeb.GoToolResizing.DoMouseUp"/></description></item>
            <item><term><c>GoInputState.Cancel</c></term><description>when the <see cref="M:Northwoods.GoWeb.GoToolResizing.DoCancelMouse"/></description></item>
            </list>
            </param>
            <param name="min">
            the value of <see cref="T:Northwoods.GoWeb.GoToolResizing"/>.<see cref="P:Northwoods.GoWeb.GoToolResizing.MinimumSize"/>,
            but probably not useful for links
            </param>
            <param name="max">
            the value of <see cref="T:Northwoods.GoWeb.GoToolResizing"/>.<see cref="P:Northwoods.GoWeb.GoToolResizing.MaximumSize"/>,
            but probably not useful for links
            </param>
        </member>
        <member name="M:Northwoods.GoWeb.GoLink.AddSelectionHandles(Northwoods.GoWeb.GoSelection,Northwoods.GoWeb.GoObject)">
            <summary>
            Unlike a normal <see cref="T:Northwoods.GoWeb.GoStroke"/> the end handles are in the
            shape of diamonds if <see cref="P:Northwoods.GoWeb.GoLink.Relinkable"/> is true.
            </summary>
            <param name="sel"></param>
            <param name="selectedObj"></param>
            <remarks>
            <para>
            The first and last resize handles depend on whether this link is <see cref="P:Northwoods.GoWeb.GoLink.Relinkable"/>.
            If it is, the handles have a <see cref="F:Northwoods.GoWeb.GoHandleStyle.Diamond"/> style with a <see cref="P:Northwoods.GoWeb.GoHandle.HandleID"/>
            that is either <see cref="F:Northwoods.GoWeb.GoLink.RelinkableFromHandle"/> or <see cref="F:Northwoods.GoWeb.GoLink.RelinkableToHandle"/>.
            If it is not, the handles are hollow and have a handle ID of <c>GoObject.NoHandle</c>,
            and the user cannot drag them. 
            </para>
            <para>
            The second and next-to-last resize handles,
            if they exist apart from first and last resize handles and if this link is <see cref="P:Northwoods.GoWeb.GoLink.Orthogonal"/>,
            will have special <see cref="P:Northwoods.GoWeb.GoHandle.HandleID"/>s to constrain the movement of those handles in
            order to maintain orthogonality.  These special handles are <c>GoObject.MiddleTop</c>,
            <c>GoObject.MiddleRight</c>, <c>GoObject.MiddleBottom</c>, and <c>GoObject.MiddleLeft</c>.
            </para>
            <para>
            The <see cref="P:Northwoods.GoWeb.GoHandle.HandleID"/> for the rest of the resize handles,
            if they exist in the middle parts of the link,
            is just the corresponding point index plus <c>GoObject.LastHandle</c>.
            These allow for unconstrained movement while resizing, even if the link is <see cref="P:Northwoods.GoWeb.GoLink.Orthogonal"/>.
            </para>
            <para>
            Furthermore, if <see cref="P:Northwoods.GoWeb.GoLink.Orthogonal"/> and <see cref="P:Northwoods.GoWeb.GoLink.DraggableOrthogonalSegments"/>
            are both true, this adds additional hidden handles (<see cref="P:Northwoods.GoWeb.GoHandle.Style"/> is
            <see cref="F:Northwoods.GoWeb.GoHandleStyle.None"/>) along the middle segments to allow those segments
            to be dragged in a direction perpendicular to the segment.
            These handles have a <see cref="P:Northwoods.GoWeb.GoHandle.HandleID"/> equal to the index of the
            point beginning the segment plus <c>GoObject.LastHandle</c> plus 1000000.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLink.OnLayerChanged(Northwoods.GoWeb.GoLayer,Northwoods.GoWeb.GoLayer,Northwoods.GoWeb.GoObject)">
            <summary>
            When a link is removed from a layer, also remove it from the
            collections of connected links of both ports.
            </summary>
            <param name="oldlayer"></param>
            <param name="newlayer"></param>
            <param name="mainObj"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoLink.CalculateRoute">
            <summary>
            This implementation of <see cref="T:Northwoods.GoWeb.IGoRoutable"/> just calls <see cref="M:Northwoods.GoWeb.GoLink.CalculateStroke"/> to determine
            a new path (i.e. a new set of points) for this link.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoLink.UpdateRoute">
            <summary>
            Request the recalculation of the stroke for this link.
            </summary>
            <remarks>
            If this is part of a <see cref="T:Northwoods.GoWeb.GoDocument"/>,
            this calls <see cref="T:Northwoods.GoWeb.GoDocument"/>.<see cref="M:Northwoods.GoWeb.GoDocument.UpdateRoute(Northwoods.GoWeb.IGoRoutable)"/> in order to maybe delay
            the call to <see cref="M:Northwoods.GoWeb.GoLink.CalculateRoute"/>.
            If there is no <see cref="T:Northwoods.GoWeb.GoDocument"/>, this just calls <see cref="M:Northwoods.GoWeb.GoLink.CalculateRoute"/> immediately.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLink.CalculateStroke">
            <summary>
            This method is responsible for determining the points in the stroke,
            given the positions of the ports.
            </summary>
            <remarks>
            <para>
            The standard stroke path is determined by properties of this link
            and of the two ports it is connected to.
            If both ports are <see cref="T:Northwoods.GoWeb.GoPort"/>s, by default this method
            considers the <see cref="P:Northwoods.GoWeb.GoLink.FromPort"/>'s <see cref="P:Northwoods.GoWeb.GoPort.FromSpot"/>
            and the <see cref="P:Northwoods.GoWeb.GoLink.ToPort"/>'s <see cref="P:Northwoods.GoWeb.GoPort.ToSpot"/>.
            If both spots are <c>GoObject.NoSpot</c>, this link's stroke
            will consist of two points determined by calling
            <see cref="M:Northwoods.GoWeb.GoPort.GetFromLinkPoint(Northwoods.GoWeb.IGoLink)"/> and <see cref="M:Northwoods.GoWeb.GoPort.GetToLinkPoint(Northwoods.GoWeb.IGoLink)"/>.
            (There are four points if the <see cref="P:Northwoods.GoWeb.GoStroke.Style"/> is
            <see cref="F:Northwoods.GoWeb.GoStrokeStyle.Bezier"/>--the points are plotted according
            to the value of <see cref="P:Northwoods.GoWeb.GoStroke.Curviness"/>.)
            If both spots have "spots" (i.e. not <c>GoObject.NoSpot</c>), 
            there will be four points in the stroke, resulting in
            three straight line segments, unless <see cref="P:Northwoods.GoWeb.GoLink.Orthogonal"/> is
            true, in which case there are six points (five horizontal or vertical
            line segments).
            </para>
            <para>
            However, if there are already more than the standard number of
            points in this link, the <see cref="M:Northwoods.GoWeb.GoLink.AdjustPoints(System.Int32,System.Drawing.PointF,System.Int32,System.Drawing.PointF)"/> method is called
            to give the link a chance to decide how it wants to modify its path.
            The behavior of <see cref="M:Northwoods.GoWeb.GoLink.AdjustPoints(System.Int32,System.Drawing.PointF,System.Int32,System.Drawing.PointF)"/> depends on the value of
            <see cref="P:Northwoods.GoWeb.GoLink.AdjustingStyle"/>.
            If <see cref="M:Northwoods.GoWeb.GoLink.AdjustPoints(System.Int32,System.Drawing.PointF,System.Int32,System.Drawing.PointF)"/> returns false, this method plots the
            standard stroke as described above.
            </para>
            <para>
            If either port is not a <see cref="T:Northwoods.GoWeb.GoPort"/>, this stroke is just
            a single straight line segment between the centers of the objects.
            If either port is not a <see cref="P:Northwoods.GoWeb.GoLink.GoObject"/>, this method does nothing.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLink.AdjustPoints(System.Int32,System.Drawing.PointF,System.Int32,System.Drawing.PointF)">
            <summary>
            Adjust all of the existing points in this link's stroke in an inclusive range
            according to new first and last stroke points.
            </summary>
            <param name="startIndex">the zero-based index of the first point to be changed, to be
            the value of <paramref name="newFromPoint"/></param>
            <param name="newFromPoint"></param>
            <param name="endIndex">the zero-based index of the last point to be changed, to be
            the value of <paramref name="newToPoint"/></param>
            <param name="newToPoint"></param>
            <value>
            This method should return true if the stroke points were adjusted.  Return false
            to tell <see cref="M:Northwoods.GoWeb.GoLink.CalculateStroke"/> to plot the standard path.
            </value>
            <remarks>
            <para>
            This is primarily useful to help maintain intermediate inflection points
            in a link when one or both ports moves.
            By default this just calls <see cref="M:Northwoods.GoWeb.GoLink.RescalePoints(System.Int32,System.Drawing.PointF,System.Int32,System.Drawing.PointF)"/>, <see cref="M:Northwoods.GoWeb.GoLink.StretchPoints(System.Int32,System.Drawing.PointF,System.Int32,System.Drawing.PointF)"/>,
            or <see cref="M:Northwoods.GoWeb.GoLink.ModifyEndPoints(System.Int32,System.Drawing.PointF,System.Int32,System.Drawing.PointF)"/>.
            This method is not called when there are no existing points to be adjusted
            or when <see cref="P:Northwoods.GoWeb.GoLink.AdjustingStyle"/> is <see cref="F:Northwoods.GoWeb.GoLinkAdjustingStyle.Calculate"/>.
            </para>
            <para>
            When this link is <see cref="P:Northwoods.GoWeb.GoLink.Orthogonal"/>, an <see cref="P:Northwoods.GoWeb.GoLink.AdjustingStyle"/> of
            <see cref="F:Northwoods.GoWeb.GoLinkAdjustingStyle.Scale"/> will just return false to result in
            the standard orthogonal path.
            An <see cref="P:Northwoods.GoWeb.GoLink.AdjustingStyle"/> of <see cref="F:Northwoods.GoWeb.GoLinkAdjustingStyle.Stretch"/>
            for an orthogonal link is treated as if it were <see cref="F:Northwoods.GoWeb.GoLinkAdjustingStyle.End"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLink.RescalePoints(System.Int32,System.Drawing.PointF,System.Int32,System.Drawing.PointF)">
            <summary>
            Maintain the same shape for the stroke, but scale and rotate according to
            new points <paramref name="newFromPoint"/> and <paramref name="newToPoint"/>.
            </summary>
            <param name="startIndex"></param>
            <param name="newFromPoint"></param>
            <param name="endIndex"></param>
            <param name="newToPoint"></param>
            <value>
            This method should return true if the stroke points were adjusted.  Return false
            to tell <see cref="M:Northwoods.GoWeb.GoLink.AdjustPoints(System.Int32,System.Drawing.PointF,System.Int32,System.Drawing.PointF)"/> and <see cref="M:Northwoods.GoWeb.GoLink.CalculateStroke"/> to plot
            the standard stroke path.
            </value>
            <remarks>
            The <paramref name="startIndex"/> point should be set to <paramref name="newFromPoint"/>,
            and the <paramref name="endIndex"/> point should be set to <paramref name="newToPoint"/>,
            and all the intermediate points should be scaled and rotated accordingly to
            maintain the same shape as the original set of points from <paramref name="startIndex"/>
            to <paramref name="endIndex"/>, inclusive.
            <see cref="M:Northwoods.GoWeb.GoLink.AdjustPoints(System.Int32,System.Drawing.PointF,System.Int32,System.Drawing.PointF)"/> calls this method when <see cref="P:Northwoods.GoWeb.GoLink.AdjustingStyle"/>
            is <see cref="F:Northwoods.GoWeb.GoLinkAdjustingStyle.Scale"/>.
            This method should not be used when <see cref="P:Northwoods.GoWeb.GoLink.Orthogonal"/> is true.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLink.StretchPoints(System.Int32,System.Drawing.PointF,System.Int32,System.Drawing.PointF)">
            <summary>
            Stretch the points of this stroke by interpolating the points
            from <paramref name="startIndex"/> to <paramref name="endIndex"/> between the
            new points <paramref name="newFromPoint"/> and <paramref name="newToPoint"/>.
            </summary>
            <param name="startIndex"></param>
            <param name="newFromPoint"></param>
            <param name="endIndex"></param>
            <param name="newToPoint"></param>
            <value>
            This method should return true if the stroke points were adjusted.  Return false
            to tell <see cref="M:Northwoods.GoWeb.GoLink.AdjustPoints(System.Int32,System.Drawing.PointF,System.Int32,System.Drawing.PointF)"/> and <see cref="M:Northwoods.GoWeb.GoLink.CalculateStroke"/> to plot
            the standard stroke path.
            </value>
            <remarks>
            The <paramref name="startIndex"/> point should be set to <paramref name="newFromPoint"/>,
            and the <paramref name="endIndex"/> point should be set to <paramref name="newToPoint"/>,
            and all the intermediate points should be interpolated linearly to
            stretch or compress the original set of points from <paramref name="startIndex"/>
            to <paramref name="endIndex"/>, inclusive, along each of the X and Y dimensions.
            <see cref="M:Northwoods.GoWeb.GoLink.AdjustPoints(System.Int32,System.Drawing.PointF,System.Int32,System.Drawing.PointF)"/> calls this method when <see cref="P:Northwoods.GoWeb.GoLink.AdjustingStyle"/>
            is <see cref="F:Northwoods.GoWeb.GoLinkAdjustingStyle.Stretch"/>.
            This method should not be used when <see cref="P:Northwoods.GoWeb.GoLink.Orthogonal"/> is true.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLink.ModifyEndPoints(System.Int32,System.Drawing.PointF,System.Int32,System.Drawing.PointF)">
            <summary>
            Modify only the end points of this stroke to match any new
            <paramref name="newFromPoint"/> or <paramref name="newToPoint"/> points;
            intermediate points are not changed.
            </summary>
            <param name="startIndex"></param>
            <param name="newFromPoint"></param>
            <param name="endIndex"></param>
            <param name="newToPoint"></param>
            <value>
            This method should return true if the stroke points were adjusted.  Return false
            to tell <see cref="M:Northwoods.GoWeb.GoLink.AdjustPoints(System.Int32,System.Drawing.PointF,System.Int32,System.Drawing.PointF)"/> and <see cref="M:Northwoods.GoWeb.GoLink.CalculateStroke"/> to plot
            the standard stroke path.
            </value>
            <remarks>
            The <paramref name="startIndex"/> point should be set to <paramref name="newFromPoint"/>,
            and the <paramref name="endIndex"/> point should be set to <paramref name="newToPoint"/>,
            and the intermediate points should be not be changed unless needed to maintain
            orthogonality when <see cref="P:Northwoods.GoWeb.GoLink.Orthogonal"/> is true.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLink.AddOrthoPoints(System.Drawing.PointF,System.Single,System.Drawing.PointF,System.Single)">
            <summary>
            This method is called by <see cref="M:Northwoods.GoWeb.GoLink.CalculateStroke"/> when <see cref="P:Northwoods.GoWeb.GoLink.Orthogonal"/>
            is true and both ports are instances of <see cref="T:Northwoods.GoWeb.GoPort"/> and at least one of
            them have a link spot that is not <c>NoSpot</c>.
            </summary>
            <param name="startFrom">
            this point will already have been added to the stroke by <see cref="M:Northwoods.GoWeb.GoLink.CalculateStroke"/> before calling this method
            </param>
            <param name="fromDir">normally 0, 90, 180, or 270 degrees</param>
            <param name="endTo">
            <see cref="M:Northwoods.GoWeb.GoLink.CalculateStroke"/> will add this point after calling this method
            </param>
            <param name="toDir">normally 0, 90, 180, or 270 degrees</param>
            <remarks>
            <see cref="M:Northwoods.GoWeb.GoLink.CalculateStroke"/> is responsible for adding the first two
            and the last two points of the stroke, including <paramref name="startFrom"/> and <paramref name="endTo"/>.
            This method is responsible for adding any additional points in the middle of the stroke.
            This method calls <see cref="M:Northwoods.GoWeb.GoLink.GetMidOrthoPosition(System.Single,System.Single,System.Boolean)"/> to determine the
            distance of the middle segment between the two ports.
            It also tries to avoid the source node and the destination node.
            When the <see cref="P:Northwoods.GoWeb.GoLink.AvoidsNodes"/> property is true, this method uses another,
            more computationally expensive, method for determining the proper path of the
            link, which may have many segments.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLink.GetMidOrthoPosition(System.Single,System.Single,System.Boolean)">
            <summary>
            This method is called by <see cref="M:Northwoods.GoWeb.GoLink.AddOrthoPoints(System.Drawing.PointF,System.Single,System.Drawing.PointF,System.Single)"/> to determine the distance
            of the middle segment between the two ports.
            </summary>
            <param name="fromPosition">The <see cref="P:Northwoods.GoWeb.GoLink.FromPort"/>'s point's X or Y coordinate, depending on the direction</param>
            <param name="toPosition">The <see cref="P:Northwoods.GoWeb.GoLink.ToPort"/>'s point's X or Y coordinate, depending on the direction</param>
            <param name="vertical">Whether the mid-position is along the vertical axis or horizontal</param>
            <returns></returns>
            <remarks>
            By default this returns the midpoint between the two coordinates.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLink.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Performs changes for undo and redo.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLink.GoObject">
            <summary>
            Returns itself as a <see cref="P:Northwoods.GoWeb.GoLink.GoObject"/>.
            </summary>
            <remarks>
            This property cannot be set.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.IGoGraphPart.GoObject"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLink.UserFlags">
            <summary>
            Gets or sets an integer value associated with this link.
            </summary>
            <value>
            The initial value is zero.
            </value>
            <seealso cref="P:Northwoods.GoWeb.IGoGraphPart.UserFlags"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLink.UserObject">
            <summary>
            Gets or sets an object associated with this link.
            </summary>
            <value>
            The initial value is null.
            </value>
            <seealso cref="P:Northwoods.GoWeb.IGoGraphPart.UserObject"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLink.FromPort">
            <summary>
            Gets or sets the port that the link is coming from.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.IGoLink.FromPort"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLink.ToPort">
            <summary>
            Gets or sets the port that the link is going to.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.IGoLink.ToPort"/>
            <seealso cref="P:Northwoods.GoWeb.GoLink.FromPort"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLink.FromNode">
            <summary>
            Gets the node that the link is coming from.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.IGoLink.FromNode"/>
            <seealso cref="P:Northwoods.GoWeb.GoLink.ToNode"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLink.ToNode">
            <summary>
            Gets the node that the link is going to.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.IGoLink.ToNode"/>
            <seealso cref="P:Northwoods.GoWeb.GoLink.FromNode"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLink.AbstractLink">
            <summary>
            Get the object acting as the <see cref="T:Northwoods.GoWeb.IGoLink"/>.
            </summary>
            <value>
            Initially this value will be this <see cref="T:Northwoods.GoWeb.GoLink"/> itself.
            Any new value must not be null.
            </value>
            <remarks>
            This property allows a GoLink to be used in the implementation of an IGoLink
            without being the IGoLink.  This is important to avoid confusion in classes such as
            <see cref="T:Northwoods.GoWeb.GoLabeledLink"/>.
            When the link is copied or removed, it is actually the abstract link that is
            copied or removed, not just this GoLink object.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoLabeledLink.RealLink"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLink.Orthogonal">
            <summary>
            Gets or sets whether the segments of the link are always horizontal or vertical.
            </summary>
            <remarks>
            This property primarily controls the behavior of <see cref="M:Northwoods.GoWeb.GoLink.CalculateStroke"/>,
            to position the points of the stroke so that straight line segments will
            be horizontal or vertical.
            You can have a link drawn with only horizontal and vertical segments if the
            link's stroke style is <see cref="F:Northwoods.GoWeb.GoStrokeStyle.Line"/> or
            <see cref="F:Northwoods.GoWeb.GoStrokeStyle.RoundedLine"/>.
            If the stroke style is <see cref="F:Northwoods.GoWeb.GoStrokeStyle.Bezier"/>, some of the orthogonally
            positioned points act as control points to help form the curve.
            The orthogonal <see cref="M:Northwoods.GoWeb.GoLink.CalculateStroke"/> algorithm adds two segments to
            the normal three segments so that it is possible to connect two ports using only
            orthogonal lines.
            Changing this value will call <see cref="M:Northwoods.GoWeb.GoLink.PortsOnLinkChanged(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> to notify
            both ports that this property changed.
            Setting this property to true will clear any existing points and then call
            <see cref="M:Northwoods.GoWeb.GoLink.UpdateRoute"/>, which will eventually call <see cref="M:Northwoods.GoWeb.GoLink.CalculateStroke"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoLink.Relinkable">
            <summary>
            Gets or sets whether the user may reconnect this link to another port.
            </summary>
            <value>
            This defaults to true.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoLink.DraggableOrthogonalSegments">
            <summary>
            Gets or sets whether the user may drag a resizable segment of an Orthogonal link.
            </summary>
            <value>
            This defaults to false.
            </value>
            <remarks>
            When this is true, a selected link that is <see cref="P:Northwoods.GoWeb.GoLink.Orthogonal"/> will
            have unseen resize handles in addition to the standard resize handles at
            the points of this stroke.  This will allow the user to drag the segment
            horizontally for a vertical segment, or vertically for a horizontal segment.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoLink.AvoidsNodes">
            <summary>
            Gets or sets whether the link's path tries to avoid other nodes.
            </summary>
            <value>
            This defaults to false.
            </value>
            <remarks>
            This property is only applicable when the <see cref="P:Northwoods.GoWeb.GoLink.Orthogonal"/> property is true.
            A Bezier <see cref="P:Northwoods.GoWeb.GoLink.Style"/> for this link is not recommended.
            When this property is true you will incur a noticeable overhead in each call to
            <see cref="M:Northwoods.GoWeb.GoLink.CalculateStroke"/>.
            Changing this value will call <see cref="M:Northwoods.GoWeb.GoLink.PortsOnLinkChanged(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> to notify
            both ports that this property changed.
            Setting this property to true will clear any existing points and then call
            <see cref="M:Northwoods.GoWeb.GoLink.UpdateRoute"/>, which will eventually call <see cref="M:Northwoods.GoWeb.GoLink.CalculateStroke"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoLink.ToolTipText">
            <summary>
            Gets or sets a string to be displayed in a tooltip.
            </summary>
            <value>
            The initial value is null, which means don't display a tooltip.
            </value>
            <remarks>
            Returning an empty string will display an empty tooltip.
            If you want to generate the tooltip text string dynamically,
            override <see cref="M:Northwoods.GoWeb.GoLink.GetToolTip(Northwoods.GoWeb.GoView)"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.IGoGraphPart.UserFlags"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLink.FirstPickIndex">
            <summary>
            Return the index of the first stroke point to get a selection handle.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLink.LastPickIndex">
            <summary>
            Return the index of the last stroke point to get a selection handle.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLink.Style">
            <summary>
            When <see cref="P:Northwoods.GoWeb.GoLink.IsSelfLoop"/> is true and <see cref="P:Northwoods.GoWeb.GoLink.Orthogonal"/> is false,
            the stroke style is assumed to be <see cref="F:Northwoods.GoWeb.GoStrokeStyle.Bezier"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLink.IsSelfLoop">
            <summary>
            Return true when both ports are the same.
            </summary>
            <value>
            By default this is true when both ports are the same and non-null.
            </value>
            <remarks>
            This is used by <see cref="M:Northwoods.GoWeb.GoLink.CalculateStroke"/> and <see cref="P:Northwoods.GoWeb.GoLink.Style"/>.
            When this property is true, the link is drawn as a Bezier style
            stroke in a loop.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoLink.AdjustingStyle">
            <summary>
            Gets or sets how <see cref="M:Northwoods.GoWeb.GoLink.CalculateStroke"/> behaves.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoWeb.GoLinkAdjustingStyle.Calculate"/>.
            </value>
            <remarks>
            If <see cref="P:Northwoods.GoWeb.GoLink.AvoidsNodes"/> and <see cref="P:Northwoods.GoWeb.GoLink.Orthogonal"/> are true,
            this property is ignored, because <see cref="M:Northwoods.GoWeb.GoLink.CalculateStroke"/>
            will compute the route in <see cref="M:Northwoods.GoWeb.GoLink.AddOrthoPoints(System.Drawing.PointF,System.Single,System.Drawing.PointF,System.Single)"/>
            without calling <see cref="M:Northwoods.GoWeb.GoLink.AdjustPoints(System.Int32,System.Drawing.PointF,System.Int32,System.Drawing.PointF)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoLink.PartID">
            <summary>
            Gets or sets the unique ID of this part within its document.
            </summary>
            <value>
            The value is invalid unless this object is part of a <see cref="T:Northwoods.GoWeb.GoDocument"/>
            whose <see cref="P:Northwoods.GoWeb.GoDocument.MaintainsPartID"/> property is true.
            Setting this property is normally done only by <see cref="T:Northwoods.GoWeb.GoDocument"/>
            when this object is added to the document, or by code deserializing
            a document, before this object is part of the document.
            The default value is -1, to indicate to the document that it needs
            to find and assign a unique PartID for this object when it is added
            to the document.
            </value>
        </member>
        <member name="T:Northwoods.GoWeb.GoListGroup">
            <summary>
            This group arranges its children vertically or horizontally, aligned within the rectangular bounds,
            optionally spaced with lines drawn between the objects, bordered, and with a background.
            </summary>
            <remarks>
            As with any other group, adding a child to this group does not change its selectability.
            You will need to decide whether the user can select individual items in the list of
            objects.  If an item is selectable, it should have its DragsNode property set to true
            and it probably should not be resizable.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoListGroup.ChangedSpacing">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoListGroup.Spacing"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoListGroup.ChangedAlignment">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoListGroup.Alignment"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoListGroup.ChangedLinePen">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoListGroup.LinePen"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoListGroup.ChangedBorderPen">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoListGroup.BorderPen"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoListGroup.ChangedBrush">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoListGroup.Brush"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoListGroup.ChangedCorner">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoListGroup.Corner"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoListGroup.ChangedTopLeftMargin">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoListGroup.TopLeftMargin"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoListGroup.ChangedBottomRightMargin">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoListGroup.BottomRightMargin"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoListGroup.ChangedOrientation">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoListGroup.Orientation"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoListGroup.ChangedTopIndex">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoListGroup.TopIndex"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoListGroup.ChangedMinimumItemSize">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoListGroup.MinimumItemSize"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoListGroup.ChangedClipping">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoListGroup.Clipping"/> property.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoListGroup.#ctor">
            <summary>
            Construct an empty GoListGroup.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoListGroup.CopyChildren(Northwoods.GoWeb.GoGroup,Northwoods.GoWeb.GoCopyDictionary)">
            <summary>
            Perform some internal bookkeeping in addition to copying each of the items.
            </summary>
            <param name="newgroup"></param>
            <param name="env"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoListGroup.ComputeBounds">
            <summary>
            The width of this group is just the maximum width of all of the children,
            and the height is the sum of the heights of the items, incremented by the
            <see cref="P:Northwoods.GoWeb.GoListGroup.Spacing"/> property between the items.
            </summary>
            <returns>
            a <c>RectangleF</c> describing the actual size and position
            of the whole group in document coordinates
            </returns>
            <remarks>
            <para>
            Of course, if <see cref="P:Northwoods.GoWeb.GoListGroup.Orientation"/> is <c>Horizontal</c>,
            the width of this group is the sum of the widths of the items,
            incremented by the <see cref="P:Northwoods.GoWeb.GoListGroup.Spacing"/> property between the items,
            and the height is just the maximum height of all of the children.
            This ignores child objects that are not <see cref="P:Northwoods.GoWeb.GoObject.Visible"/>.
            </para>
            <para>
            When <see cref="P:Northwoods.GoWeb.GoListGroup.TopIndex"/> is non-negative, this group supports "scrolling".
            The <c>Bounds</c> is not determined by the size of the child objects,
            but can be set, possibly resulting in some objects at the start and at
            the end of the list being made not <c>Visible</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoListGroup.RescaleChildren(System.Drawing.RectangleF)">
            <summary>
            Never resize any children unless <see cref="P:Northwoods.GoWeb.GoObject.AutoRescales"/> is true.
            </summary>
            <param name="old"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoListGroup.LayoutChildren(Northwoods.GoWeb.GoObject)">
            <summary>
            Position each child starting at the top, according to the alignment,
            leaving space according to the spacing and drawn lines.
            </summary>
            <param name="childchanged">the child object that was moved or resized</param>
            <remarks>
            The first child is drawn at the top (smallest Y coordinate); the last
            one is at the bottom (largest Y coordinate).
            The actual amount of space between items is the larger of the <see cref="P:Northwoods.GoWeb.GoListGroup.Spacing"/>
            value and the width of the <see cref="P:Northwoods.GoWeb.GoListGroup.LinePen"/>.
            The actual positioning of each child item is performed by a call
            to <see cref="M:Northwoods.GoWeb.GoListGroup.LayoutItem(System.Int32,System.Drawing.RectangleF)"/>.
            When <see cref="P:Northwoods.GoWeb.GoObject.Initializing"/> is true, this method does nothing.
            When <see cref="P:Northwoods.GoWeb.GoListGroup.Orientation"/> is <c>Horizontal</c> instead of <c>Vertical</c>,
            the items are positioned from the left towards the right instead of top-down.
            This ignores child objects that are not <see cref="P:Northwoods.GoWeb.GoObject.Visible"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoListGroup.LayoutItem(System.Int32,System.Drawing.RectangleF)">
            <summary>
            Position a child item, within a delimiting rectangle.
            </summary>
            <param name="i">the index in the group of the child object to be positioned</param>
            <param name="cell">
            a <c>RectangleF</c> delimiting where the item should be placed;
            the width and height denote how much room remains in the whole group for all
            of the child items to be placed.
            </param>
            <returns>the maximum Y coordinate so far, including the just positioned item
            (or the maximum X coordinate if the orientation is horizontal)</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoListGroup.ComputeMaximumItemSize">
            <summary>
            This value is used when resizing this GoListGroup.
            </summary>
            <returns></returns>
            <remarks>
            Resizing should only be true when <see cref="P:Northwoods.GoWeb.GoListGroup.TopIndex"/> is not negative,
            to indicate that scrolling is supported.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoListGroup.DoResize(Northwoods.GoWeb.GoView,System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,Northwoods.GoWeb.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Interactive resizing is limited to be large enough to hold any item in the list.
            </summary>
            <param name="view"></param>
            <param name="origRect"></param>
            <param name="newPoint"></param>
            <param name="whichHandle"></param>
            <param name="evttype"></param>
            <param name="min"></param>
            <param name="max"></param>
            <remarks>
            Resizing should only occur when <see cref="P:Northwoods.GoWeb.GoListGroup.TopIndex"/> is not negative,
            to indicate that scrolling is supported.
            This calls <see cref="M:Northwoods.GoWeb.GoListGroup.ComputeMaximumItemSize"/> and uses <see cref="P:Northwoods.GoWeb.GoListGroup.MinimumItemSize"/>
            to determine the real minimum <c>SizeF</c> to be passed to the base method call.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoListGroup.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)">
            <summary>
            In addition to painting all of the children, this method also
            draws lines using <see cref="P:Northwoods.GoWeb.GoListGroup.LinePen"/> between each child and
            <see cref="P:Northwoods.GoWeb.GoListGroup.BorderPen"/> around them all.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <remarks>
            This calls <see cref="M:Northwoods.GoWeb.GoListGroup.PaintDecoration(System.Drawing.Graphics,Northwoods.GoWeb.GoView)"/>.
            Painting of the child objects may be clipped to the border if <see cref="P:Northwoods.GoWeb.GoListGroup.Clipping"/> is true.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoListGroup.PaintDecoration(System.Drawing.Graphics,Northwoods.GoWeb.GoView)">
            <summary>
            Paint a shadow, filled border, and separator lines.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <remarks>
            If the <see cref="P:Northwoods.GoWeb.GoListGroup.Clipping"/> property is true and if <see cref="P:Northwoods.GoWeb.GoListGroup.Corner"/> is non-zero,
            painting of the child items and of the separator lines will be clipped to fit within
            the rounded rectangle formed by the border.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoListGroup.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.GoWeb.GoView)">
            <summary>
            The expanded paint bounds for a GoListGroup includes any BorderPen width
            and any drop shadow.
            </summary>
            <param name="rect"></param>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoListGroup.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Perform changes to the spacing, alignment, and pen.
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.GoWeb.GoListGroup.Bounds">
            <summary>
            Whenever the size and/or position is changed, we need to recalculate the
            corners.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoListGroup.TopIndex">
            <summary>
            The index of the first visible child, or -1 to specify no scrolling.
            </summary>
            <value>
            The default value is -1.
            A value greater or equal to the count of items in this list will cause no items to be painted.
            </value>
            <remarks>
            <para>
            This property can be incremented or decremented to cause the list to "scroll".
            When this value is zero, the first item is positioned and drawn at the top
            (or at the left, if <see cref="P:Northwoods.GoWeb.GoListGroup.Orientation"/> is <c>Orientation.Horizontal</c>).
            Following items are positioned after, until either there are no more or until
            the next item will not fit within the current <c>Bounds</c>.
            </para>
            <para>
            When the value is greater than zero, the items whose index is less than this
            value are positioned at the top-left corner of the group and are made not
            <c>Visible</c> and not <c>Printable</c>.
            </para>
            <para>
            When the value is -1, all items are assumed to be <c>Visible</c> and <c>Printable</c>,
            and the result of <see cref="M:Northwoods.GoWeb.GoListGroup.ComputeBounds"/> will be the size of the group including
            all of its items, laid out in a column or row.
            </para>
            <para>
            Although this property is very useful in supporting scrolling, this
            group does <b>not</b> provide any scroll buttons or a scroll bar or any other
            "controls" to allow the user to "scroll".  Such objects (such as <c>GoButton</c>s)
            can be added to a group or node that includes this <c>GoListGroup</c>.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoListGroup.MinimumItemSize">
            <summary>
            Gets or sets the minimum size to be used when resizing.
            </summary>
            <value>
            The width and height must not be negative.  The default value is 1x1.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoListGroup.Orientation">
            <summary>
            Gets or sets the direction in which the child objects are positioned relative to each other.
            </summary>
            <value>
            The default orientation is <c>Vertical</c>.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoListGroup.Spacing">
            <summary>
            Gets or sets how much space there should be between items.
            </summary>
            <value>
            This specifies the vertical distance between items in document coordinates.
            By default this value is <c>0</c>, so that the items just touch each other.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoListGroup.Alignment">
            <summary>
            Gets or sets where each item should be drawn if it is narrower than the width
            of the whole group.
            </summary>
            <value>
            This defaults to <see cref="F:Northwoods.GoWeb.GoObject.TopLeft"/>, i.e., left-aligned (or
            top-aligned if the orientation is horizontal).
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoListGroup.LinePen">
            <summary>
            Gets or sets the <c>Pen</c> used to draw lines separating the items.
            </summary>
            <value>
            You must not modify the pen after you have assigned it.
            If this value is null, no lines will be drawn.
            By default this value is null.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoListGroup.LinePenColor">
            <summary>
            Gets or sets the color of the <see cref="P:Northwoods.GoWeb.GoListGroup.LinePen"/>.
            </summary>
            <value>
            The <b>Color</b> of the <see cref="P:Northwoods.GoWeb.GoListGroup.LinePen"/>, or <b>Color.Empty</b> if there is no pen.
            Setting the new value to <b>Color.Empty</b> will set the <see cref="P:Northwoods.GoWeb.GoListGroup.LinePen"/> to null.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoListGroup.LinePenWidth">
            <summary>
            Gets or sets the width of the <see cref="P:Northwoods.GoWeb.GoListGroup.LinePen"/>.
            </summary>
            <value>
            The width of the <see cref="P:Northwoods.GoWeb.GoListGroup.LinePen"/>, or 0 if there is no pen.
            The default value is zero.
            For GoDiagram Pocket, this must always be 0.
            </value>
            <remarks>
            If there is no <see cref="P:Northwoods.GoWeb.GoListGroup.LinePen"/>, setting this property might have no effect.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoListGroup.BorderPen">
            <summary>
            Gets or sets the pen used to draw a rectangular outline just inside the
            edges of this node.
            </summary>
            <value>
            You must not modify the pen after you have assigned it.
            The <c>Pen</c> value may be null, in which case no outline is drawn.
            This value defaults to null.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoListGroup.BorderPenColor">
            <summary>
            Gets or sets the color of the <see cref="P:Northwoods.GoWeb.GoListGroup.BorderPen"/>.
            </summary>
            <value>
            The <b>Color</b> of the <see cref="P:Northwoods.GoWeb.GoListGroup.BorderPen"/>, or <b>Color.Empty</b> if there is no pen.
            Setting the new value to <b>Color.Empty</b> will set the <see cref="P:Northwoods.GoWeb.GoListGroup.BorderPen"/> to null.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoListGroup.BorderPenWidth">
            <summary>
            Gets or sets the width of the <see cref="P:Northwoods.GoWeb.GoListGroup.BorderPen"/>.  [Not in GoDiagram Pocket]
            </summary>
            <value>
            The width of the <see cref="P:Northwoods.GoWeb.GoListGroup.BorderPen"/>, or 0 if there is no pen.
            The default value is zero.
            For GoDiagram Pocket, this must always be 0.
            </value>
            <remarks>
            If there is no <see cref="P:Northwoods.GoWeb.GoListGroup.BorderPen"/>, setting this property might have no effect.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoListGroup.Brush">
            <summary>
            Gets or sets the brush used to fill this group as a background.
            </summary>
            <value>
            The <c>Brush</c> value may be null, in which case no background is drawn.
            This value defaults to null.
            </value>
            <remarks>
            <para>
            LinearGradientBrushes are drawn with their origin at the Position of this group.
            </para>
            <para>
            You must not modify the brush after you have assigned it.
            It is common to use the predefined brushes that are members of the
            <c>Brushes</c> class.
            For the simple linear gradient and path gradient effects,
            you can just set the <see cref="P:Northwoods.GoWeb.GoListGroup.BrushColor"/>, <see cref="P:Northwoods.GoWeb.GoListGroup.BrushForeColor"/>,
            <see cref="P:Northwoods.GoWeb.GoListGroup.BrushMidColor"/>, and <see cref="P:Northwoods.GoWeb.GoListGroup.BrushStyle"/> properties.
            Finally, for the most sophisticated or complex kinds of gradient brushes,
            you may need to override this property to return the kind of value you need.
            </para>
            <para>
            When a linear gradient brush or a path gradient brush is drawn very small,
            due to a combination of small size and small <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="P:Northwoods.GoWeb.GoView.DocScale"/>,
            GoDiagram may substitute a solid brush or not draw anything at all,
            both for efficiency as well as to avoid GDI+ errors.
            When a path gradient brush is drawn very large,
            due to a combination of large size and large <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="P:Northwoods.GoWeb.GoView.DocScale"/>,
            GoDiagram may substitute a solid brush, both for efficiency as well as to avoid GDI+ errors.
            </para>
            <para>
            Currently serialization is limited to standard solid, hatch,
            and texture brushes and many kinds of simple linear gradient and
            path gradient brushes.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoListGroup.BrushColor">
            <summary>
            Gets or sets the main or background color of the brush.
            </summary>
            <value>
            The <b>Color</b> of the <see cref="P:Northwoods.GoWeb.GoListGroup.Brush"/>, or <b>Color.Empty</b> if there is no brush.
            Setting the new value to a non-empty <b>Color</b> when <see cref="P:Northwoods.GoWeb.GoListGroup.Brush"/> is null
            will set the <see cref="P:Northwoods.GoWeb.GoListGroup.Brush"/> to a <b>SolidBrush</b> of that new color.
            Setting the new value to <b>Color.Empty</b> will set the <see cref="P:Northwoods.GoWeb.GoListGroup.Brush"/> to null if
            the old brush was a <b>SolidBrush</b>.
            </value>
            <remarks>
            This refers to the color of a <b>SolidBrush</b>, the background color of
            a <b>HatchBrush</b>, the ending color of a <b>LinearGradientBrush</b>, or the
            center color of a <b>PathGradientBrush</b>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoListGroup.BrushForeColor">
            <summary>
            Gets or sets the foreground color of a brush.  [Not in GoDiagram Pocket.]
            </summary>
            <value>
            Setting this value will have no effect for brushes that are not
            <b>HatchBrush</b>, <b>LinearGradientBrush</b>, or <b>PathGradientBrush</b>.
            </value>
            <remarks>
            This refers to the foreground color of a <b>HatchBrush</b>,
            the starting color of a <b>LinearGradientBrush</b>, or the
            surrounding color of a <b>PathGradientBrush</b>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoListGroup.BrushMidColor">
            <summary>
            Gets or sets the middle color of a gradient brush.  [Not in GoDiagram Pocket.]
            </summary>
            <value>
            For a <b>LinearGradientBrush</b> or <b>PathGradientBrush</b>, the value may be <b>Color.Empty</b>
            if no middle color is needed.
            This defaults to <b>Color.Empty</b>.
            Setting this value will have no effect for other kinds of brushes.
            </value>
            <remarks>
            Due to a bug in GDI+ in .NET 1.1, this color is ignored.
            In .NET 2.0, this produces a brush with the correct appearance using all three colors
            when the <see cref="P:Northwoods.GoWeb.GoListGroup.BrushStyle"/> is one that uses three colors.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoListGroup.BrushMidFraction">
            <summary>
            Gets or sets the fractional distance between the end colors at which the middle color is drawn.  [Not in GoDiagram Pocket]
            </summary>
            <remarks>
            This property is ignored if the value is <b>Single.NaN</b>.
            The meaning of this property depends on the value <see cref="P:Northwoods.GoWeb.GoListGroup.BrushStyle"/> property;
            many brush styles ignore this property.
            </remarks>
            <remarks>
            This property is not meaningful unless the <see cref="P:Northwoods.GoWeb.GoListGroup.BrushStyle"/> is a linear gradient or a path gradient
            that supports three colors.
            Changing the <see cref="P:Northwoods.GoWeb.GoListGroup.BrushStyle"/> may also change the value of this property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoListGroup.BrushStartPoint">
            <summary>
            Gets or sets the start point for linear gradients,
            as normalized fractions of the size of the shape.  [Not in GoDiagram Pocket]
            </summary>
            <value>
            A <b>PointF</b> whose X and Y values are normally between 0 and 1, and should be between -1 and 2.
            An X value of zero corresponds to the left side of the shape; an X value of 1 corresponds to the right side.
            A Y value of zero corresponds to the top side of the shape; a Y value of 1 corresponds to the bottom side.
            Negative values or values greater than 1 denote points that are outside of the shape.
            </value>
            <remarks>
            This property is not meaningful unless the <see cref="P:Northwoods.GoWeb.GoListGroup.BrushStyle"/> is a linear gradient.
            Changing the <see cref="P:Northwoods.GoWeb.GoListGroup.BrushStyle"/> may also change the value of this property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoListGroup.BrushPoint">
            <summary>
            Gets or sets the end point for linear gradients or the focus point for path gradients,
            as normalized fractions of the size of the shape.  [Not in GoDiagram Pocket]
            </summary>
            <value>
            A <b>PointF</b> whose X and Y values are normally between 0 and 1, and should be between -1 and 2.
            An X value of zero corresponds to the left side of the shape; an X value of 1 corresponds to the right side.
            A Y value of zero corresponds to the top side of the shape; a Y value of 1 corresponds to the bottom side.
            Negative values or values greater than 1 denote points that are outside of the shape.
            </value>
            <remarks>
            This property is not meaningful unless the <see cref="P:Northwoods.GoWeb.GoListGroup.BrushStyle"/> is a linear gradient or a path gradient.
            Changing the <see cref="P:Northwoods.GoWeb.GoListGroup.BrushStyle"/> may also change the value of this property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoListGroup.BrushFocusScales">
            <summary>
            Gets or sets the size of the focus area for path gradients,
            as normalized fractions of the size of the shape.  [Not in GoDiagram Pocket]
            </summary>
            <value>
            A <b>SizeF</b> whose Width and Height values must be between 0 and 1.
            </value>
            <remarks>
            This property is not meaningful unless the <see cref="P:Northwoods.GoWeb.GoListGroup.BrushStyle"/> is a path gradient.
            Changing the <see cref="P:Northwoods.GoWeb.GoListGroup.BrushStyle"/> may also change the value of this property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoListGroup.BrushStyle">
            <summary>
            Gets or sets the kind of brush used by this shape.  [Not in GoDiagram Pocket]
            </summary>
            <value>
            A <see cref="T:Northwoods.GoWeb.GoBrushStyle"/>.
            The default value depends on the shape type.
            However, for most shapes the default is <see cref="F:Northwoods.GoWeb.GoBrushStyle.None"/>
            because <see cref="P:Northwoods.GoWeb.GoListGroup.Brush"/> is null.
            </value>
            <remarks>
            <para>
            Changing this property to a new <see cref="T:Northwoods.GoWeb.GoBrushStyle"/> that is a
            gradient will also reset some of the brush properties to
            default values established by the corresponding <b>Fill...</b> methods.
            In particular, the value of <see cref="P:Northwoods.GoWeb.GoListGroup.BrushMidFraction"/>, <see cref="P:Northwoods.GoWeb.GoListGroup.BrushPoint"/>,
            <see cref="P:Northwoods.GoWeb.GoListGroup.BrushStartPoint"/>, and/or <see cref="P:Northwoods.GoWeb.GoListGroup.BrushFocusScales"/> may change.
            However, setting this property will not change the <see cref="P:Northwoods.GoWeb.GoListGroup.BrushColor"/>,
            <see cref="P:Northwoods.GoWeb.GoListGroup.BrushForeColor"/> or <see cref="P:Northwoods.GoWeb.GoListGroup.BrushMidColor"/> properties,
            although some or all of those properties might not be used by certain
            brush styles.  You will normally want to set this property first, before
            setting other <b>Brush...</b> properties.
            </para>
            <para>
            When a linear gradient brush or a path gradient brush is drawn very small,
            due to a combination of small size and small <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="P:Northwoods.GoWeb.GoView.DocScale"/>,
            GoDiagram may substitute a solid brush or not draw anything at all,
            both for efficiency as well as to avoid GDI+ errors.
            When a path gradient brush is drawn very large,
            due to a combination of large size and large <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="P:Northwoods.GoWeb.GoView.DocScale"/>,
            GoDiagram may substitute a solid brush, both for efficiency as well as to avoid GDI+ errors.
            </para>
            <para>
            Caution: using gradient brush styles, particularly path gradients,
            can be computationally expensive to paint.  This is especially true
            for large shapes.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoListGroup.Corner">
            <summary>
            Gets or sets the maximum radial width and height of each corner.
            </summary>
            <value>
            The default value is 0x0.  Both the width and the height must be
            non-negative; only when both are positive will there be arcs at each corner.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoListGroup.TopLeftMargin">
            <summary>
            Gets or sets the space between the top and left sides of the text label
            with the top and left sides of the border.
            </summary>
            <value>
            The width and height must not be negative.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoListGroup.BottomRightMargin">
            <summary>
            Gets or sets the space between the bottom and right sides of the text label
            with the bottom and right sides of the border.
            </summary>
            <value>
            The width and height must not be negative.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoListGroup.Clipping">
            <summary>
            Gets or sets whether the items should be clipped to paint within the rounded corners of the border.  [Not in GoDiagram Pocket]
            </summary>
            <value>The default value is false</value>
            <remarks>
            Setting this property to true is useful when the <see cref="P:Northwoods.GoWeb.GoListGroup.TopLeftMargin"/> and/or <see cref="P:Northwoods.GoWeb.GoListGroup.BottomRightMargin"/>
            are small enough relative to the <see cref="P:Northwoods.GoWeb.GoListGroup.Corner"/> to cause the rounded corners of the border to be drawn
            across the top item(s) or bottom item(s).
            </remarks>
        </member>
        <member name="T:Northwoods.GoWeb.GoMultiTextNode">
            <summary>
            The GoMultiTextNode class displays a number of text objects vertically
            using a <see cref="T:Northwoods.GoWeb.GoListGroup"/>, and associates ports on each side of each text object,
            plus a port at the top and one at the bottom of the node.
            </summary>
            <remarks>
            Although this group typically displays strings by holding <see cref="T:Northwoods.GoWeb.GoText"/>
            objects, you can actually insert any <see cref="T:Northwoods.GoWeb.GoObject"/>.
            This object is not meant to be resizable, so <see cref="P:Northwoods.GoWeb.GoObject.Resizable"/>
            is false.
            If you want to change the width of all of the items in the <see cref="P:Northwoods.GoWeb.GoMultiTextNode.ListGroup"/>,
            you can set the <see cref="P:Northwoods.GoWeb.GoMultiTextNode.ItemWidth"/> property.
            The initial value of <see cref="P:Northwoods.GoWeb.GoMultiTextNode.ItemWidth"/>, -1, does not cause any of the items'
            <see cref="P:Northwoods.GoWeb.GoObject.Width"/> to be set -- they will keep their natural width.
            If you really want the user to be able to change the width of this node
            interactively, one way to do so is to override <see cref="M:Northwoods.GoWeb.GoObject.ComputeResize(System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,System.Drawing.SizeF,System.Drawing.SizeF,System.Boolean)"/>
            to reset the <see cref="P:Northwoods.GoWeb.GoMultiTextNode.ItemWidth"/> to an appropriate value, accounting for
            any <see cref="P:Northwoods.GoWeb.GoMultiTextNode.TopLeftMargin"/> and <see cref="P:Northwoods.GoWeb.GoMultiTextNode.BottomRightMargin"/> and any
            ports.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoMultiTextNode.InsertedLeftPort">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoMultiTextNode.InsertedRightPort">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoMultiTextNode.RemovedLeftPort">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoMultiTextNode.RemovedRightPort">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoMultiTextNode.ReplacedPort">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoMultiTextNode.ChangedTopPort">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoMultiTextNode.TopPort"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoMultiTextNode.ChangedBottomPort">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoMultiTextNode.BottomPort"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoMultiTextNode.ChangedItemWidth">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoMultiTextNode.ItemWidth"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoMultiTextNode.ChangedFromEndSegmentLengthStep">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoMultiTextNode.FromEndSegmentLengthStep"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoMultiTextNode.ChangedToEndSegmentLengthStep">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoMultiTextNode.ToEndSegmentLengthStep"/> property.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoMultiTextNode.#ctor">
            <summary>
            Create an empty-lookng node, containing no items and only the top and bottom ports.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.GoWeb.GoMultiTextNode.LinePen"/> and <see cref="P:Northwoods.GoWeb.GoMultiTextNode.BorderPen"/> properties default to black pens.
            This constructs a <see cref="T:Northwoods.GoWeb.GoListGroup"/> as the initial value for <see cref="P:Northwoods.GoWeb.GoMultiTextNode.ListGroup"/>.
            This calls <see cref="M:Northwoods.GoWeb.GoMultiTextNode.CreateEndPort(System.Boolean)"/> to get initial values for both
            <see cref="P:Northwoods.GoWeb.GoMultiTextNode.TopPort"/> and <see cref="P:Northwoods.GoWeb.GoMultiTextNode.BottomPort"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoMultiTextNode.CopyChildren(Northwoods.GoWeb.GoGroup,Northwoods.GoWeb.GoCopyDictionary)">
            <summary>
            Copy the <see cref="P:Northwoods.GoWeb.GoMultiTextNode.ListGroup"/> and all of the ports.
            </summary>
            <param name="newgroup"></param>
            <param name="env"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoMultiTextNode.CreateEndPort(System.Boolean)">
            <summary>
            Create a top or bottom port for this node.
            </summary>
            <param name="top"></param>
            <returns></returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             public virtual GoObject CreateEndPort(bool top) {
               GoPort p = new GoPort();
               p.Size = new SizeF(5, 3);
               p.Style = GoPortStyle.None;
               if (top) {
                 p.FromSpot = MiddleTop;
                 p.ToSpot = MiddleTop;
               } else {
                 p.FromSpot = MiddleBottom;
                 p.ToSpot = MiddleBottom;
               }
               return p;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.GoWeb.GoMultiTextNode.CreatePort(System.Boolean,System.Int32)">
            <summary>
            Create and initialize a port that may go on either the left side or the right side.
            </summary>
            <param name="left"></param>
            <param name="idx"></param>
            <returns>by default, a <see cref="T:Northwoods.GoWeb.GoPort"/></returns>
            <remarks>
            </remarks>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             public virtual GoObject CreatePort(bool left, int idx) {
               GoPort p = new GoPort();
               p.Size = new SizeF(3, 5);
               p.Style = GoPortStyle.None;
               if (left) {
                 p.FromSpot = MiddleLeft;
                 p.ToSpot = MiddleLeft;
               } else {
                 p.FromSpot = MiddleRight;
                 p.ToSpot = MiddleRight;
               }
               return p;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.GoWeb.GoMultiTextNode.CreateText(System.String,System.Int32)">
            <summary>
            Create and initialize a text item given a string.
            </summary>
            <param name="s"></param>
            <param name="idx"></param>
            <returns>a <see cref="T:Northwoods.GoWeb.GoText"/> object that is the new item</returns>
            <remarks>
            Note that the width of the text object is not set unless
            <see cref="P:Northwoods.GoWeb.GoMultiTextNode.ItemWidth"/> is a positive value.
            </remarks>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             public virtual GoText CreateText(String s, int idx) {
               GoText t = new GoText();
               t.Selectable = false;
               t.Alignment = GoObject.Middle;
               t.Multiline = true;
               t.BackgroundOpaqueWhenSelected = true;
               t.BackgroundColor = Color.LightBlue;
               t.DragsNode = true;
               t.Text = s;
               t.Wrapping = true;
               if (this.ItemWidth &gt; 0) {
                 t.WrappingWidth = this.ItemWidth;
                 t.Width = this.ItemWidth;
               }
               return t;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.GoWeb.GoMultiTextNode.LayoutChildren(Northwoods.GoWeb.GoObject)">
            <summary>
            Position all of the left and right port objects at the sides of each of the items.
            </summary>
            <param name="childchanged"></param>
            <remarks>
            When <see cref="P:Northwoods.GoWeb.GoObject.Initializing"/> is true, this method does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoMultiTextNode.GetString(System.Int32)">
            <summary>
            This convenience method gets the string associated with a given item in the list.
            </summary>
            <param name="i"></param>
            <returns>
            if the <paramref name="i"/>'th item is a <see cref="T:Northwoods.GoWeb.GoText"/>,
            this returns its <see cref="P:Northwoods.GoWeb.GoText.Text"/> property,
            otherwise it returns an empty string
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoMultiTextNode.SetString(System.Int32,System.String)">
            <summary>
            This convenience method sets the string associated with a given item in the list.
            </summary>
            <param name="i"></param>
            <param name="s">a new <see cref="P:Northwoods.GoWeb.GoText.Text"/> value</param>
            <remarks>
            If the <paramref name="i"/>'th item is not a <see cref="T:Northwoods.GoWeb.GoText"/>, this method does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoMultiTextNode.AddString(System.String)">
            <summary>
            This convenience method adds an item containing a string to the end of the list.
            </summary>
            <param name="s">the initial <see cref="P:Northwoods.GoWeb.GoText.Text"/> value for the new <see cref="T:Northwoods.GoWeb.GoText"/> item</param>
            <returns>the new <see cref="T:Northwoods.GoWeb.GoText"/> item</returns>
            <remarks>
            This is defined as:
            <code>
              int num = this.ItemCount;
              GoText t = CreateText(s, num);
              AddItem(t, CreatePort(true, num), CreatePort(false, num));
              return t;
            </code>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoMultiTextNode.InsertString(System.Int32,System.String)">
            <summary>
            This convenience method inserts an item containing a string into the list.
            </summary>
            <param name="i">the intended index for the item and its accompanying objects</param>
            <param name="s">the initial <see cref="P:Northwoods.GoWeb.GoText.Text"/> value for the new <see cref="T:Northwoods.GoWeb.GoText"/> item</param>
            <returns>the new <see cref="T:Northwoods.GoWeb.GoText"/> item</returns>
            <remarks>
            This calls <see cref="M:Northwoods.GoWeb.GoMultiTextNode.CreateText(System.String,System.Int32)"/> and <see cref="M:Northwoods.GoWeb.GoMultiTextNode.InsertItem(System.Int32,Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject)"/> with
            the resulting <see cref="T:Northwoods.GoWeb.GoText"/> object and the results of two calls to
            <see cref="M:Northwoods.GoWeb.GoMultiTextNode.CreatePort(System.Boolean,System.Int32)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoMultiTextNode.GetItem(System.Int32)">
            <summary>
            Gets the item object at a particular index.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoMultiTextNode.SetItem(System.Int32,Northwoods.GoWeb.GoObject)">
            <summary>
            Replaces an item object at a particular index.
            </summary>
            <param name="i"></param>
            <param name="obj"></param>
            <remarks>
            This does not change either associated "port" object.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoMultiTextNode.AddItem(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject)">
            <summary>
            Add an item and associated objects at a particular index.
            </summary>
            <param name="item"></param>
            <param name="leftport"></param>
            <param name="rightport"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoMultiTextNode.InsertItem(System.Int32,Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject)">
            <summary>
            Insert an item and its ports to be at a particular position in the list.
            </summary>
            <param name="i">the intended index for the item and its accompanying objects</param>
            <param name="item">any <see cref="T:Northwoods.GoWeb.GoObject"/></param>
            <param name="leftport">any object, but typically a <see cref="T:Northwoods.GoWeb.GoPort"/> or null</param>
            <param name="rightport">any object, but typically a <see cref="T:Northwoods.GoWeb.GoPort"/> or null</param>
        </member>
        <member name="M:Northwoods.GoWeb.GoMultiTextNode.RemoveItem(System.Int32)">
            <summary>
            Remove the item and its ports that are at a given index.
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoMultiTextNode.OnItemWidthChanged(System.Single)">
            <summary>
            Determine how to change the width of all of items in the <see cref="P:Northwoods.GoWeb.GoMultiTextNode.ListGroup"/>
            when the <see cref="P:Northwoods.GoWeb.GoMultiTextNode.ItemWidth"/> changes.
            </summary>
            <param name="old">the former <see cref="P:Northwoods.GoWeb.GoMultiTextNode.ItemWidth"/> value</param>
            <remarks>
            This changes the <see cref="P:Northwoods.GoWeb.GoObject.Width"/> of each item to the new
            <see cref="P:Northwoods.GoWeb.GoMultiTextNode.ItemWidth"/> value, if the new width is positive.
            Furthermore, if the item is an instance of <see cref="T:Northwoods.GoWeb.GoText"/>, the
            <see cref="P:Northwoods.GoWeb.GoText.WrappingWidth"/> is set to the same new item width.
            A non-positive value does not change either <see cref="P:Northwoods.GoWeb.GoObject.Width"/> or
            <see cref="P:Northwoods.GoWeb.GoText.WrappingWidth"/>.
            You may wish to override this method in order to customize how the
            properties of the items are set when the item width is changed.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoMultiTextNode.FindName(Northwoods.GoWeb.GoObject)">
            <summary>
            The properties referring to parts of this node
            are also the names of those parts.
            </summary>
            <param name="child"></param>
            <returns></returns>
            <remarks>
            LeftPorts and RightPorts have generated names that are of the form:
            "Lnnn" or "Rnnn", where "nnn" is the index of that port.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoMultiTextNode.FindChild(System.String)">
            <summary>
            The properties referring to parts of this node
            are also the names of those parts.
            </summary>
            <param name="name"></param>
            <returns></returns>
            <remarks>
            LeftPorts and RightPorts have generated names that are of the form:
            "Lnnn" or "Rnnn", where "nnn" is the index of that port.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoMultiTextNode.GetLeftPort(System.Int32)">
            <summary>
            Return a port by its index position on the left side of this node.
            </summary>
            <param name="i">a zero-based, non-negative index</param>
            <returns>null if <paramref name="i"/> is greater than or equal to <see cref="P:Northwoods.GoWeb.GoMultiTextNode.ItemCount"/></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoMultiTextNode.GetRightPort(System.Int32)">
            <summary>
            Return a port by its index position on the right side of this node.
            </summary>
            <param name="i">a zero-based, non-negative index</param>
            <returns>null if <paramref name="i"/> is greater than or equal to <see cref="P:Northwoods.GoWeb.GoMultiTextNode.ItemCount"/></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoMultiTextNode.SetLeftPort(System.Int32,Northwoods.GoWeb.GoObject)">
            <summary>
            Replace the port at a particular index position on the
            left side of this node.
            </summary>
            <param name="i">a zero-based non-negative index</param>
            <param name="p"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoMultiTextNode.SetRightPort(System.Int32,Northwoods.GoWeb.GoObject)">
            <summary>
            Replace the port at a particular index position on the
            right side of this node.
            </summary>
            <param name="i">a zero-based non-negative index</param>
            <param name="p"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoMultiTextNode.Remove(Northwoods.GoWeb.GoObject)">
            <summary>
            When a port is removed, make sure we remove any reference to it.
            </summary>
            <param name="obj"></param>
            <remarks>
            Removing any child object, whether it be an "item" object or a "port" object,
            does not remove the whole item from the list.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoMultiTextNode.FindPortIndex(Northwoods.GoWeb.GoObject)">
            <summary>
            Given a "port" object, find the item index whose <see cref="M:Northwoods.GoWeb.GoMultiTextNode.GetLeftPort(System.Int32)"/>
            or <see cref="M:Northwoods.GoWeb.GoMultiTextNode.GetRightPort(System.Int32)"/> returns that object.
            </summary>
            <param name="p"></param>
            <returns>
            -1 if <paramref name="p"/> is null or is not found amongst the LeftPorts or the RightPorts.
            </returns>
            <remarks>
            This does not search the <see cref="P:Northwoods.GoWeb.GoMultiTextNode.ListGroup"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoMultiTextNode.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle this class's property changes for undo and redo
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.GoWeb.GoMultiTextNode.ItemCount">
            <summary>
            Gets the number of items in the list.
            </summary>
            <value>
            This is the same as <c>ListGroup.Count</c>.
            </value>
            <remarks>
            The <see cref="P:Northwoods.GoWeb.GoGroup.Count"/> property refers to the number of immediate
            child objects in this node, which includes the <see cref="P:Northwoods.GoWeb.GoMultiTextNode.ListGroup"/>
            and some ports, not the items in the <see cref="T:Northwoods.GoWeb.GoListGroup"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoMultiTextNode.TopPort">
            <summary>
            Gets or sets the object, normally a port, that is located at the middle
            top spot of the node.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoMultiTextNode.BottomPort">
            <summary>
            Gets or sets the object, normally a port, that is located at the middle
            bottom spot of the node.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoMultiTextNode.ItemWidth">
            <summary>
            Gets or sets the standard width for all items, and the wrapping width for all <see cref="T:Northwoods.GoWeb.GoText"/> items.
            </summary>
            <value>
            After changing the value of this property, the setter calls <see cref="M:Northwoods.GoWeb.GoMultiTextNode.OnItemWidthChanged(System.Single)"/>
            to modify the widths (and possibly other properties) of the child item objects.
            The default value is -1, which means that the <see cref="P:Northwoods.GoWeb.GoObject.Width"/> property is
            not set on any child object.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoMultiTextNode.ListGroup">
            <summary>
            Get the <see cref="T:Northwoods.GoWeb.GoListGroup"/> actually holding all of the items and painting
            its separator lines, borders, and background brush.
            </summary>
            <remarks>
            This <see cref="T:Northwoods.GoWeb.GoListGroup"/> must have an <see cref="P:Northwoods.GoWeb.GoListGroup.Orientation"/>
            that is <c>Vertical</c>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoMultiTextNode.Shadowed">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoMultiTextNode.ListGroup"/>'s <see cref="P:Northwoods.GoWeb.GoObject.Shadowed"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoMultiTextNode.Spacing">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoMultiTextNode.ListGroup"/>'s <see cref="P:Northwoods.GoWeb.GoListGroup.Spacing"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoMultiTextNode.Alignment">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoMultiTextNode.ListGroup"/>'s <see cref="P:Northwoods.GoWeb.GoListGroup.Alignment"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoMultiTextNode.LinePen">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoMultiTextNode.ListGroup"/>'s <see cref="P:Northwoods.GoWeb.GoListGroup.LinePen"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoMultiTextNode.BorderPen">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoMultiTextNode.ListGroup"/>'s <see cref="P:Northwoods.GoWeb.GoListGroup.BorderPen"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoMultiTextNode.Brush">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoMultiTextNode.ListGroup"/>'s <see cref="P:Northwoods.GoWeb.GoListGroup.Brush"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoMultiTextNode.Corner">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoMultiTextNode.ListGroup"/>'s <see cref="P:Northwoods.GoWeb.GoListGroup.Corner"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoMultiTextNode.TopLeftMargin">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoMultiTextNode.ListGroup"/>'s <see cref="P:Northwoods.GoWeb.GoListGroup.TopLeftMargin"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoMultiTextNode.BottomRightMargin">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoMultiTextNode.ListGroup"/>'s <see cref="P:Northwoods.GoWeb.GoListGroup.BottomRightMargin"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoMultiTextNode.FromEndSegmentLengthStep">
            <summary>
            Gets or sets the incremental distance at when the ports'
            <see cref="P:Northwoods.GoWeb.GoPort.EndSegmentLength"/> is extended
            to help reduce the amount of overlapping orthogonal links coming out of this node.
            </summary>
            <value>
            This defaults to 8.  Set this to zero to have
            <see cref="T:Northwoods.GoWeb.GoPort"/>.<see cref="M:Northwoods.GoWeb.GoPort.GetFromEndSegmentLength(Northwoods.GoWeb.IGoLink)"/> just
            return the value of <see cref="T:Northwoods.GoWeb.GoPort"/>.<see cref="P:Northwoods.GoWeb.GoPort.EndSegmentLength"/>
            for the "from" end of links.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoMultiTextNode.ToEndSegmentLengthStep">
            <summary>
            Gets or sets the incremental distance at when the ports'
            <see cref="P:Northwoods.GoWeb.GoPort.EndSegmentLength"/> is extended
            to help reduce the amount of overlapping orthogonal links going into this node.
            </summary>
            <value>
            This defaults to 4.  Set this to zero to have
            <see cref="T:Northwoods.GoWeb.GoPort"/>.<see cref="M:Northwoods.GoWeb.GoPort.GetToEndSegmentLength(Northwoods.GoWeb.IGoLink)"/> just
            return the value of <see cref="T:Northwoods.GoWeb.GoPort"/>.<see cref="P:Northwoods.GoWeb.GoPort.EndSegmentLength"/>
            for the "to" end of links.
            </value>
        </member>
        <member name="T:Northwoods.GoWeb.GoNodeLinkEnumerator">
            <summary>
            Iterate over the links (or a subset of the links) connected to this node.
            </summary>
            <remarks>
            Although this structure is public, it is rarely used explicitly.
            Instead you should use the <c>foreach</c> (or <c>For Each</c>) construct to
            iterate through the links connected to a port of a node.  In C#:
            <code>
            foreach (IGoLink link in aNode.DestinationLinks) {
              . . .
            }
            </code>
            In VB.NET:
            <code>
            Dim link As IGoLink
            For Each link in aNode.DestinationLinks
              . . .
            Next
            </code>
            <para>
            Remember that you must not modify the graph structure of ports and links and nodes connected to this node,
            by adding or removing any ports, links, or nodes, while you are iterating over them.
            This structure type does not support comparison for equality.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoNodeLinkEnumerator.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the IGoLinks connected to this node.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoNodeLinkEnumerator.MoveNext">
            <summary>
            Advance the enumerator to the next IGoLink.
            </summary>
            <returns>True if there is a next IGoLink; false if it has finished iterating over the collection.</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoNodeLinkEnumerator.Reset">
            <summary>
            Reset the enumerator to its original position.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoNodeLinkEnumerator.Current">
            <summary>
             Gets the current link in the collection of links connected to this node.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoNodeLinkEnumerator.Count">
            <summary>
            Get the number of links.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoNodeLinkEnumerator.First">
            <summary>
            Gets the first <see cref="T:Northwoods.GoWeb.IGoLink"/>, or null if there are no links connected to ports in this node.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoNodeLinkEnumerator.Last">
            <summary>
            Gets the last <see cref="T:Northwoods.GoWeb.IGoLink"/>, or null if there are no links connected to ports in this node.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoNodeNodeEnumerator">
            <summary>
            Iterate over the nodes (or a subset of the nodes) connected to this node.
            </summary>
            <remarks>
            Although this structure is public, it is rarely used explicitly.
            Instead you should use the <c>foreach</c> (or <c>For Each</c>) construct to
            iterate through the nodes connected to a node.  In C#:
            <code>
            foreach (IGoNode node in aNode.Destinations) {
              . . .
            }
            </code>
            In VB.NET:
            <code>
            Dim node As IGoNode
            For Each node in aNode.Destinations
              . . .
            Next
            </code>
            <para>
            Remember that you must not modify the graph structure of ports and links and nodes connected to this node,
            by adding or removing any ports, links, or nodes, while you are iterating over them.
            This structure type does not support comparison for equality.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoNodeNodeEnumerator.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the IGoNodes connected to this node.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoNodeNodeEnumerator.MoveNext">
            <summary>
            Advance the enumerator to the next IGoNode.
            </summary>
            <returns>True if there is a next IGoNode; false if it has finished iterating over the collection.</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoNodeNodeEnumerator.Reset">
            <summary>
            Reset the enumerator to its original position.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoNodeNodeEnumerator.Current">
            <summary>
             Gets the current node in the collection of connected nodes.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoNodeNodeEnumerator.Count">
            <summary>
            Get the number of nodes.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoNodeNodeEnumerator.First">
            <summary>
            Gets the first <see cref="T:Northwoods.GoWeb.IGoNode"/>, or null if there are no nodes connected to this node.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoNodeNodeEnumerator.Last">
            <summary>
            Gets the last <see cref="T:Northwoods.GoWeb.IGoNode"/>, or null if there are no nodes connected to this node.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoNodePortEnumerator">
            <summary>
            Iterate over the ports (or a subset of the ports) that are a part of this node.
            </summary>
            <remarks>
            Although this structure is public, it is rarely used explicitly.
            Instead you should use the <c>foreach</c> (or <c>For Each</c>) construct to
            iterate through the ports of a node.  In C#:
            <code>
            foreach (IGoPort port in aNode.Ports) {
              . . .
            }
            </code>
            In VB.NET:
            <code>
            Dim port As IGoPort
            For Each port in aNode.Ports
              . . .
            Next
            </code>
            <para>
            Remember that you must not modify the graph structure of ports and links and nodes connected to this node,
            by adding or removing any ports, links, or nodes, while you are iterating over them.
            This structure type does not support comparison for equality.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoNodePortEnumerator.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the IGoPorts that are part of this node.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoNodePortEnumerator.MoveNext">
            <summary>
            Advance the enumerator to the next IGoPort.
            </summary>
            <returns>True if there is a next IGoPort; false if it has finished iterating over the collection.</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoNodePortEnumerator.Reset">
            <summary>
            Reset the enumerator to its original position.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoNodePortEnumerator.Current">
            <summary>
             Gets the current port in the collection of ports that are part of this node.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoNodePortEnumerator.Count">
            <summary>
            Get the number of ports.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoNodePortEnumerator.First">
            <summary>
            Gets the first <see cref="T:Northwoods.GoWeb.IGoPort"/>, or null if there are no ports in this node.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoNodePortEnumerator.Last">
            <summary>
            Gets the last <see cref="T:Northwoods.GoWeb.IGoPort"/>, or null if there are no ports in this node.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoNodeIcon">
            <summary>
            A <see cref="T:Northwoods.GoWeb.GoImage"/> whose <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/> and resizing
            are constrained by its parent's implementation of <see cref="T:Northwoods.GoWeb.IGoNodeIconConstraint"/>.
            </summary>
            <remarks>
            This class also implements <see cref="T:Northwoods.GoWeb.IGoNodeIconConstraint"/> by providing
            settable properties <see cref="P:Northwoods.GoWeb.GoNodeIcon.MinimumIconSize"/> and <see cref="P:Northwoods.GoWeb.GoNodeIcon.MaximumIconSize"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoNodeIcon.ChangedMinimumIconSize">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoNodeIcon.MinimumIconSize"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoNodeIcon.ChangedMaximumIconSize">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoNodeIcon.MaximumIconSize"/> property.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoNodeIcon.#ctor">
            <summary>
            Create an unselectable <see cref="T:Northwoods.GoWeb.GoImage"/> whose size is
            constrained when you set the <see cref="P:Northwoods.GoWeb.GoNodeIcon.Constraint"/> property.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoNodeIcon.DoResize(Northwoods.GoWeb.GoView,System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,Northwoods.GoWeb.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Prevent user resizing of this image beyond the <see cref="P:Northwoods.GoWeb.GoNodeIcon.MinimumIconSize"/>
            and <see cref="P:Northwoods.GoWeb.GoNodeIcon.MaximumIconSize"/>.
            </summary>
            <param name="view"></param>
            <param name="origRect"></param>
            <param name="newPoint"></param>
            <param name="whichHandle"></param>
            <param name="evttype"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoNodeIcon.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle this class's property changes for undo and redo
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.GoWeb.GoNodeIcon.Constraint">
            <summary>
            Gets the object that implements the
            <see cref="P:Northwoods.GoWeb.IGoNodeIconConstraint.MinimumIconSize"/> and
            <see cref="P:Northwoods.GoWeb.IGoNodeIconConstraint.MaximumIconSize"/> methods.
            </summary>
            <remarks>
            This returns the <see cref="P:Northwoods.GoWeb.GoObject.Parent"/> if it implements
            <see cref="T:Northwoods.GoWeb.IGoNodeIconConstraint"/>; otherwise this returns itself.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoNodeIcon.MinimumIconSize">
            <summary>
            Gets or sets the minimum size for this image.
            </summary>
            <remarks>
            By default this imposes a minimum of 1x1 on the size.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoNodeIcon.MaximumIconSize">
            <summary>
            Gets or sets the maximum size for this image.
            </summary>
            <remarks>
            By default this imposes a maximum of 9999x9999 on the size.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoNodeIcon.Bounds">
            <summary>
            Force the size of this image to always be within the <see cref="P:Northwoods.GoWeb.GoNodeIcon.MinimumIconSize"/>
            and <see cref="P:Northwoods.GoWeb.GoNodeIcon.MaximumIconSize"/>.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoPortStyle">
            <summary>
            Specifies the appearance of the port.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPortStyle.None">
            <summary>
            The <see cref="T:Northwoods.GoWeb.GoPort"/> does not appear, although it may have visible
            links connected and may participate in linking operations.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPortStyle.Object">
            <summary>
            The <see cref="T:Northwoods.GoWeb.GoPort"/> appears as any <see cref="T:Northwoods.GoWeb.GoObject"/>, as
            provided by the <see cref="P:Northwoods.GoWeb.GoPort.PortObject"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPortStyle.Ellipse">
            <summary>
            The <see cref="T:Northwoods.GoWeb.GoPort"/> appears as an ellipse or circle.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPortStyle.Triangle">
            <summary>
            The <see cref="T:Northwoods.GoWeb.GoPort"/> appears as a triangle, forming an arrow
            in the direction of a link coming in at this port's <see cref="P:Northwoods.GoWeb.GoPort.ToSpot"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPortStyle.Rectangle">
            <summary>
            The <see cref="T:Northwoods.GoWeb.GoPort"/> appears as a rectangle or square.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPortStyle.Diamond">
            <summary>
            The <see cref="T:Northwoods.GoWeb.GoPort"/> appears as a diamond or rhombus.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPortStyle.Plus">
            <summary>
            The <see cref="T:Northwoods.GoWeb.GoPort"/> appears as a plus sign or "+".
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPortStyle.Times">
            <summary>
            The <see cref="T:Northwoods.GoWeb.GoPort"/> appears as a times sign or "x".
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPortStyle.PlusTimes">
            <summary>
            The <see cref="T:Northwoods.GoWeb.GoPort"/> appears as a combination of a plus sign and a times sign, like an asterisk or star.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPortStyle.TriangleTopLeft">
            <summary>
            The <see cref="T:Northwoods.GoWeb.GoPort"/> appears as a triangle with a point at the TopLeft.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPortStyle.TriangleTopRight">
            <summary>
            The <see cref="T:Northwoods.GoWeb.GoPort"/> appears as a triangle with a point at the TopRight.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPortStyle.TriangleBottomRight">
            <summary>
            The <see cref="T:Northwoods.GoWeb.GoPort"/> appears as a triangle with a point at the BottomRight.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPortStyle.TriangleBottomLeft">
            <summary>
            The <see cref="T:Northwoods.GoWeb.GoPort"/> appears as a triangle with a point at the BottomLeft.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPortStyle.TriangleMiddleTop">
            <summary>
            The <see cref="T:Northwoods.GoWeb.GoPort"/> appears as a triangle with a point at the MiddleTop.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPortStyle.TriangleMiddleRight">
            <summary>
            The <see cref="T:Northwoods.GoWeb.GoPort"/> appears as a triangle with a point at the MiddleRight.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPortStyle.TriangleMiddleBottom">
            <summary>
            The <see cref="T:Northwoods.GoWeb.GoPort"/> appears as a triangle with a point at the MiddleBottom.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPortStyle.TriangleMiddleLeft">
            <summary>
            The <see cref="T:Northwoods.GoWeb.GoPort"/> appears as a triangle with a point at the MiddleLeft.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoPortLinkEnumerator">
            <summary>
            Iterate over all the links connected to this port.
            </summary>
            <remarks>
            Although this structure is public, it is rarely used explicitly.
            Instead you should use the <c>foreach</c> (or <c>For Each</c>) construct to
            iterate through the links of a port.  In C#:
            <code>
            foreach (IGoLink link in aPort.Links) {
              . . .
            }
            </code>
            In VB.NET:
            <code>
            Dim link As IGoLink
            For Each link in aPort.Links
              . . .
            Next
            </code>
            <para>
            Remember that you must not modify the graph structure of links and nodes connected to this port,
            by adding or removing any links or nodes, while you are iterating over them.
            This structure type does not support comparison for equality.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoPortLinkEnumerator.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the IGoLinks connected to this port.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoPortLinkEnumerator.MoveNext">
            <summary>
            Advance the enumerator to the next IGoLink.
            </summary>
            <returns>True if there is a next IGoLink; false if it has finished iterating over the collection.</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoPortLinkEnumerator.Reset">
            <summary>
            Reset the enumerator to its original position.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoPortLinkEnumerator.Current">
            <summary>
             Gets the current link in the collection of link connected at this port.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoPortLinkEnumerator.First">
            <summary>
            Gets the first <see cref="T:Northwoods.GoWeb.IGoLink"/>, or null if there are no links connected to this port.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoPortLinkEnumerator.Last">
            <summary>
            Gets the last <see cref="T:Northwoods.GoWeb.IGoLink"/>, or null if there are no links connected to this port.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoPortFilteredLinkEnumerator">
            <summary>
            Iterate over a subset of the links connected to this port,
            those either coming into this port or those leaving this port.
            </summary>
            <remarks>
            Although this structure is public, it is rarely used explicitly.
            Instead you should use the <c>foreach</c> (or <c>For Each</c>) construct to
            iterate through the links of a port.  In C#:
            <code>
            foreach (IGoLink link in aPort.DestinationLinks) {
              . . .
            }
            </code>
            In VB.NET:
            <code>
            Dim link As IGoLink
            For Each link in aPort.DestinationLinks
              . . .
            Next
            </code>
            <para>
            Remember that you must not modify the graph structure of links and nodes connected to this port,
            by adding or removing any links or nodes, while you are iterating over them.
            This structure type does not support comparison for equality.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoPortFilteredLinkEnumerator.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the IGoLinks connected to this port.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoPortFilteredLinkEnumerator.MoveNext">
            <summary>
            Advance the enumerator to the next IGoLink.
            </summary>
            <returns>True if there is a next IGoLink; false if it has finished iterating over the collection.</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoPortFilteredLinkEnumerator.Reset">
            <summary>
            Reset the enumerator to its original position.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoPortFilteredLinkEnumerator.Current">
            <summary>
             Gets the current port in the collection of links connected at this port.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoPortFilteredLinkEnumerator.First">
            <summary>
            Gets the first <see cref="T:Northwoods.GoWeb.IGoLink"/>, or null if there are no links connected to this port.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoPortFilteredLinkEnumerator.Last">
            <summary>
            Gets the last <see cref="T:Northwoods.GoWeb.IGoLink"/>, or null if there are no links connected to this port.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoSheet">
            <summary>
            This class is an object that represents a sheet of paper, normally only used
            as a background <see cref="P:Northwoods.GoWeb.GoView.Sheet"/> in a <see cref="T:Northwoods.GoWeb.GoView"/>.
            </summary>
            <remarks>
            <para>
            A sheet also supports a <see cref="P:Northwoods.GoWeb.GoSheet.Grid"/> and an optional <see cref="P:Northwoods.GoWeb.GoSheet.BackgroundImage"/>
            that you can set.  It also can paint the margins to let the user know where the
            margins are.
            </para>
            <para>
            For WinForms, you will need to set the margins appropriately, given
            the current page settings for your application.
            Given a <c>PageSettings</c> object you can call <c>UpdateBounds</c>
            to adjust the sizes of the <see cref="P:Northwoods.GoWeb.GoSheet.Paper"/> and the margins.
            </para>
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoSheet.ChangedTopLeftMargin">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoSheet.TopLeftMargin"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoSheet.ChangedBottomRightMargin">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoSheet.BottomRightMargin"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoSheet.ChangedBackgroundImageSpot">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoSheet.BackgroundImageSpot"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoSheet.ChangedShowsMargins">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoSheet.ShowsMargins"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoSheet.ChangedMarginColor">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoSheet.MarginColor"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoSheet.ChangedPaper">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoSheet.Paper"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoSheet.ChangedBackgroundImage">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoSheet.BackgroundImage"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoSheet.ChangedGrid">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoSheet.Grid"/> property.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoSheet.#ctor">
            <summary>
            Constructs a sheet by calling <see cref="M:Northwoods.GoWeb.GoSheet.CreatePaper"/>,
            <see cref="M:Northwoods.GoWeb.GoSheet.CreateBackgroundImage"/>, and <see cref="M:Northwoods.GoWeb.GoSheet.CreateGrid"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoSheet.CreatePaper">
            <summary>
            Create the <see cref="T:Northwoods.GoWeb.GoRectangle"/> that acts as the sheet's <see cref="P:Northwoods.GoWeb.GoSheet.Paper"/>.
            </summary>
            <returns>a large white shadowed <see cref="T:Northwoods.GoWeb.GoGrid"/> that appears and acts as a simple rectangle</returns>
            <remarks>
            The default implementation of this method does:
            <code>
              protected virtual GoRectangle CreatePaper() {
               GoGrid grid = new GoGrid();
               grid.Selectable = false;
               grid.UnboundedSpots = GoObject.NoSpot;
               grid.Brush = Brushes.White;
               grid.Pen = Pens.Black;
               grid.Shadowed = true;
               grid.Style = GoViewGridStyle.None;
               return grid;
             }
            </code>
            By default this object does not appear or behave as a normal grid, but
            just as a simple rectangle.  The <see cref="P:Northwoods.GoWeb.GoSheet.Grid"/> property returns the
            grid that is normally manipulated to show any grid lines or to support snapping
            behavior.  However, this paper object is normally responsible for drawing any
            shadow that this sheet defines.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoSheet.CreateBackgroundImage">
            <summary>
            The default sheet has no background <see cref="T:Northwoods.GoWeb.GoImage"/>.
            </summary>
            <returns>This returns null</returns>
            <remarks>
            You can set the <see cref="P:Northwoods.GoWeb.GoSheet.BackgroundImage"/> to an
            initialized <see cref="T:Northwoods.GoWeb.GoImage"/> if you want to display
            an image, or you can override this method.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoSheet.CreateGrid">
            <summary>
            Create a <see cref="T:Northwoods.GoWeb.GoGrid"/> object.
            </summary>
            <returns>the grid that is the primary object in this group</returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
              protected virtual GoGrid CreateGrid() {
                GoGrid grid = new GoGrid();
                grid.Selectable = false;
                grid.CellSize = new SizeF(25, 25);
                grid.OriginRelative = false;
                grid.LineDashStyle = DashStyle.Custom;
                grid.MajorLineColor = Color.LightGray;
                grid.MajorLineFrequency = new Size(4, 4);
                grid.Style = GoViewGridStyle.None;
                return grid;
              }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.GoWeb.GoSheet.CopyChildren(Northwoods.GoWeb.GoGroup,Northwoods.GoWeb.GoCopyDictionary)">
            <summary>
            Update the internal reference fields when this object is copied.
            </summary>
            <param name="newgroup"></param>
            <param name="env"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoSheet.Remove(Northwoods.GoWeb.GoObject)">
            <summary>
            Update the internal reference fields when a child object is removed.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoSheet.FindName(Northwoods.GoWeb.GoObject)">
            <summary>
            The properties referring to parts of this node
            are also the names of those parts.
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoSheet.FindChild(System.String)">
            <summary>
            The properties referring to parts of this node
            are also the names of those parts.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoSheet.GetShadowBrush(Northwoods.GoWeb.GoView)">
            <summary>
            The sheet has a black shadow.
            </summary>
            <param name="view"></param>
            <returns></returns>
            <remarks>
            The shadow is not painted by this group but by the <see cref="P:Northwoods.GoWeb.GoSheet.Paper"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoSheet.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.GoWeb.GoView)">
            <summary>
            The paint bounds for a sheet depend on the paint bounds of the
            <see cref="T:Northwoods.GoWeb.GoGrid"/> child objects, which may be large and
            depend on the size of the view.
            </summary>
            <param name="rect"></param>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoSheet.LayoutChildren(Northwoods.GoWeb.GoObject)">
            <summary>
            This updates any internal structures needed to keep the marginal areas
            up-to-date with the <see cref="P:Northwoods.GoWeb.GoSheet.TopLeftMargin"/> and <see cref="P:Northwoods.GoWeb.GoSheet.BottomRightMargin"/>
            properties.
            </summary>
            <param name="childchanged"></param>
            <remarks>
            This does nothing if <see cref="P:Northwoods.GoWeb.GoObject.Initializing"/> is true.
            If there is a <see cref="P:Northwoods.GoWeb.GoSheet.BackgroundImage"/>, it is positioned relative to the <see cref="P:Northwoods.GoWeb.GoSheet.MarginBounds"/>
            according to the <see cref="P:Northwoods.GoWeb.GoSheet.BackgroundImageSpot"/>.
            If there is a <see cref="P:Northwoods.GoWeb.GoSheet.Grid"/>, it gets the same Bounds as the <see cref="P:Northwoods.GoWeb.GoSheet.Paper"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoSheet.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Implement undo and redo support.
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.GoWeb.GoSheet.Paper">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoWeb.GoRectangle"/> object that provides
            the sheet of paper appearance.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoSheet.BackgroundImage">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoWeb.GoImage"/> that decorates the paper.
            </summary>
            <value>Initially this is null</value>
            <remarks>
            If you set this property, you may want to initialize the <see cref="T:Northwoods.GoWeb.GoImage"/>
            with not only the Name/Index/Image, but also by setting <see cref="P:Northwoods.GoWeb.GoObject.AutoRescales"/> to false.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoSheet.BackgroundImageSpot"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoSheet.BackgroundImageSpot">
            <summary>
            Gets or sets the spot at which the <see cref="P:Northwoods.GoWeb.GoSheet.BackgroundImage"/> is
            located by <see cref="M:Northwoods.GoWeb.GoSheet.LayoutChildren(Northwoods.GoWeb.GoObject)"/>, relative to the <see cref="P:Northwoods.GoWeb.GoSheet.MarginBounds"/>.
            </summary>
            <value>The default value is <c>GoObject.Middle</c></value>
            <seealso cref="P:Northwoods.GoWeb.GoSheet.BackgroundImage"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoSheet.Grid">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoWeb.GoGrid"/> that provides both
            the sheet of paper appearance and the grid appearance and behavior.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoSheet.MarginBounds">
            <summary>
            Gets the bounding rectangle of the area inside the margins.
            </summary>
            <value>
            This just returns the <see cref="P:Northwoods.GoWeb.GoSheet.Paper"/>'s bounds after the margins are subtracted all around.
            </value>
            <seealso cref="P:Northwoods.GoWeb.GoSheet.TopLeftMargin"/>
            <seealso cref="P:Northwoods.GoWeb.GoSheet.BottomRightMargin"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoSheet.TopLeftMargin">
            <summary>
            Gets or sets the size of the margins along the left side and top.
            </summary>
            <value>
            The default value is 50x50.
            </value>
            <seealso cref="P:Northwoods.GoWeb.GoSheet.BottomRightMargin"/>
            <seealso cref="P:Northwoods.GoWeb.GoSheet.ShowsMargins"/>
            <seealso cref="P:Northwoods.GoWeb.GoSheet.MarginColor"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoSheet.BottomRightMargin">
            <summary>
            Gets or sets the size of the margins along the right side and bottom.
            </summary>
            <value>
            The default value is 50x50.
            </value>
            <seealso cref="P:Northwoods.GoWeb.GoSheet.TopLeftMargin"/>
            <seealso cref="P:Northwoods.GoWeb.GoSheet.ShowsMargins"/>
            <seealso cref="P:Northwoods.GoWeb.GoSheet.MarginColor"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoSheet.ShowsMargins">
            <summary>
            Gets or sets whether this sheet should shade the marginal area.
            </summary>
            <value>
            By default this is true.
            </value>
            <seealso cref="P:Northwoods.GoWeb.GoSheet.TopLeftMargin"/>
            <seealso cref="P:Northwoods.GoWeb.GoSheet.BottomRightMargin"/>
            <seealso cref="P:Northwoods.GoWeb.GoSheet.MarginColor"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoSheet.MarginColor">
            <summary>
            Gets or sets the color used to shade the margins when <see cref="P:Northwoods.GoWeb.GoSheet.ShowsMargins"/> is true.
            </summary>
            <value>
            This defaults to a mostly transparent LightGray.
            </value>
            <seealso cref="P:Northwoods.GoWeb.GoSheet.ShowsMargins"/>
            <seealso cref="P:Northwoods.GoWeb.GoSheet.TopLeftMargin"/>
            <seealso cref="P:Northwoods.GoWeb.GoSheet.BottomRightMargin"/>
        </member>
        <member name="T:Northwoods.GoWeb.GoSimpleNode">
            <summary>
            A node with a resizable icon, a label, and a port on each side.
            </summary>
            <remarks>
            <para>
            Call the <c>Initialize</c> method to construct the standard parts of this kind of node.
            The ports are normally on the left side and on the right side of the icon,
            and the <see cref="P:Northwoods.GoWeb.GoSimpleNode.Label"/> is on the bottom.
            If you set <see cref="P:Northwoods.GoWeb.GoSimpleNode.Orientation"/> to <c>Orientation.Vertical</c>, the
            <see cref="P:Northwoods.GoWeb.GoSimpleNode.InPort"/> will be on top and the <see cref="P:Northwoods.GoWeb.GoSimpleNode.OutPort"/> will be on the bottom,
            and the <see cref="P:Northwoods.GoWeb.GoSimpleNode.Label"/> will be on the right side.
            In order to remove either port you can set either <see cref="P:Northwoods.GoWeb.GoSimpleNode.InPort"/> or
            <see cref="P:Northwoods.GoWeb.GoSimpleNode.OutPort"/> to null, or you can call <see cref="M:Northwoods.GoWeb.GoObject.Remove"/> on the port.
            </para>
            <para>
            The <see cref="P:Northwoods.GoWeb.GoSimpleNode.Icon"/> is normally a <see cref="T:Northwoods.GoWeb.GoNodeIcon"/>,
            but could be any kind of <see cref="T:Northwoods.GoWeb.GoObject"/>.
            When it is a <see cref="T:Northwoods.GoWeb.GoImage"/>, the <see cref="P:Northwoods.GoWeb.GoSimpleNode.Image"/> property gives you
            convenient access to the icon's image properties.
            The image will normally be sized at <see cref="P:Northwoods.GoWeb.GoSimpleNode.MinimumIconSize"/>.
            </para>
            <para>
            When then first two arguments to <see cref="M:Northwoods.GoWeb.GoSimpleNode.Initialize(System.Resources.ResourceManager,System.String,System.String)"/>
            are null, the node is initialized to use a <see cref="T:Northwoods.GoWeb.GoDrawing"/> instead of a
            <see cref="T:Northwoods.GoWeb.GoImage"/>.  After initialization you can set the <see cref="P:Northwoods.GoWeb.GoSimpleNode.Figure"/>
            property if you want to display one of the standard <see cref="T:Northwoods.GoWeb.GoFigure"/>s.
            </para>
            <para>
            You can also set the <see cref="P:Northwoods.GoWeb.GoSimpleNode.Icon"/> to be any kind of <see cref="T:Northwoods.GoWeb.GoObject"/>,
            including other kinds of <see cref="T:Northwoods.GoWeb.GoShape"/>s.  The <see cref="P:Northwoods.GoWeb.GoSimpleNode.Shape"/> property
            provides convenient access to the icon when it is a <see cref="T:Northwoods.GoWeb.GoShape"/>, to allow
            you to initialize its brush and/or pen.  If your icon is a <see cref="T:Northwoods.GoWeb.GoGroup"/>,
            it might be convenient to override <see cref="P:Northwoods.GoWeb.GoSimpleNode.Shape"/> and perhaps <see cref="P:Northwoods.GoWeb.GoSimpleNode.Figure"/>
            to refer to the appropriate shape or drawing in the group.
            </para>
            <para>
            Remember that <see cref="T:Northwoods.GoWeb.GoPort"/> also inherits from <see cref="T:Northwoods.GoWeb.GoShape"/>,
            so you can easily set the brush and/or pen, as well as setting the port's
            <see cref="P:Northwoods.GoWeb.GoPort.Style"/>.
            </para>
            <para>
            Setting the <see cref="P:Northwoods.GoWeb.GoNode.Location"/>, <see cref="P:Northwoods.GoWeb.GoNode.Resizable"/>,
            <see cref="P:Northwoods.GoWeb.GoNode.Reshapable"/> and <see cref="P:Northwoods.GoWeb.GoNode.Shadowed"/>
            properties actually set the same properties on the
            <see cref="P:Northwoods.GoWeb.GoSimpleNode.SelectionObject"/>, which is the <see cref="P:Northwoods.GoWeb.GoSimpleNode.Icon"/>.
            </para>
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoSimpleNode.ChangedText">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoSimpleNode.Text"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoSimpleNode.ChangedIcon">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoSimpleNode.Icon"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoSimpleNode.ChangedLabel">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoSimpleNode.Label"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoSimpleNode.ChangedInPort">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoSimpleNode.InPort"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoSimpleNode.ChangedOutPort">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoSimpleNode.OutPort"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoSimpleNode.ChangedOrientation">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoSimpleNode.Orientation"/> property.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoSimpleNode.#ctor">
            <summary>
            Create an empty GoSimpleNode--call the
            <see cref="M:Northwoods.GoWeb.GoSimpleNode.Initialize(System.Resources.ResourceManager,System.String,System.String)"/> method(s)
            to create an icon, a label, and ports.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoSimpleNode.Initialize(System.Resources.ResourceManager,System.String,System.String)">
            <summary>
            Initialize an empty GoSimpleNode to have an icon, a label, and two ports.
            </summary>
            <param name="res">
            Provides the <c>ResourceManager</c> holding an <c>Image</c> resource named by
            <paramref name="iconname"/>.  If this parameter is null,
            <see cref="P:Northwoods.GoWeb.GoImage.DefaultResourceManager"/> is used instead.
            </param>
            <param name="iconname">
            <para>
            The name of the <c>Image</c> resource in the <c>ResourceManager</c>
            given by <paramref name="res"/>, or else a file name if no resource manager
            can be used (i.e., when both <paramref name="res"/> is null and
            <see cref="P:Northwoods.GoWeb.GoImage.DefaultResourceManager"/> is null).
            </para>
            <para>
            If the value is an empty string, the <c>Image</c> will be blank;
            you can set <see cref="P:Northwoods.GoWeb.GoSimpleNode.Image"/>.<see cref="P:Northwoods.GoWeb.GoImage.Name"/> to show or change
            the image displayed by the <see cref="T:Northwoods.GoWeb.GoImage"/> that is the <see cref="P:Northwoods.GoWeb.GoSimpleNode.Image"/>.
            </para>
            <para>
            If the value is null, the <see cref="P:Northwoods.GoWeb.GoSimpleNode.Icon"/> is not a <see cref="T:Northwoods.GoWeb.GoImage"/>
            but a <see cref="T:Northwoods.GoWeb.GoDrawing"/>; you can then set the <see cref="P:Northwoods.GoWeb.GoSimpleNode.Figure"/>
            to change the shape shown as the icon.
            </para>
            </param>
            <param name="name">
            The initial string value for the <see cref="P:Northwoods.GoWeb.GoSimpleNode.Label"/>.
            If this value is null, no label is created for this node.
            </param>
        </member>
        <member name="M:Northwoods.GoWeb.GoSimpleNode.CreateIcon(System.Resources.ResourceManager,System.String)">
            <summary>
            Create and initialize a <see cref="T:Northwoods.GoWeb.GoImage"/> or a <see cref="T:Northwoods.GoWeb.GoDrawing"/> to act as the node's icon.
            </summary>
            <param name="res"></param>
            <param name="iconname">
            a null value causes no <see cref="T:Northwoods.GoWeb.GoNodeIcon"/> to be allocated,
            but instead a <see cref="T:Northwoods.GoWeb.GoDrawing"/> initialized to look like a rectangle.
            </param>
            <returns>
            a <see cref="T:Northwoods.GoWeb.GoNodeIcon"/> that obeys this node's <see cref="P:Northwoods.GoWeb.GoSimpleNode.MinimumIconSize"/>
            and <see cref="P:Northwoods.GoWeb.GoSimpleNode.MaximumIconSize"/> properties
            </returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoObject CreateIcon(ResourceManager res, String iconname) {
               if (iconname != null) {
                 GoNodeIcon ni = new GoNodeIcon();
                 if (res != null)
                   ni.ResourceManager = res;
                 ni.Name = iconname;
                 ni.MinimumIconSize = new SizeF(20, 20);
                 ni.MaximumIconSize = new SizeF(100, 200);
                 ni.Size = ni.MinimumIconSize;
                 return ni;
               } else {
                 GoDrawing rect = new GoDrawing(GoFigure.Rectangle);
                 rect.Selectable = false;
                 rect.Resizable = false;
                 rect.Size = new SizeF(20, 20);
                 return rect;
               }
             }
            </code>
            In GoDiagram Pocket this just creates a <see cref="T:Northwoods.GoWeb.GoRectangle"/>
            when the <paramref name="iconname"/> is null.
            </example>
        </member>
        <member name="M:Northwoods.GoWeb.GoSimpleNode.CreateLabel(System.String)">
            <summary>
            Create and initialize a text label.
            </summary>
            <param name="name"></param>
            <returns>a non-editable, non-selectable, middle-aligned, non-rescaling <see cref="T:Northwoods.GoWeb.GoText"/> object</returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoText CreateLabel(String name) {
               GoText l = null;
               if (name != null) {
                 l = new GoText();
                 l.Text = name;
                 l.Selectable = false;
                 l.Alignment = Middle;
               }
               return l;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.GoWeb.GoSimpleNode.CreatePort(System.Boolean)">
            <summary>
            Create and initialize a port to be either on the left or on the right of this node.
            </summary>
            <param name="input"></param>
            <returns>a <see cref="T:Northwoods.GoWeb.GoPort"/></returns>
            <remarks>
            You may want to override this to return null when you don't want a port
            on a particular side.
            </remarks>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoPort CreatePort(bool input) {
               GoPort p = new GoPort();
               p.Size = new SizeF(6, 6);
               p.IsValidFrom = !input;
               p.IsValidTo = input;
               return p;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.GoWeb.GoSimpleNode.CopyChildren(Northwoods.GoWeb.GoGroup,Northwoods.GoWeb.GoCopyDictionary)">
            <summary>
            Make copies of the icon, label and two ports.
            </summary>
            <param name="newgroup"></param>
            <param name="env"></param>
            <remarks>
            Remember to override this to copy any objects you add to this class.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoSimpleNode.LayoutChildren(Northwoods.GoWeb.GoObject)">
            <summary>
            Position the label and two ports relative to the icon.
            </summary>
            <param name="childchanged"></param>
            <remarks>
            When <see cref="P:Northwoods.GoWeb.GoObject.Initializing"/> is true, this method does nothing.
            This method also does nothing if there is no <see cref="P:Northwoods.GoWeb.GoSimpleNode.Icon"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoSimpleNode.Remove(Northwoods.GoWeb.GoObject)">
            <summary>
            If any part is removed from this group,
            be sure to remove any references in local fields.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoSimpleNode.FindName(Northwoods.GoWeb.GoObject)">
            <summary>
            The properties referring to parts of this node
            are also the names of those parts.
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoSimpleNode.FindChild(System.String)">
            <summary>
            The properties referring to parts of this node
            are also the names of those parts.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoSimpleNode.OnOrientationChanged(Northwoods.GoWeb.Orientation)">
            <summary>
            Determine how to change the whole node when the <see cref="P:Northwoods.GoWeb.GoSimpleNode.Orientation"/> changes.
            </summary>
            <param name="old">the former <see cref="P:Northwoods.GoWeb.GoSimpleNode.Orientation"/> value</param>
            <remarks>
            A horizontal orientation has the ports positioned on the left and right of the
            node, with the source links coming into the <see cref="P:Northwoods.GoWeb.GoSimpleNode.InPort"/> on the left and
            the destination links going out from the <see cref="P:Northwoods.GoWeb.GoSimpleNode.OutPort"/> on the right.
            A vertical orientation has the <see cref="P:Northwoods.GoWeb.GoSimpleNode.InPort"/> on top, so links come in
            at the top, and the <see cref="P:Northwoods.GoWeb.GoSimpleNode.OutPort"/> is on the bottom of the node, so links
            go out from the bottom.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoSimpleNode.OnObservedChanged(Northwoods.GoWeb.GoObject,System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)">
            <summary>
            When the label changes its text string, change this node's <see cref="P:Northwoods.GoWeb.GoSimpleNode.Text"/> property too.
            </summary>
            <param name="observed"></param>
            <param name="subhint"></param>
            <param name="oldI"></param>
            <param name="oldVal"></param>
            <param name="oldRect"></param>
            <param name="newI"></param>
            <param name="newVal"></param>
            <param name="newRect"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoSimpleNode.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle this class's property changes for undo and redo
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.GoWeb.GoSimpleNode.MinimumIconSize">
            <summary>
            Assume the minimum node size is 20x20.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoSimpleNode.MaximumIconSize">
            <summary>
            Assume the maximum node size is 100x200.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoSimpleNode.Icon">
            <summary>
            Gets the <see cref="T:Northwoods.GoWeb.GoObject"/> acting as the icon for this node.
            </summary>
            <remarks>
            You might want to override the <see cref="M:Northwoods.GoWeb.GoSimpleNode.CreateIcon(System.Resources.ResourceManager,System.String)"/> method(s)
            if you want to create a different kind of <see cref="T:Northwoods.GoWeb.GoImage"/> when
            constructing this kind of node.
            The new shape will have its Center location,
            Selectable, Resizable, Reshapable, ResizesRealtime, and Shadowed
            properties copied from the old shape.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoSimpleNode.Image">
            <summary>
            Gets this node's icon, assuming it is a <see cref="T:Northwoods.GoWeb.GoImage"/>, as it usually is.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoSimpleNode.Shape">
            <summary>
            Gets this node's icon, assuming it is a <see cref="T:Northwoods.GoWeb.GoShape"/>,
            as it would be if you call <see cref="M:Northwoods.GoWeb.GoSimpleNode.Initialize(System.Resources.ResourceManager,System.String,System.String)"/>
            with a null String icon name.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoSimpleNode.Figure">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoWeb.GoDrawing"/>.<see cref="P:Northwoods.GoWeb.GoDrawing.Figure"/>
            of the <see cref="P:Northwoods.GoWeb.GoSimpleNode.Shape"/> if the icon is a <see cref="T:Northwoods.GoWeb.GoDrawing"/>.
            [Not in GoDiagram Pocket]
            </summary>
            <value>
            This returns <see cref="T:Northwoods.GoWeb.GoFigure"/>.<see cref="F:Northwoods.GoWeb.GoFigure.None"/>
            in the typical case where the <see cref="P:Northwoods.GoWeb.GoSimpleNode.Icon"/> is a <see cref="T:Northwoods.GoWeb.GoImage"/>.
            Setting this property has no effect if the <see cref="P:Northwoods.GoWeb.GoSimpleNode.Shape"/> is not a <see cref="T:Northwoods.GoWeb.GoDrawing"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoSimpleNode.Text">
            <summary>
            When this node's <see cref="P:Northwoods.GoWeb.GoSimpleNode.Text"/> string changes,
            be sure to update the label's text.
            </summary>
            <remarks>
            This has a Text string that is normally the same as the Label's text string,
            but the Label might not exist or might show a different string.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoSimpleNode.Label">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoWeb.GoText"/> label.
            </summary>
            <remarks>
            You might want to override the <see cref="M:Northwoods.GoWeb.GoSimpleNode.CreateLabel(System.String)"/> method
            if you want to create a different kind of <see cref="T:Northwoods.GoWeb.GoText"/> when
            constructing this kind of node.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoSimpleNode.InPort">
            <summary>
            Gets or sets the port on the left side of this node, normally acting as the "input".
            </summary>
            <remarks>
            You might want to override the <see cref="M:Northwoods.GoWeb.GoSimpleNode.CreatePort(System.Boolean)"/> method
            if you want to create a different kind of <see cref="T:Northwoods.GoWeb.GoPort"/> when
            constructing this kind of node.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoSimpleNode.OutPort">
            <summary>
            Gets the port on the right side of this node, normally acting as the "output".
            </summary>
            <remarks>
            You might want to override the <see cref="M:Northwoods.GoWeb.GoSimpleNode.CreatePort(System.Boolean)"/> method
            if you want to create a different kind of <see cref="T:Northwoods.GoWeb.GoPort"/> when
            constructing this kind of node.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoSimpleNode.Orientation">
            <summary>
            Gets or sets the general orientation of the node
            </summary>
            <value>
            This defaults to <c>Orientation.Horizontal</c>
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoSimpleNode.SelectionObject">
            <summary>
            The selection object, what the user sees as being selected and what the user
            actually resizes, is the icon.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoSubGraphBase">
            <summary>
            Node classes that expect to hold nodes and links should inherit from this class.
            </summary>
            <remarks>
            This base class for <see cref="T:Northwoods.GoWeb.GoSubGraph"/> does nothing but
            support graph traversal and the reparenting of links.
            Unlike <see cref="T:Northwoods.GoWeb.GoSubGraph"/>, it does not support collapse/expand
            (<see cref="T:Northwoods.GoWeb.IGoCollapsible"/>), a Label, a Port, or a drawn border with margins.
            Instead, if you want to implement your own kinds of subgraphs, this may provide
            a handy base class without the constraints and assumptions that <see cref="T:Northwoods.GoWeb.GoSubGraph"/>
            was designed for.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraphBase.#ctor">
            <summary>
            Create an empty node that can hold other nodes and links.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraphBase.FindParentSubGraph(Northwoods.GoWeb.GoObject)">
            <summary>
            This is a static/shared method that is convenient for finding if an object
            is part of a <see cref="T:Northwoods.GoWeb.GoSubGraphBase"/>.
            </summary>
            <param name="obj"></param>
            <returns>the <see cref="T:Northwoods.GoWeb.GoSubGraphBase"/> that <paramref name="obj"/> is part of,
            or null if it is not a child of a subgraph</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraphBase.ReparentToCommonSubGraph(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject,System.Boolean,Northwoods.GoWeb.GoLayer)">
            <summary>
            Change the <see cref="P:Northwoods.GoWeb.GoObject.Parent"/> of an object to be the common subgraph that
            contains two given objects, or if there is no such subgraph, add the object to the given layer.
            </summary>
            <param name="obj">the <see cref="T:Northwoods.GoWeb.GoObject"/> to reparent</param>
            <param name="child1">an object that may belong to a <see cref="T:Northwoods.GoWeb.GoSubGraphBase"/></param>
            <param name="child2">another object that may belong to a <see cref="T:Northwoods.GoWeb.GoSubGraphBase"/></param>
            <param name="behind">whether to add the <paramref name="obj"/> at the beginning of the list
            of the subgraph's children (thus behind all other subgraph children), or at the end of the list
            (thus appearing in front of all the other subgraph children)</param>
            <param name="layer">
            the <see cref="T:Northwoods.GoWeb.GoLayer"/> to which the <paramref name="obj"/> should be added,
            if there is no common parent <see cref="T:Northwoods.GoWeb.GoSubGraphBase"/> for <paramref name="child1"/> and
            <paramref name="child2"/>
            </param>
            <remarks>
            All of the arguments to this method should be non-null.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraphBase.ReparentAllLinksToSubGraphs(Northwoods.GoWeb.IGoCollection,System.Boolean,Northwoods.GoWeb.GoLayer)">
            <summary>
            Make sure each link, either directly in the given collection, or connected to the nodes in
            the given collection, belong to the appropriate <see cref="T:Northwoods.GoWeb.GoSubGraphBase"/>.
            </summary>
            <param name="coll"></param>
            <param name="behind">whether to add the <paramref name="obj"/> at the beginning of the list
            of the subgraph's children (thus behind all other subgraph children), or at the end of the list
            (thus appearing in front of all the other subgraph children)</param>
            <param name="layer">the <see cref="T:Northwoods.GoWeb.GoLayer"/> for links whose ports do not both belong to a <see cref="T:Northwoods.GoWeb.GoSubGraphBase"/></param>
            <remarks>
            This calls <see cref="M:Northwoods.GoWeb.GoSubGraphBase.ReparentToCommonSubGraph(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject,System.Boolean,Northwoods.GoWeb.GoLayer)"/> for each <see cref="T:Northwoods.GoWeb.IGoLink"/> in the
            <paramref name="coll"/> collection, or for each <see cref="T:Northwoods.GoWeb.IGoLink"/> connected to each <see cref="T:Northwoods.GoWeb.IGoNode"/>
            in the <paramref name="coll"/> collection.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraphBase.PickObjects(System.Drawing.PointF,System.Boolean,Northwoods.GoWeb.IGoCollection,System.Int32)">
            <summary>
            Unlike the standard behavior provided by <see cref="T:Northwoods.GoWeb.GoGroup"/>'s <see cref="M:Northwoods.GoWeb.GoGroup.PickObjects(System.Drawing.PointF,System.Boolean,Northwoods.GoWeb.IGoCollection,System.Int32)"/>,
            subgraphs allow the picking of more than one child, if they overlap each other at the given point.
            </summary>
            <param name="p"></param>
            <param name="selectableOnly"></param>
            <param name="coll"></param>
            <param name="max"></param>
            <returns></returns>
            <remarks>
            If <see cref="M:Northwoods.GoWeb.GoObject.CanView"/> is false for this group, no children are added to the collection.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoSubGraphBase.ExternalSources">
            <summary>
            Gets an enumerator over all of the nodes that have links coming into this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all nodes that have ports that have any
            destination links coming into any port of this node.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.IGoNode.Sources"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoSubGraphBase.ExternalDestinations">
            <summary>
            Gets an enumerator over all of the nodes that have links going out of this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all nodes that have ports that have any
            source links going out of any port of this node.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.IGoNode.Destinations"/>
            <seealso cref="P:Northwoods.GoWeb.IGoNode.Nodes"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoSubGraphBase.ExternalNodes">
            <summary>
            Gets an enumerator over all of the nodes that are connected to this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all nodes that have ports that are
            connected in either direction to any port of this node.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.IGoNode.Sources"/>
            <seealso cref="P:Northwoods.GoWeb.IGoNode.Destinations"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoSubGraphBase.ExternalSourceLinks">
            <summary>
            Gets an enumerator over all of the links coming into this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all links that come into
            any port of this node.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.IGoNode.SourceLinks"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoSubGraphBase.ExternalDestinationLinks">
            <summary>
            Gets an enumerator over all of the links going out of this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all links that go out of
            any port of this node.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.IGoNode.DestinationLinks"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoSubGraphBase.ExternalLinks">
            <summary>
            Gets an enumerator over all of the links connected to this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all links that come into
            or go out of any port of this node.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.IGoNode.SourceLinks"/>
            <seealso cref="P:Northwoods.GoWeb.IGoNode.DestinationLinks"/>
        </member>
        <member name="T:Northwoods.GoWeb.GoSubGraphState">
            <summary>
            This enumeration represents the different states of a <see cref="T:Northwoods.GoWeb.GoSubGraph"/>.
            </summary>
            <remarks>
            The state of a subgraph is available through its <see cref="P:Northwoods.GoWeb.GoSubGraph.State"/>
            property, or via the <see cref="P:Northwoods.GoWeb.GoSubGraph.IsExpanded"/> property.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoSubGraphState.Expanded">
            <summary>
            The normal state where the subgraph children are visible.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoSubGraphState.Collapsed">
            <summary>
            The state where the subgraph children are not visible and have been repositioned
            on top of each other near the subgraph handle.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoSubGraphState.Expanding">
            <summary>
            A temporary state during a call to <see cref="M:Northwoods.GoWeb.GoSubGraph.Expand"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoSubGraphState.Collapsing">
            <summary>
            A temporary state during a call to <see cref="M:Northwoods.GoWeb.GoSubGraph.Collapse"/>.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoSubGraph">
            <summary>
            A GoSubGraph is a <see cref="T:Northwoods.GoWeb.GoNode"/> that supports having a graph inside of it
            that the user can edit, and that the user can collapse and expand.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.IGoCollapsible">
            <summary>
            This interface should be implemented by all groups that want to use
            a <see cref="T:Northwoods.GoWeb.GoCollapsibleHandle"/> as the object that users click on
            to call <see cref="M:Northwoods.GoWeb.IGoCollapsible.Collapse"/> or <see cref="M:Northwoods.GoWeb.IGoCollapsible.Expand"/>.
            </summary>
            <remarks>
            One such class is <see cref="T:Northwoods.GoWeb.GoSubGraph"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.IGoCollapsible.Collapse">
            <summary>
            Calling this method will change this object so that it is
            smaller and/or simpler in appearance and behavior.
            </summary>
            <remarks>Afterwards, <see cref="P:Northwoods.GoWeb.IGoCollapsible.IsExpanded"/> should be false.</remarks>
        </member>
        <member name="M:Northwoods.GoWeb.IGoCollapsible.Expand">
            <summary>
            Calling this method will change this object so that it displays
            more details and/or objects.
            </summary>
            <remarks>Afterwards, <see cref="P:Northwoods.GoWeb.IGoCollapsible.IsExpanded"/> should be true.</remarks>
        </member>
        <member name="P:Northwoods.GoWeb.IGoCollapsible.Collapsible">
            <summary>
            Gets or sets whether users may click on a handle to call
            <see cref="M:Northwoods.GoWeb.IGoCollapsible.Collapse"/> or <see cref="M:Northwoods.GoWeb.IGoCollapsible.Expand"/>.
            </summary>
            <value>
            When this value is false, a click does not collapse or expand this object.
            But you can always call <see cref="M:Northwoods.GoWeb.IGoCollapsible.Collapse"/> or <see cref="M:Northwoods.GoWeb.IGoCollapsible.Expand"/>
            programmatically.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.IGoCollapsible.IsExpanded">
            <summary>
            Gets whether this object has been expanded or not.
            </summary>
            <value>
            The initial value depends on the particular class.
            </value>
        </member>
        <member name="F:Northwoods.GoWeb.GoSubGraph.ChangedLabel">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoSubGraph.Label"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoSubGraph.ChangedCollapsible">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoSubGraph.Collapsible"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoSubGraph.ChangedBackgroundColor">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoSubGraph.BackgroundColor"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoSubGraph.ChangedOpacity">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoSubGraph.Opacity"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoSubGraph.ChangedLabelSpot">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoSubGraph.LabelSpot"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoSubGraph.ChangedTopLeftMargin">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoSubGraph.TopLeftMargin"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoSubGraph.ChangedBorderPen">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoSubGraph.BorderPen"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoSubGraph.ChangedCorner">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoSubGraph.Corner"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoSubGraph.ChangedPort">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoSubGraph.Port"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoSubGraph.ChangedBottomRightMargin">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoSubGraph.BottomRightMargin"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoSubGraph.ChangedCollapsedTopLeftMargin">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoSubGraph.CollapsedTopLeftMargin"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoSubGraph.ChangedCollapsedBottomRightMargin">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoSubGraph.CollapsedBottomRightMargin"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoSubGraph.ChangedCollapsedCorner">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoSubGraph.CollapsedCorner"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoSubGraph.ChangedCollapsedLabelSpot">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoSubGraph.CollapsedLabelSpot"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoSubGraph.ChangedCollapsedObject">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoSubGraph.CollapsedObject"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoSubGraph.ChangedState">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoSubGraph.State"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoSubGraph.ChangedSavedBounds">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoSubGraph.SavedBounds"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoSubGraph.ChangedSavedPaths">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoSubGraph.SavedPaths"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoSubGraph.ChangedWasExpanded">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoSubGraph.WasExpanded"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoSubGraph.ChangedExpandedResizable">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoSubGraph.ExpandedResizable"/> property.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.#ctor">
            <summary>
            Create an empty subgraph, with an empty label.
            </summary>
            <remarks>
            This calls <see cref="M:Northwoods.GoWeb.GoSubGraph.CreateHandle"/>, <see cref="M:Northwoods.GoWeb.GoSubGraph.CreateCollapsedObject"/>,
            <see cref="M:Northwoods.GoWeb.GoSubGraph.CreateLabel"/>, and <see cref="M:Northwoods.GoWeb.GoSubGraph.CreatePort"/> to get initial values
            for <see cref="P:Northwoods.GoWeb.GoSubGraph.Handle"/>, <see cref="P:Northwoods.GoWeb.GoSubGraph.CollapsedObject"/>, <see cref="P:Northwoods.GoWeb.GoSubGraph.Label"/>,
            and <see cref="P:Northwoods.GoWeb.GoSubGraph.Port"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.CreateLabel">
            <summary>
            This creates the initial text label--an editable, bold, single-line
            <see cref="T:Northwoods.GoWeb.GoText"/> that wraps.
            </summary>
            <returns></returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoText CreateLabel() {
               GoText t = new GoText();
               t.Selectable = false;
               t.Alignment = MiddleBottom;
               t.Wrapping = true;
               t.Bold = true;
               t.Editable = true;
               return t;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.CreateHandle">
            <summary>
            This method is called to create the "handle" representing the whole subgraph
            that the user can select to drag or click to collapse or expand the subgraph.
            </summary>
            <returns>a <see cref="T:Northwoods.GoWeb.GoSubGraphHandle"/></returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoSubGraphHandle CreateHandle() {
               GoSubGraphHandle h = new GoSubGraphHandle();
               return h;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.CreatePort">
            <summary>
            This method is called to create a port that represents the subgraph as a whole.
            </summary>
            <returns>By default this returns null--the subgraph does not have a port</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.CreateCollapsedObject">
            <summary>
            This method is called to create an object that is displayed when the node is collapsed.
            </summary>
            <returns>By default this returns null--the subgraph has no such object</returns>
            <remarks>
            It looks best when all the child nodes are the same size as the collapsed object.
            If your child nodes are different sizes, the collapsed object should be about the
            size of the largest one.
            If the subgraph starts in the expanded state, you should probably make sure that
            the <see cref="P:Northwoods.GoWeb.GoObject.Visible"/> and <see cref="P:Northwoods.GoWeb.GoObject.Printable"/> properties
            are set to false.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoSubGraph.CollapsedObject"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.CopyChildren(Northwoods.GoWeb.GoGroup,Northwoods.GoWeb.GoCopyDictionary)">
            <summary>
            This override is needed to make sure the expanded position information
            is copied correctly when this subgraph is collapsed at the time of the copy.
            </summary>
            <param name="newgroup"></param>
            <param name="env"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.Add(Northwoods.GoWeb.GoObject)">
            <summary>
            This override of <see cref="M:Northwoods.GoWeb.GoGroup.Add(Northwoods.GoWeb.GoObject)"/> makes sure the <see cref="P:Northwoods.GoWeb.GoSubGraph.Handle"/>
            stays on top.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.Remove(Northwoods.GoWeb.GoObject)">
            <summary>
            If any part is removed from this group,
            be sure to remove any references in local fields.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.FindName(Northwoods.GoWeb.GoObject)">
            <summary>
            The properties referring to parts of this node
            are also the names of those parts.
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.FindChild(System.String)">
            <summary>
            The properties referring to parts of this node
            are also the names of those parts.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)">
            <summary>
            The background of the group is displayed as a rounded rectangle with a
            <see cref="P:Northwoods.GoWeb.GoSubGraph.BackgroundColor"/> and an <see cref="P:Northwoods.GoWeb.GoSubGraph.Opacity"/>,
            to make it easier to tell which nodes are part of which subgraph.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <remarks>
            This method calls <see cref="M:Northwoods.GoWeb.GoSubGraph.PaintDecoration(System.Drawing.Graphics,Northwoods.GoWeb.GoView)"/> in order to draw the rounded
            rectangle, but only if <see cref="M:Northwoods.GoWeb.GoSubGraph.PaintsDecoration(Northwoods.GoWeb.GoView)"/> returns true.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.PaintsDecoration(Northwoods.GoWeb.GoView)">
            <summary>
            Decide whether <see cref="M:Northwoods.GoWeb.GoSubGraph.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)"/> should call <see cref="M:Northwoods.GoWeb.GoSubGraph.PaintDecoration(System.Drawing.Graphics,Northwoods.GoWeb.GoView)"/>.
            </summary>
            <param name="view"></param>
            <returns>
            true if there is no <see cref="P:Northwoods.GoWeb.GoSubGraph.CollapsedObject"/>,
            or if the <see cref="P:Northwoods.GoWeb.GoSubGraph.CollapsedObject"/> is not visible
            (i.e. <see cref="M:Northwoods.GoWeb.GoObject.CanView"/> is false,
            or if <see cref="M:Northwoods.GoWeb.GoObject.CanPrint"/> is false when the view <see cref="P:Northwoods.GoWeb.GoView.IsPrinting"/>)
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.PaintDecoration(System.Drawing.Graphics,Northwoods.GoWeb.GoView)">
            <summary>
            Paint a rounded rectangle using the current <see cref="P:Northwoods.GoWeb.GoSubGraph.BackgroundColor"/>,
            <see cref="P:Northwoods.GoWeb.GoSubGraph.Opacity"/>, <see cref="P:Northwoods.GoWeb.GoSubGraph.BorderPen"/> and <see cref="P:Northwoods.GoWeb.GoSubGraph.Corner"/>
            (or <see cref="P:Northwoods.GoWeb.GoSubGraph.CollapsedCorner"/>).
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <remarks>
            When the <see cref="P:Northwoods.GoWeb.GoSubGraph.Opacity"/> is zero, the background color is not painted at all.
            This calls the <see cref="M:Northwoods.GoWeb.GoSubGraph.ComputeBorder"/> method to determine the
            size and position of the border and background to be painted.
            The <see cref="P:Northwoods.GoWeb.GoSubGraph.BorderPen"/> is drawn just inside the border bounds.
            This is called by <see cref="M:Northwoods.GoWeb.GoSubGraph.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)"/> before painting all of the child objects,
            when there is no <see cref="P:Northwoods.GoWeb.GoSubGraph.CollapsedObject"/> shown.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.GoWeb.GoView)">
            <summary>
            Account for the margins, and any shadow.
            </summary>
            <param name="rect"></param>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.ComputeBounds">
            <summary>
            Unlike a regular group, the bounding rectangle is computed by ignoring all
            children that are not Visible.
            </summary>
            <returns>the union of all of the visible children and the result of <see cref="M:Northwoods.GoWeb.GoSubGraph.ComputeBorder"/></returns>
            <remarks>
            The Bounds should include the bordered area, as returned by <see cref="M:Northwoods.GoWeb.GoSubGraph.ComputeBorder"/>,
            plus any other visible objects that may happen to extend beyond that bordered area.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.ComputeBorder">
            <summary>
            The border goes around the rectangle returned by <see cref="M:Northwoods.GoWeb.GoSubGraph.ComputeInsideMargins(Northwoods.GoWeb.GoObject)"/>
            augmented by margins all around.
            </summary>
            <returns>The result of calling <see cref="M:Northwoods.GoWeb.GoSubGraph.ComputeInsideMargins(Northwoods.GoWeb.GoObject)"/> and
            adding the margins, <see cref="P:Northwoods.GoWeb.GoSubGraph.TopLeftMargin"/> and <see cref="P:Northwoods.GoWeb.GoSubGraph.BottomRightMargin"/>
            if <see cref="P:Northwoods.GoWeb.GoSubGraph.IsExpanded"/>, or <see cref="P:Northwoods.GoWeb.GoSubGraph.CollapsedTopLeftMargin"/> and
            <see cref="P:Northwoods.GoWeb.GoSubGraph.CollapsedBottomRightMargin"/> if collapsed.</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.ComputeInsideMargins(Northwoods.GoWeb.GoObject)">
            <summary>
            Determine the area occupied by the subgraph's child nodes, excluding
            any margins.
            </summary>
            <param name="ignore">
            a child object to ignore, in addition to children skipped
            because <see cref="M:Northwoods.GoWeb.GoSubGraph.ComputeInsideMarginsSkip(Northwoods.GoWeb.GoObject)"/> returned true
            </param>
            <returns>
            the region that is the inside of the subgraph,
            excluding the margins and any objects skipped by <see cref="M:Northwoods.GoWeb.GoSubGraph.ComputeInsideMarginsSkip(Northwoods.GoWeb.GoObject)"/>
            </returns>
            <remarks>
            <para>
            If all child objects are skipped, as when there are no nodes
            in the subgraph, this will try to provide a reasonable value
            for the area inside the margins, by using the <see cref="P:Northwoods.GoWeb.GoSubGraph.CollapsedObject"/>
            if any.  Otherwise the return value may well have a <c>Width</c>
            and <c>Height</c> of zero.
            </para>
            <para>
            This is called by <see cref="M:Northwoods.GoWeb.GoSubGraph.ComputeBorder"/> with a null argument.
            <see cref="M:Northwoods.GoWeb.GoSubGraph.LayoutCollapsedObject"/> calls this method passing the
            <see cref="P:Northwoods.GoWeb.GoSubGraph.CollapsedObject"/>, and <see cref="M:Northwoods.GoWeb.GoSubGraph.LayoutLabel"/> calls
            this method passing the <see cref="P:Northwoods.GoWeb.GoSubGraph.Label"/>, so that those layout
            methods can determine the area without the collapsed-object and
            label, respectively, affecting the calculations.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.OnBoundsChanged(System.Drawing.RectangleF)">
            <summary>
            When collapsed, update saved bounds for expand when empty.
            </summary>
            <param name="old"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.ComputeInsideMarginsSkip(Northwoods.GoWeb.GoObject)">
            <summary>
            This method is called by <see cref="M:Northwoods.GoWeb.GoSubGraph.ComputeInsideMargins(Northwoods.GoWeb.GoObject)"/> to
            see if a given child of this group should be ignored.
            </summary>
            <param name="child"></param>
            <returns>
            true for special objects whose position
            depends on the bounds of all the other children or for those
            objects that should not affect the size of the subgraph.
            </returns>
            <remarks>
            <para>
            Child objects such as the <see cref="P:Northwoods.GoWeb.GoSubGraph.Handle"/>, <see cref="P:Northwoods.GoWeb.GoSubGraph.Port"/>,
            an invisible <see cref="P:Northwoods.GoWeb.GoSubGraph.Label"/> or <see cref="P:Northwoods.GoWeb.GoSubGraph.CollapsedObject"/>
            and invisible links or internal links connected to this
            subgraph's <see cref="P:Northwoods.GoWeb.GoSubGraph.Port"/> should not be included in
            the computation of the <see cref="M:Northwoods.GoWeb.GoSubGraph.ComputeInsideMargins(Northwoods.GoWeb.GoObject)"/> method,
            because they may be outside of the inside area where the child
            nodes are.
            Any override of this method to return true for additional
            objects may also override one of the <c>Layout...</c> methods
            to make sure those objects are positioned in the desired manner.
            </para>
            <para>
            Originally this method was called from <see cref="M:Northwoods.GoWeb.GoSubGraph.ComputeBounds"/>,
            but we no longer tie the Bounds with the bordered area.  The latter
            is now governed by <see cref="M:Northwoods.GoWeb.GoSubGraph.ComputeBorder"/>, which calls
            <see cref="M:Northwoods.GoWeb.GoSubGraph.ComputeInsideMargins(Northwoods.GoWeb.GoObject)"/>, which calls this method to
            decide which objects are really part of the subgraph and thus should
            be inside the border.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.AddSelectionHandles(Northwoods.GoWeb.GoSelection,Northwoods.GoWeb.GoObject)">
            <summary>
            Resize selection handles go around the border, not along the Bounds.
            </summary>
            <param name="sel"></param>
            <param name="selectedObj"></param>
            <remarks>
            The resize handles are placed around the rectangle returned by
            <see cref="M:Northwoods.GoWeb.GoSubGraph.ComputeBorder"/>.  The <see cref="M:Northwoods.GoWeb.GoObject.CanReshape"/>
            predicate is ignored at the present time--it is assumed to be true.
            If this subgraph is not resizable, a bounding handle will go around the
            whole subgraph, not just the bordered area.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.DoResize(Northwoods.GoWeb.GoView,System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,Northwoods.GoWeb.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Handle resizing by changing the margins instead of resizing the children.
            </summary>
            <param name="view"></param>
            <param name="origRect">ignored--this remembers the initial value of <see cref="M:Northwoods.GoWeb.GoSubGraph.ComputeBorder"/></param>
            <param name="newPoint"></param>
            <param name="whichHandle"></param>
            <param name="evttype"></param>
            <param name="min">ignored--limited by <see cref="M:Northwoods.GoWeb.GoSubGraph.ComputeInsideMargins(Northwoods.GoWeb.GoObject)"/></param>
            <param name="max"></param>
            <remarks>
            This currently ignores the <see cref="P:Northwoods.GoWeb.GoObject.Reshapable"/> property, which is assumed to be true.
            Although collapsed nodes are not normally meant to be resized, when this node is collapsed, this method
            will update the <see cref="P:Northwoods.GoWeb.GoSubGraph.CollapsedTopLeftMargin"/> and the <see cref="P:Northwoods.GoWeb.GoSubGraph.CollapsedBottomRightMargin"/>
            properties instead of the <see cref="P:Northwoods.GoWeb.GoSubGraph.TopLeftMargin"/> and the <see cref="P:Northwoods.GoWeb.GoSubGraph.BottomRightMargin"/>
            properties.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.LayoutChildren(Northwoods.GoWeb.GoObject)">
            <summary>
            This method does not move any of the children except possibly the
            <see cref="P:Northwoods.GoWeb.GoSubGraph.CollapsedObject"/>, the <see cref="P:Northwoods.GoWeb.GoSubGraph.Label"/>, the <see cref="P:Northwoods.GoWeb.GoSubGraph.Handle"/>,
            and the <see cref="P:Northwoods.GoWeb.GoSubGraph.Port"/>.
            </summary>
            <param name="childchanged"></param>
            <remarks>
            In other words, this method does not move any of the child nodes or
            links of this subgraph--just the known auxiliary objects.
            This calls <see cref="M:Northwoods.GoWeb.GoSubGraph.LayoutCollapsedObject"/>, <see cref="M:Northwoods.GoWeb.GoSubGraph.LayoutLabel"/>,
            <see cref="M:Northwoods.GoWeb.GoSubGraph.LayoutHandle"/>, and <see cref="M:Northwoods.GoWeb.GoSubGraph.LayoutPort"/>, in that order.
            This method does nothing if <see cref="P:Northwoods.GoWeb.GoObject.Initializing"/> is true,
            nor if the <see cref="P:Northwoods.GoWeb.GoSubGraph.State"/> is <see cref="F:Northwoods.GoWeb.GoSubGraphState.Collapsing"/>
            or <see cref="F:Northwoods.GoWeb.GoSubGraphState.Expanding"/>,
            nor if the <see cref="P:Northwoods.GoWeb.GoSubGraph.Handle"/> or the <see cref="P:Northwoods.GoWeb.GoSubGraph.Port"/> is the
            child object causing the call to this method.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.LayoutCollapsedObject">
            <summary>
            This positions the <see cref="P:Northwoods.GoWeb.GoSubGraph.CollapsedObject"/> (if any) within the group.
            </summary>
            <remarks>
            By default the position of the CollapsedObject is set to be in the top-left
            corner of the rectangle returned by <see cref="M:Northwoods.GoWeb.GoSubGraph.ComputeInsideMargins(Northwoods.GoWeb.GoObject)"/>
            if <see cref="P:Northwoods.GoWeb.GoSubGraph.IsExpanded"/> is true, or else by <see cref="M:Northwoods.GoWeb.GoSubGraph.ComputeCollapsedRectangle(System.Drawing.SizeF)"/>
            if this subgraph is collapsed.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.LayoutLabel">
            <summary>
            This positions the <see cref="P:Northwoods.GoWeb.GoSubGraph.Label"/> within the group, according to the <see cref="P:Northwoods.GoWeb.GoSubGraph.LabelSpot"/>
            or <see cref="P:Northwoods.GoWeb.GoSubGraph.CollapsedLabelSpot"/>.
            </summary>
            <remarks>
            <para>
            When the <see cref="P:Northwoods.GoWeb.GoSubGraph.LabelSpot"/> refers to a corner, the <see cref="P:Northwoods.GoWeb.GoSubGraph.Label"/> is
            actually positioned above or below the subgraph, much like headers or footers in
            a page layout.  Furthermore, when the <see cref="P:Northwoods.GoWeb.GoSubGraph.LabelSpot"/> is
            <see cref="F:Northwoods.GoWeb.GoObject.TopLeft"/>, if there is a <see cref="P:Northwoods.GoWeb.GoSubGraph.Handle"/> and it is
            at exactly the same position, the label is shifted right to avoid the overlap.
            If this node is not <see cref="P:Northwoods.GoWeb.GoSubGraph.IsExpanded"/>, the label is positioned according
            to the <see cref="P:Northwoods.GoWeb.GoSubGraph.CollapsedLabelSpot"/>.
            If there is a <see cref="P:Northwoods.GoWeb.GoSubGraph.CollapsedObject"/> the label is positioned relative
            to that collapsed object; otherwise it is positioned relative to the result of
            <see cref="M:Northwoods.GoWeb.GoSubGraph.ComputeCollapsedRectangle(System.Drawing.SizeF)"/>.
            </para>
            <para>
            You can override this method to locate the label in customized places.
            But note that the default behavior of <see cref="M:Northwoods.GoWeb.GoSubGraph.ComputeInsideMarginsSkip(Northwoods.GoWeb.GoObject)"/> is to
            include the <see cref="P:Northwoods.GoWeb.GoSubGraph.Label"/> in the background/border decoration as computed by
            <see cref="M:Northwoods.GoWeb.GoSubGraph.ComputeBorder"/>.  If you want the label to be
            positioned outside of the border decoration, you will need to
            override <see cref="M:Northwoods.GoWeb.GoSubGraph.ComputeInsideMarginsSkip(Northwoods.GoWeb.GoObject)"/> as follows:
            <code>
            protected override bool ComputeInsideMarginsSkip(GoObject child) {
              if (child == this.Label &amp;&amp; this.IsExpanded) return true;
              return base.ComputeInsideMarginsSkip(child);
            }
            </code>
            This example override will cause the <see cref="P:Northwoods.GoWeb.GoSubGraph.Label"/> not to necessarily
            be inside the border when the subgraph is expanded.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.LayoutHandle">
            <summary>
            This positions the handle within the group.
            </summary>
            <remarks>
            By default this places the handle at the top left corner of the group, inside the margin.
            This method does nothing if the node is not <see cref="P:Northwoods.GoWeb.GoSubGraph.IsExpanded"/>.
            </remarks>
            <example>
            <para>
            To place the handle in the margin at the top-left corner, rather than
            the default position inside the margins:
            <code>
              public override void LayoutHandle() {
                if (!this.IsExpanded) return;
                GoSubGraphHandle h = this.Handle;
                if (h != null) {
                  RectangleF b = ComputeBorder();
                  // top-left, in the margins
                  h.Position = new PointF(b.X, b.Y);
                }
              }
            </code>
            </para>
            <para>
            To place the handle at the top-right corner, you could implement these overrides:
            <code>
              public override void LayoutHandle() {
                if (!this.IsExpanded) return;
                GoSubGraphHandle h = this.Handle;
                if (h != null) {
                  RectangleF b = ComputeInsideMargins(null);
                  // top-right, inside margin
                  h.SetSpotLocation(TopRight, GetRectangleSpotLocation(b, TopRight));
                }
              }
            
              // Make sure the collapsed subgraph body (including any CollapsedObject)
              // is positioned to the left of the handle.
              protected override RectangleF ComputeCollapsedRectangle(SizeF s) {
                PointF hpos = ComputeReferencePoint();
                return new RectangleF(hpos.X + this.Handle.Width - s.Width, hpos.Y, s.Width, s.Height);
              }
            </code>
            </para>
            <para>
            For more examples, see the classes in the SubGraphApp sample.
            </para>
            </example>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.LayoutPort">
            <summary>
            This positions the port within the group, normally exactly where the <see cref="P:Northwoods.GoWeb.GoSubGraph.Handle"/> is.
            </summary>
            <remarks>
            If there is no <see cref="P:Northwoods.GoWeb.GoSubGraph.Handle"/>, the port gets the bounds of the <see cref="P:Northwoods.GoWeb.GoSubGraph.Label"/>.
            If there is no <see cref="P:Northwoods.GoWeb.GoSubGraph.Label"/>, the port is positioned at the top left corner, inside the margin.
            If you override this, you should be sure to position the port within the bounds of the subgraph.
            </remarks>
            <example>
            <para>
            For example, if you want the port's Bounds to be the same as the bordered area,
            override this method as follows:
            <code>
              public override void LayoutPort() {
                GoPort p = this.Port;
                if (p != null &amp;&amp; p.CanView()) {
                  RectangleF r = ComputeBorder();
                  p.Bounds = r;
                }
              }
            </code>
            </para>
            <para>
            For more examples, see the classes in the SubGraphApp sample.
            </para>
            </example>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.ComputeCollapsedSize(System.Boolean)">
            <summary>
            Determine the size that this subgraph should be when collapsed, excluding any collapsed margin.
            </summary>
            <param name="visible">true when the size of any <see cref="P:Northwoods.GoWeb.GoSubGraph.CollapsedObject"/> should be considered</param>
            <returns>the size of <see cref="P:Northwoods.GoWeb.GoSubGraph.CollapsedObject"/>, if it is not null/nothing and <paramref name="visible"/> is true,
            and the union of the sizes of all the children, including the collapsed sizes of subgraphs</returns>
            <remarks>
            <para>
            Unlike <see cref="M:Northwoods.GoWeb.GoSubGraph.ComputeBounds"/>, this method is used to calculate the expected size of
            this node when collapsed, so that <see cref="M:Northwoods.GoWeb.GoSubGraph.Collapse"/> can call <see cref="M:Northwoods.GoWeb.GoSubGraph.CollapseChild(Northwoods.GoWeb.GoObject,System.Drawing.RectangleF)"/>
            and <see cref="M:Northwoods.GoWeb.GoSubGraph.FinishCollapse(System.Drawing.RectangleF)"/> with the intended collapsed bounds.
            The size of each child (that is not skipped by <see cref="M:Northwoods.GoWeb.GoSubGraph.ComputeCollapsedSizeSkip(Northwoods.GoWeb.GoObject)"/>)
            is given by the <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="P:Northwoods.GoWeb.GoObject.SelectionObject"/>,
            except for nested subgraphs, where <see cref="M:Northwoods.GoWeb.GoSubGraph.ComputeCollapsedSize(System.Boolean)"/> is called recursively.
            This method does not augment the size to include the <see cref="P:Northwoods.GoWeb.GoSubGraph.CollapsedTopLeftMargin"/>
            or <see cref="P:Northwoods.GoWeb.GoSubGraph.CollapsedBottomRightMargin"/>.
            </para>
            <para>
            Note that the standard behavior of this method makes sure the resulting size is wide
            enough to hold each child node and tall enough to hold each child node--it is not just
            the size of any <see cref="P:Northwoods.GoWeb.GoSubGraph.CollapsedObject"/>.
            The reason is that the standard behavior wants to insure that all links connected to child nodes
            will end at or in the collapsed subgraph, not potentially far away from the subgraph.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.ComputeCollapsedSizeSkip(Northwoods.GoWeb.GoObject)">
            <summary>
            This predicate is called by <see cref="M:Northwoods.GoWeb.GoSubGraph.ComputeCollapsedSize(System.Boolean)"/> to decide if a
            child object should take part in the size calculation.
            </summary>
            <param name="child"></param>
            <returns>
            true if the object is the <see cref="P:Northwoods.GoWeb.GoSubGraph.Handle"/>, <see cref="P:Northwoods.GoWeb.GoSubGraph.Label"/>,
            <see cref="P:Northwoods.GoWeb.GoSubGraph.Port"/>, <see cref="P:Northwoods.GoWeb.GoSubGraph.CollapsedObject"/>, or a link.
            If there is a <see cref="P:Northwoods.GoWeb.GoSubGraph.CollapsedObject"/>, all invisible objects are skipped.
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.ComputeReferencePoint">
            <summary>
            Return the point from which the relative positions of the children are calculated.
            </summary>
            <returns>
            a <c>PointF</c> in document coordinates,
            normally the <see cref="P:Northwoods.GoWeb.GoObject.Position"/> of the <see cref="P:Northwoods.GoWeb.GoSubGraph.Handle"/>
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.ComputeCollapsedRectangle(System.Drawing.SizeF)">
            <summary>
            Given a desired collapsed size, return the expected collapsed area, ignoring any collapsed margins.
            </summary>
            <param name="s">
            a <c>SizeF</c> in document coordinates, normally the result of a call to <see cref="M:Northwoods.GoWeb.GoSubGraph.ComputeCollapsedSize(System.Boolean)"/>
            </param>
            <returns>
            a <c>RectangleF</c> in document coordinates that is passed to calls to
            <see cref="M:Northwoods.GoWeb.GoSubGraph.SaveChildBounds(Northwoods.GoWeb.GoObject,System.Drawing.RectangleF)"/>, <see cref="M:Northwoods.GoWeb.GoSubGraph.CollapseChild(Northwoods.GoWeb.GoObject,System.Drawing.RectangleF)"/>, and <see cref="M:Northwoods.GoWeb.GoSubGraph.FinishCollapse(System.Drawing.RectangleF)"/>.
            </returns>
            <remarks>
            This depends on the result of a call to <see cref="M:Northwoods.GoWeb.GoSubGraph.ComputeReferencePoint"/>.
            See also the example in the description for <see cref="M:Northwoods.GoWeb.GoSubGraph.LayoutHandle"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.Collapse">
            <summary>
            Reposition all of the children so that this node takes a minimum amount of space.
            </summary>
            <remarks>
            This method will first set the <see cref="P:Northwoods.GoWeb.GoSubGraph.State"/> to <see cref="F:Northwoods.GoWeb.GoSubGraphState.Collapsing"/>.
            It then calls <see cref="M:Northwoods.GoWeb.GoSubGraph.PrepareCollapse"/>, which collapses any nested subgraphs.
            It will call <see cref="M:Northwoods.GoWeb.GoSubGraph.ComputeReferencePoint"/> to determine the reference position
            for the collapsed subgraph.
            Then it will call <see cref="M:Northwoods.GoWeb.GoSubGraph.ComputeCollapsedSize(System.Boolean)"/> to determine the desired size of
            the collapsed subgraph,
            will call <see cref="M:Northwoods.GoWeb.GoSubGraph.SaveChildBounds(Northwoods.GoWeb.GoObject,System.Drawing.RectangleF)"/> to remember the expanded size and
            relative position of each child,
            will call <see cref="M:Northwoods.GoWeb.GoSubGraph.CollapseChild(Northwoods.GoWeb.GoObject,System.Drawing.RectangleF)"/> to actually move and perhaps resize
            each child, and then will call <see cref="M:Northwoods.GoWeb.GoSubGraph.FinishCollapse(System.Drawing.RectangleF)"/>.
            It then sets the state to <see cref="F:Northwoods.GoWeb.GoSubGraphState.Collapsed"/>.
            Afterwards, <see cref="P:Northwoods.GoWeb.GoSubGraph.IsExpanded"/> will be false, and this method
            calls <c>LayoutChildren(null)</c> to give <see cref="M:Northwoods.GoWeb.GoSubGraph.LayoutLabel"/>,
            <see cref="M:Northwoods.GoWeb.GoSubGraph.LayoutHandle"/>, and <see cref="M:Northwoods.GoWeb.GoSubGraph.LayoutPort"/> a chance.
            This method does nothing if this node is already collapsed or if
            <see cref="P:Northwoods.GoWeb.GoSubGraph.Collapsible"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.PrepareCollapse">
            <summary>
            Do any work before collapsing this subgraph.
            </summary>
            <remarks>
            By default this does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.SaveChildBounds(Northwoods.GoWeb.GoObject,System.Drawing.RectangleF)">
            <summary>
            Save the original size and relative position for all non-links and
            the paths of all links.
            </summary>
            <param name="child"></param>
            <param name="sgrect">the expected bounds of the collapsed subgraph, without the collapsed margin</param>
            <remarks>
            This saves the points of link strokes, relative to the <paramref name="sgrect"/>'s position,
            in the <see cref="P:Northwoods.GoWeb.GoSubGraph.SavedPaths"/> hash table.
            For other objects, besides the <see cref="P:Northwoods.GoWeb.GoSubGraph.Handle"/>, <see cref="P:Northwoods.GoWeb.GoSubGraph.Port"/>,
            <see cref="P:Northwoods.GoWeb.GoSubGraph.Label"/>, or <see cref="P:Northwoods.GoWeb.GoSubGraph.CollapsedObject"/>,
            this saves the current size and position relative
            to the <paramref name="sgrect"/> in the <see cref="P:Northwoods.GoWeb.GoSubGraph.SavedBounds"/> hash table.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.CollapseChild(Northwoods.GoWeb.GoObject,System.Drawing.RectangleF)">
            <summary>
            Center all the objects that aren't links and make everything invisible
            (besides Label and Handle and Port and CollapsedObject).
            </summary>
            <param name="child"></param>
            <param name="sgrect">the expected bounds of the collapsed subgraph, without the collapsed margin</param>
            <remarks>
            <para>
            Child subgraphs are collapsed first, of course, and if they had been expanded,
            their <see cref="P:Northwoods.GoWeb.GoSubGraph.WasExpanded"/> property is set to true.
            If the child object has a <see cref="P:Northwoods.GoWeb.GoObject.SelectionObject"/>, that
            is centered; otherwise the whole child is centered.
            </para>
            <para>
            You may want to override this method in order to customize the
            sizing of child objects when the subgraph is collapsed.  If you do
            this, you will also want to override <see cref="M:Northwoods.GoWeb.GoSubGraph.ExpandChild(Northwoods.GoWeb.GoObject,System.Drawing.PointF)"/> to
            restore the original size, as saved in the <see cref="P:Northwoods.GoWeb.GoSubGraph.SavedBounds"/>
            hash table.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.FinishCollapse(System.Drawing.RectangleF)">
            <summary>
            This method is called towards the end of the process of a <see cref="M:Northwoods.GoWeb.GoSubGraph.Collapse"/> call.
            </summary>
            <param name="sgrect">the expected bounds of the collapsed subgraph, without the collapsed margin</param>
            <remarks>
            By default this method makes any <see cref="P:Northwoods.GoWeb.GoSubGraph.CollapsedObject"/> visible and makes the whole subgraph not resizable.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.Expand">
            <summary>
            Restore the position of all of the children so that this subgraph completely visible again.
            </summary>
            <remarks>
            The <see cref="M:Northwoods.GoWeb.GoSubGraph.Collapse"/> call saved the original bounds of all of the non-link children.
            These saved relative positions are used to move all of the children back again,
            and making them all visible too.
            This method will first set the <see cref="P:Northwoods.GoWeb.GoSubGraph.State"/> to <see cref="F:Northwoods.GoWeb.GoSubGraphState.Expanding"/>, and then
            call <see cref="M:Northwoods.GoWeb.GoSubGraph.PrepareExpand"/> for any preparatory work.
            It will call <see cref="M:Northwoods.GoWeb.GoSubGraph.ComputeReferencePoint"/> to determine the reference position
            for the expanded subgraph.
            It calls <see cref="M:Northwoods.GoWeb.GoSubGraph.ExpandChild(Northwoods.GoWeb.GoObject,System.Drawing.PointF)"/> on each child to move them back to their
            original positions,
            and will call <see cref="M:Northwoods.GoWeb.GoSubGraph.FinishExpand(System.Drawing.PointF)"/> for any clean-up work. 
            It then sets the state to <see cref="F:Northwoods.GoWeb.GoSubGraphState.Expanded"/>.
            This method does nothing if this node is already expanded or
            if <see cref="P:Northwoods.GoWeb.GoSubGraph.Collapsible"/> is false.
            This method also calls <c>LayoutChildren(null)</c> afterwards, mostly to make
            sure the <see cref="P:Northwoods.GoWeb.GoSubGraph.Handle"/> and <see cref="P:Northwoods.GoWeb.GoSubGraph.Label"/> are positioned
            correctly again, especially if the objects changed while the node was collapsed.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.PrepareExpand">
            <summary>
            Do any work before expanding the children.
            </summary>
            <remarks>
            By default this does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.ExpandChild(Northwoods.GoWeb.GoObject,System.Drawing.PointF)">
            <summary>
            Restore a child to its original position.
            </summary>
            <param name="child"></param>
            <param name="hpos">the reference point for restoring the new position</param>
            <remarks>
            This uses <see cref="P:Northwoods.GoWeb.GoSubGraph.SavedBounds"/> for getting the saved
            relative position of a child, and this uses <see cref="P:Northwoods.GoWeb.GoSubGraph.SavedPaths"/>
            for getting the relative points of link strokes.
            Nested subgraphs that are <see cref="P:Northwoods.GoWeb.GoSubGraph.WasExpanded"/> (i.e. were collapsed by <see cref="M:Northwoods.GoWeb.GoSubGraph.CollapseChild(Northwoods.GoWeb.GoObject,System.Drawing.RectangleF)"/>) are expanded.
            This method also makes sure each child is made <see cref="P:Northwoods.GoWeb.GoObject.Visible"/> again.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.FinishExpand(System.Drawing.PointF)">
            <summary>
            This method is called at the end of the process of an <see cref="M:Northwoods.GoWeb.GoSubGraph.Expand"/> call.
            </summary>
            <param name="hpos">the reference point for restoring the new position</param>
            <remarks>
            By default this just clears all saved information in the <see cref="P:Northwoods.GoWeb.GoSubGraph.SavedBounds"/>
            and <see cref="P:Northwoods.GoWeb.GoSubGraph.SavedPaths"/> hash tables, it makes any <see cref="P:Northwoods.GoWeb.GoSubGraph.CollapsedObject"/>
            not visible, and it restores whether the expanded subgraph is resizable.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.Toggle">
            <summary>
            This convenience method calls either <see cref="M:Northwoods.GoWeb.GoSubGraph.Collapse"/> or <see cref="M:Northwoods.GoWeb.GoSubGraph.Expand"/>
            depending on whether it is expanded or collapsed.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.ExpandAll">
            <summary>
            This method calls <see cref="M:Northwoods.GoWeb.GoSubGraph.Expand"/> on this node and then recursively
            proceeds through all of the children, expanding them.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.CopyOldValueForUndo(Northwoods.GoWeb.GoChangedEventArgs)">
            <summary>
            Copies state to permit an undo.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoObject.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.CopyNewValueForRedo(Northwoods.GoWeb.GoChangedEventArgs)">
            <summary>
            Copies state to permit a redo.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoObject.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraph.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle this class's property changes for undo and redo
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.GoWeb.GoSubGraph.Handle">
            <summary>
            Gets the <see cref="T:Northwoods.GoWeb.GoSubGraphHandle"/> representing and controlling the subgraph.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoSubGraph.Label">
            <summary>
            Gets or sets the standard text label for this node.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoSubGraph.Port">
            <summary>
            Gets or sets the port represents the subgraph as a whole. 
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoSubGraph.CollapsedObject">
            <summary>
            Gets or sets the object shown when the subgraph is collapsed.
            </summary>
            <value>
            By default, <see cref="M:Northwoods.GoWeb.GoSubGraph.CreateCollapsedObject"/> returns null,
            so this property is null.
            </value>
            <remarks>
            You will probably want this object to be not Selectable.
            Setting this property to a value will set its <see cref="P:Northwoods.GoWeb.GoObject.Visible"/>
            and <see cref="P:Northwoods.GoWeb.GoObject.Printable"/> properties to have the same values
            as the old collapsed object, if any.
            If there was no previous collapsed object, this setter sets those
            two properties according to whether the subgraph is collapsed or not.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoSubGraph.Corner">
            <summary>
            Gets or sets the maximum radial width and height of each corner.
            </summary>
            <value>
            The default value is 0x0.  Both the width and the height must be
            non-negative; only when both are positive will there be arcs at each corner.
            </value>
            <seealso cref="P:Northwoods.GoWeb.GoSubGraph.CollapsedCorner"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoSubGraph.CollapsedCorner">
            <summary>
            Gets or sets the maximum radial width and height of each corner when the node is collapsed.
            </summary>
            <value>
            The default value is 0x0.  Both the width and the height must be
            non-negative; only when both are positive will there be arcs at each corner.
            </value>
            <remarks>
            Of course, when there is a <see cref="P:Northwoods.GoWeb.GoSubGraph.CollapsedObject"/> the border is not
            drawn, because that collapsed-object is shown instead.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoSubGraph.Corner"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoSubGraph.BorderPen">
            <summary>
            Gets or sets the pen used to draw a rectangular outline just inside the
            edges of this node.
            </summary>
            <value>
            You must not modify the pen after you have assigned it.
            The <c>Pen</c> value may be null, in which case no outline is drawn.
            This value defaults to null.
            </value>
            <remarks>
            <see cref="M:Northwoods.GoWeb.GoSubGraph.PaintDecoration(System.Drawing.Graphics,Northwoods.GoWeb.GoView)"/> does not draw any border when
            there is a <see cref="P:Northwoods.GoWeb.GoSubGraph.CollapsedObject"/> to show instead.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoSubGraph.BorderPenColor">
            <summary>
            Gets or sets the color of the <see cref="P:Northwoods.GoWeb.GoSubGraph.BorderPen"/>.
            </summary>
            <value>
            The <b>Color</b> of the <see cref="P:Northwoods.GoWeb.GoSubGraph.BorderPen"/>, or <b>Color.Empty</b> if there is no pen.
            Setting the new value to <b>Color.Empty</b> will set the <see cref="P:Northwoods.GoWeb.GoSubGraph.BorderPen"/> to null.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoSubGraph.BorderPenWidth">
            <summary>
            Gets or sets the width of the <see cref="P:Northwoods.GoWeb.GoSubGraph.BorderPen"/>.  [Not in GoDiagram Pocket]
            </summary>
            <value>
            The width of the <see cref="P:Northwoods.GoWeb.GoSubGraph.BorderPen"/>, or 0 if there is no pen.
            The default value is zero.
            </value>
            <remarks>
            If there is no <see cref="P:Northwoods.GoWeb.GoSubGraph.BorderPen"/>, setting this property might have no effect.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoSubGraph.Location">
            <summary>
            The location is the position of the <see cref="P:Northwoods.GoWeb.GoSubGraph.Handle"/>.
            </summary>
            <remarks>
            If there is no <see cref="P:Northwoods.GoWeb.GoSubGraph.Handle"/>, the location is just the <see cref="P:Northwoods.GoWeb.GoObject.Position"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoSubGraph.LabelSpot">
            <summary>
            Gets or sets the spot at which the label, if any, should be positioned
            relative to the rest of the node.
            </summary>
            <value>This defaults to <c>GoObject.MiddleTop</c></value>
        </member>
        <member name="P:Northwoods.GoWeb.GoSubGraph.CollapsedLabelSpot">
            <summary>
            Gets or sets the spot at which the label, if any, should be positioned
            relative to the rest of the node.
            </summary>
            <value>This defaults to <c>GoObject.Middle</c></value>
        </member>
        <member name="P:Northwoods.GoWeb.GoSubGraph.TopLeftMargin">
            <summary>
            Gets or sets the space between the top and left sides of the subgraph children
            with the top and left sides of the background.
            </summary>
            <value>
            This defaults to 4x4 units, in document coordinates.
            The margin width and height must each be non-negative.
            The margin should be large enough to accommodate any border drawn by the
            <see cref="P:Northwoods.GoWeb.GoSubGraph.BorderPen"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoSubGraph.BottomRightMargin">
            <summary>
            Gets or sets the space between the bottom and right sides of the subgraph children
            with the bottom and right sides of the background.
            </summary>
            <value>
            This defaults to 4x4 units, in document coordinates.
            The margin width and height must each be non-negative.
            The margin should be large enough to accommodate any border drawn by the
            <see cref="P:Northwoods.GoWeb.GoSubGraph.BorderPen"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoSubGraph.CollapsedTopLeftMargin">
            <summary>
            Gets or sets the space between the top and left sides of the subgraph children
            with the top and left sides of the background when the node is collapsed.
            </summary>
            <value>
            This defaults to 0x0 units, in document coordinates.
            The margin width and height must each be non-negative.
            The margin should be large enough to accommodate any border drawn by the
            <see cref="P:Northwoods.GoWeb.GoSubGraph.BorderPen"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoSubGraph.CollapsedBottomRightMargin">
            <summary>
            Gets or sets the space between the bottom and right sides of the subgraph children
            with the bottom and right sides of the background when the node is collapsed.
            </summary>
            <value>
            This defaults to 0x0 units, in document coordinates.
            The margin width and height must each be non-negative.
            The margin should be large enough to accommodate any border drawn by the
            <see cref="P:Northwoods.GoWeb.GoSubGraph.BorderPen"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoSubGraph.IsExpanded">
            <summary>
            Gets or sets whether this subgraph is in an expanded state.
            </summary>
            <value>
            The initial value is true.
            </value>
            <remarks>
            The getter is implemented as <c>this.State == GoSubGraphState.Expanded</c>.
            The setter is implemented as a call to either <see cref="M:Northwoods.GoWeb.GoSubGraph.Collapse"/>
            or <see cref="M:Northwoods.GoWeb.GoSubGraph.Expand"/>, depending on the value of <see cref="P:Northwoods.GoWeb.GoSubGraph.State"/>
            and whether the new value is false or true.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoSubGraph.State">
            <summary>
            Gets or sets the expanded/collapsed state of this subgraph.
            </summary>
            <value>This <see cref="T:Northwoods.GoWeb.GoSubGraphState"/> enum value defaults to <see cref="F:Northwoods.GoWeb.GoSubGraphState.Expanded"/></value>
            <remarks>
            Setting this property must only be done in pairs in the implementation of
            an override of <see cref="M:Northwoods.GoWeb.GoSubGraph.Collapse"/>:
            <code>
              sg.State = GoSubGraphState.Collapsing;
              ... move/resize children ...
              sg.State = GoSubGraphState.Collapsed;
              sg.LayoutChildren(null);
            </code>
            or in an override of <see cref="M:Northwoods.GoWeb.GoSubGraph.Expand"/>:
            <code>
              sg.State = GoSubGraphState.Expanding;
              ... move/resize children ...
              sg.State = GoSubGraphState.Expanded;
              sg.LayoutChildren(null);
            </code>
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoSubGraph.SavedBounds">
            <summary>
            Gets the Hashtable that remembers the sizes and relative positions
            of all of the child objects when the subgraph is collapsed.
            </summary>
            <value>
            The hashtable may be empty when the subgraph is in an expanded state.
            </value>
            <remarks>
            The hashtable maps child non-link objects to RectangleF structures.
            Although the values are in document coordinates,
            the (X,Y) position is not an absolute position
            but a position relative to the <see cref="P:Northwoods.GoWeb.GoSubGraph.Handle"/>'s position.
            Modifications to this hashtable have no effect except upon
            a call to <see cref="M:Northwoods.GoWeb.GoSubGraph.Expand"/>, and are not recorded by the undo manager.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoSubGraph.SavedPaths">
            <summary>
            Gets the Hashtable that remembers the points of <see cref="T:Northwoods.GoWeb.GoLink"/>
            and <see cref="T:Northwoods.GoWeb.GoLabeledLink"/> strokes when the subgraph is collapsed.
            </summary>
            <value>
            The hashtable may be empty when the subgraph is in an expanded state.
            </value>
            <remarks>
            The hashtable maps child link strokes to PointF arrays.
            Although the values are in document coordinates,
            the (X,Y) positions are not an absolute positions
            but positions relative to the <see cref="P:Northwoods.GoWeb.GoSubGraph.Handle"/>'s position.
            Modifications to this hashtable have no effect except upon
            a call to <see cref="M:Northwoods.GoWeb.GoSubGraph.Expand"/>, and are not recorded by the undo manager.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoSubGraph.WasExpanded">
            <summary>
            Gets or sets whether this subgraph had been in an expanded state
            when the parent subgraph was collapsed.
            </summary>
            <remarks>
            This is set by <see cref="M:Northwoods.GoWeb.GoSubGraph.CollapseChild(Northwoods.GoWeb.GoObject,System.Drawing.RectangleF)"/> and <see cref="M:Northwoods.GoWeb.GoSubGraph.ExpandChild(Northwoods.GoWeb.GoObject,System.Drawing.PointF)"/>
            of the parent <see cref="T:Northwoods.GoWeb.GoSubGraph"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoSubGraph.Collapsible">
            <summary>
            Gets or sets whether the user is allowed to toggle whether this node
            is expanded or collapsed.
            </summary>
            <value>
            The default value is true.
            </value>
            <remarks>
            When the value is true, the handle will be drawn as either a "-" or a "+".
            When this value is false, the handle will be drawn in a different fashion.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoSubGraph.BackgroundColor">
            <summary>
            Gets or sets the background color for the group.
            </summary>
            <value>
            The default color is a <c>LightBlue</c>.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoSubGraph.Opacity">
            <summary>
            Gets or sets the percentage of opaqueness that the background color
            should be painted with.
            </summary>
            <value>
            The default value is 20.  The value must be between zero and 100.
            </value>
            <remarks>
            When the opacity is zero, the <see cref="P:Northwoods.GoWeb.GoSubGraph.BackgroundColor"/> is not
            drawn at all.
            When the opacity is 100, the user cannot see what is behind the group's
            whole area.
            </remarks>
        </member>
        <member name="T:Northwoods.GoWeb.GoSubGraphHandle">
            <summary>
            This small rectangle is normally the <see cref="T:Northwoods.GoWeb.GoSubGraph"/>'s
            <see cref="P:Northwoods.GoWeb.GoSubGraph.Handle"/> and handles single clicks to collapse
            and expand the subgraph.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraphHandle.#ctor">
            <summary>
            This constructor results in a rectangle with the same appearance as
            a <see cref="T:Northwoods.GoWeb.GoCollapsibleHandle"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoSubGraphHandle.OnSingleClick(Northwoods.GoWeb.GoInputEventArgs,Northwoods.GoWeb.GoView)">
            <summary>
            Unlike a regular <see cref="T:Northwoods.GoWeb.GoCollapsibleHandle"/>, subgraph handles
            treat a Ctrl-click when expanding as a command to call <see cref="M:Northwoods.GoWeb.GoSubGraph.ExpandAll"/>.
            </summary>
            <param name="evt"></param>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="T:Northwoods.GoWeb.GoTextNode">
            <summary>
            A node displaying a string with a background and four ports, one at the
            middle of each side.
            </summary>
            <remarks>
            <para>
            If you don't need all four ports, you can remove ones you don't want by
            setting the corresponding property to null.
            </para>
            <para>
            You can change the background from a light-gray rectangle by setting
            the <see cref="P:Northwoods.GoWeb.GoTextNode.Background"/> property to be some other object.  In order for
            the text to fit nicely within the shape, you may need to set the
            <see cref="P:Northwoods.GoWeb.GoTextNode.TopLeftMargin"/> and <see cref="P:Northwoods.GoWeb.GoTextNode.BottomRightMargin"/> properties
            to larger values.  This is particularly true if the new shape is a
            <see cref="T:Northwoods.GoWeb.GoEllipse"/> or a polygon that has a small rectangular area in it.
            </para>
            <para>
            When <see cref="P:Northwoods.GoWeb.GoTextNode.AutoResizes"/> is false, the <see cref="P:Northwoods.GoWeb.GoTextNode.Label"/> is sized to
            fit inside the bounds of the <see cref="P:Northwoods.GoWeb.GoTextNode.Background"/>, minus the margins.
            The label (a <see cref="T:Northwoods.GoWeb.GoText"/>) is automatically wrapped and clipped.
            </para>
            <para>
            To make it easier to initialize or modify the shape's brush and/or pen,
            the <see cref="P:Northwoods.GoWeb.GoTextNode.Shape"/> property casts the <see cref="P:Northwoods.GoWeb.GoTextNode.Background"/> to a
            <see cref="T:Northwoods.GoWeb.GoShape"/>.  If you make the background a group of various
            kind of objects, you may want to override the <see cref="P:Northwoods.GoWeb.GoTextNode.Shape"/> property
            to return the particular shape inside the group that you consider to be
            the most prominent.
            </para>
            <para>
            The text string is normally multiline and not editable, but you can change
            those and other properties by setting the <see cref="P:Northwoods.GoWeb.GoTextNode.Label"/>'s properties.
            </para>
            <para>
            Setting the <see cref="P:Northwoods.GoWeb.GoTextNode.Shadowed"/> property for this node actually sets that
            property on the <see cref="P:Northwoods.GoWeb.GoTextNode.Background"/> object.
            Although the <see cref="P:Northwoods.GoWeb.GoTextNode.Background"/> object is normally a <see cref="T:Northwoods.GoWeb.GoRectangle"/>,
            it could be any kind of <see cref="T:Northwoods.GoWeb.GoObject"/>.
            </para>
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoTextNode.ChangedLabel">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoTextNode.Label"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoTextNode.ChangedBackground">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoTextNode.Background"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoTextNode.ChangedTopPort">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoTextNode.TopPort"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoTextNode.ChangedRightPort">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoTextNode.RightPort"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoTextNode.ChangedBottomPort">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoTextNode.BottomPort"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoTextNode.ChangedLeftPort">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoTextNode.LeftPort"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoTextNode.ChangedTopLeftMargin">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoTextNode.TopLeftMargin"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoTextNode.ChangedBottomRightMargin">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoTextNode.BottomRightMargin"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoTextNode.ChangedAutoResizes">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoTextNode.AutoResizes"/> property.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoTextNode.#ctor">
            <summary>
            Create a GoTextNode displaying an empty text string with a rectangular
            background and a port at each side.
            </summary>
            <remarks>
            This calls <see cref="M:Northwoods.GoWeb.GoTextNode.CreateBackground"/>, <see cref="M:Northwoods.GoWeb.GoTextNode.CreateLabel"/>,
            and <see cref="M:Northwoods.GoWeb.GoTextNode.CreatePort(System.Int32)"/> for each of the four <c>Middle...</c> spots,
            to get initial values for <see cref="P:Northwoods.GoWeb.GoTextNode.Background"/>, <see cref="P:Northwoods.GoWeb.GoTextNode.Label"/>,
            <see cref="P:Northwoods.GoWeb.GoTextNode.TopPort"/>, <see cref="P:Northwoods.GoWeb.GoTextNode.RightPort"/>, <see cref="P:Northwoods.GoWeb.GoTextNode.BottomPort"/>,
            and <see cref="P:Northwoods.GoWeb.GoTextNode.LeftPort"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoTextNode.#ctor(Northwoods.GoWeb.GoFigure)">
            <summary>
            Create a GoTextNode with four ports and a <see cref="T:Northwoods.GoWeb.GoDrawing"/> background,
            initialized to have the figure <paramref name="fig"/>.  [Not in GoDiagram Pocket]
            </summary>
            <param name="fig">a <see cref="T:Northwoods.GoWeb.GoFigure"/> enumeration value</param>
            <remarks>
            This constructor basically does the following, but more efficiently:
            <code>
            GoTextNode n = new GoTextNode();
            n.Background = new GoDrawing(fig);
            </code>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoTextNode.CreateBackground">
            <summary>
            Create and initialize an object that serves as the background for the text.
            </summary>
            <returns>
            a <see cref="T:Northwoods.GoWeb.GoRectangle"/> with a light gray <see cref="P:Northwoods.GoWeb.GoShape.Brush"/>
            </returns>
            <remarks>
            You may wish to override this to use a different kind of background object,
            such as <see cref="T:Northwoods.GoWeb.GoRoundedRectangle"/>.
            </remarks>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoObject CreateBackground() {
               GoRectangle r = new GoRectangle();
               r.Selectable = false;
               r.Resizable = false;
               r.Reshapable = false;
               r.Brush = Brushes.LightGray;
               return r;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.GoWeb.GoTextNode.CreateLabel">
            <summary>
            Create and initialize the text object.
            </summary>
            <returns>
            a <see cref="T:Northwoods.GoWeb.GoText"/> object, normally supporting multiple lines but
            that is not resizable or editable.
            </returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoText CreateLabel() {
               GoText l = new GoText();
               l.Selectable = false;
               l.Multiline = true;
               return l;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.GoWeb.GoTextNode.CreatePort(System.Int32)">
            <summary>
            Create and initialize a port for a side of this node.
            </summary>
            <param name="spot"></param>
            <returns>
            a small <see cref="T:Northwoods.GoWeb.GoPort"/> whose <see cref="P:Northwoods.GoWeb.GoPort.Style"/> is
            <see cref="F:Northwoods.GoWeb.GoPortStyle.None"/> supporting both source and
            destination links
            </returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoPort CreatePort(int spot) {
               GoPort p = new GoPort();
               p.Style = GoPortStyle.None;
               p.Size = new SizeF(4, 4);
               p.FromSpot = spot;
               p.ToSpot = spot;
               return p;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.GoWeb.GoTextNode.CopyChildren(Northwoods.GoWeb.GoGroup,Northwoods.GoWeb.GoCopyDictionary)">
            <summary>
            Copy the background, text label, and the four ports.
            </summary>
            <param name="newgroup"></param>
            <param name="env"></param>
            <remarks>
            Remember to override this to copy any objects you add to this class.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoTextNode.Remove(Northwoods.GoWeb.GoObject)">
            <summary>
            If any part is removed from this group,
            be sure to remove any references in local fields.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoTextNode.LayoutChildren(Northwoods.GoWeb.GoObject)">
            <summary>
            Size the background to fit the text, and position the ports at the edges
            of the background object.
            </summary>
            <param name="childchanged"></param>
            <remarks>
            This method uses the <see cref="P:Northwoods.GoWeb.GoTextNode.TopLeftMargin"/> and <see cref="P:Northwoods.GoWeb.GoTextNode.BottomRightMargin"/>
            properties to decide how much bigger the background should be than the text label.
            This method does nothing if there is no <see cref="P:Northwoods.GoWeb.GoTextNode.Label"/>.
            If <see cref="P:Northwoods.GoWeb.GoTextNode.AutoResizes"/> is false, the <see cref="P:Northwoods.GoWeb.GoTextNode.Background"/> object is
            not resized, but the <see cref="P:Northwoods.GoWeb.GoTextNode.Label"/>'s bounds and
            <see cref="P:Northwoods.GoWeb.GoText.WrappingWidth"/> are updated according to how much room is
            left inside the <see cref="P:Northwoods.GoWeb.GoTextNode.Background"/> after subtracting the margins.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoTextNode.OnAutoResizesChanged(System.Boolean)">
            <summary>
            This method is called when the value of <see cref="P:Northwoods.GoWeb.GoTextNode.AutoResizes"/> changes.
            </summary>
            <remarks>
            This just changes the <see cref="P:Northwoods.GoWeb.GoTextNode.Label"/>'s <see cref="P:Northwoods.GoWeb.GoText.Wrapping"/>
            and <see cref="P:Northwoods.GoWeb.GoText.Clipping"/> properties to be true when the
            <see cref="P:Northwoods.GoWeb.GoTextNode.AutoResizes"/> property is false, and vice-versa.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoTextNode.FindName(Northwoods.GoWeb.GoObject)">
            <summary>
            The properties referring to parts of this node
            are also the names of those parts.
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoTextNode.FindChild(System.String)">
            <summary>
            The properties referring to parts of this node
            are also the names of those parts.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoTextNode.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle this class's property changes for undo and redo
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.GoWeb.GoTextNode.Shadowed">
            <summary>
            Giving this node a shadow really means giving the background a shadow.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoTextNode.TopLeftMargin">
            <summary>
            Gets or sets the space between the top and left sides of the text label
            with the top and left sides of the background.
            </summary>
            <remarks>
            If you change the background to be a different shape by overriding
            <see cref="M:Northwoods.GoWeb.GoTextNode.CreateBackground"/>, you will probably want to set this margin
            and <see cref="P:Northwoods.GoWeb.GoTextNode.BottomRightMargin"/> appropriately so that the text fits.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoTextNode.BottomRightMargin">
            <summary>
            Gets or sets the space between the bottom and right sides of the text label
            with the bottom and right sides of the background.
            </summary>
            <remarks>
            If you change the background to be a different shape by overriding
            <see cref="M:Northwoods.GoWeb.GoTextNode.CreateBackground"/>, you will probably want to set this margin
            and <see cref="P:Northwoods.GoWeb.GoTextNode.TopLeftMargin"/> appropriately so that the text fits.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoTextNode.AutoResizes">
            <summary>
            Gets or sets whether the size of the background is changed as the text label's size changes.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoTextNode.SelectionObject">
            <summary>
            When <see cref="P:Northwoods.GoWeb.GoTextNode.AutoResizes"/> is false, this returns the <see cref="P:Northwoods.GoWeb.GoTextNode.Background"/>
            object; otherwise this just returns the node itself.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoTextNode.Label">
            <summary>
            Display a string and participate in standard textual node searches and editing.
            </summary>
            <value>
            The new value may be null, to simply remove the label.
            If non-null, the new text object should have the <see cref="P:Northwoods.GoWeb.GoObject.Selectable"/>
            property set to false.
            </value>
            <remarks>
            Instead of setting the label after creating a node, you may find it
            easier to override the <see cref="M:Northwoods.GoWeb.GoTextNode.CreateLabel"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoTextNode.Background">
            <summary>
            Gets or sets the background object.
            </summary>
            <value>
            The new value may be null, to simply remove the background object.
            If non-null, the new object should have the <see cref="P:Northwoods.GoWeb.GoObject.Selectable"/>
            property set to false.
            </value>
            <remarks>
            Instead of setting the background after creating a node, you may find it
            easier to override the <see cref="M:Northwoods.GoWeb.GoTextNode.CreateBackground"/> method.
            The new background object will have its
            Selectable and Shadowed properties copied from the old background object.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoTextNode.Shape">
            <summary>
            Gets this node's background shape, assuming it is a <see cref="T:Northwoods.GoWeb.GoShape"/>, as it usually is.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoTextNode.Pen">
            <summary>
            This convenience property exposes the <c>Pen</c> of the <see cref="P:Northwoods.GoWeb.GoTextNode.Shape"/>.
            </summary>
            <remarks>
            If the <see cref="P:Northwoods.GoWeb.GoTextNode.Background"/> object is null or is not a <see cref="T:Northwoods.GoWeb.GoShape"/>
            the value will be null and setting the value has no effect.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoTextNode.Brush">
            <summary>
            This convenience property exposes the <c>Brush</c> of the <see cref="P:Northwoods.GoWeb.GoTextNode.Shape"/>.
            </summary>
            <remarks>
            If the <see cref="P:Northwoods.GoWeb.GoTextNode.Background"/> object is null or is not a <see cref="T:Northwoods.GoWeb.GoShape"/>
            the value will be null and setting the value has no effect.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoTextNode.Figure">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoWeb.GoDrawing"/>.<see cref="P:Northwoods.GoWeb.GoDrawing.Figure"/>
            of the <see cref="P:Northwoods.GoWeb.GoTextNode.Background"/> if the background is a <see cref="T:Northwoods.GoWeb.GoDrawing"/>.
            [Not in GoDiagram Pocket]
            </summary>
            <value>
            This returns <see cref="T:Northwoods.GoWeb.GoFigure"/>.<see cref="F:Northwoods.GoWeb.GoFigure.None"/>
            in the typical case where the <see cref="P:Northwoods.GoWeb.GoTextNode.Shape"/> is a <see cref="T:Northwoods.GoWeb.GoRectangle"/>
            or other non-<see cref="T:Northwoods.GoWeb.GoDrawing"/> shape.
            Setting this property has no effect if the <see cref="P:Northwoods.GoWeb.GoTextNode.Shape"/> is not a <see cref="T:Northwoods.GoWeb.GoDrawing"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoTextNode.TopPort">
            <summary>
            Gets or sets the port at the top of the node.
            </summary>
            <value>
            The new value may be null, to simply remove the port.
            If non-null, the port should have the <see cref="P:Northwoods.GoWeb.GoObject.Selectable"/>
            property set to false.
            </value>
            <remarks>
            Instead of setting the port after creating a node, you may find it
            easier to override the <see cref="M:Northwoods.GoWeb.GoTextNode.CreatePort(System.Int32)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoTextNode.RightPort">
            <summary>
            Gets or sets the port at the right side of the node.
            </summary>
            <value>
            The new value may be null, to simply remove the port.
            If non-null, the port should have the <see cref="P:Northwoods.GoWeb.GoObject.Selectable"/>
            property set to false.
            </value>
            <remarks>
            Instead of setting the port after creating a node, you may find it
            easier to override the <see cref="M:Northwoods.GoWeb.GoTextNode.CreatePort(System.Int32)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoTextNode.BottomPort">
            <summary>
            Gets or sets the port at the bottom of the node.
            </summary>
            <value>
            The new value may be null, to simply remove the port.
            If non-null, the port should have the <see cref="P:Northwoods.GoWeb.GoObject.Selectable"/>
            property set to false.
            </value>
            <remarks>
            Instead of setting the port after creating a node, you may find it
            easier to override the <see cref="M:Northwoods.GoWeb.GoTextNode.CreatePort(System.Int32)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoTextNode.LeftPort">
            <summary>
            Gets or sets the port at the left of the node.
            </summary>
            <value>
            The new value may be null, to simply remove the port.
            If non-null, the port should have the <see cref="P:Northwoods.GoWeb.GoObject.Selectable"/>
            property set to false.
            </value>
            <remarks>
            Instead of setting the port after creating a node, you may find it
            easier to override the <see cref="M:Northwoods.GoWeb.GoTextNode.CreatePort(System.Int32)"/> method.
            </remarks>
        </member>
        <member name="T:Northwoods.GoWeb.GoTool">
            <summary>
            This abstract class provides the base for all of the predefined tools.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.IGoTool">
            <summary>
            This interface specifies the methods the view uses to control this tool
            and the methods used to handle the canonicalized input events processed through
            the view.
            </summary>
            <remarks>
            All existing tools are actually subclasses of the abstract class <see cref="T:Northwoods.GoWeb.GoTool"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.IGoTool.CanStart">
            <summary>
            This predicate is used by the view to decide if this tool can be started.
            </summary>
            <returns>true if the view can make this tool the current one and call
            the <see cref="M:Northwoods.GoWeb.IGoTool.Start"/> method</returns>
        </member>
        <member name="M:Northwoods.GoWeb.IGoTool.Start">
            <summary>
            This method is called by the view when this tool becomes the currently active tool.
            </summary>
            <remarks>
            Tool implementations should perform their per-use initialization here, such
            as starting a document transaction and setting up internal data structures.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.IGoTool.Stop">
            <summary>
            This method is called by the view when this tool stops being the current tool.
            </summary>
            <remarks>
            Tool implementations should perform their per-use cleanup here, such as
            finishing a document transaction.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.IGoTool.DoMouseDown">
            <summary>
            The view will call this method upon a mouse down event.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.IGoTool.DoMouseMove">
            <summary>
            The view will call this method upon a mouse drag event.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.IGoTool.DoMouseUp">
            <summary>
            The view will call this method upon a mouse up event.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.IGoTool.DoMouseWheel">
            <summary>
            The view will call this method as the mouse wheel is rotated.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.IGoTool.DoMouseHover">
            <summary>
            The view will call this method upon a mouse hover event.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.IGoTool.DoCancelMouse">
            <summary>
            The view will call this method when the we wish to cancel the
            current tool's operation.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.IGoTool.DoKeyDown">
            <summary>
            The view will call this method upon a key down event.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.IGoTool.View">
            <summary>
            Gets the view for which this tool is handling canonicalized  input events.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoTool.#ctor(Northwoods.GoWeb.GoView)">
            <summary>
            The constructor associates a view with the tool.
            </summary>
            <param name="view">
            This <see cref="T:Northwoods.GoWeb.GoView"/> must not be null.
            </param>
        </member>
        <member name="M:Northwoods.GoWeb.GoTool.CanStart">
            <summary>
            This predicate should be true if this tool can be activated to be the view's current tool.
            </summary>
            <returns></returns>
            <remarks>
            By default, this returns true.
            This is normally only called by the <see cref="T:Northwoods.GoWeb.GoToolManager"/> to decide whether this tool should be started as a
            mode-less mouse tool.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoTool.Start">
            <summary>
            This method is called when this tool becomes the view's current tool.
            </summary>
            <remarks>
            Typically you will want to put initialization code here for each time the tool is started.
            By default, this does nothing.
            You should not normally be calling this method directly--only the view should.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoTool.Stop">
            <summary>
            This method is called when this tool is about to be replaced as the view's current tool.
            </summary>
            <remarks>
            Typically you will want to put termination code here for each time the tool is stopped.
            By default, this does nothing.
            You should not normally be calling this method directly--only the view should.
            If you want to cause this tool to stop, call <see cref="M:Northwoods.GoWeb.GoTool.StopTool"/> instead,
            which will eventually call this method.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoTool.DoMouseDown">
            <summary>
            The view calls this method upon a mouse down event; all of the event
            information is provided by the <see cref="P:Northwoods.GoWeb.GoTool.LastInput"/> property.
            </summary>
            <remarks>
            By default, this does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoTool.DoMouseMove">
            <summary>
            The view calls this method upon a mouse move event; all of the event
            information is provided by the <see cref="P:Northwoods.GoWeb.GoTool.LastInput"/> property.
            </summary>
            <remarks>
            By default, this does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoTool.DoMouseUp">
            <summary>
            The view calls this method upon a mouse up event; all of the event
            information is provided by the <see cref="P:Northwoods.GoWeb.GoTool.LastInput"/> property.
            </summary>
            <remarks>
            By default, this just calls <see cref="M:Northwoods.GoWeb.GoTool.StopTool"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoTool.DoMouseWheel">
            <summary>
            The view calls this method as the mouse wheel rotates; all of the event
            information is provided by the <see cref="P:Northwoods.GoWeb.GoTool.LastInput"/> property.
            </summary>
            <remarks>
            By default this does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoTool.DoMouseHover">
            <summary>
            The view calls this method after the mouse rests for a while at a point;
            all of the event information is provided by the <see cref="P:Northwoods.GoWeb.GoTool.LastInput"/> property.
            </summary>
            <remarks>
            By default, this does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoTool.DoCancelMouse">
            <summary>
            The view calls this method when the user cancels the gesture with the mouse;
            all of the event information is provided by the <see cref="P:Northwoods.GoWeb.GoTool.LastInput"/> property.
            </summary>
            <remarks>
            By default, this just calls <see cref="M:Northwoods.GoWeb.GoTool.StopTool"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoTool.DoKeyDown">
            <summary>
            The view calls this method when the user presses a key on the keyboard;
            all of the event information is provided by the <see cref="P:Northwoods.GoWeb.GoTool.LastInput"/> property.
            </summary>
            <remarks>
            By default, this just calls <see cref="M:Northwoods.GoWeb.GoTool.DoCancelMouse"/> if the user pressed
            the <c>Escape</c> key.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoTool.DoSelect(Northwoods.GoWeb.GoInputEventArgs)">
            <summary>
            Any tool can call this method in order to implement the standard selection behavior
            for a user click.
            </summary>
            <param name="evt">a <see cref="T:Northwoods.GoWeb.GoInputEventArgs"/> describing the input event</param>
            <remarks>
            This sets the <see cref="P:Northwoods.GoWeb.GoTool.CurrentObject"/> to be the result of a call
            to the view's <see cref="M:Northwoods.GoWeb.GoView.PickObject(System.Boolean,System.Boolean,System.Drawing.PointF,System.Boolean)"/> to pick the selectable
            document object at the current point.
            If an object is found, what happens to the selection depends on any
            modifiers to the event:
            if <see cref="P:Northwoods.GoWeb.GoInputEventArgs.Control"/> is true,
            we toggle the selectedness of the current object;
            if <see cref="P:Northwoods.GoWeb.GoInputEventArgs.Shift"/> is true,
            we add the current object to the selection;
            otherwise we just make the current object the only selection.
            If no object is found and neither <see cref="P:Northwoods.GoWeb.GoInputEventArgs.Control"/>
            nor <see cref="P:Northwoods.GoWeb.GoInputEventArgs.Shift"/> are true, we empty the selection.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoTool.DoClick(Northwoods.GoWeb.GoInputEventArgs)">
            <summary>
            Any tool can call this method in order to implement the standard click behavior.
            </summary>
            <param name="evt">a <see cref="T:Northwoods.GoWeb.GoInputEventArgs"/> describing the input event</param>
            <returns></returns>
            <remarks>
            By default, this just calls either <see cref="M:Northwoods.GoWeb.GoView.DoDoubleClick(Northwoods.GoWeb.GoInputEventArgs)"/>
            or <see cref="M:Northwoods.GoWeb.GoView.DoSingleClick(Northwoods.GoWeb.GoInputEventArgs)"/>, depending on whether
            <see cref="P:Northwoods.GoWeb.GoInputEventArgs.DoubleClick"/> is true.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoTool.StopTool">
            <summary>
            This method just causes the view's current tool to be stopped
            and to start the view's default tool instead as the current tool.
            </summary>
            <remarks>
            Call this method when this tool is finished its task.
            When the view replaces this tool with the default one, it will
            call the <see cref="M:Northwoods.GoWeb.GoTool.Stop"/> method on this tool.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoTool.StartTransaction">
            <summary>
            Start a transaction on the view.
            </summary>
            <returns></returns>
            <remarks>
            This is typically called in overrides of <see cref="M:Northwoods.GoWeb.GoTool.Start"/>.
            This method also sets the <see cref="P:Northwoods.GoWeb.GoTool.TransactionResult"/> to null,
            so that a call to <see cref="M:Northwoods.GoWeb.GoTool.StopTransaction"/> will abort the
            transaction rather than finishing it normally, unless
            <see cref="P:Northwoods.GoWeb.GoTool.TransactionResult"/> has been set to something.
            Not all tools involve changes to the view's document, and thus not
            all tools need to start and stop transactions.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoTool.StopTransaction">
            <summary>
            Stop the current transaction, aborting it if <see cref="P:Northwoods.GoWeb.GoTool.TransactionResult"/> is null.
            </summary>
            <returns></returns>
            <remarks>
            This is typically called in overrides of <see cref="M:Northwoods.GoWeb.GoTool.Stop"/>.
            If the <see cref="P:Northwoods.GoWeb.GoTool.TransactionResult"/> is null, this calls <see cref="M:Northwoods.GoWeb.GoView.AbortTransaction"/>,
            otherwise this calls <see cref="M:Northwoods.GoWeb.GoView.FinishTransaction(System.String)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoTool.IsBeyondDragSize">
            <summary>
            Determine if the mouse has gone beyond the <see cref="P:Northwoods.GoWeb.GoTool.DragSize"/> distance to
            be considered a drag instead of a sloppy click.
            </summary>
            <returns>
            Returns true if the <see cref="P:Northwoods.GoWeb.GoInputEventArgs.ViewPoint"/> of <see cref="P:Northwoods.GoWeb.GoTool.LastInput"/>
            is further away from <see cref="P:Northwoods.GoWeb.GoTool.FirstInput"/> than half the distance specified by
            <see cref="P:Northwoods.GoWeb.GoTool.DragSize"/>.
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoTool.SubtractPoints(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            This shared method helps do subtraction of <c>PointF</c> values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoTool.SubtractPoints(System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            This shared method helps do subtraction of <c>PointF</c> and <c>SizeF</c> values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoTool.SubtractPoints(System.Drawing.SizeF,System.Drawing.PointF)">
            <summary>
            This shared method helps do subtraction of <c>PointF</c> and <c>SizeF</c> values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="P:Northwoods.GoWeb.GoTool.View">
            <summary>
            Gets the view for which this tool is handling canonicalized input events.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoTool.DragSize">
            <summary>
            Gets or sets the dimensions, in pixels, of the rectangle that a drag operation must extend
            to be considered a drag operation.
            </summary>
            <value>
            This <c>Size</c> is in view coordinates, not in document coordinates.
            The default value is 4x4.
            </value>
            <remarks>The rectangle is centered on the mouse-down point.</remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoTool.FirstInput">
            <summary>
            Gets this view's FirstInput property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoTool.LastInput">
            <summary>
            Gets this view's LastInput property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoTool.Selection">
            <summary>
            Gets this view's Selection property.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoTool.CurrentObject">
            <summary>
            Gets or sets this tool's CurrentObject property.
            </summary>
            <remarks>
            Often different methods of a tool will need to deal with the "current"
            <see cref="T:Northwoods.GoWeb.GoObject"/> that the user is working with.  This property
            is provided so each tool doesn't need to define it.  Not every tool
            uses this property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoTool.TransactionResult">
            <summary>
            Gets or sets whether to abort the current transaction if this tool is stopped;
            if set to a string, the string specifies the name of the transaction that will
            be finished when the tool stops.
            </summary>
            <remarks>
            This determines whether <see cref="M:Northwoods.GoWeb.GoTool.StopTransaction"/> calls
            <see cref="M:Northwoods.GoWeb.GoView.AbortTransaction"/> or <see cref="M:Northwoods.GoWeb.GoView.FinishTransaction(System.String)"/>,
            depending on whether the value is null or a <c>String</c>.
            </remarks>
        </member>
        <member name="T:Northwoods.GoWeb.GoToolAction">
            <summary>
            This modeless tool is used to handle objects like buttons or knobs that
            implement the <see cref="T:Northwoods.GoWeb.IGoActionObject"/> interface.
            </summary>
            <remarks>
            <para>
            An instance of this tool is the first tool in the default
            <see cref="T:Northwoods.GoWeb.GoView"/>'s <see cref="P:Northwoods.GoWeb.GoView.MouseDownTools"/> list.
            </para>
            <para>
            A mouse down activates the <see cref="T:Northwoods.GoWeb.IGoActionObject"/>
            under that mouse point.  The object can use the setting of the
            <see cref="P:Northwoods.GoWeb.IGoActionObject.ActionActivated"/> property to true to render differently.
            For example, a <see cref="T:Northwoods.GoWeb.GoButton"/> will appear "pressed".
            </para>
            <para>
            A mouse move will invoke <see cref="M:Northwoods.GoWeb.IGoActionObject.OnActionAdjusted(Northwoods.GoWeb.GoView,Northwoods.GoWeb.GoInputEventArgs)"/>.
            The object can use this notificaton to track the user's mouse
            in adjusting the state of the object.  For example, a knob's
            direction and value can follow the mouse over a range of values.
            </para>
            <para>
            A mouse up will invoke <see cref="M:Northwoods.GoWeb.IGoActionObject.OnAction(Northwoods.GoWeb.GoView,Northwoods.GoWeb.GoInputEventArgs)"/>.
            The object can use this notification to perform some action.
            A button can actually do some work; a knob could actually set the
            new value in the document.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolAction.#ctor(Northwoods.GoWeb.GoView)">
            <summary>
            The standard tool constructor.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolAction.CanStart">
            <summary>
            This tool is appropriate when the last input event is over an object
            that implements <see cref="T:Northwoods.GoWeb.IGoActionObject"/>, or is over a part of
            an <see cref="T:Northwoods.GoWeb.IGoActionObject"/>.
            </summary>
            <returns></returns>
            <remarks>
            This tool is not runnable when the user uses the context button.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolAction.Start">
            <summary>
            Get the <see cref="T:Northwoods.GoWeb.IGoActionObject"/> that the mouse is over, and activate it
            by setting its <see cref="P:Northwoods.GoWeb.IGoActionObject.ActionActivated"/> property to true
            and calling its <see cref="M:Northwoods.GoWeb.IGoActionObject.OnActionActivated(Northwoods.GoWeb.GoView,Northwoods.GoWeb.GoInputEventArgs)"/> method.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolAction.PickActionObject">
            <summary>
            Find an <see cref="T:Northwoods.GoWeb.IGoActionObject"/> that the last input event is over.
            </summary>
            <returns>an <see cref="T:Northwoods.GoWeb.IGoActionObject"/>, or null if none</returns>
            <remarks>
            This proceeds up the chain of <see cref="P:Northwoods.GoWeb.GoObject.Parent"/>s to find an
            object that implements <see cref="T:Northwoods.GoWeb.IGoActionObject"/> and whose
            <see cref="P:Northwoods.GoWeb.IGoActionObject.ActionEnabled"/> property is true.
            The result is remembered as the value of the <see cref="P:Northwoods.GoWeb.GoToolAction.ActionObject"/> property.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolAction.Stop">
            <summary>
            Make sure any <see cref="T:Northwoods.GoWeb.IGoActionObject"/> is deactivated
            and that any automatic adjustments calls are stopped.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolAction.DoMouseMove">
            <summary>
            Invoke the <see cref="M:Northwoods.GoWeb.IGoActionObject.OnActionAdjusted(Northwoods.GoWeb.GoView,Northwoods.GoWeb.GoInputEventArgs)"/> method.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolAction.DoMouseUp">
            <summary>
            Invoke the <see cref="M:Northwoods.GoWeb.IGoActionObject.OnAction(Northwoods.GoWeb.GoView,Northwoods.GoWeb.GoInputEventArgs)"/> method.
            </summary>
            <remarks>
            This also stops the tool.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolAction.DoCancelMouse">
            <summary>
            When this tool is cancelled, call the <see cref="M:Northwoods.GoWeb.IGoActionObject.OnActionCancelled(Northwoods.GoWeb.GoView)"/> method.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolAction.StartAutoAdjusting">
            <summary>
            On Windows Forms, start a Timer to repeatedly call
            <see cref="T:Northwoods.GoWeb.IGoActionObject"/>.<see cref="M:Northwoods.GoWeb.IGoActionObject.OnActionAdjusted(Northwoods.GoWeb.GoView,Northwoods.GoWeb.GoInputEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolAction.StopAutoAdjusting">
            <summary>
            On Windows Forms, stop any Timer that is automatically calling
            <see cref="T:Northwoods.GoWeb.IGoActionObject"/>.<see cref="M:Northwoods.GoWeb.IGoActionObject.OnActionAdjusted(Northwoods.GoWeb.GoView,Northwoods.GoWeb.GoInputEventArgs)"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolAction.AdjustedAutomatically">
            <summary>
            True when <see cref="T:Northwoods.GoWeb.IGoActionObject"/>.<see cref="M:Northwoods.GoWeb.IGoActionObject.OnActionAdjusted(Northwoods.GoWeb.GoView,Northwoods.GoWeb.GoInputEventArgs)"/>.
            is called automatically, due to a Windows Forms Timer.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolAction.ActionObject">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoWeb.IGoActionObject"/> being manipulated.
            </summary>
            <value>
            This is normally set to the value returned by <see cref="M:Northwoods.GoWeb.GoToolAction.PickActionObject"/>.
            Typically this value will refer to the same object as <see cref="P:Northwoods.GoWeb.GoTool.CurrentObject"/>.
            </value>
        </member>
        <member name="T:Northwoods.GoWeb.GoToolContext">
            <summary>
            The "mode-less" tool used to handle the user's mouse click to invoke a context menu.
            </summary>
            <remarks>
            An instance of this tool is one of the first tools in the default
            <see cref="T:Northwoods.GoWeb.GoView"/>'s <see cref="P:Northwoods.GoWeb.GoView.MouseDownTools"/> list.
            By default this will make the object at the mouse point be the only
            selected object.
            Set <see cref="P:Northwoods.GoWeb.GoToolContext.SingleSelection"/> if you want to let users operate a context
            menu on more than one selected object.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolContext.#ctor(Northwoods.GoWeb.GoView)">
            <summary>
            The standard tool constructor.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolContext.CanStart">
            <summary>
            The context menu tool can be started when the last input event is a context menu button.
            </summary>
            <returns>true if <see cref="P:Northwoods.GoWeb.GoInputEventArgs.IsContextButton"/> is true for the
            <see cref="P:Northwoods.GoWeb.GoTool.LastInput"/></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolContext.DoMouseUp">
            <summary>
            When there is a selectable document object under the last input event point,
            select it if it isn't already in the selection and call <see cref="M:Northwoods.GoWeb.GoView.DoContextClick(Northwoods.GoWeb.GoInputEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolContext.DoSelect(Northwoods.GoWeb.GoInputEventArgs)">
            <summary>
            When <see cref="P:Northwoods.GoWeb.GoToolContext.SingleSelection"/> is false, the user's context-click on a selected
            object does not modify the selection, thereby allowing the context-click action to
            apply to a multiple selection.
            </summary>
            <param name="evt"></param>
            <remarks>
            If the user holds down the Control and/or Shift keys, or when <see cref="P:Northwoods.GoWeb.GoToolContext.SingleSelection"/>
            is true, the standard <see cref="M:Northwoods.GoWeb.GoTool.DoSelect(Northwoods.GoWeb.GoInputEventArgs)"/> behavior occurs.
            When the user context-clicks over an object that is not selected, it becomes
            the single selection.
            When the user context-clicks over no object, the selection is cleared.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolContext.SingleSelection">
            <summary>
            Gets or sets whether the <see cref="P:Northwoods.GoWeb.GoTool.CurrentObject"/> becomes
            the one and only selected object even if there are other already-selected objects.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="T:Northwoods.GoWeb.GoToolCreating">
            <summary>
            This tool allows the user to add a copy of an object to the document by
            dragging in the background where and how large it should be.
            </summary>
            <example>
            For modeless use, you would typically create this tool when
            initializing a GoView:
            <code>
              GoToolCreating ctool = new GoToolCreating(goView1);
              GoPolygon tri = new GoPolygon();
              tri.BrushColor = Color.LightBlue;
              tri.AddPoint(5, 0);
              tri.AddPoint(0, 10);
              tri.AddPoint(10, 10);
              ctool.Prototype = tri;
              goView1.ReplaceMouseTool(typeof(GoToolRubberBanding), ctool);
            </code>
            For modal use, you might create this tool in a command invoked from
            a menu or toolbar button or keyboard event handler:
            <code>
              GoToolCreating ctool = new GoToolCreating(goView1);
              GoPolygon tri = new GoPolygon();
              tri.BrushColor = Color.LightBlue;
              tri.AddPoint(5, 0);
              tri.AddPoint(0, 10);
              tri.AddPoint(10, 10);
              ctool.Prototype = tri;
              ctool.Modal = true;
              ctool.OneShot = false;
              goView1.Tool = ctool;
            </code>
            </example>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolCreating.#ctor(Northwoods.GoWeb.GoView)">
            <summary>
            This constructs a modeless creation tool that has no <see cref="P:Northwoods.GoWeb.GoToolCreating.Prototype"/> object.
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolCreating.CanStart">
            <summary>
            This tool, when used modelessly, does not start when the user is using
            the context button or when the mouse is over an object in the document.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolCreating.Start">
            <summary>
            Starting this tool starts a transaction covering all of the
            changes made until this tool is stopped.
            </summary>
            <remarks>
            On WinForms it also changes the cursor to a Cross.
            This calls <see cref="M:Northwoods.GoWeb.GoTool.StartTransaction"/> if
            <see cref="P:Northwoods.GoWeb.GoToolCreating.Modal"/> is false or if <see cref="P:Northwoods.GoWeb.GoToolCreating.OneShot"/> is true.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolCreating.Stop">
            <summary>
            Stopping this tool will remove the temporary <see cref="P:Northwoods.GoWeb.GoToolCreating.NewObject"/> from
            the view, if it had not yet been added to the document.
            </summary>
            <remarks>
            This also calls <see cref="M:Northwoods.GoWeb.GoTool.StopTransaction"/> if
            <see cref="P:Northwoods.GoWeb.GoToolCreating.Modal"/> is false or if <see cref="P:Northwoods.GoWeb.GoToolCreating.OneShot"/> is true.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolCreating.DoMouseDown">
            <summary>
            A mouse-down activates this tool so that a mouse-move causes
            the <see cref="P:Northwoods.GoWeb.GoToolCreating.Prototype"/> object to be copied as the <see cref="P:Northwoods.GoWeb.GoToolCreating.NewObject"/>.
            </summary>
            <remarks>
            This method is not called when this tool is used modelessly.
            But when used modally, we want to wait for a mouse-down before
            creating and resizing the <see cref="P:Northwoods.GoWeb.GoToolCreating.NewObject"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolCreating.DoMouseMove">
            <summary>
            Create and resize the <see cref="P:Northwoods.GoWeb.GoToolCreating.NewObject"/> that is added to this view.
            </summary>
            <remarks>
            <para>
            When this tool is already activated, the first mouse-move will call
            <see cref="M:Northwoods.GoWeb.GoToolCreating.CopyPrototype"/> and add the resulting object, as the
            <see cref="P:Northwoods.GoWeb.GoToolCreating.NewObject"/>, to the view.
            Further mouse-moves will continuously resize the <see cref="P:Northwoods.GoWeb.GoToolCreating.NewObject"/>
            (or the <see cref="P:Northwoods.GoWeb.GoToolCreating.NewObject"/>'s <see cref="P:Northwoods.GoWeb.GoObject.SelectionObject"/>
            if <see cref="P:Northwoods.GoWeb.GoToolCreating.ResizesSelectionObject"/> is true)
            according to the bounds returned by <see cref="M:Northwoods.GoWeb.GoToolCreating.ComputeBox"/>.
            </para>
            <para>
            If this tool is started but not yet activated, mouse-moves are ignored
            when <see cref="P:Northwoods.GoWeb.GoToolCreating.Modal"/> is true until a mouse-down activates this tool.
            When <see cref="P:Northwoods.GoWeb.GoToolCreating.Modal"/> is false, a mouse-move automatically activates
            this tool so that the <see cref="P:Northwoods.GoWeb.GoToolCreating.NewObject"/> is created and mouse moves
            resize it.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolCreating.DoMouseUp">
            <summary>
            A mouse-up calls <see cref="M:Northwoods.GoWeb.GoToolCreating.DoCreate"/> to add the <see cref="P:Northwoods.GoWeb.GoToolCreating.NewObject"/>
            to the view's document.
            </summary>
            <remarks>
            If <see cref="P:Northwoods.GoWeb.GoToolCreating.OneShot"/> is true, this tool stops itself.
            Otherwise the user can continue to create new objects.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolCreating.DoCancelMouse">
            <summary>
            If <see cref="P:Northwoods.GoWeb.GoToolCreating.Modal"/> and not <see cref="P:Northwoods.GoWeb.GoToolCreating.OneShot"/>, the current
            <see cref="P:Northwoods.GoWeb.GoToolCreating.NewObject"/> is removed but this tool remains active to allow
            further object creations; otherwise this tool is stopped.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolCreating.ComputeBox">
            <summary>
            Compute the Bounds for the <see cref="P:Northwoods.GoWeb.GoToolCreating.NewObject"/>, given the
            initial and current positions of the mouse.
            </summary>
            <returns>
            a RectangleF in document coordinates, within the limits
            imposed by <see cref="P:Northwoods.GoWeb.GoToolCreating.MinimumSize"/> and <see cref="P:Northwoods.GoWeb.GoToolCreating.MaximumSize"/>
            </returns>
            <remarks>
            If <see cref="P:Northwoods.GoWeb.GoToolCreating.SnapsToGrid"/> is true, the resulting box
            will have its top-left and bottom-right points snapped to the
            view's grid.  However, the <see cref="P:Northwoods.GoWeb.GoToolCreating.MinimumSize"/> and
            <see cref="P:Northwoods.GoWeb.GoToolCreating.MaximumSize"/> limits still apply, so you probably
            want to set the <see cref="P:Northwoods.GoWeb.GoToolCreating.MinimumSize"/> to be the same as
            the <c>GoView.GridCellSize</c>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolCreating.DoCreate">
            <summary>
            Add the <see cref="P:Northwoods.GoWeb.GoToolCreating.NewObject"/> to this view's document.
            </summary>
            <remarks>
            This removes the <see cref="P:Northwoods.GoWeb.GoToolCreating.NewObject"/> from the view and adds it to the view's document.
            It also selects the <see cref="P:Northwoods.GoWeb.GoToolCreating.NewObject"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolCreating.CopyPrototype">
            <summary>
            This method is called to create the <see cref="P:Northwoods.GoWeb.GoToolCreating.NewObject"/> by
            making a copy of the <see cref="P:Northwoods.GoWeb.GoToolCreating.Prototype"/>.
            </summary>
            <returns>a copy of <see cref="P:Northwoods.GoWeb.GoToolCreating.Prototype"/>, or null if unsuccessful</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolCreating.DoKeyDown">
            <summary>
            When <see cref="P:Northwoods.GoWeb.GoToolCreating.Modal"/> is true and <see cref="P:Northwoods.GoWeb.GoToolCreating.OneShot"/> is false,
            handle Ctrl-Z and Ctrl-Y for undo and redo.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolCreating.Prototype">
            <summary>
            Gets or sets the GoObject that should be copied, sized, and positioned
            by this tool.
            </summary>
            <value>
            By default this is just a GoRectangle, but it is normally set to
            the kind of object, initialized the way you want, that you want the
            user to draw.  The object should be Resizable and ResizesRealtime,
            and probably should be Reshapable.
            </value>
            <remarks>
            You might override this property to get the prototype object from
            a collection of objects, chosen by the some context that your
            application determines.  For example, this might always return
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolCreating.Modal">
            <summary>
            Whether this tool can be used to implement an object-creating mode
            for a GoView, or whether this tool can be get started when appropriate
            as one of the GoView.MouseMoveTools.
            </summary>
            <value>
            This defaults to false, to be used as a MouseMoveTool.
            </value>
            <remarks>
            Depending on whether you want the user to remain in creation mode
            after a mouse up, you might want to set <see cref="P:Northwoods.GoWeb.GoToolCreating.OneShot"/>
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolCreating.OneShot">
            <summary>
            Whether this tool automatically stops itself on a mouse up event.
            </summary>
            <value>
            This defaults to true.
            </value>
            <remarks>
            You might want to set this to false if <see cref="P:Northwoods.GoWeb.GoToolCreating.Modal"/> is true.
            When <see cref="P:Northwoods.GoWeb.GoToolCreating.Modal"/> is true and <see cref="P:Northwoods.GoWeb.GoToolCreating.OneShot"/> is false,
            each call to <see cref="M:Northwoods.GoWeb.GoToolCreating.DoCreate"/> occurs in its own transaction
            and this tool handles Ctrl-Z and Ctrl-Y to Undo and Redo each creation.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolCreating.MinimumSize">
            <summary>
            Gets or sets the minimum size for the <see cref="P:Northwoods.GoWeb.GoToolCreating.NewObject"/>,
            as computed by <see cref="M:Northwoods.GoWeb.GoToolCreating.ComputeBox"/>.
            </summary>
            <value>
            The default minimum size, in document coordinates, is 10x10.
            Any new value must have positive Width and Height.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolCreating.MaximumSize">
            <summary>
            Gets or sets the maximum size for the <see cref="P:Northwoods.GoWeb.GoToolCreating.NewObject"/>,
            as computed by <see cref="M:Northwoods.GoWeb.GoToolCreating.ComputeBox"/>.
            </summary>
            <value>
            The default maximum size, in document coordinates, is really large.
            Any new value must have positive Width and Height.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolCreating.ResizesSelectionObject">
            <summary>
            Gets or sets whether the <see cref="P:Northwoods.GoWeb.GoToolCreating.NewObject"/> or the <see cref="P:Northwoods.GoWeb.GoToolCreating.NewObject"/>'s
            <see cref="P:Northwoods.GoWeb.GoObject.SelectionObject"/> has its <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/> set
            to the value returned by <see cref="M:Northwoods.GoWeb.GoToolCreating.ComputeBox"/>.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolCreating.SnapsToGrid">
            <summary>
            Gets or sets whether the result of <see cref="M:Northwoods.GoWeb.GoToolCreating.ComputeBox"/> heeds the view's
            grid by calling <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="M:Northwoods.GoWeb.GoView.SnapPoint(System.Drawing.PointF,Northwoods.GoWeb.GoObject)"/>.
            </summary>
            <value>
            The default value is false.
            </value>
            <remarks>
            When this is true, in order for <see cref="M:Northwoods.GoWeb.GoToolCreating.ComputeBox"/> to snap
            the <c>GoView.FirstInput.DocPoint</c> and <c>GoView.LastInput.DocPoint</c>,
            <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="P:Northwoods.GoWeb.GoView.GridSnapDrag"/> should
            be a value other than <c>GoViewSnapStyle.None</c>, or the view's
            <see cref="P:Northwoods.GoWeb.GoView.Grid"/>'s <see cref="M:Northwoods.GoWeb.GoGrid.CanSnapPoint(System.Drawing.PointF,Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoView)"/> predicate
            should return true.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolCreating.NewObject">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoWeb.GoObject"/> that is a copy of the <see cref="P:Northwoods.GoWeb.GoToolCreating.Prototype"/>
            that will be added to this view's document in <see cref="M:Northwoods.GoWeb.GoToolCreating.DoCreate"/>.
            </summary>
            <remarks>
            This property is set by <see cref="M:Northwoods.GoWeb.GoToolCreating.DoMouseMove"/> when this tool is <see cref="P:Northwoods.GoWeb.GoToolCreating.Active"/>.
            The value is the result of a call to <see cref="M:Northwoods.GoWeb.GoToolCreating.CopyPrototype"/>.
            While the user is dragging the mouse around, this new object will
            be part of the view.  The <see cref="M:Northwoods.GoWeb.GoToolCreating.DoCreate"/> method will remove this new object
            from the view and add it to the document.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolCreating.Active">
            <summary>
            Gets or sets whether this tool is in the process of drawing a new object.
            </summary>
            <value>
            The value is set to true in <see cref="M:Northwoods.GoWeb.GoToolCreating.DoMouseDown"/> if <see cref="M:Northwoods.GoWeb.GoToolCreating.CanStart"/> is true,
            and in <see cref="M:Northwoods.GoWeb.GoToolCreating.DoMouseMove"/> if <see cref="P:Northwoods.GoWeb.GoToolCreating.Modal"/> is false.
            </value>
        </member>
        <member name="T:Northwoods.GoWeb.GoToolDragging">
            <summary>
            The tool used to implement dragging behavior, for moving and copying objects.
            </summary>
            <remarks>
            This tool is expected to be invoked upon a mouse move.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolDragging.#ctor(Northwoods.GoWeb.GoView)">
            <summary>
            The standard tool constructor.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolDragging.CanStart">
            <summary>
            The dragging tool is applicable when the user can move or copy one or more objects.
            </summary>
            <returns>
            This predicate returns true when:
            <list type="bullet">
            <item>the user has started moving the mouse with a mouse button down</item>
            <item>the view allows objects to be moved or copied or dragged out of the window</item>
            <item>the mouse button is not the context menu button</item>
            <item>there is a selectable object under the mouse</item>
            <item>and that object can be moved or copied</item>
            </list>
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolDragging.Start">
            <summary>
            Start a drag-and-drop operation within the view.
            </summary>
            <remarks>
            This first remembers the <see cref="P:Northwoods.GoWeb.GoToolDragging.MoveOffset"/> between the <see cref="P:Northwoods.GoWeb.GoTool.CurrentObject"/>'s
            position and the mouse point (the first input event point).
            It removes any selection handles, so those do not need to be dragged along.
            It also starts a transaction.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolDragging.Stop">
            <summary>
            Clean up after any drag.
            </summary>
            <remarks>
            This restores any hidden selection handles, removes any
            drag selection objects, and stops the current transaction.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolDragging.DoMouseMove">
            <summary>
            Mouse drags just call <see cref="M:Northwoods.GoWeb.GoToolDragging.DoDragging(Northwoods.GoWeb.GoInputState)"/> and <see cref="M:Northwoods.GoWeb.GoToolDragging.DoMouseOver(Northwoods.GoWeb.GoInputEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolDragging.DoMouseOver(Northwoods.GoWeb.GoInputEventArgs)">
            <summary>
            Call <see cref="T:Northwoods.GoWeb.GoView"/> method <see cref="M:Northwoods.GoWeb.GoView.DoObjectEnterLeave(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoInputEventArgs)"/>.
            </summary>
            <param name="evt"></param>
            <remarks>
            This method keeps track of the current document object that the mouse is over.
            It ignores any objects that are part of the selection.
            When the current document object changes, this calls <see cref="M:Northwoods.GoWeb.GoView.DoObjectEnterLeave(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoInputEventArgs)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolDragging.DoMouseUp">
            <summary>
            The release of the mouse makes a final call to <see cref="M:Northwoods.GoWeb.GoToolDragging.DoDragging(Northwoods.GoWeb.GoInputState)"/> before
            finishing the transaction.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolDragging.DoCancelMouse">
            <summary>
            Cancelling a drag involves moving the selection back to the original position
            before aborting the transaction.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolDragging.MayBeCopying">
            <summary>
            This predicate is true when the view allows objects to be copied and inserted,
            and some object in the Selection is copyable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolDragging.MustBeCopying">
            <summary>
            This predicate is true when the user is trying to force a copy by holding
            down the Control modifier.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolDragging.MayBeMoving">
            <summary>
            This predicate is true when the view allows objects to be moved,
            and some object in the Selection is movable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolDragging.MustBeMoving">
            <summary>
            This predicate is true when the user is trying to force a move by holding
            down the Shift modifier.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolDragging.DoDragging(Northwoods.GoWeb.GoInputState)">
            <summary>
            Perform the drag, for both moving and copying, including the final move or copy
            on a mouse up event.
            </summary>
            <param name="evttype"></param>
            <remarks>
            Whether the drag is performing a move or a copy is determined by the
            value of the <see cref="M:Northwoods.GoWeb.GoToolDragging.MayBeCopying"/> and <see cref="M:Northwoods.GoWeb.GoToolDragging.MayBeMoving"/> predicates.
            This method is sensitive to the <see cref="P:Northwoods.GoWeb.GoView.DragsRealtime"/> property.
            When this property is false, dragging uses the <see cref="P:Northwoods.GoWeb.GoToolDragging.DragSelection"/>
            selection instead of the normal <see cref="P:Northwoods.GoWeb.GoView.Selection"/> collection.
            It calls <see cref="M:Northwoods.GoWeb.GoToolDragging.MakeDragSelection"/> to create the drag selection if needed
            and then moves the drag selection.
            When not copying and when <see cref="P:Northwoods.GoWeb.GoView.DragsRealtime"/> is true, it calls
            <see cref="M:Northwoods.GoWeb.GoToolDragging.ClearDragSelection"/> to stop using any drag selection and then it
            moves the regular <see cref="P:Northwoods.GoWeb.GoView.Selection"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolDragging.ComputeEffectiveSelection(Northwoods.GoWeb.IGoCollection,System.Boolean)">
            <summary>
            Produce a new <see cref="T:Northwoods.GoWeb.GoSelection"/> that is the real set of objects
            to be moved by <see cref="M:Northwoods.GoWeb.GoView.MoveSelection(Northwoods.GoWeb.GoSelection,System.Drawing.SizeF,System.Boolean)"/> or copied by
            <see cref="M:Northwoods.GoWeb.GoView.CopySelection(Northwoods.GoWeb.GoSelection,System.Drawing.SizeF,System.Boolean)"/>.
            </summary>
            <param name="coll"></param>
            <param name="move">true for moving, false for copying</param>
            <returns>a <see cref="T:Northwoods.GoWeb.GoSelection"/> that is cached as <see cref="P:Northwoods.GoWeb.GoToolDragging.EffectiveSelection"/></returns>
            <remarks>
            This method is used to try to avoid problems with double-moving
            due to duplicate entries or both a parent and its child being in
            the argument collection.
            This also removes objects whose <see cref="P:Northwoods.GoWeb.GoObject.DraggingObject"/>
            is null or has a false value for <see cref="M:Northwoods.GoWeb.GoObject.CanMove"/> (if
            <paramref name="move"/> is true) or a false value for <see cref="M:Northwoods.GoWeb.GoObject.CanCopy"/>
            (if <paramref name="move"/> is false).
            Furthermore this adds to the collection all links that have both
            ports in the selection.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolDragging.CreateDragSelection">
            <summary>
            Create a new selection object containing an image of all of the real selected objects.
            </summary>
            <returns>a new <see cref="T:Northwoods.GoWeb.GoSelection"/> holding view objects that represent the
            objects in the <see cref="P:Northwoods.GoWeb.GoView.Selection"/></returns>
            <remarks>
            This creates a new <see cref="T:Northwoods.GoWeb.GoSelection"/> for this view.
            The objects that are in this selection have been added to the default
            layer of the view.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolDragging.MakeDragSelection">
            <summary>
            Start using a <see cref="P:Northwoods.GoWeb.GoToolDragging.DragSelection"/>, creating it if needed, and moving the
            originally selected objects back to their original position.
            </summary>
            <remarks>
            This also sets <see cref="P:Northwoods.GoWeb.GoTool.CurrentObject"/> to a corresponding
            outline object in the drag selection, and remembers the original current
            object in the <see cref="P:Northwoods.GoWeb.GoToolDragging.DragSelectionOriginalObject"/> property.  This
            allows <see cref="M:Northwoods.GoWeb.GoToolDragging.DoDragging(Northwoods.GoWeb.GoInputState)"/>to continue calculating move offsets based
            on the position of the <see cref="P:Northwoods.GoWeb.GoTool.CurrentObject"/>, even though 
            the objects are part of the drag selection instead of the
            original selected objects.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolDragging.ClearDragSelection">
            <summary>
            Stop using the <see cref="P:Northwoods.GoWeb.GoToolDragging.DragSelection"/>.
            </summary>
            <remarks>
            Remove all of the objects from the <see cref="P:Northwoods.GoWeb.GoToolDragging.DragSelection"/> from the view,
            clear the <see cref="P:Northwoods.GoWeb.GoToolDragging.DragSelection"/> property, and
            set the <see cref="P:Northwoods.GoWeb.GoTool.CurrentObject"/> back to the original current object.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolDragging.DragSelection">
            <summary>
            Gets or sets the alternative selection collection, holding an image
            of the view's selection.
            </summary>
            <remarks>
            This is created by <see cref="M:Northwoods.GoWeb.GoToolDragging.CreateDragSelection"/>, and is reset by
            <see cref="M:Northwoods.GoWeb.GoToolDragging.ClearDragSelection"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoToolDragging.MakeDragSelection"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolDragging.DragSelectionOriginalObject">
            <summary>
            Gets or sets what had been the <see cref="P:Northwoods.GoWeb.GoTool.CurrentObject"/> before the drag
            selection substituted its own.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoToolDragging.DragSelection"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolDragging.EffectiveSelection">
            <summary>
            Gets the cached result of a call to <see cref="M:Northwoods.GoWeb.GoToolDragging.ComputeEffectiveSelection(Northwoods.GoWeb.IGoCollection,System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolDragging.SelectsWhenStarts">
            <summary>
            Control whether <see cref="M:Northwoods.GoWeb.GoToolDragging.Start"/> may modify the view's selection.
            </summary>
            <value>
            This defaults to true--<see cref="M:Northwoods.GoWeb.GoToolDragging.Start"/> changes the selection
            based on where the mouse is and what modifier keys are in effect.
            </value>
            <remarks>
            You would set this to false when using this tool in a modal fashion,
            where your code has already specified the objects to be dragged in the view's
            <see cref="T:Northwoods.GoWeb.GoSelection"/>.  If you set this property to true,
            you should also set <see cref="P:Northwoods.GoWeb.GoToolDragging.MoveOffset"/> and <see cref="P:Northwoods.GoWeb.GoTool.CurrentObject"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolDragging.MoveOffset">
            <summary>
            Gets or sets the offset of the mouse point within the current object.
            </summary>
            <value>
            This <c>SizeF</c> value is in document coordinates.
            </value>
            <remarks>
            The mouse is normally inside the current object, which is just one
            of the selected objects being dragged.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolDragging.CopiesEffectiveSelection">
            <summary>
            Gets or sets whether for a copying operation the <see cref="P:Northwoods.GoWeb.GoView.Selection"/>
            <see cref="P:Northwoods.GoWeb.GoToolDragging.EffectiveSelection"/> is copied.
            </summary>
            <value>
            The default value is false.
            </value>
            <remarks>
            Basically this controls whether <see cref="M:Northwoods.GoWeb.GoView.CopySelection(Northwoods.GoWeb.GoSelection,System.Drawing.SizeF,System.Boolean)"/> is
            called with the view's <see cref="P:Northwoods.GoWeb.GoView.Selection"/> or with the possibly
            augmented <see cref="P:Northwoods.GoWeb.GoToolDragging.EffectiveSelection"/>.  The latter collection typically
            will hold all of the links that connect selected nodes.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoToolDragging.ComputeEffectiveSelection(Northwoods.GoWeb.IGoCollection,System.Boolean)"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolDragging.EffectiveSelectionIncludesLinks">
            <summary>
            Gets or sets whether <see cref="M:Northwoods.GoWeb.GoToolDragging.ComputeEffectiveSelection(Northwoods.GoWeb.IGoCollection,System.Boolean)"/> should include
            links that have both ports in (or part of) the selection being dragged.
            </summary>
            <value>The default value is true.</value>
            <remarks>
            When this is true, links that connect dragged nodes will be moved along
            with the nodes.  In such cases links will normally not be rerouted and thus
            will maintain the shape that they had originally connecting the nodes.
            When this property is false, <see cref="M:Northwoods.GoWeb.GoToolDragging.ComputeEffectiveSelection(Northwoods.GoWeb.IGoCollection,System.Boolean)"/>
            will not include such links in the effective selection -- after the nodes
            are dragged, the links will need to recalculate their strokes, thereby
            potentially losing any special path that they may have had between the nodes.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolDragging.HidesSelectionHandles">
            <summary>
            Gets or sets whether selection handles should be removed as the drag starts.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="T:Northwoods.GoWeb.GoToolLinking">
            <summary>
            The tool used to implement the user's drawing a new link or reconnecting an existing link.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolLinking.#ctor(Northwoods.GoWeb.GoView)">
            <summary>
            The standard tool constructor.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolLinking.Stop">
            <summary>
            Cleaning up from any kind of linking operation involves
            removing any temporary ports or link from the view and
            stopping the current transaction.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolLinking.DoMouseMove">
            <summary>
            A mouse move during a linking operation involves
            calling <see cref="M:Northwoods.GoWeb.GoToolLinking.DoLinking(System.Drawing.PointF)"/> and autoscrolling the view.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolLinking.DoMouseUp">
            <summary>
            A mouse up event ends the linking operation.
            </summary>
            <remarks>
            Depending on whether the user is drawing a new link or relinking,
            whether the user is drawing <see cref="P:Northwoods.GoWeb.GoToolLinking.Forwards"/> or not, and
            whether <see cref="M:Northwoods.GoWeb.GoToolLinking.PickNearestPort(System.Drawing.PointF)"/> found a valid port at
            a reasonable distance, this method will call either
            <see cref="M:Northwoods.GoWeb.GoToolLinking.DoNewLink(Northwoods.GoWeb.IGoPort,Northwoods.GoWeb.IGoPort)"/>, <see cref="M:Northwoods.GoWeb.GoToolLinking.DoRelink(Northwoods.GoWeb.IGoLink,Northwoods.GoWeb.IGoPort,Northwoods.GoWeb.IGoPort)"/>,
            <see cref="M:Northwoods.GoWeb.GoToolLinking.DoNoNewLink(Northwoods.GoWeb.IGoPort,Northwoods.GoWeb.IGoPort)"/>, or <see cref="M:Northwoods.GoWeb.GoToolLinking.DoNoRelink(Northwoods.GoWeb.IGoLink,Northwoods.GoWeb.IGoPort,Northwoods.GoWeb.IGoPort)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolLinking.DoCancelMouse">
            <summary>
            Clean up the link state before stopping this tool.
            </summary>
            <remarks>
            Depending on whether the user is drawing a new link or relinking,
            whether the user is drawing <see cref="P:Northwoods.GoWeb.GoToolLinking.Forwards"/> or not,
            this method will call either
            <see cref="M:Northwoods.GoWeb.GoToolLinking.DoNoNewLink(Northwoods.GoWeb.IGoPort,Northwoods.GoWeb.IGoPort)"/>, <see cref="M:Northwoods.GoWeb.GoToolLinking.DoNoRelink(Northwoods.GoWeb.IGoLink,Northwoods.GoWeb.IGoPort,Northwoods.GoWeb.IGoPort)"/>,
            or <see cref="M:Northwoods.GoWeb.GoToolLinking.DoCancelRelink(Northwoods.GoWeb.IGoLink,Northwoods.GoWeb.IGoPort,Northwoods.GoWeb.IGoPort)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolLinking.PickPort(System.Drawing.PointF)">
            <summary>
            Find a port in the document at the given point.
            </summary>
            <param name="dc">a <c>PointF</c> in document coordinates</param>
            <returns>
            an <see cref="T:Northwoods.GoWeb.IGoPort"/>, or null if none was found at <paramref name="dc"/>,
            or null if the object found is a child of the <see cref="P:Northwoods.GoWeb.GoToolLinking.Link"/>.
            The latter case is to avoid picking any port that is part of
            the link, such as when the link is a <see cref="T:Northwoods.GoWeb.GoLabeledLink"/>
            and the <see cref="P:Northwoods.GoWeb.GoLabeledLink.FromLabel"/> or the <see cref="P:Northwoods.GoWeb.GoLabeledLink.ToLabel"/>
            is a port or contains one.
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolLinking.StartNewLink(Northwoods.GoWeb.IGoPort,System.Drawing.PointF)">
            <summary>
            Start the process of drawing a new link from a given port.
            </summary>
            <param name="port"></param>
            <param name="dc"></param>
            <remarks>
            If <see cref="M:Northwoods.GoWeb.GoToolLinking.IsValidFromPort(Northwoods.GoWeb.IGoPort)"/> is true, the user will be
            linking in the <see cref="P:Northwoods.GoWeb.GoToolLinking.Forwards"/> direction--i.e. from the
            source to the destination.
            This method calls <see cref="M:Northwoods.GoWeb.GoToolLinking.CreateTemporaryPort(Northwoods.GoWeb.IGoPort,System.Drawing.PointF,System.Boolean,System.Boolean)"/> to create both
            the <see cref="P:Northwoods.GoWeb.GoToolLinking.StartPort"/> and the <see cref="P:Northwoods.GoWeb.GoToolLinking.EndPort"/>, and
            it calls <see cref="M:Northwoods.GoWeb.GoToolLinking.CreateTemporaryLink(Northwoods.GoWeb.IGoPort,Northwoods.GoWeb.IGoPort)"/> to create the <see cref="P:Northwoods.GoWeb.GoToolLinking.Link"/>.
            This starts a transaction.
            On WinForms it also changes the cursor to a Hand.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolLinking.IsValidFromPort(Northwoods.GoWeb.IGoPort)">
            <summary>
            This predicate is called to decide if it is OK for a user to start
            drawing a link from a given port.
            </summary>
            <param name="fromPort"></param>
            <returns>By default this returns the result of calling <see cref="M:Northwoods.GoWeb.IGoPort.CanLinkFrom"/></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolLinking.IsValidToPort(Northwoods.GoWeb.IGoPort)">
            <summary>
            This predicate is called to decide if it is OK for a user to start
            drawing a link backwards at a given port that will be the destination
            for the link.
            </summary>
            <param name="toPort"></param>
            <returns>By default this is true if <see cref="P:Northwoods.GoWeb.GoToolLinking.ForwardsOnly"/> is false
            <see cref="M:Northwoods.GoWeb.IGoPort.CanLinkTo"/> is true</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolLinking.StartRelink(Northwoods.GoWeb.IGoLink,System.Boolean,System.Drawing.PointF)">
            <summary>
            Start the process of reconnecting an existing link at a given port.
            </summary>
            <param name="oldlink"></param>
            <param name="forwards">true if the "To" port is being reconnected; false if it is the "From" end</param>
            <param name="dc"></param>
            <remarks>
            This starts a transaction.
            On WinForms it also changes the cursor to a Hand.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolLinking.CreateTemporaryPort(Northwoods.GoWeb.IGoPort,System.Drawing.PointF,System.Boolean,System.Boolean)">
            <summary>
            This is responsible for creating a temporary port for the linking process.
            </summary>
            <param name="port">an existing port that the temporary port should be like; this may be null</param>
            <param name="pnt">the <c>PointF</c> in document coordinates for where the temporary port should be</param>
            <param name="forToPort">true if this is meant to be the <see cref="P:Northwoods.GoWeb.IGoLink.ToPort"/>
            instead of the <see cref="P:Northwoods.GoWeb.IGoLink.FromPort"/></param>
            <param name="atEnd">true if this is meant to be the <see cref="P:Northwoods.GoWeb.GoToolLinking.EndPort"/>
            instead of <see cref="P:Northwoods.GoWeb.GoToolLinking.StartPort"/></param>
            <returns>a <see cref="T:Northwoods.GoWeb.GoPort"/> in the view at <paramref name="pnt"/></returns>
            <remarks>
            This creates a new <see cref="T:Northwoods.GoWeb.GoPort"/> that is similar to the <paramref name="port"/>.
            By default the temporary port's <see cref="P:Northwoods.GoWeb.GoPort.Style"/> is <see cref="F:Northwoods.GoWeb.GoPortStyle.None"/>,
            so that it is not seen by the user.
            It is added to the default layer of the view.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolLinking.CreateTemporaryLink(Northwoods.GoWeb.IGoPort,Northwoods.GoWeb.IGoPort)">
            <summary>
            This is responsible for creating a temporary link when the user is drawing a new link.
            </summary>
            <param name="fromPort"></param>
            <param name="toPort"></param>
            <returns>a <see cref="T:Northwoods.GoWeb.IGoLink"/> in the view</returns>
            <remarks>
            By default this just creates a copy of the <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="P:Northwoods.GoWeb.GoView.NewLinkPrototype"/>
            using <paramref name="fromPort"/> and <paramref name="toPort"/> as the ends of the link.
            The temporary link has its <see cref="P:Northwoods.GoWeb.GoLink.AdjustingStyle"/> set to 
            <see cref="F:Northwoods.GoWeb.GoLinkAdjustingStyle.Calculate"/>.
            The temporary link is added to the default layer of the view, but unlike
            temporary ports, is visible.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolLinking.DoLinking(System.Drawing.PointF)">
            <summary>
            This method is called by <see cref="M:Northwoods.GoWeb.GoToolLinking.DoMouseMove"/> to find the nearest
            valid port and adjust the temporary link according to where the given point is.
            </summary>
            <param name="dc">a <c>PointF</c> in document coordinates, the mouse position</param>
            <remarks>
            This calls <see cref="M:Northwoods.GoWeb.GoToolLinking.PickNearestPort(System.Drawing.PointF)"/> to find the closest valid port
            that we might link to, and passes the result to <see cref="M:Northwoods.GoWeb.GoToolLinking.ImitatePort(Northwoods.GoWeb.IGoPort,Northwoods.GoWeb.IGoPort)"/>
            to get the <see cref="P:Northwoods.GoWeb.GoToolLinking.EndPort"/> to behave like that port.
            It also sets the <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="P:Northwoods.GoWeb.GoObject.Bounds"/>
            of the <see cref="P:Northwoods.GoWeb.GoToolLinking.EndPort"/> so that the temporary link appears to either
            follow the mouse pointer or connect to a nearby valid port.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolLinking.ImitatePort(Northwoods.GoWeb.IGoPort,Northwoods.GoWeb.IGoPort)">
            <summary>
            Change the <paramref name="endport"/>'s behavior for link routing to be
            like the given port <paramref name="iport"/>.
            </summary>
            <param name="endport">the value of <see cref="P:Northwoods.GoWeb.GoToolLinking.EndPort"/></param>
            <param name="iport">the value of <see cref="M:Northwoods.GoWeb.GoToolLinking.PickNearestPort(System.Drawing.PointF)"/></param>
            <remarks>
            This is just called by <see cref="M:Northwoods.GoWeb.GoToolLinking.DoLinking(System.Drawing.PointF)"/> in order to get
            the temporary <see cref="P:Northwoods.GoWeb.GoToolLinking.Link"/> to route in the way expected as if
            it really were being connected to <paramref name="iport"/>.
            Remember that the <paramref name="endport"/> might be either the
            "FromPort" or the "ToPort" of a link, depending on the direction the
            link is being drawn, as given by the value of <see cref="P:Northwoods.GoWeb.GoToolLinking.Forwards"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolLinking.IsValidLink(Northwoods.GoWeb.IGoPort,Northwoods.GoWeb.IGoPort)">
            <summary>
            This predicate is called during the process of finding the nearest port
            that the user can link to.
            </summary>
            <param name="fromPort"></param>
            <param name="toPort"></param>
            <returns>Basically this is implemented as <c>fromPort.IsValidLink(toPort)</c></returns>
            <remarks>
            <para>
            If both <paramref name="fromPort"/> and <paramref name="toPort"/> are null, this returns false.
            If only one of the parameters is null, then this returns the value of
            <c>fromPort.CanLinkFrom()</c> or <c>toPort.CanLinkTo()</c>, on the non-null port parameter.
            This predicate also disallows interactive linking of a link to a port that is part of
            the link--e.g. linking to a port that is a label on a <see cref="T:Northwoods.GoWeb.GoLabeledLink"/>.
            The results of these calls are stored in the <see cref="P:Northwoods.GoWeb.GoToolLinking.ValidPortsCache"/>
            hash table.  The ports are associated with <see cref="F:Northwoods.GoWeb.GoToolLinking.Valid"/> or <see cref="F:Northwoods.GoWeb.GoToolLinking.Invalid"/>
            values depending on whether this predicate returned true or false.
            Note that to check for links from a port to itself, this predicate may
            be called with the same value for both arguments.
            </para>
            <para>
            <see cref="T:Northwoods.GoWeb.GoPort"/> has more options for link validity checking; see <see cref="M:Northwoods.GoWeb.GoPort.IsValidLink(Northwoods.GoWeb.IGoPort)"/> for more details.
            If you override this method, you may well need to do so for both
            <see cref="T:Northwoods.GoWeb.GoToolLinkingNew"/> and <see cref="T:Northwoods.GoWeb.GoToolRelinking"/>,
            and then replace both of the standard linking tools in your <see cref="T:Northwoods.GoWeb.GoView"/>
            by calling <see cref="M:Northwoods.GoWeb.GoView.ReplaceMouseTool(System.Type,Northwoods.GoWeb.IGoTool)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolLinking.PickNearestPort(System.Drawing.PointF)">
            <summary>
            Find the valid document port nearest to a given point.
            </summary>
            <param name="dc">a <c>PointF</c> in document coordinates</param>
            <returns></returns>
            <remarks>
            A nearby port (as determined by the distance between <paramref name="dc"/>
            and the result of <see cref="M:Northwoods.GoWeb.GoToolLinking.PortPoint(Northwoods.GoWeb.IGoPort,System.Drawing.PointF)"/>) must be within
            the <see cref="P:Northwoods.GoWeb.GoView.PortGravity"/> distance for it to qualify,
            and it must be in a <see cref="T:Northwoods.GoWeb.GoLayer"/> that is visible.
            This uses the <see cref="M:Northwoods.GoWeb.GoToolLinking.IsValidLink(Northwoods.GoWeb.IGoPort,Northwoods.GoWeb.IGoPort)"/> predicate, passing it the
            <see cref="P:Northwoods.GoWeb.GoToolLinking.OriginalStartPort"/> along with each port to be considered.
            The results of <see cref="M:Northwoods.GoWeb.GoToolLinking.IsValidLink(Northwoods.GoWeb.IGoPort,Northwoods.GoWeb.IGoPort)"/> are cached in <see cref="P:Northwoods.GoWeb.GoToolLinking.ValidPortsCache"/>,
            for the cases where determining valid links is computationally expensive.
            This cache is valid only for the duration of this linking tool as the
            current tool; it is cleared each time this tool is stopped.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolLinking.PortPoint(Northwoods.GoWeb.IGoPort,System.Drawing.PointF)">
            <summary>
            Return a <c>PointF</c> representing the position of the port.
            </summary>
            <param name="port">an <see cref="T:Northwoods.GoWeb.IGoPort"/> whose distance is being considered</param>
            <param name="dc">the point nearest which we are searching for a port</param>
            <returns>normally, <c>port.GoObject.Center</c></returns>
            <remarks>
            This is called by <see cref="M:Northwoods.GoWeb.GoToolLinking.PickNearestPort(System.Drawing.PointF)"/> for each
            port in the document.
            For large ports, if the <paramref name="port"/> is a <see cref="T:Northwoods.GoWeb.GoPort"/>,
            this just returns the point <paramref name="dc"/> if it is inside the port.
            If it is outside of the port,
            this uses the result of <see cref="M:Northwoods.GoWeb.GoPort.GetLinkPointFromPoint(System.Drawing.PointF)"/>, which should
            be more accurate than the center of the port.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolLinking.DoNewLink(Northwoods.GoWeb.IGoPort,Northwoods.GoWeb.IGoPort)">
            <summary>
            This is called by <see cref="M:Northwoods.GoWeb.GoToolLinking.DoMouseUp"/> in order to create a new link.
            </summary>
            <param name="fromPort"></param>
            <param name="toPort"></param>
            <remarks>
            This just calls <see cref="M:Northwoods.GoWeb.GoView.CreateLink(Northwoods.GoWeb.IGoPort,Northwoods.GoWeb.IGoPort)"/> and <see cref="M:Northwoods.GoWeb.GoView.RaiseLinkCreated(Northwoods.GoWeb.GoObject)"/>.
            This method is responsible for setting <see cref="P:Northwoods.GoWeb.GoTool.TransactionResult"/>, so
            that <see cref="M:Northwoods.GoWeb.GoToolLinking.Stop"/>'s call to <see cref="M:Northwoods.GoWeb.GoTool.StopTransaction"/> will
            properly call <see cref="M:Northwoods.GoWeb.GoView.FinishTransaction(System.String)"/> or <see cref="M:Northwoods.GoWeb.GoView.AbortTransaction"/>,
            as desired.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolLinking.DoNoNewLink(Northwoods.GoWeb.IGoPort,Northwoods.GoWeb.IGoPort)">
            <summary>
            This is called by <see cref="M:Northwoods.GoWeb.GoToolLinking.DoMouseUp"/> or <see cref="M:Northwoods.GoWeb.GoToolLinking.DoCancelMouse"/>
            when no new link was drawn by the user.
            </summary>
            <param name="fromPort"></param>
            <param name="toPort"></param>
            <remarks>
            This method is responsible for setting <see cref="P:Northwoods.GoWeb.GoTool.TransactionResult"/>, so
            that <see cref="M:Northwoods.GoWeb.GoToolLinking.Stop"/>'s call to <see cref="M:Northwoods.GoWeb.GoTool.StopTransaction"/> will
            properly call <see cref="M:Northwoods.GoWeb.GoView.FinishTransaction(System.String)"/> or <see cref="M:Northwoods.GoWeb.GoView.AbortTransaction"/>,
            as desired.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolLinking.DoRelink(Northwoods.GoWeb.IGoLink,Northwoods.GoWeb.IGoPort,Northwoods.GoWeb.IGoPort)">
            <summary>
            This is called by <see cref="M:Northwoods.GoWeb.GoToolLinking.DoMouseUp"/> in order to reconnect the existing link.
            </summary>
            <param name="oldlink"></param>
            <param name="fromPort"></param>
            <param name="toPort"></param>
            <remarks>
            This makes sure <paramref name="oldlink"/> refers to <paramref name="fromPort"/>
            and <paramref name="toPort"/> and then calls <see cref="M:Northwoods.GoWeb.GoView.RaiseLinkRelinked(Northwoods.GoWeb.GoObject)"/>.
            This method is responsible for setting <see cref="P:Northwoods.GoWeb.GoTool.TransactionResult"/>, so
            that <see cref="M:Northwoods.GoWeb.GoToolLinking.Stop"/>'s call to <see cref="M:Northwoods.GoWeb.GoTool.StopTransaction"/> will
            properly call <see cref="M:Northwoods.GoWeb.GoView.FinishTransaction(System.String)"/> or <see cref="M:Northwoods.GoWeb.GoView.AbortTransaction"/>,
            as desired.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolLinking.DoNoRelink(Northwoods.GoWeb.IGoLink,Northwoods.GoWeb.IGoPort,Northwoods.GoWeb.IGoPort)">
            <summary>
            This is called by <see cref="M:Northwoods.GoWeb.GoToolLinking.DoMouseUp"/> or <see cref="M:Northwoods.GoWeb.GoToolLinking.DoCancelMouse"/>
            when an existing link was purposely not reconnected by the user to any port.
            </summary>
            <param name="oldlink"></param>
            <param name="fromPort">might be null</param>
            <param name="toPort">might be null</param>
            <remarks>
            <para>
            If the <paramref name="oldlink"/> is <see cref="P:Northwoods.GoWeb.GoObject.Movable"/>,
            this is considered a relinking to no port, rather than a deletion of the link.
            </para>
            <para>
            Because this case (when <see cref="P:Northwoods.GoWeb.GoObject.Movable"/> is false)
            effectively results in an object being removed from the
            document, this method calls <see cref="M:Northwoods.GoWeb.GoView.RaiseSelectionDeleting(System.ComponentModel.CancelEventArgs)"/>
            and <see cref="M:Northwoods.GoWeb.GoView.RaiseSelectionDeleted"/>.
            If the <see cref="M:Northwoods.GoWeb.GoView.RaiseSelectionDeleting(System.ComponentModel.CancelEventArgs)"/> event results in
            a cancellation, this calls <see cref="M:Northwoods.GoWeb.GoToolLinking.DoCancelMouse"/> instead of
            removing the link.
            This method does not remove the link if <see cref="M:Northwoods.GoWeb.GoObject.CanDelete"/>
            is false.
            </para>
            <para>
            This method is responsible for setting <see cref="P:Northwoods.GoWeb.GoTool.TransactionResult"/>, so
            that <see cref="M:Northwoods.GoWeb.GoToolLinking.Stop"/>'s call to <see cref="M:Northwoods.GoWeb.GoTool.StopTransaction"/> will
            properly call <see cref="M:Northwoods.GoWeb.GoView.FinishTransaction(System.String)"/> or <see cref="M:Northwoods.GoWeb.GoView.AbortTransaction"/>,
            as desired.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolLinking.DoCancelRelink(Northwoods.GoWeb.IGoLink,Northwoods.GoWeb.IGoPort,Northwoods.GoWeb.IGoPort)">
            <summary>
            This is called by <see cref="M:Northwoods.GoWeb.GoToolLinking.DoCancelMouse"/> when a relinking was cancelled
            by the user.
            </summary>
            <param name="oldlink"></param>
            <param name="fromPort">the original From port</param>
            <param name="toPort">the original To port</param>
            <remarks>
            This method is responsible for setting <see cref="P:Northwoods.GoWeb.GoTool.TransactionResult"/>, so
            that <see cref="M:Northwoods.GoWeb.GoToolLinking.Stop"/>'s call to <see cref="M:Northwoods.GoWeb.GoTool.StopTransaction"/> will
            properly call <see cref="M:Northwoods.GoWeb.GoView.FinishTransaction(System.String)"/> or <see cref="M:Northwoods.GoWeb.GoView.AbortTransaction"/>,
            as desired.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoToolLinking.Valid">
            <summary>
            This value associated with a port in the <see cref="P:Northwoods.GoWeb.GoToolLinking.ValidPortsCache"/>
            indicates that it is valid to make a link between <see cref="P:Northwoods.GoWeb.GoToolLinking.OriginalStartPort"/>
            and that port.
            </summary>
            <value>
            <see cref="M:Northwoods.GoWeb.GoToolLinking.PickNearestPort(System.Drawing.PointF)"/> calls <see cref="M:Northwoods.GoWeb.GoToolLinking.IsValidLink(Northwoods.GoWeb.IGoPort,Northwoods.GoWeb.IGoPort)"/> with
            <see cref="P:Northwoods.GoWeb.GoToolLinking.OriginalStartPort"/> and each visible port in the document.
            If the predicate returned true, the port is associated with this Valid
            value in the <see cref="P:Northwoods.GoWeb.GoToolLinking.ValidPortsCache"/> hash table.
            </value>
        </member>
        <member name="F:Northwoods.GoWeb.GoToolLinking.Invalid">
            <summary>
            This value associated with a port in the <see cref="P:Northwoods.GoWeb.GoToolLinking.ValidPortsCache"/>
            indicates that it is not valid to make a link between <see cref="P:Northwoods.GoWeb.GoToolLinking.OriginalStartPort"/>
            and that port.
            </summary>
            <value>
            <see cref="M:Northwoods.GoWeb.GoToolLinking.PickNearestPort(System.Drawing.PointF)"/> calls <see cref="M:Northwoods.GoWeb.GoToolLinking.IsValidLink(Northwoods.GoWeb.IGoPort,Northwoods.GoWeb.IGoPort)"/> with
            <see cref="P:Northwoods.GoWeb.GoToolLinking.OriginalStartPort"/> and each visible port in the document.
            If the predicate returned false, the port is associated with this Invalid
            value in the <see cref="P:Northwoods.GoWeb.GoToolLinking.ValidPortsCache"/> hash table.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolLinking.Forwards">
            <summary>
            Gets or sets whether the user's linking operation started at the "From" port.
            </summary>
            <remarks>
            When this property is true, the <see cref="P:Northwoods.GoWeb.GoToolLinking.OriginalStartPort"/> and
            <see cref="P:Northwoods.GoWeb.GoToolLinking.StartPort"/> ports were or are at the "From" end of the
            <see cref="P:Northwoods.GoWeb.GoToolLinking.Link"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolLinking.OriginalStartPort">
            <summary>
            Gets or sets the port from which the user is starting or modifying a link.
            </summary>
            <remarks>
            When creating a new link, the <see cref="T:Northwoods.GoWeb.GoToolLinkingNew"/> tool sets this
            property to the port under the initial mouse point.
            When reconnecting an existing link, the <see cref="T:Northwoods.GoWeb.GoToolRelinking"/> tool
            sets this property to the port at the other end of the link from the resize
            handle that the user is moving.
            This will be a port that already existed in the document prior to the
            linking operation.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoToolLinking.OriginalEndPort"/>
            <seealso cref="P:Northwoods.GoWeb.GoToolLinking.StartPort"/>
            <seealso cref="P:Northwoods.GoWeb.GoToolLinking.Link"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolLinking.OriginalEndPort">
            <summary>
            Gets or sets the port at the end of an existing link that is being reconnected.
            </summary>
            <remarks>
            When creating a new link, this property is not relevant.
            When reconnecting an existing link, the <see cref="T:Northwoods.GoWeb.GoToolRelinking"/> tool
            sets this property to the port at the end of the existing link that the
            user is disconnecting from.
            This will be a port that already existed in the document prior to the
            linking operation.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoToolLinking.OriginalStartPort"/>
            <seealso cref="P:Northwoods.GoWeb.GoToolLinking.EndPort"/>
            <seealso cref="P:Northwoods.GoWeb.GoToolLinking.Link"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolLinking.StartPort">
            <summary>
            Gets or sets the temporary starting port.
            </summary>
            <remarks>
            When creating a new link or when reconnecting an existing link, the tool
            sets this property to the value of <see cref="M:Northwoods.GoWeb.GoToolLinking.CreateTemporaryPort(Northwoods.GoWeb.IGoPort,System.Drawing.PointF,System.Boolean,System.Boolean)"/>.
            This will be a new port that only exists in this view.
            If <see cref="P:Northwoods.GoWeb.GoToolLinking.Forwards"/> is true, this port will correspond to
            the <see cref="P:Northwoods.GoWeb.IGoLink.FromPort"/> of the link; otherwise it will
            correspond to the <see cref="P:Northwoods.GoWeb.IGoLink.ToPort"/>
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoToolLinking.EndPort"/>
            <seealso cref="P:Northwoods.GoWeb.GoToolLinking.OriginalStartPort"/>
            <seealso cref="P:Northwoods.GoWeb.GoToolLinking.Link"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolLinking.EndPort">
            <summary>
            Gets or sets the temporary ending port.
            </summary>
            <remarks>
            When creating a new link or when reconnecting an existing link, the tool
            sets this property to the value of <see cref="M:Northwoods.GoWeb.GoToolLinking.CreateTemporaryPort(Northwoods.GoWeb.IGoPort,System.Drawing.PointF,System.Boolean,System.Boolean)"/>.
            This will be a new port that only exists in this view.
            If <see cref="P:Northwoods.GoWeb.GoToolLinking.Forwards"/> is true, this port will correspond to
            the <see cref="P:Northwoods.GoWeb.IGoLink.ToPort"/> of the link; otherwise it will
            correspond to the <see cref="P:Northwoods.GoWeb.IGoLink.FromPort"/>
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoToolLinking.StartPort"/>
            <seealso cref="P:Northwoods.GoWeb.GoToolLinking.OriginalEndPort"/>
            <seealso cref="P:Northwoods.GoWeb.GoToolLinking.Link"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolLinking.Link">
            <summary>
            Gets or sets the link that the user is manipulating for this linking operation.
            </summary>
            <remarks>
            When creating a new link, the <see cref="T:Northwoods.GoWeb.GoToolLinkingNew"/> tool sets this
            property to the value of <see cref="M:Northwoods.GoWeb.GoToolLinking.CreateTemporaryLink(Northwoods.GoWeb.IGoPort,Northwoods.GoWeb.IGoPort)"/>, a new link that
            only exists in this view.
            When reconnecting an existing link, the <see cref="T:Northwoods.GoWeb.GoToolRelinking"/> tool
            sets this property to the existing link in the document.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolLinking.ValidPortsCache">
            <summary>
            Gets the hashtable of all known ports that are valid for this particular linking operation.
            </summary>
            <remarks>
            This collection is initially empty for each linking operation.
            As the <see cref="M:Northwoods.GoWeb.GoToolLinking.PickNearestPort(System.Drawing.PointF)"/> method is called,
            the port is added to this collection, with a value depending on
            whether <see cref="M:Northwoods.GoWeb.GoToolLinking.IsValidLink(Northwoods.GoWeb.IGoPort,Northwoods.GoWeb.IGoPort)"/> returns true.
            The value is <see cref="F:Northwoods.GoWeb.GoToolLinking.Valid"/> if it returned true,
            <see cref="F:Northwoods.GoWeb.GoToolLinking.Invalid"/> if it returned false.
            The cacheing is done because the computation to determine valid links can
            be expensive.
            You can turn off the cacheing by setting this property to null.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolLinking.ForwardsOnly">
            <summary>
            Gets or sets whether users must draw their new links starting at the "from" port
            and going to the "to" port.
            </summary>
            <value>
            This value defaults to false, which will allow users to draw links "backwards".
            </value>
        </member>
        <member name="T:Northwoods.GoWeb.GoToolLinkingNew">
            <summary>
            The tool used to handle a user's drawing a new link between two ports.
            </summary>
            <remarks>
            An instance of this modeless tool is in the default
            <see cref="T:Northwoods.GoWeb.GoView"/>'s <see cref="P:Northwoods.GoWeb.GoView.MouseMoveTools"/> list.
            In other words, this tool is not invoked until the user starts a
            dragging gesture with the mouse.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolLinkingNew.#ctor(Northwoods.GoWeb.GoView)">
            <summary>
            The standard tool constructor.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolLinkingNew.CanStart">
            <summary>
            The user can draw a new link if the view allows it
            and if the port at the input event point is a valid
            source port or a valid destination port.
            </summary>
            <returns></returns>
            <remarks>
            This calls <see cref="M:Northwoods.GoWeb.GoToolLinking.PickPort(System.Drawing.PointF)"/> to find a port
            at the mouse down point.  At least one of the
            <see cref="M:Northwoods.GoWeb.GoToolLinking.IsValidFromPort(Northwoods.GoWeb.IGoPort)"/> and
            <see cref="M:Northwoods.GoWeb.GoToolLinking.IsValidToPort(Northwoods.GoWeb.IGoPort)"/> predicates
            must be true for the linking to start.
            This sets <see cref="P:Northwoods.GoWeb.GoToolLinking.OriginalStartPort"/> property for
            initializing this tool before the call to <see cref="M:Northwoods.GoWeb.GoToolLinkingNew.Start"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolLinkingNew.Start">
            <summary>
            This is just a matter of calling <see cref="M:Northwoods.GoWeb.GoToolLinking.StartNewLink(Northwoods.GoWeb.IGoPort,System.Drawing.PointF)"/>.
            </summary>
            <remarks>
            This assumes that the <see cref="P:Northwoods.GoWeb.GoToolLinking.OriginalStartPort"/> property
            has been set, as is normally done by <see cref="M:Northwoods.GoWeb.GoToolLinkingNew.CanStart"/>.
            </remarks>
        </member>
        <member name="T:Northwoods.GoWeb.GoToolRelinking">
            <summary>
            The tool used to handle the user's dragging one end of a link in order
            to connect it up to another port.
            </summary>
            <remarks>
            An instance of this tool is in the default
            <see cref="T:Northwoods.GoWeb.GoView"/>'s <see cref="P:Northwoods.GoWeb.GoView.MouseDownTools"/> list.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolRelinking.#ctor(Northwoods.GoWeb.GoView)">
            <summary>
            The standard tool constructor.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolRelinking.CanStart">
            <summary>
            The user can relink if the view allows it and if the handle
            found at the input event point has an ID that indicates it
            is relinkable.
            </summary>
            <returns></returns>
            <remarks>
            This calls <see cref="M:Northwoods.GoWeb.GoToolRelinking.PickRelinkHandle(System.Drawing.PointF)"/> to find a handle.
            The <see cref="P:Northwoods.GoWeb.IGoHandle.HandleID"/> should be either
            <see cref="F:Northwoods.GoWeb.GoLink.RelinkableFromHandle"/> or
            <see cref="F:Northwoods.GoWeb.GoLink.RelinkableToHandle"/>.  The ID also
            determines which end of the link is disconnected.
            This sets <see cref="P:Northwoods.GoWeb.GoToolLinking.Link"/> and <see cref="P:Northwoods.GoWeb.GoToolLinking.Forwards"/>
            properties for initializing this tool before the call to <see cref="M:Northwoods.GoWeb.GoToolRelinking.Start"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolRelinking.Start">
            <summary>
            Start relinking by by calling <see cref="M:Northwoods.GoWeb.GoToolLinking.StartRelink(Northwoods.GoWeb.IGoLink,System.Boolean,System.Drawing.PointF)"/>
            and hiding any selection handles for the link.
            </summary>
            <remarks>
            This assumes that <see cref="P:Northwoods.GoWeb.GoToolLinking.Link"/> and <see cref="P:Northwoods.GoWeb.GoToolLinking.Forwards"/>
            properties have been set, as is normally done by the <see cref="M:Northwoods.GoWeb.GoToolRelinking.CanStart"/> method.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolRelinking.PickRelinkHandle(System.Drawing.PointF)">
            <summary>
            Find a resize handle at the given point.
            </summary>
            <param name="dc">a <c>PointF</c> in document coordinates</param>
            <returns>an <see cref="T:Northwoods.GoWeb.IGoHandle"/> resize handle</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolRelinking.Stop">
            <summary>
            Restore the selection handles on the link.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoToolManager">
            <summary>
            The tool, normally the default tool for a view, used to handle input and
            decide if any other tools would be appropriate as the view's current tool.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolManager.#ctor(Northwoods.GoWeb.GoView)">
            <summary>
            The standard tool constructor.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolManager.Stop">
            <summary>
            Set the <see cref="P:Northwoods.GoWeb.GoToolManager.Started"/> property to false.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolManager.DoMouseDown">
            <summary>
            Search <see cref="P:Northwoods.GoWeb.GoView.MouseDownTools"/> for the first tool that we can start;
            if we find one, we start it by making it the view's current <see cref="P:Northwoods.GoWeb.GoView.Tool"/>.
            </summary>
            <remarks>
            This sets the <see cref="P:Northwoods.GoWeb.GoToolManager.Started"/> property to true if we did not find a startable
            tool, so that later searches for tools in the <see cref="M:Northwoods.GoWeb.GoToolManager.DoMouseMove"/> and
            <see cref="M:Northwoods.GoWeb.GoToolManager.DoMouseUp"/> methods can proceed.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolManager.DoMouseMove">
            <summary>
            Search <see cref="P:Northwoods.GoWeb.GoView.MouseMoveTools"/> for the first tool that we can start;
            if we find one, we start it by making it the view's current <see cref="P:Northwoods.GoWeb.GoView.Tool"/>.
            </summary>
            <remarks>
            This implementation does not do the search when <see cref="P:Northwoods.GoWeb.GoToolManager.Started"/> is false,
            presumably because of a mouse motion without a mouse down in this view.
            This method calls <see cref="M:Northwoods.GoWeb.GoToolManager.DoMouseOver(Northwoods.GoWeb.GoInputEventArgs)"/> if no startable tool is
            found and started.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolManager.DoMouseOver(Northwoods.GoWeb.GoInputEventArgs)">
            <summary>
            Call <see cref="T:Northwoods.GoWeb.GoView"/> method <see cref="M:Northwoods.GoWeb.GoView.DoObjectEnterLeave(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoInputEventArgs)"/>.
            </summary>
            <param name="evt"></param>
            <remarks>
            This method keeps track of the current document object that the mouse is over.
            When the current document object changes, this calls <see cref="M:Northwoods.GoWeb.GoView.DoObjectEnterLeave(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoInputEventArgs)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolManager.DoMouseUp">
            <summary>
            Search <see cref="P:Northwoods.GoWeb.GoView.MouseUpTools"/> for the first tool that we can start;
            if we find one, we start it by making it the view's current <see cref="P:Northwoods.GoWeb.GoView.Tool"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolManager.DoMouseWheel">
            <summary>
            When there are no other tools running, a mouse wheel event scrolls or zooms
            the view by calling <see cref="M:Northwoods.GoWeb.GoView.DoWheel(Northwoods.GoWeb.GoInputEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolManager.DoKeyDown">
            <summary>
            Provide default behavior, when not running some other tool.
            </summary>
            <remarks>
            By default this handles:
            <list type="bullet">
            <item>Delete: the Delete key deletes the current selection</item>
            <item>Select All: Ctrl-A selects all selectable document objects</item>
            <item>Copy, Cut, Paste: The Ctrl-C, Ctrl-Insert, Ctrl-X, Shift-Delete, Ctrl-V, and Shift-Insert keys do the standard clipboard operations</item>
            <item>Edit: the F2 key starts in-place editing of the current node's text label</item>
            <item>PageDown, PageUp: The PageDown and PageUp keys scroll vertically; Shift-PageDown and Shift-PageUp
            scroll horizontally</item>
            <item>Home, End: the Home and End keys scroll to the left side and right sides of the document;
            Ctrl-Home and Ctrl-End scroll to the top-left and bottom-right corners of the document, respectively</item>
            <item>Undo, Redo: Ctrl-Z and Ctrl-Y (or Ctrl-Shift-Z) perform undo and redo</item>
            <item>Arrow keys: moves the selection in the given direction, or else scrolls the view that way;
            the Ctrl modifier causes the movement or scrolling to just be one pixel at a time.
            This uses the <see cref="P:Northwoods.GoWeb.GoView.ArrowMoveLarge"/> and <see cref="P:Northwoods.GoWeb.GoView.ArrowMoveSmall"/> properties
            to control how far the selection is moved.</item>
            <item>Escape: the Escape key may clear the selection and then cancels the current input operation</item>
            <item>letters and digits: selects the next node whose text starts with that character</item>
            </list>
            However, the value of <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="P:Northwoods.GoWeb.GoView.DisableKeys"/> can disable
            each of these behaviors.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolManager.Started">
            <summary>
            Gets or sets whether we have performed a mouse down as part of a mouse down-move-up gesture.
            </summary>
            <remarks>
            This property is initially false.
            It is set to true after all of the <see cref="P:Northwoods.GoWeb.GoView.MouseDownTools"/> have had 
            <see cref="M:Northwoods.GoWeb.IGoTool.CanStart"/> return false.
            This property helps avoid any tool behavior where the mouse down actually occurred
            in a different window.
            </remarks>
        </member>
        <member name="T:Northwoods.GoWeb.GoToolPanning">
            <summary>
            This tool supports both automatic and manual panning in a view.
            </summary>
            <remarks>
            When autopanning, this remembers an initial panning point and
            then autoscrolls the view in the direction of the
            current mouse point relative to the original panning point.
            This tool can be used in either a modal or a mode-less manner.
            To use modally, where the first mouse click will establish the
            panning origin, mouse moves determine autopanning direction
            and speed, and the second mouse up will stop the tool:
            <code>
              aView.Tool = new GoToolPanning(aView);
            </code>
            If you set the <see cref="P:Northwoods.GoWeb.GoToolPanning.Origin"/> before the tool starts,
            the first mouse click is not needed.
            <code>
              GoToolPanning tool = new GoToolPanning(aView);
              tool.Origin = aView.LastInput.ViewPoint;  // or another point in the view
              aView.Tool = tool;
            </code>
            <para>
            It is started mode-lessly when the user presses the middle
            mouse button, which is normally the mouse wheel.  An instance
            of this tool is in the <see cref="P:Northwoods.GoWeb.GoView.MouseDownTools"/> list.
            </para>
            <para>
            For manual panning, you will need to create a separate instance
            of this class and set <see cref="P:Northwoods.GoWeb.GoToolPanning.AutoPan"/> to false.
            Then the user's left-mouse down and drag and up will pan the view.
            When you set the <see cref="P:Northwoods.GoWeb.GoToolPanning.Modal"/> property, this tool will
            remain in this mode even after the user does a mouse up.
            They can cancel this mode by pressing the Cancel key.
            </para>
            <para>
            By default no manual-panning tool is installed in a <see cref="T:Northwoods.GoWeb.GoView"/>.
            To implement a "Manual Pan" command:
            <code>
            GoToolPanning panningtool = new GoToolPanning(myView);
            panningtool.AutoPan = false;
            panningtool.Modal = true;
            myView.Tool = panningtool;
            </code>
            However, if you do not need the user to do multiple selections by
            using the <see cref="T:Northwoods.GoWeb.GoToolRubberBanding"/> tool,
            you may find it nicer to use the manual panning tool
            in a mode-less manner, so that the user can use all the other standard tools
            in a natural fashion.
            <code>
            GoToolPanning panningtool = new GoToolPanning(myView);
            panningtool.AutoPan = false;
            myView.MouseDownTools.Add(panningtool);
            </code>
            Both <see cref="T:Northwoods.GoWeb.GoToolRubberBanding"/> and this <see cref="T:Northwoods.GoWeb.GoToolPanning"/>
            (when <see cref="P:Northwoods.GoWeb.GoToolPanning.AutoPan"/> is false) are started when the user does a
            mouse-down and drag in the background, so those two tools would conflict.
            But the user can still do multiple selections by using Shift- or Control-click.
            </para>
            <para>
            However, in ASP.NET WebForms, the panning gesture consists of
            only a single mouse-down, drag, mouse-up.  Since mouse moves
            are only simulated on WebForms, and auto-panning is not
            possible with no mouse time information and no immediate feedback,
            a simpler gesture is easier to use.  This results in just a
            single scroll, according to the distance and direction
            between the <c>FirstInput.ViewPoint</c> and <c>LastInput.ViewPoint</c>.
            </para>
            <para>
            So for WebForms, the default (modeless) panning tool that is installed
            as a <see cref="P:Northwoods.GoWeb.GoView.MouseDownTools"/> is not an auto-panning tool
            but a manual one: <see cref="P:Northwoods.GoWeb.GoToolPanning.AutoPan"/> is false.  It uses the middle
            mouse button instead of the left mouse button.  Only when <see cref="P:Northwoods.GoWeb.GoToolPanning.Modal"/>
            is true, so that the user is in a special "panning mode", does the left mouse
            button start and perform the pan.  If you want to let the user pan
            the GoDiagram Web view with the left mouse button in a modeless fashion,
            rather than with the middle mouse button, remove the rubberband selection tool:
            <c>goView1.ReplaceMouseTool(typeof(GoToolRubberBanding), null);</c>
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolPanning.#ctor(Northwoods.GoWeb.GoView)">
            <summary>
            The standard tool constructor.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolPanning.CanStart">
            <summary>
            This tool can start when the middle mouse button is pressed,
            unless <see cref="P:Northwoods.GoWeb.GoToolPanning.AutoPan"/> is false (for manual panning),
            in which case the left mouse button is used.
            </summary>
            <returns></returns>
            <remarks>
            However, for manual panning on WebForms, the left mouse button
            is expected only when <see cref="P:Northwoods.GoWeb.GoToolPanning.Modal"/> is true.
            When used modelessly, the middle button must be used, since the
            whole operation will consist of a background-mouse-down and a mouse-up,
            and that gesture will not be confused with a background rubber-band
            selection.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolPanning.Start">
            <summary>
            Initialize this tool.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolPanning.Stop">
            <summary>
            Stop any auto-panning in the view and remove the original panning point marker.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolPanning.DoMouseDown">
            <summary>
            When manually panning (i.e. <see cref="P:Northwoods.GoWeb.GoToolPanning.AutoPan"/> is false),
            a mouse down causes future mouse moves to change the view's
            <see cref="P:Northwoods.GoWeb.GoView.DocPosition"/> to move along with the mouse.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolPanning.DoMouseUp">
            <summary>
            On the first mouse up, set the <see cref="P:Northwoods.GoWeb.GoToolPanning.Origin"/> point and display
            the panning origin marker; on the second second mouse up, stop this tool.
            </summary>
            <remarks>
            <para>
            For WinForms, when autopanning, if the <see cref="P:Northwoods.GoWeb.GoToolPanning.Origin"/> has already been set,
            a mouse up just stops this tool.
            When manually panning, a mouse up just stops this tool, unless
            <see cref="P:Northwoods.GoWeb.GoToolPanning.Modal"/> is true, in which case this tool waits for a mouse
            down again to start panning during mouse moves.
            </para>
            <para>
            For WebForms, the behavior is different.
            When autopanning, this method always sets
            the <see cref="P:Northwoods.GoWeb.GoToolPanning.Origin"/> to the <c>FirstInput.ViewPoint</c>,
            scrolls the view according to <see cref="M:Northwoods.GoWeb.GoView.ComputeAutoPanDocPosition(System.Drawing.Point,System.Drawing.Point)"/>,
            and then stops this tool.
            When manually panning, this changes the <see cref="P:Northwoods.GoWeb.GoView.DocPosition"/>
            according to the difference between the mouse down and the mouse up points.
            Again, the value of <see cref="P:Northwoods.GoWeb.GoToolPanning.Modal"/> determines whether this tool then stops,
            or if it waits for another mouse down/up.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolPanning.DoMouseWheel">
            <summary>
            Stop panning whenever the mouse wheel turns.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolPanning.DoKeyDown">
            <summary>
            Stop panning whenever any key is pressed.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolPanning.Origin">
            <summary>
            Gets or sets the original panning point.
            </summary>
            <value>
            This is a point in view coordinates.
            It is set on the first mouse up.
            Once this value is set, mouse moves cause
            </value>
            <remarks>
            This is only relevant when <see cref="P:Northwoods.GoWeb.GoToolPanning.AutoPan"/> is true.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolPanning.AutoPan">
            <summary>
            Gets or sets whether this tool is used to implement autopanning or manual panning.
            </summary>
            <value>the initial value is true for WinForms, false for WebForms</value>
            <remarks>
            When this value is true, this tool implements the standard
            auto-scrolling panning, initiated by a middle-mouse button click and
            terminated by a second click or a key press.
            When this value is false, this tool implements the standard
            manual-scrolling panning, initiated by a left-mouse drag in the background
            and terminated by a mouse up (when <see cref="P:Northwoods.GoWeb.GoToolPanning.Modal"/> is false).
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolPanning.Modal">
            <summary>
            Gets or sets whether this tool is used in a modal fashion when <see cref="P:Northwoods.GoWeb.GoToolPanning.AutoPan"/> is false.
            </summary>
            <value>the initial value is false</value>
            <remarks>
            This property is ignored when <see cref="P:Northwoods.GoWeb.GoToolPanning.AutoPan"/> is true.
            <para>
            When you add an instance of this non-autopanning tool to the <see cref="P:Northwoods.GoWeb.GoView.MouseDownTools"/>,
            you are using it in a non-Modal fashion.
            <code>
            GoToolPanning panningtool = new GoToolPanning(myView);
            panningtool.AutoPan = false;
            myView.MouseDownTools.Add(panningtool);
            </code>
            This allows the user to use the other mode-less mouse tools,
            such as selecting, dragging, resizing, and linking as well as this manual panning tool
            when the user does a mouse down in the background.
            </para>
            <para>
            If you use this manual panning tool in a modal fashion, the user
            will remain in this tool, able to pan the view whenever the user drags
            the mouse anywhere in the view.
            <code>
            GoToolPanning panningtool = new GoToolPanning(myView);
            panningtool.AutoPan = false;
            panningtool.Modal = true;
            myView.Tool = panningtool;
            </code>
            The user can leave this mode by pressing the Cancel key or any other key.
            </para>
            </remarks>
        </member>
        <member name="T:Northwoods.GoWeb.GoToolResizing">
            <summary>
            The tool used to handle the user's resize operation.
            </summary>
            <remarks>
            This modeless tool is started when the user starts to drag
            a resize handle.
            An instance of this tool is the default
            <see cref="T:Northwoods.GoWeb.GoView"/>'s <see cref="P:Northwoods.GoWeb.GoView.MouseDownTools"/> list.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolResizing.#ctor(Northwoods.GoWeb.GoView)">
            <summary>
            The standard tool constructor.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolResizing.CanStart">
            <summary>
            We can start the resize tool when there is a resize handle
            under the mouse and the user may resize it.
            </summary>
            <returns></returns>
            <remarks>
            The view must permit user resizing.
            <see cref="M:Northwoods.GoWeb.GoToolResizing.PickResizeHandle(System.Drawing.PointF)"/> is called to determine if there
            is a handle at the first input event point.  If there is such
            a handle, and if its <see cref="P:Northwoods.GoWeb.IGoHandle.HandledObject"/>'s
            <see cref="M:Northwoods.GoWeb.GoObject.CanResize"/> predicate returns true, then
            we can start resizing.
            The user cannot resize using the context menu mouse button.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolResizing.Start">
            <summary>
            Start up the resize tool, assuming <see cref="M:Northwoods.GoWeb.GoToolResizing.CanStart"/> returned true.
            </summary>
            <remarks>
            This sets the <see cref="P:Northwoods.GoWeb.GoTool.CurrentObject"/> to be the
            <see cref="P:Northwoods.GoWeb.IGoHandle.HandledObject"/> of the handle returned by
            <see cref="M:Northwoods.GoWeb.GoToolResizing.PickResizeHandle(System.Drawing.PointF)"/>.
            It starts a transaction, hides any selection handles for the current
            object, and remembers the object's <see cref="P:Northwoods.GoWeb.GoToolResizing.OriginalBounds"/> and
            the handle's <see cref="P:Northwoods.GoWeb.GoToolResizing.OriginalPoint"/>.
            Finally it calls <see cref="M:Northwoods.GoWeb.GoToolResizing.DoResizing(Northwoods.GoWeb.GoInputState)"/> with an event type of
            <c>GoInputState.Start</c>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolResizing.Stop">
            <summary>
            Clean up this resizing tool's state.
            </summary>
            <remarks>
            This removes any visible resize box, restores the selection handles if needed,
            and stops the transaction (either aborting or finishing it).
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolResizing.DoMouseMove">
            <summary>
            Just call <see cref="M:Northwoods.GoWeb.GoToolResizing.DoResizing(Northwoods.GoWeb.GoInputState)"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolResizing.DoMouseUp">
            <summary>
            Just call <see cref="M:Northwoods.GoWeb.GoToolResizing.DoResizing(Northwoods.GoWeb.GoInputState)"/> for the last time and finish the resize transaction.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolResizing.DoCancelMouse">
            <summary>
            Cancelling a resize operation causes the current object's <see cref="M:Northwoods.GoWeb.GoObject.DoResize(Northwoods.GoWeb.GoView,System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,Northwoods.GoWeb.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)"/>
            method to be called with the <see cref="P:Northwoods.GoWeb.GoToolResizing.OriginalBounds"/> and <see cref="P:Northwoods.GoWeb.GoToolResizing.OriginalPoint"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolResizing.PickResizeHandle(System.Drawing.PointF)">
            <summary>
            Find a resize handle in the view at the given point.
            </summary>
            <param name="dc">a <c>PointF</c> in document coordinates</param>
            <returns>an <see cref="T:Northwoods.GoWeb.IGoHandle"/>, usually a <see cref="T:Northwoods.GoWeb.GoHandle"/></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolResizing.DoResizing(Northwoods.GoWeb.GoInputState)">
            <summary>
            This is called while the user is dragging the mouse and when the user releases the mouse.
            </summary>
            <param name="evttype">A value of <c>GoInputState.Start</c> when called from <see cref="M:Northwoods.GoWeb.GoToolResizing.Start"/>,
            a value of <c>GoInputState.Continue</c> when called from <see cref="M:Northwoods.GoWeb.GoToolResizing.DoMouseMove"/>, and
            a value of <c>GoInputState.Finish</c> when called from <see cref="M:Northwoods.GoWeb.GoToolResizing.DoMouseUp"/>.</param>
            <remarks>
            Basically this just calls <see cref="M:Northwoods.GoWeb.GoObject.DoResize(Northwoods.GoWeb.GoView,System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,Northwoods.GoWeb.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)"/> on the
            <see cref="P:Northwoods.GoWeb.GoTool.CurrentObject"/>.  Objects are responsible for their
            own resize behavior.
            However, this calls <see cref="M:Northwoods.GoWeb.GoView.SnapPoint(System.Drawing.PointF,Northwoods.GoWeb.GoObject)"/> to adjust the
            input event point to make sure the current resize point is a valid one
            according to whatever grids there are.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolResizing.ResizeHandle">
            <summary>
            Gets or sets the handle with which the user is performing a resize.
            </summary>
            <seealso cref="T:Northwoods.GoWeb.GoHandle"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolResizing.OriginalBounds">
            <summary>
            Gets or sets the initial bounding rectangle of the resize handle's handled object.
            </summary>
            <value>
            This <c>RectangleF</c> value is in document coordinates.
            </value>
            <remarks>
            <see cref="M:Northwoods.GoWeb.GoToolResizing.DoCancelMouse"/> uses this information to invoke
            <see cref="M:Northwoods.GoWeb.GoObject.DoResize(Northwoods.GoWeb.GoView,System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,Northwoods.GoWeb.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)"/> with the original bounds.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoToolResizing.ResizeHandle"/>
            <seealso cref="P:Northwoods.GoWeb.GoToolResizing.OriginalPoint"/>
            <seealso cref="P:Northwoods.GoWeb.GoHandle.HandledObject"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolResizing.OriginalPoint">
            <summary>
            Gets or sets the initial center of the resize handle.
            </summary>
            <value>
            This <c>PointF</c> value is in document coordinates.
            </value>
            <remarks>
            <see cref="M:Northwoods.GoWeb.GoToolResizing.DoCancelMouse"/> uses this information to invoke
            <see cref="M:Northwoods.GoWeb.GoObject.DoResize(Northwoods.GoWeb.GoView,System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,Northwoods.GoWeb.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)"/> with the original point.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoToolResizing.ResizeHandle"/>
            <seealso cref="P:Northwoods.GoWeb.GoToolResizing.OriginalBounds"/>
            <seealso cref="T:Northwoods.GoWeb.GoHandle"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolResizing.MinimumSize">
            <summary>
            Gets or sets the minimum size that the user may resize to.
            </summary>
            <value>
            This is initially a 1x1 <c>SizeF</c> value, thus preventing the user from
            making zero either the width or the height.
            </value>
            <remarks>
            This minimum size is passed to <see cref="M:Northwoods.GoWeb.GoObject.DoResize(Northwoods.GoWeb.GoView,System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,Northwoods.GoWeb.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolResizing.MaximumSize">
            <summary>
            Gets or sets the maximum size that the user may resize to.
            </summary>
            <value>
            This is initially a huge value, which should place no constraint on the user.
            </value>
            <remarks>
            This maximum size is passed to <see cref="M:Northwoods.GoWeb.GoObject.DoResize(Northwoods.GoWeb.GoView,System.Drawing.RectangleF,System.Drawing.PointF,System.Int32,Northwoods.GoWeb.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolResizing.HidesSelectionHandles">
            <summary>
            Gets or sets whether selection handles should be removed as the resize starts.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolResizing.RealObject">
            <summary>
            Gets or sets the objects that ought to be resized, but isn't the
            <c>CurrentObject</c>, because <c>ResizesRealtime</c> is false.
            </summary>
            <remarks>
            When this has a value, the <c>CurrentObject</c> should be a copy
            of the real object, and this copy should be part of the view
            rather than part of the document.
            </remarks>
        </member>
        <member name="T:Northwoods.GoWeb.GoToolRubberBanding">
            <summary>
            The tool used to handle a user's background drag to do a multiple selection.
            </summary>
            <remarks>
            No transaction is performed by this tool, although it is possible
            (but unconventional) that <see cref="M:Northwoods.GoWeb.GoToolRubberBanding.DoRubberBand(System.Drawing.Rectangle)"/> might be
            overridden to perform one.
            This tool is normally used as a modeless tool, one of the view's mouse tools,
            that can be started upon a mouse move (<see cref="P:Northwoods.GoWeb.GoView.MouseMoveTools"/>).
            When the <see cref="P:Northwoods.GoWeb.GoToolRubberBanding.Modal"/> property is set to true,
            this tool waits for a mouse down at which <see cref="M:Northwoods.GoWeb.GoToolRubberBanding.CanStart"/>
            returns true before drawing the rubber-band box.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolRubberBanding.#ctor(Northwoods.GoWeb.GoView)">
            <summary>
            The standard tool constructor.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolRubberBanding.CanStart">
            <summary>
            This tool can start if the user can select objects in this view and the
            input event point is not over a selectable document object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolRubberBanding.Stop">
            <summary>
            Remove the rubber band box from the view.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolRubberBanding.DoMouseDown">
            <summary>
            This starts keeping track of the <see cref="P:Northwoods.GoWeb.GoToolRubberBanding.Box"/>'s bounds.
            </summary>
            <remarks>
            If <see cref="M:Northwoods.GoWeb.GoToolRubberBanding.CanStart"/> is true, this sets <see cref="P:Northwoods.GoWeb.GoToolRubberBanding.Active"/> to true.
            Unless the <see cref="P:Northwoods.GoWeb.GoInputEventArgs.Shift"/> modifier is true,
            we also clear the view's selection.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolRubberBanding.DoMouseMove">
            <summary>
            As the mouse is dragged, we display the rubber band box.
            </summary>
            <remarks>
            If <see cref="P:Northwoods.GoWeb.GoToolRubberBanding.Modal"/> is true, we skip all mouse moves and mouse ups
            until a mouse down occurs when <see cref="M:Northwoods.GoWeb.GoToolRubberBanding.CanStart"/> returns true.
            If <see cref="P:Northwoods.GoWeb.GoToolRubberBanding.Modal"/> is false, a mouse move sets <see cref="P:Northwoods.GoWeb.GoToolRubberBanding.Active"/>
            to true and starts keeping track of the rubber-band <see cref="P:Northwoods.GoWeb.GoToolRubberBanding.Box"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolRubberBanding.DoMouseUp">
            <summary>
            When the mouse is released, we remove the rubber band box, call <see cref="M:Northwoods.GoWeb.GoToolRubberBanding.DoRubberBand(System.Drawing.Rectangle)"/>,
            and stop this tool if <see cref="P:Northwoods.GoWeb.GoToolRubberBanding.Modal"/> is false.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolRubberBanding.ComputeRubberBandBox">
            <summary>
            This method is called to compute the latest bounds of the <see cref="P:Northwoods.GoWeb.GoToolRubberBanding.Box"/>.
            </summary>
            <returns>a <c>Rectangle</c> in view coordinates</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolRubberBanding.DoRubberBand(System.Drawing.Rectangle)">
            <summary>
            This method is called as part of the mouse up event, normally to select
            the objects within the <paramref name="box"/>.
            </summary>
            <param name="box">a <c>Rectangle</c> describing what the user outlined, in view coordinates</param>
            <remarks>
            By default this will call <see cref="M:Northwoods.GoWeb.GoView.SelectInRectangle(System.Drawing.RectangleF)"/>, after converting
            the <paramref name="box"/> into document coordinates.
            If the box is too small in width and height, this acts like a normal mouse click instead.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolRubberBanding.Box">
            <summary>
            Gets or sets the rectangle that the user has drawn so far.
            </summary>
            <value>
            This <c>Rectangle</c> is in view coordinates.
            You should call <see cref="M:Northwoods.GoWeb.GoView.ConvertViewToDoc(System.Drawing.Rectangle)"/> to convert
            these view coordinates into document coordinates so that you can
            select any objects within the rectangle corresponding to this box.
            It is initially a zero size rectangle at the mouse down point.
            </value>
            <remarks>
            This is normally set to the value last computed by <see cref="M:Northwoods.GoWeb.GoToolRubberBanding.ComputeRubberBandBox"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoToolRubberBanding.DoRubberBand(System.Drawing.Rectangle)"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolRubberBanding.Modal">
            <summary>
            Gets or sets whether this tool should wait for a mouse-down before
            drawing a rubber-band box.
            </summary>
            <value>
            The default value is false.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolRubberBanding.Active">
            <summary>
            Gets or sets whether this tool is in the process of drawing a
            rubber-band box.
            </summary>
            <value>
            The value is set to true in <see cref="M:Northwoods.GoWeb.GoToolRubberBanding.DoMouseDown"/> if <see cref="M:Northwoods.GoWeb.GoToolRubberBanding.CanStart"/> is true,
            and in <see cref="M:Northwoods.GoWeb.GoToolRubberBanding.DoMouseMove"/> if <see cref="P:Northwoods.GoWeb.GoToolRubberBanding.Modal"/> is false.
            </value>
        </member>
        <member name="T:Northwoods.GoWeb.GoToolSelecting">
            <summary>
            This tool, normally the last tool considered by the tool manager,
            handles a possible change of selection by the user.
            </summary>
            <remarks>
            This tool assumes it is being invoked due to a mouse up, so
            it need not expect any additional mouse events.
            In other words, it is expected to be used modelessly, as one of the
            <see cref="P:Northwoods.GoWeb.GoView.MouseUpTools"/>.
            No transaction is performed by this tool, although it is possible
            (but unconventional) that selecting an object or clicking on it
            might perform one.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolSelecting.#ctor(Northwoods.GoWeb.GoView)">
            <summary>
            The standard tool constructor.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolSelecting.Start">
            <summary>
            This very simple tool just tries to select something at the last mouse point
            and tries to click on it.
            </summary>
            <remarks>
            This assumes the last mouse input state is such that calling <see cref="M:Northwoods.GoWeb.GoTool.DoSelect(Northwoods.GoWeb.GoInputEventArgs)"/>
            is appropriate--this would normally be on mouse up, when no other tool was applicable.
            </remarks>
        </member>
        <member name="T:Northwoods.GoWeb.GoToolZooming">
            <summary>
            This tool handles a user's drag in the background to draw a rubber-band box
            to specify a new document position and scale for a view.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.GoWeb.GoToolZooming.ZoomedView"/> value is the <see cref="T:Northwoods.GoWeb.GoView"/> that is
            manipulated by this tool.  The rubber-band box that the user can draw is
            constrained to have the same aspect ratio as the <see cref="P:Northwoods.GoWeb.GoToolZooming.ZoomedView"/>'s
            <see cref="P:Northwoods.GoWeb.GoView.DisplayRectangle"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolZooming.#ctor(Northwoods.GoWeb.GoView)">
            <summary>
            The standard tool constructor.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolZooming.CanStart">
            <summary>
            Allow this tool to start if the user isn't using the context button
            and if the mouse isn't over an object in the document.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolZooming.ComputeRubberBandBox">
            <summary>
            Make the box keep the aspect ratio of the observed view.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoToolZooming.DoRubberBand(System.Drawing.Rectangle)">
            <summary>
            Instead of selecting objects within a rectangle, change the <see cref="P:Northwoods.GoWeb.GoToolZooming.ZoomedView"/>'s
            <see cref="P:Northwoods.GoWeb.GoView.DocPosition"/> and <see cref="P:Northwoods.GoWeb.GoView.DocScale"/> to match the
            given <paramref name="box"/> within this view.
            </summary>
            <param name="box">
            a rectangle whose aspect ratio matches the <see cref="P:Northwoods.GoWeb.GoToolZooming.ZoomedView"/>'s;
            if the width and height are less than the <see cref="P:Northwoods.GoWeb.GoTool.DragSize"/>,
            this method does nothing.
            </param>
        </member>
        <member name="P:Northwoods.GoWeb.GoToolZooming.ZoomedView">
            <summary>
            Gets the view whose aspect ratio we want to maintain when drawing a zoom region,
            and whose document position and scale will be adjusted on a mouse up.
            </summary>
            <value>
            The initial value is the same as <see cref="P:Northwoods.GoWeb.GoTool.View"/>.
            </value>
        </member>
        <member name="T:Northwoods.GoWeb.GoChangedEventHandler">
            <summary>
            Represents methods that handle <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/>.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoChangedEventArgs">
            <summary>
            Holds information both for <see cref="E:Northwoods.GoWeb.GoDocument.Changed"/> events and 
            for undo and redo handling in the undo manager.
            </summary>
            <remarks>
            In addition to providing before-and-after values for document change events,
            this also provides the storage for the undo/redo mechanism by implementing
            the <see cref="T:Northwoods.GoWeb.IGoUndoableEdit"/> interface.
            </remarks>
            <seealso cref="E:Northwoods.GoWeb.GoView.DocumentChanged"/>
        </member>
        <member name="T:Northwoods.GoWeb.IGoUndoableEdit">
            <summary>
            This interface specifies how a document change (an edit) can be
            managed by the UndoManager.
            </summary>
            <seealso cref="T:Northwoods.GoWeb.GoChangedEventArgs"/>
            <seealso cref="T:Northwoods.GoWeb.GoUndoManagerCompoundEdit"/>
        </member>
        <member name="M:Northwoods.GoWeb.IGoUndoableEdit.Clear">
            <summary>
            Forget about any state remembered in this edit.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.IGoUndoableEdit.CanUndo">
            <summary>
            Determine if this edit is ready to be and can be undone.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.IGoUndoableEdit.Undo">
            <summary>
            Restore the previous state of this edit.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.IGoUndoableEdit.CanRedo">
            <summary>
            Determine if this edit is ready to be and can be redone.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.IGoUndoableEdit.Redo">
            <summary>
            Restore the new state of this edit after having been undone.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.IGoUndoableEdit.PresentationName">
            <summary>
            Gets the user-visible string description of this undoable edit.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoChangedEventArgs.#ctor">
            <summary>
            The constructor produces an empty object, describing no event.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoChangedEventArgs.#ctor(Northwoods.GoWeb.GoChangedEventArgs)">
            <summary>
            This copy constructor makes a copy of the argument object.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoChangedEventArgs.ToString">
            <summary>
            Produce a description that may be useful in debugging event handling and the undo manager.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoChangedEventArgs.Clear">
            <summary>
            Forget any references that this object may have.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoChangedEventArgs.CanUndo">
            <summary>
            This predicate returns true if you can call <see cref="M:Northwoods.GoWeb.GoChangedEventArgs.Undo"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoChangedEventArgs.Undo">
            <summary>
            Reverse the effects of this document change
            by calling <see cref="M:Northwoods.GoWeb.GoDocument.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)"/>.
            </summary>
            <remarks>
            <see cref="M:Northwoods.GoWeb.GoChangedEventArgs.CanUndo"/> must be true for this method to call <see cref="M:Northwoods.GoWeb.GoDocument.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoChangedEventArgs.CanRedo">
            <summary>
            This predicate returns true if you can call <see cref="M:Northwoods.GoWeb.GoChangedEventArgs.Redo"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoChangedEventArgs.Redo">
            <summary>
            Re-perform the document change after an <see cref="M:Northwoods.GoWeb.GoChangedEventArgs.Undo"/>
            by calling <see cref="M:Northwoods.GoWeb.GoDocument.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)"/>.
            </summary>
            <remarks>
            <see cref="M:Northwoods.GoWeb.GoChangedEventArgs.CanRedo"/> must be true for this method to call <see cref="M:Northwoods.GoWeb.GoDocument.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoChangedEventArgs.FindBeforeChangingEdit">
            <summary>
            Search for a <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/> that matches this
            one's <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.Document"/>, <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.Hint"/>, <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.SubHint"/>,
            and <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.Object"/>, and whose <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.IsBeforeChanging"/>
            property is true.
            </summary>
            <returns></returns>
            <remarks>
            The assumption is that there are always pairs of calls to
            <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanging(System.Int32,System.Int32,System.Object)"/> and <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>,
            resulting in pairs of <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/>.
            This method is not called except when <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanging(System.Int32,System.Int32,System.Object)"/>
            should have produced recently a <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.IsBeforeChanging"/> event args.
            This searches <see cref="P:Northwoods.GoWeb.GoUndoManager.CurrentEdit"/> backwards.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoChangedEventArgs.GetInt(System.Boolean)">
            <summary>
            If <paramref name="undo"/> is true, this returns <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.OldInt"/>,
            otherwise it returns <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.NewInt"/>.
            </summary>
            <param name="undo"></param>
            <returns>An <c>int</c></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoChangedEventArgs.GetValue(System.Boolean)">
            <summary>
            If <paramref name="undo"/> is true, this returns <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.OldValue"/>,
            otherwise it returns <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.NewValue"/>.
            </summary>
            <param name="undo"></param>
            <returns>An <c>Object</c></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoChangedEventArgs.GetRect(System.Boolean)">
            <summary>
            If <paramref name="undo"/> is true, this returns <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.OldRect"/>,
            otherwise it returns <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.NewRect"/>.
            </summary>
            <param name="undo"></param>
            <returns>A <c>RectangleF</c></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoChangedEventArgs.GetFloat(System.Boolean)">
            <summary>
            If <paramref name="undo"/> is true, this returns the <c>X</c> part of <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.OldRect"/>,
            otherwise it returns the <c>X</c> part of <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.NewRect"/>.
            </summary>
            <param name="undo"></param>
            <returns>A <c>float</c></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoChangedEventArgs.GetPoint(System.Boolean)">
            <summary>
            If <paramref name="undo"/> is true, this returns the <c>Location</c> part of <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.OldRect"/>,
            otherwise it returns the <c>Location</c> part of <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.NewRect"/>.
            </summary>
            <param name="undo"></param>
            <returns>A <c>PointF</c></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoChangedEventArgs.GetSize(System.Boolean)">
            <summary>
            If <paramref name="undo"/> is true, this returns the <c>Size</c> part of <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.OldRect"/>,
            otherwise it returns the <c>Size</c> part of <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.NewRect"/>.
            </summary>
            <param name="undo"></param>
            <returns>A <c>SizeF</c></returns>
        </member>
        <member name="P:Northwoods.GoWeb.GoChangedEventArgs.PresentationName">
            <summary>
            Gets the user-visible string description of this undoable edit.
            </summary>
            <remarks>
            Currently this is just the hint number, as a string.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoChangedEventArgs.IsBeforeChanging">
            <summary>
            Gets or sets whether this event args/undoable edit was created by 
            a document Changed event that represents a call to
            <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanging(System.Int32,System.Int32,System.Object)"/> or by a call to
            <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoChangedEventArgs.Document">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoWeb.GoDocument"/> that raised the Changed event described
            by this <c>EventArgs</c>.
            </summary>
            <remarks>
            This value must be the same as the <see cref="T:Northwoods.GoWeb.GoDocument"/> <c>sender</c>
            of a <see cref="E:Northwoods.GoWeb.GoDocument.Changed"/> event.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoChangedEventArgs.Hint">
            <summary>
            Gets or sets the general category of document Changed event.
            </summary>
            <remarks>
            Predefined GoDocument, GoLayerCollection, and GoLayer hints
            range from zero to one thousand.
            See the complete list in the documentation for <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>.
            One frequently used hint is <see cref="F:Northwoods.GoWeb.GoLayer.ChangedObject"/>,
            which uses many different subhints describing the individual
            <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.GoObject"/> changes.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoChangedEventArgs.SubHint">
            <summary>
            Gets or sets the more detailed kind of document Changed event, depending
            on the particular <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.Hint"/> value.
            </summary>
            <remarks>
            This property is commonly used to describe changes to individual objects
            when the <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.Hint"/> is <c>GoLayer.ChangedObject</c>,
            for example <c>GoObject.ChangedBounds</c>.
            See the complete list of predefined subhints for <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.GoObject"/>
            changes in the documentation for <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>.
            However other <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.Hint"/> values may use this <c>SubHint</c> property for
            additional disambiguation too.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoChangedEventArgs.Object">
            <summary>
            Gets or sets the object that was changed by the document Changed event.
            </summary>
            <remarks>
            This may be null when the <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.Hint"/> implies the object, such
            as for property changes on the document itself.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoChangedEventArgs.GoObject">
            <summary>
            Gets the <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.Object"/> as a <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.GoObject"/>.
            </summary>
            <value>
            This should always be non-null when the <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.Hint"/> is
            <see cref="T:Northwoods.GoWeb.GoLayer"/>.<see cref="F:Northwoods.GoWeb.GoLayer.ChangedObject"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoChangedEventArgs.OldInt">
            <summary>
            Gets or sets the previous or old integer value information for a change.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoChangedEventArgs.OldValue">
            <summary>
            Gets or sets the previous or old arbitrary object value information
            for a change, including boolean values.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoChangedEventArgs.OldRect">
            <summary>
            Gets or sets the previous or old float, PositionF, SizeF, or RectangleF
            value information for a change.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoChangedEventArgs.NewInt">
            <summary>
            Gets or sets the new integer value information for a change.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoChangedEventArgs.NewValue">
            <summary>
            Gets or sets the new arbitrary object value information for a change,
            including boolean values.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoChangedEventArgs.NewRect">
            <summary>
            Gets or sets the new float, PositionF, SizeF, or RectangleF value
            information for a change.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoCollection">
            <summary>
            This default implementation of <see cref="T:Northwoods.GoWeb.IGoCollection"/> just
            uses an <c>ArrayList</c>.
            </summary>
            <remarks>
            This is a generic implementation of a collection of <see cref="T:Northwoods.GoWeb.GoObject"/>s.
            It does not raise any <see cref="T:Northwoods.GoWeb.GoDocument"/> <c>Changed</c> events as
            objects are added or removed from this collection.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoCollection.#ctor">
            <summary>
            Create an empty collection of <see cref="T:Northwoods.GoWeb.GoObject"/>s.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoCollection.Add(Northwoods.GoWeb.GoObject)">
            <summary>
            Add an object to this collection.
            </summary>
            <param name="obj"></param>
            <remarks>
            Duplicates are not allowed.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.IGoCollection.Add(Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoCollection.AddRange(Northwoods.GoWeb.IGoCollection)">
            <summary>
            Iterate over the <see cref="T:Northwoods.GoWeb.GoObject"/>s in the given collection <paramref name="coll"/>
            and <see cref="M:Northwoods.GoWeb.GoCollection.Add(Northwoods.GoWeb.GoObject)"/> each one to this collection.
            </summary>
            <param name="coll"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoCollection.Remove(Northwoods.GoWeb.GoObject)">
            <summary>
            Remove any occurrence of an object from this collection.
            </summary>
            <param name="obj"></param>
            <remarks>
            If this collection does not contain the object, nothing happens.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.IGoCollection.Remove(Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoCollection.Contains(Northwoods.GoWeb.GoObject)">
            <summary>
            Determine if the given object is present in this collection.
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <seealso cref="M:Northwoods.GoWeb.IGoCollection.Contains(Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoCollection.Clear">
            <summary>
            Remove all of the objects in this collection.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.IGoCollection.Clear"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoCollection.CopyArray">
            <summary>
            Returns a newly allocated array of all of the GoObjects in the collection.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.IGoCollection.CopyArray"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copy references to all of the objects in this collection into an array.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoCollection.CopyTo(Northwoods.GoWeb.GoObject[],System.Int32)">
            <summary>
            Copy references to all of the objects in this collection into an array.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoCollection.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the GoObjects in this collection.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoCollection.IsEmpty">
            <summary>
            This predicate is true when there are no objects in this collection.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.IGoCollection.IsEmpty"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoCollection.Count">
            <summary>
            Gets the number of objects in this collection.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoCollection.IsSynchronized">
            <summary>
            Gets whether this collection of objects is thread-safe.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoCollection.SyncRoot">
            <summary>
            Gets an object to be used for synchronizing access to this collection.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoCollection.Backwards">
            <summary>
            Gets an enumerable whose enumerator will iterate over the GoObjects in reverse order.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.IGoCollection.Backwards"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoCollection.First">
            <summary>
            Gets the first object in this collection.
            </summary>
            <value>
            If this collection is empty, this value is null.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoCollection.Last">
            <summary>
            Gets the last object in this collection.
            </summary>
            <value>
            If this collection is empty, this value is null.
            </value>
        </member>
        <member name="T:Northwoods.GoWeb.GoCollectionEnumerator">
            <summary>
            Iterate over all of the GoObjects in this collection, either forwards or backwards.
            </summary>
            <remarks>
            Although this structure is public, it is rarely used explicitly.
            Instead you should use the <c>foreach</c> (or <c>For Each</c>) construct to
            iterate through the objects that are part of a collection.  In C#:
            <code>
            foreach (GoObject obj in aGoCollection) {
              . . .
            }
            </code>
            In VB.NET:
            <code>
            Dim obj As GoObject
            For Each obj in aGoCollection
              . . .
            Next
            </code>
            <para>
            Remember that you must not modify the collection, by adding or
            removing any child objects, while you are
            iterating over the children.
            If you do, you may get an InvalidOperationException.
            This structure type does not support comparison for equality.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoCollectionEnumerator.#ctor(System.Collections.ArrayList,System.Boolean)">
            <summary>
            Construct an IEnumerator for iterating either forwards or backwards over an ArrayList
            of <see cref="T:Northwoods.GoWeb.GoObject"/>s.
            </summary>
            <param name="a"></param>
            <param name="forward"></param>
        </member>
        <member name="F:Northwoods.GoWeb.GoCollectionEnumerator.Empty">
            <summary>
            Return an enumerator that doesn't iterate at all.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoCollectionEnumerator.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the GoObjects.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoCollectionEnumerator.MoveNext">
            <summary>
            Advance the enumerator to the next GoObject.
            </summary>
            <returns>True if there is a next GoObject; false if it has finished iterating over the collection.</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoCollectionEnumerator.Reset">
            <summary>
            Reset the enumerator to its original position.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoCollectionEnumerator.Current">
            <summary>
             Gets the current object in the collection for this enumerator.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoMenu">
            <summary>
            The abstract class from which both <see cref="T:Northwoods.GoWeb.GoContextMenu"/> and <see cref="T:Northwoods.GoWeb.GoMenuItem"/> derive.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoMenu.#ctor">
            <summary>
            Construct an empty menu.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoMenu.GetContextMenu">
            <summary>
            If this is not a <see cref="T:Northwoods.GoWeb.GoContextMenu"/>,
            search up the parent chain until we find one.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Northwoods.GoWeb.GoMenu.IsParent">
            <summary>
            This is true when there are any items in the <see cref="P:Northwoods.GoWeb.GoMenu.MenuItems"/> collection.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoMenu.MenuItems">
            <summary>
            Gets the list of menu items currently held by this menu.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoMenu.MenuItemCollection">
            <summary>
            This nested class implements a list of items held by a <see cref="T:Northwoods.GoWeb.GoMenu"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoMenu.MenuItemCollection.#ctor(Northwoods.GoWeb.GoMenu)">
            <summary>
            The constructor requires the parent <see cref="T:Northwoods.GoWeb.GoMenu"/>.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoMenu.MenuItemCollection.Equals(System.Object)">
            <summary>
            Compare all of the items.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoMenu.MenuItemCollection.GetHashCode">
            <summary>
            Consider all of the items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoMenu.MenuItemCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the item at a particular index position.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoMenu.MenuItemCollection.Insert(System.Int32,System.Object)">
            <summary>
            Insert a item at a particular index position.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoMenu.MenuItemCollection.Remove(System.Object)">
            <summary>
            Remove a item from this list.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoMenu.MenuItemCollection.Contains(System.Object)">
            <summary>
            Find whether a item is in this list.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoMenu.MenuItemCollection.Clear">
            <summary>
            Remove all of the items in this list.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoMenu.MenuItemCollection.IndexOf(System.Object)">
            <summary>
            Find the position of a item in this list.
            </summary>
            <param name="value"></param>
            <returns>-1 if not found</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoMenu.MenuItemCollection.Add(System.Object)">
            <summary>
            Add a item at the end of this list.
            </summary>
            <param name="value"></param>
            <returns>the index position of the newly added item</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoMenu.MenuItemCollection.AddRange(Northwoods.GoWeb.MenuItem[])">
            <summary>
            Add all of the items that are passed as an array.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoMenu.MenuItemCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies references to this list's items into an array.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoMenu.MenuItemCollection.GetEnumerator">
            <summary>
            Gets an <c>IEnumerator</c> for iterating over this list.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Northwoods.GoWeb.GoMenu.MenuItemCollection.Item(System.Int32)">
            <summary>
            This is an indexer for the list.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoMenu.MenuItemCollection.IsReadOnly">
            <summary>
            Gets whether this list can be modified.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoMenu.MenuItemCollection.IsFixedSize">
            <summary>
            Gets whether this list may be modified.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoMenu.MenuItemCollection.IsSynchronized">
            <summary>
            Gets whether this list is synchronized.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoMenu.MenuItemCollection.Count">
            <summary>
            Gets the number of items in this list.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoMenu.MenuItemCollection.SyncRoot">
            <summary>
            Gets an object that this list is synchronized on.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoContextMenu">
            <summary>
            GoContextMenu is just a data structure that provides an easy way to 
            implement dynamically constructed client-side popup menus that either
            invoke an event handler of your GoObject class on the server or
            execute JavaScript on the client.
            </summary>
            <remarks>
            GoContextMenu is very similar to the System.Windows.Forms.ContextMenu class,
            in particular to the subset implemented in the .NET Compact Framework.
            </remarks>
            <example>
            Adding a context menu to a particular node class:
            <code>
             public override GoContextMenu GetContextMenu(GoView view) {
               GoContextMenu cm = new GoContextMenu(view);
               cm.MenuItems.Add(new MenuItem("Copy", new EventHandler(this.Copy_Command)));
               return cm;
             }
             private void Copy_Command(Object sender, EventArgs e) {
               GoView v = GoContextMenu.FindView(sender as MenuItem);
               if (v != null)
                 v.EditCopy();
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.GoWeb.GoContextMenu.#ctor(Northwoods.GoWeb.GoView)">
            <summary>
            Constructing a GoContextMenu requires providing the owning <see cref="T:Northwoods.GoWeb.GoView"/>.
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoContextMenu.#ctor(Northwoods.GoWeb.GoView,System.String)">
            <summary>
            Constructing a GoContextMenu requires providing the owning <see cref="T:Northwoods.GoWeb.GoView"/>.
            </summary>
            <param name="view"></param>
            <param name="id">The document ID of an HTML element that implements a context menu</param>
            <remarks>
            The HTML element must have a CSS style, normally <c>class="goContextMenu"</c>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoContextMenu.Equals(System.Object)">
            <summary>
            Compare any <see cref="P:Northwoods.GoWeb.GoContextMenu.ID"/> and all of the <see cref="P:Northwoods.GoWeb.GoMenu.MenuItems"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoContextMenu.GetHashCode">
            <summary>
            Consider both any <see cref="P:Northwoods.GoWeb.GoContextMenu.ID"/> and all of the <see cref="P:Northwoods.GoWeb.GoMenu.MenuItems"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoContextMenu.ToString">
            <summary>
            Produce JavaScript code for building data structures on the client that
            can be used for dynamically building context menus using DHTML.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoContextMenu.FindView(Northwoods.GoWeb.MenuItem)">
            <summary>
            For a MenuItem in a GoContextMenu, this static method gets the GoView in which
            the menu item command should be operating.
            </summary>
            <param name="m"></param>
            <returns></returns>
            <remarks>
            Sometimes an object specific context menu item command will need access to the
            view in which the context menu was invoked.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoContextMenu.ID">
            <summary>
            Gets or sets the HTML identifier for a complete context menu definition.
            </summary>
            <value>by default this is null</value>
            <remarks>
            When this is null, the context menu is constructed dynamically from the
            <see cref="P:Northwoods.GoWeb.GoMenu.MenuItems"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoContextMenu.View">
            <summary>
            Gets the GoView that this GoContextMenu was created for.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.MenuItem">
            <summary>
            MenuItem describes an item in a <see cref="T:Northwoods.GoWeb.GoContextMenu"/> that is
            constructed on the client and can either invoke a <see cref="T:Northwoods.GoWeb.GoObject"/> method
            on the server or can execute JavaScript on the client.
            </summary>
            <remarks>
            MenuItem is very similar to the System.Windows.Forms.MenuItem class,
            in particular to the subset implemented in the .NET Compact Framework.
            At this time, nested MenuItems are not supported.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.MenuItem.#ctor">
            <summary>
            Construct an empty menu item.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.MenuItem.#ctor(System.String)">
            <summary>
            Construct a menu item with just some text as a caption.
            </summary>
            <param name="caption"></param>
        </member>
        <member name="M:Northwoods.GoWeb.MenuItem.#ctor(System.String,System.EventHandler)">
            <summary>
            Construct a menu item with a caption that invokes an event handler method
            on an object on the server when the user clicks the item.
            </summary>
            <param name="caption"></param>
            <param name="onClick"></param>
        </member>
        <member name="M:Northwoods.GoWeb.MenuItem.#ctor(System.String,Northwoods.GoWeb.MenuItem[])">
            <summary>
            Construct a menu item with a caption and a number of child menu items.
            </summary>
            <param name="caption"></param>
            <param name="items"></param>
        </member>
        <member name="M:Northwoods.GoWeb.MenuItem.Equals(System.Object)">
            <summary>
            Compare the <see cref="P:Northwoods.GoWeb.MenuItem.Text"/> caption, the boolean flags,
            and the <see cref="P:Northwoods.GoWeb.MenuItem.Click"/> property.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.MenuItem.GetHashCode">
            <summary>
            Consider any <see cref="P:Northwoods.GoWeb.MenuItem.Text"/> caption, the boolean flags,
            and the <see cref="P:Northwoods.GoWeb.MenuItem.Click"/> property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.MenuItem.ToString">
            <summary>
            Produce JavaScript code for building a data structure on the client
            that describes this menu item so that it can be built dynamically
            using DHTML.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Northwoods.GoWeb.MenuItem.Parent">
            <summary>
            Gets the parent menu.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.MenuItem.Checked">
            <summary>
            Gets or sets whether there is a "check" image with this menu item.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.MenuItem.Enabled">
            <summary>
            Gets or sets whether the user can click on this menu item.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.MenuItem.Text">
            <summary>
            Gets or sets the caption for this menu item.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.MenuItem.Visible">
            <summary>
            Gets or sets whether this menu item is visible to the user.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.MenuItem.Click">
            <summary>
            Gets or sets the string representing the action to be performed upon a click.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoMenuItem">
            <summary>
            GoMenuItem describes an item in a <see cref="T:Northwoods.GoWeb.GoContextMenu"/> that is
            constructed on the client and can either invoke a <see cref="T:Northwoods.GoWeb.GoObject"/> method
            on the server or can execute JavaScript on the client.
            </summary>
            <remarks>
            GoMenuItem is very similar to the System.Windows.Forms.MenuItem class,
            in particular to the subset implemented in the .NET Compact Framework.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoMenuItem.#ctor">
            <summary>
            Construct an empty menu item.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoMenuItem.#ctor(System.String)">
            <summary>
            Construct a menu item with just some text as a caption.
            </summary>
            <param name="caption"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoMenuItem.#ctor(System.String,System.EventHandler)">
            <summary>
            Construct a menu item with a caption that invokes an event handler method
            on an object on the server when the user clicks the item.
            </summary>
            <param name="caption"></param>
            <param name="onClick"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoMenuItem.#ctor(System.String,Northwoods.GoWeb.MenuItem[])">
            <summary>
            Construct a menu item with a caption and a number of child menu items.
            </summary>
            <param name="caption"></param>
            <param name="items"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoMenuItem.#ctor(System.String,System.String)">
            <summary>
            Provide some JavaScript to be executed in the client browser when
            the user clicks on this menu item.
            </summary>
            <param name="caption"></param>
            <param name="script"></param>
        </member>
        <member name="T:Northwoods.GoWeb.GoCopyDictionary">
            <summary>
            This class is used to remember the mapping of original objects to copied
            objects in <see cref="M:Northwoods.GoWeb.GoDocument.CopyFromCollection(Northwoods.GoWeb.IGoCollection)"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoCopyDictionary.#ctor">
            <summary>
            Create an empty mapping of objects to copied objects.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoCopyDictionary.Copy(Northwoods.GoWeb.GoObject)">
            <summary>
            Return a copied object for an object (first pass only).
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <remarks>
            <para>
            First this method looks up <paramref name="obj"/> in its mapping
            table--if it finds an object, it returns it, because presumably it
            has already been copied.
            Otherwise it calls <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="M:Northwoods.GoWeb.GoObject.CopyObject(Northwoods.GoWeb.GoCopyDictionary)"/> in order to
            make a copy of <paramref name="obj"/>.
            If <paramref name="obj"/> is null, this returns null.
            </para>
            <para>
            The primary use of this method is to be called by <see cref="T:Northwoods.GoWeb.GoDocument"/>'s
            <c>GoDocument.CopyFromCollection(IGoCollection, bool, bool, SizeF, GoCopyDictionary)</c> method.
            This is also typically called within a <see cref="M:Northwoods.GoWeb.GoObject.CopyObject(Northwoods.GoWeb.GoCopyDictionary)"/>
            override method to make a copy of a referenced object that is not
            a child of the copied object.
            </para>
            <para>
            If you don't call this in the context of a
            <c>GoDocument.CopyFromCollection(IGoCollection, bool, bool, SizeF, GoCopyDictionary)</c> method,
            be sure to call <see cref="M:Northwoods.GoWeb.GoCopyDictionary.FinishDelayedCopies"/> afterwards to perform the
            second copying pass, which resolves references and can do other copying work
            as implemented by <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="M:Northwoods.GoWeb.GoObject.CopyObjectDelayed(Northwoods.GoWeb.GoCopyDictionary,Northwoods.GoWeb.GoObject)"/>.
            </para>
            <para>
            The easiest way to make a full copy of an object in a document is to call
            <see cref="T:Northwoods.GoWeb.GoDocument"/>.<see cref="M:Northwoods.GoWeb.GoDocument.AddCopy(Northwoods.GoWeb.GoObject,System.Drawing.PointF)"/>, which calls <c>CopyFromCollection</c>.
            However, if you want to create a copy of an object without adding it to a document,
            you can call <see cref="M:Northwoods.GoWeb.GoCopyDictionary.CopyComplete(Northwoods.GoWeb.GoObject)"/>, which performs both copying passes.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoCopyDictionary.FinishDelayedCopies">
            <summary>
            Perform calls to <see cref="M:Northwoods.GoWeb.GoObject.CopyObjectDelayed(Northwoods.GoWeb.GoCopyDictionary,Northwoods.GoWeb.GoObject)"/>
            for any objects that were added to <see cref="P:Northwoods.GoWeb.GoCopyDictionary.Delayeds"/>
            during earlier calls to <see cref="M:Northwoods.GoWeb.GoCopyDictionary.Copy(Northwoods.GoWeb.GoObject)"/>.
            </summary>
            <remarks>
            This is primarily called by <see cref="T:Northwoods.GoWeb.GoDocument"/>'s
            <c>GoDocument.CopyFromCollection(IGoCollection, bool, bool, SizeF, GoCopyDictionary)</c> method.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoCopyDictionary.CopyComplete(Northwoods.GoWeb.GoObject)">
            <summary>
            This convenience method performs both copy phases making a
            copy of a single object.
            </summary>
            <param name="obj"></param>
            <returns>null, if <paramref name="obj"/> is null, else the result of <see cref="M:Northwoods.GoWeb.GoCopyDictionary.Copy(Northwoods.GoWeb.GoObject)"/>
            after a call to <see cref="M:Northwoods.GoWeb.GoCopyDictionary.FinishDelayedCopies"/></returns>
            <seealso cref="M:Northwoods.GoWeb.GoCopyDictionary.Copy(Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoCopyDictionary.SourceCollection">
            <summary>
            Gets or sets the collection from which we are copying.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoCopyDictionary.DestinationDocument">
            <summary>
            Gets or sets the document collection into which we are making copies.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoCopyDictionary.Item(System.Object)">
            <summary>
            Gets or sets the copied object in the destination for an object in the source.
            </summary>
            <remarks>
            This is an indexed property.
            If the key is null, getting this property returns null;
            When setting, if the key is null, nothing happens.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoCopyDictionary.Delayeds">
            <summary>
            Get the collection that holds objects that need attention
            after the first phase of copying.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoCopyDelayedsCollection">
            <summary>
            This class is used as part of a <see cref="T:Northwoods.GoWeb.GoCopyDictionary"/> to
            remember objects that were not completely copied during the first
            pass of the copying process in <see cref="M:Northwoods.GoWeb.GoDocument.CopyFromCollection(Northwoods.GoWeb.IGoCollection)"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoCopyDelayedsCollection.#ctor">
            <summary>
            Create a collection of delayed objects, used by <see cref="T:Northwoods.GoWeb.GoCopyDictionary"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoCopyDelayedsCollection.Add(System.Object)">
            <summary>
            Make sure a delayed object is present in this collection.
            </summary>
            <param name="obj"></param>
            <remarks>
            Null is ignored.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoCopyDelayedsCollection.Remove(System.Object)">
            <summary>
            Remove an object from this collection.
            </summary>
            <param name="obj"></param>
            <remarks>
            Null is ignored.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoCopyDelayedsCollection.Contains(System.Object)">
            <summary>
            Return true if a particular object is in this collection.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoCopyDelayedsCollection.Clear">
            <summary>
            Remove all objects from this collection.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoCopyDelayedsCollection.CopyArray">
            <summary>
            Fill a newly allocated array with references to the source objects that were delayed.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoCopyDelayedsCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Fill an array with references to the source objects that were copied but
            need additional work.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoCopyDelayedsCollection.CopyTo(Northwoods.GoWeb.GoObject[],System.Int32)">
            <summary>
            Provide a type-specific overload for <see cref="T:Northwoods.GoWeb.GoObject"/> arrays.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoCopyDelayedsCollection.GetEnumerator">
            <summary>
            Return an iterator over all of the delayed objects.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Northwoods.GoWeb.GoCopyDelayedsCollection.IsEmpty">
            <summary>
            Returns true if the <see cref="P:Northwoods.GoWeb.GoCopyDelayedsCollection.Count"/> is zero.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoCopyDelayedsCollection.Count">
            <summary>
            The number of objects whose copying needs additional work.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoCopyDelayedsCollection.IsSynchronized">
            <summary>
            Gets whether this collection is thread-safe.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoCopyDelayedsCollection.SyncRoot">
            <summary>
            Gets an object to be used for synchronizing access to this collection.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoDocumentValidCycle">
            <summary>
            Specifies what kinds of cycles may be made by a valid link from a port.
            </summary>
            <remarks>
            This provides values for the <see cref="T:Northwoods.GoWeb.GoDocument"/> property <see cref="P:Northwoods.GoWeb.GoDocument.ValidCycle"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocumentValidCycle.All">
            <summary>
            No restrictions on cycles, except when imposed by <see cref="P:Northwoods.GoWeb.GoPort.IsValidSelfNode"/>
            or <see cref="P:Northwoods.GoWeb.GoPort.IsValidDuplicateLinks"/>.
            </summary>
            <remarks>
            This is the default for <see cref="P:Northwoods.GoWeb.GoDocument.ValidCycle"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocumentValidCycle.NotDirected">
            <summary>
            A valid link from a port will not produce a directed cycle in the graph.
            </summary>
            <remarks>
            This option uses <see cref="M:Northwoods.GoWeb.GoDocument.MakesDirectedCycle(Northwoods.GoWeb.IGoNode,Northwoods.GoWeb.IGoNode)"/> in the
            implementation of <see cref="M:Northwoods.GoWeb.GoPort.IsValidLink(Northwoods.GoWeb.IGoPort)"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocumentValidCycle.NotDirectedFast">
            <summary>
            A valid link from a port will not produce a directed cycle in the graph,
            assuming there are no directed cycles anywhere accessible from either port.
            </summary>
            <remarks>
            This option uses <see cref="M:Northwoods.GoWeb.GoDocument.MakesDirectedCycleFast(Northwoods.GoWeb.IGoNode,Northwoods.GoWeb.IGoNode)"/> in the
            implementation of <see cref="M:Northwoods.GoWeb.GoPort.IsValidLink(Northwoods.GoWeb.IGoPort)"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocumentValidCycle.NotUndirected">
            <summary>
            A valid link from a port will not produce an undirected cycle in the graph.
            </summary>
            <remarks>
            Traversal of all links during the check for any undirected cycles ignores
            the implicit direction of each link.
            This option uses <see cref="M:Northwoods.GoWeb.GoDocument.MakesUndirectedCycle(Northwoods.GoWeb.IGoNode,Northwoods.GoWeb.IGoNode)"/> in the
            implementation of <see cref="M:Northwoods.GoWeb.GoPort.IsValidLink(Northwoods.GoWeb.IGoPort)"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocumentValidCycle.DestinationTree">
            <summary>
            Any number of destination links may go out of a port, but at most one
            source link may come into a port, and there are no directed cycles.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocumentValidCycle.SourceTree">
            <summary>
            Any number of source links may come into a port, but at most one
            destination link may go out of a port, and there are no directed cycles.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoPickInRectangleStyle">
            <summary>
            Specifies how <see cref="M:Northwoods.GoWeb.GoDocument.PickObjectsInRectangle(System.Drawing.RectangleF,Northwoods.GoWeb.GoPickInRectangleStyle,Northwoods.GoWeb.IGoCollection,System.Int32)"/>, 
            <see cref="M:Northwoods.GoWeb.GoLayer.PickObjectsInRectangle(System.Drawing.RectangleF,Northwoods.GoWeb.GoPickInRectangleStyle,Northwoods.GoWeb.IGoCollection,System.Int32)"/>, and <see cref="M:Northwoods.GoWeb.GoView.PickObjectsInRectangle(System.Boolean,System.Boolean,System.Drawing.RectangleF,Northwoods.GoWeb.GoPickInRectangleStyle,Northwoods.GoWeb.IGoCollection,System.Int32)"/>
            decide which objects are considered "in" a given rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPickInRectangleStyle.AnyContained">
            <summary>
            Include any object whose <see cref="P:Northwoods.GoWeb.GoObject.SelectionObject"/> is
            fully contained by the pick rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPickInRectangleStyle.AnyIntersectsBounds">
            <summary>
            Include any object whose <see cref="P:Northwoods.GoWeb.GoObject.SelectionObject"/>'s
            <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/> intersects the pick rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPickInRectangleStyle.SelectableOnlyContained">
            <summary>
            Include only selectable objects whose <see cref="P:Northwoods.GoWeb.GoObject.SelectionObject"/> is
            fully contained by the pick rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoPickInRectangleStyle.SelectableOnlyIntersectsBounds">
            <summary>
            Include only selectable objects whose <see cref="P:Northwoods.GoWeb.GoObject.SelectionObject"/>'s
            <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/> intersects the pick rectangle.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoRoutingTime">
            <summary>
            Specify when to calculate the routing of <see cref="T:Northwoods.GoWeb.IGoRoutable"/> objects.
            </summary>
            <remarks>
            This provides values for the <see cref="T:Northwoods.GoWeb.GoDocument"/> property <see cref="P:Northwoods.GoWeb.GoDocument.RoutingTime"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoRoutingTime.Immediate">
            <summary>
            Never delay routing.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoRoutingTime.Delayed">
            <summary>
            Delay calls to <see cref="T:Northwoods.GoWeb.IGoRoutable"/>.<see cref="M:Northwoods.GoWeb.IGoRoutable.CalculateRoute"/>
            if <see cref="T:Northwoods.GoWeb.GoDocument"/>.<see cref="P:Northwoods.GoWeb.GoDocument.SuspendsRouting"/> is true.
            </summary>
            <value>
            This is the default value for <see cref="T:Northwoods.GoWeb.GoDocument"/>.<see cref="P:Northwoods.GoWeb.GoDocument.RoutingTime"/>.
            </value>
        </member>
        <member name="F:Northwoods.GoWeb.GoRoutingTime.AfterNodesDragged">
            <summary>
            Delay calls, as in the <see cref="F:Northwoods.GoWeb.GoRoutingTime.Delayed"/> case, but also route <see cref="T:Northwoods.GoWeb.IGoRoutable"/>
            objects that intersect with avoidable objects that were moved,
            after a move, copy, drop, or paste.
            </summary>
            <remarks>
            This case supports automatically rerouting links around avoidable objects when those
            objects are dragged onto those links.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoRoutingTime.AfterLinksDragged">
            <summary>
            Delay calls, as in the <see cref="F:Northwoods.GoWeb.GoRoutingTime.Delayed"/> case, but also route <see cref="T:Northwoods.GoWeb.IGoRoutable"/>
            objects that were moved that also intersect with avoidable objects,
            after a move, copy, drop, or paste.
            </summary>
            <remarks>
            This case supports automatically rerouting links around avoidable objects when the links
            have been dragged onto those avoidable objects.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoRoutingTime.AfterNodesAndLinksDragged">
            <summary>
            Delay calls, as in the <see cref="F:Northwoods.GoWeb.GoRoutingTime.Delayed"/> case, but also route <see cref="T:Northwoods.GoWeb.IGoRoutable"/>
            objects after a move, copy, drop, or paste to avoid intersections.
            </summary>
            <remarks>
            This case is a combination of <see cref="F:Northwoods.GoWeb.GoRoutingTime.AfterNodesDragged"/> and <see cref="F:Northwoods.GoWeb.GoRoutingTime.AfterLinksDragged"/>.
            </remarks>
        </member>
        <member name="T:Northwoods.GoWeb.GoDocument">
            <summary>
            This class represents a model for a <see cref="T:Northwoods.GoWeb.GoView"/>, holding <see cref="T:Northwoods.GoWeb.GoObject"/>s
            to be displayed, organized into <see cref="T:Northwoods.GoWeb.GoLayer"/>s.
            </summary>
            <remarks>
            <para>
            To show something in a <see cref="T:Northwoods.GoWeb.GoView"/>, you will need to construct and initialize a
            <see cref="T:Northwoods.GoWeb.GoObject"/> (typically a class inheriting from <see cref="T:Northwoods.GoWeb.GoNode"/> or
            <see cref="T:Northwoods.GoWeb.GoLink"/> or <see cref="T:Northwoods.GoWeb.GoLabeledLink"/>), and then add it to the view's
            <see cref="P:Northwoods.GoWeb.GoView.Document"/>, which will be an instance of <c>GoDocument</c>.
            Typical programmatic usage might be something like:
            <code>
            GoBasicNode node1 = new GoBasicNode();
            node1.LabelSpot = GoObject.Middle;
            node1.Text = "basic node 1";
            node1.Shape.BrushColor = Color.LightGreen;
            node1.Location = new PointF(75, 50);
            goView1.Document.Add(node1);
            
            GoBasicNode node2 = new GoBasicNode();
            node2.LabelSpot = GoObject.Middle;
            node2.Text = "basic node 2";
            node2.Shape.BrushColor = Color.LightYellow;
            node2.Location = new PointF(200, 50);
            goView1.Document.Add(node2);
            
            GoLink link = new GoLink();
            link.ToArrow = true;
            link.FromPort = node1.Port;
            link.ToPort = node2.Port;
            goView1.Document.Add(link);
            </code>
            </para>
            <para>
            Please note that a <c>GoDocument</c> does not require the existence of any <see cref="T:Northwoods.GoWeb.GoView"/>s.
            A document may have zero, one, or many views displaying it simultaneously.
            A document and all of its <see cref="T:Northwoods.GoWeb.GoObject"/>s must not have any references to any
            <see cref="T:Northwoods.GoWeb.GoView"/> or to any other <c>Control</c>s.
            </para>
            <para>
            All documents and all of their objects must be serializable.
            Please read more about this topic in the User Guide.
            To help debug serialization issues, call the <see cref="M:Northwoods.GoWeb.GoDocument.TestSerialization"/> method.
            </para>
            <para>
            <c>GoDocument</c> implements <see cref="T:Northwoods.GoWeb.IGoCollection"/>, so you can call methods such as
            <see cref="M:Northwoods.GoWeb.GoDocument.Add(Northwoods.GoWeb.GoObject)"/>, <see cref="M:Northwoods.GoWeb.GoDocument.Remove(Northwoods.GoWeb.GoObject)"/>, <see cref="M:Northwoods.GoWeb.GoDocument.Contains(Northwoods.GoWeb.GoObject)"/>, <see cref="M:Northwoods.GoWeb.GoDocument.Clear"/>, and
            <see cref="M:Northwoods.GoWeb.GoDocument.CopyArray"/>, use properties such as <see cref="P:Northwoods.GoWeb.GoDocument.Count"/>, and enumerate both
            forwards and <see cref="P:Northwoods.GoWeb.GoDocument.Backwards"/>.
            </para>
            <para>
            A <c>GoDocument</c> organizes all of the <see cref="T:Northwoods.GoWeb.GoObject"/>s that it contains into
            <see cref="T:Northwoods.GoWeb.GoLayer"/>s.  The layers are held in the <see cref="P:Northwoods.GoWeb.GoDocument.Layers"/> collection.
            Initially a document will only have one layer, the <see cref="P:Northwoods.GoWeb.GoDocument.DefaultLayer"/>.
            If you want to keep nodes in one layer and links in a different layer, it is conventional
            to put the nodes in the <see cref="P:Northwoods.GoWeb.GoDocument.DefaultLayer"/> and the link in the <see cref="P:Northwoods.GoWeb.GoDocument.LinksLayer"/>.
            You will need to create a new layer and assign it to that property.
            If you want have all links appear behind all nodes, you can do:
            <code>
            doc.LinksLayer = doc.Layers.CreateNewLayerBefore(doc.Layers.Default)
            </code>
            Since the layers are painted in the order in which they appear in the <see cref="P:Northwoods.GoWeb.GoDocument.Layers"/>
            collection, the above code will ensure that all links are painted before any nodes or
            other objects that are in the <see cref="P:Northwoods.GoWeb.GoDocument.DefaultLayer"/>.
            </para>
            <para>
            The <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/> of each object are in document coordinates.
            This means that the coordinates are single precision floating point values;
            the position is a <c>PointF</c>, the size is a <c>SizeF</c>, and the bounds is a
            <c>RectangleF</c>.  Each <see cref="T:Northwoods.GoWeb.GoView"/> can look at some or all of the 
            <see cref="T:Northwoods.GoWeb.GoObject"/>s in a rectangular area determined by the view.  The size
            of the view, the view's <see cref="P:Northwoods.GoWeb.GoView.DocPosition"/>, and the view's
            <see cref="P:Northwoods.GoWeb.GoView.DocScale"/> all together form the view's <see cref="P:Northwoods.GoWeb.GoView.DocExtent"/>.
            If a <see cref="T:Northwoods.GoWeb.GoObject"/>'s <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/> is outside of a view's
            <see cref="P:Northwoods.GoWeb.GoView.DocExtent"/>, it won't be seen in that view.
            </para>
            <para>
            Independent of any view, a <c>GoDocument</c> has a <see cref="P:Northwoods.GoWeb.GoDocument.Size"/> and a
            <see cref="P:Northwoods.GoWeb.GoDocument.TopLeft"/> position.  Together they form the document's <see cref="P:Northwoods.GoWeb.GoDocument.Bounds"/>.
            Normally the document's bounds is large enough to include the bounds of all of its
            objects.  As objects are added or moved or resized, <see cref="M:Northwoods.GoWeb.GoDocument.UpdateDocumentBounds(Northwoods.GoWeb.GoObject)"/>
            extends the <see cref="P:Northwoods.GoWeb.GoDocument.TopLeft"/> position and the <see cref="P:Northwoods.GoWeb.GoDocument.Size"/> if needed.
            (However, if <see cref="P:Northwoods.GoWeb.GoDocument.FixedSize"/> is true, <see cref="M:Northwoods.GoWeb.GoDocument.UpdateDocumentBounds(Northwoods.GoWeb.GoObject)"/>
            does nothing.)  The document's bounds affect whether or not a particular view's
            scroll bars are needed and how far a user might be able to scroll.  But note that
            each view has additional properties for governing scrolling extents.
            </para>
            <para>
            The document's bounds do not automatically shrink as objects are removed or are
            moved away from the edges of the bounds.  To iterate over all of the objects and
            compute the actual area that they currently occupy, call <see cref="M:Northwoods.GoWeb.GoDocument.ComputeBounds"/>.
            You can also call the static method <see cref="M:Northwoods.GoWeb.GoDocument.ComputeBounds(Northwoods.GoWeb.IGoCollection,Northwoods.GoWeb.GoView)"/>
            to determine the extent of any collection of objects.  That method takes an optional
            <see cref="T:Northwoods.GoWeb.GoView"/> argument to allow consideration of how much area each object
            actually takes when painted or printed in that view, since for each object the
            result of <see cref="M:Northwoods.GoWeb.GoObject.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.GoWeb.GoView)"/> may be larger than then the
            object's <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/>.
            </para>
            <para>
            There are a number of different possibilities for finding an object in a document:
            by location, by name, or by identifier.
            </para>
            <para>
            To find the front-most object at a given point,
            call the <see cref="M:Northwoods.GoWeb.GoDocument.PickObject(System.Drawing.PointF,System.Boolean)"/> method.  If you might want to find all of the
            objects at a particular point, including those hidden behind/underneath, call the
            <see cref="M:Northwoods.GoWeb.GoDocument.PickObjects(System.Drawing.PointF,System.Boolean,Northwoods.GoWeb.IGoCollection,System.Int32)"/> method.  If you want to find all of the objects that are
            either completely or partially surrounded by a rectangular area,
            call <see cref="M:Northwoods.GoWeb.GoDocument.PickObjectsInRectangle(System.Drawing.RectangleF,Northwoods.GoWeb.GoPickInRectangleStyle,Northwoods.GoWeb.IGoCollection,System.Int32)"/>.
            </para>
            <para>
            To find a node by name, call one of the <c>FindNode</c> methods.
            <c>FindNode</c> actually will find any <see cref="T:Northwoods.GoWeb.IGoLabeledPart"/>, not just nodes.
            <see cref="P:Northwoods.GoWeb.IGoLabeledPart.Text"/> is the property that provides the text string.
            </para>
            <para>
            To find a node or port or link by integer identifier, you'll first need to set
            <see cref="P:Northwoods.GoWeb.GoDocument.MaintainsPartID"/> to true.  Then you'll be able to call
            <see cref="M:Northwoods.GoWeb.GoDocument.FindPart(System.Int32)"/> to find any <see cref="T:Northwoods.GoWeb.IGoIdentifiablePart"/> within the
            document, at any level of nesting.
            <see cref="P:Northwoods.GoWeb.IGoIdentifiablePart.PartID"/> is the property that provides the integer
            identifier.
            </para>
            <para>
            There are many properties that control whether a user can perform certain operations.
            These properties (and corresponding predicates) are defined by the interface
            <see cref="T:Northwoods.GoWeb.IGoLayerAbilities"/>.  Those include: select, move, copy, resize,
            reshape, delete, insert, link, and edit.  Setting one of these <c>Allow...</c>
            properties will affect all <see cref="T:Northwoods.GoWeb.GoView"/>s displaying this document.
            (Setting the same properties on a view will only affect that view;
            setting the same properties on a layer will only affect all objects in that layer.)
            Call the <see cref="M:Northwoods.GoWeb.GoDocument.SetModifiable(System.Boolean)"/> method for a convenient way to set all of
            the properties that allow modification of the document.
            </para>
            <para>
            The <see cref="P:Northwoods.GoWeb.GoDocument.IsModified"/> property indicates whether the document has been
            modified.  Read its documentation to learn more about how the <see cref="T:Northwoods.GoWeb.GoUndoManager"/>
            affects its state, for both getting and setting.
            </para>
            <para>
            Whenever a change to the document occurs, the <see cref="E:Northwoods.GoWeb.GoDocument.Changed"/> event is raised.
            Each time one sets a property or adds or removes an object, <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            is called, which in turn calls <see cref="M:Northwoods.GoWeb.GoDocument.OnChanged(Northwoods.GoWeb.GoChangedEventArgs)"/> to call all registered
            event handlers.  <see cref="M:Northwoods.GoWeb.GoDocument.OnChanged(Northwoods.GoWeb.GoChangedEventArgs)"/> is also responsible for maintaining the
            <see cref="P:Northwoods.GoWeb.GoDocument.IsModified"/> state, for calling <see cref="M:Northwoods.GoWeb.GoDocument.UpdateDocumentBounds(Northwoods.GoWeb.GoObject)"/>,
            and for maintaining <see cref="P:Northwoods.GoWeb.IGoIdentifiablePart.PartID"/>s.
            </para>
            <para>
            If you add a property in a class inheriting from <c>GoDocument</c>,
            be sure to call <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> if and only if the value has changed.
            You will also need to override <see cref="M:Northwoods.GoWeb.GoDocument.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)"/> to perform the recorded
            change for that particular property.
            Similarly, if you add a property to a class inheriting from <see cref="T:Northwoods.GoWeb.GoObject"/>,
            be sure to call <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> if and only if the value has changed.
            You will also need to override <see cref="M:Northwoods.GoWeb.GoObject.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)"/> in that class
            to perform the recorded change for that particular property.
            </para>
            <para>
            To record undo/redo information, assign the <see cref="P:Northwoods.GoWeb.GoDocument.UndoManager"/> property.
            This will automatically enable undo/redo functionality in all views displaying
            this document.  If you want to make some transient changes to objects and do not
            want those changes to be recorded in the <see cref="T:Northwoods.GoWeb.GoUndoManager"/>, temporarily
            set <see cref="P:Northwoods.GoWeb.GoDocument.SkipsUndoManager"/> to true.
            </para>
            <para>
            Any code that makes changes to a document or to a document object should be
            preceded with a call to <see cref="M:Northwoods.GoWeb.GoDocument.StartTransaction"/> and followed by a call to
            <see cref="M:Northwoods.GoWeb.GoDocument.FinishTransaction(System.String)"/> or <see cref="M:Northwoods.GoWeb.GoDocument.AbortTransaction"/>.  This groups
            together all of the changes so that an undo or a redo will perform them all at once.
            Transactions can be nested.
            </para>
            <para>
            When you want to (programmatically) make copies of objects and add them to a document,
            call <see cref="M:Northwoods.GoWeb.GoDocument.AddCopy(Northwoods.GoWeb.GoObject,System.Drawing.PointF)"/> for a single object or call
            <see cref="M:Northwoods.GoWeb.GoDocument.CopyFromCollection(Northwoods.GoWeb.IGoCollection)"/> for multiple objects.  Calling the latter
            method (or its overloaded variant, for more options) is needed if you want to maintain
            relationships between the objects being copied, for example, the links between nodes.
            </para>
            <para>
            <c>GoDocument</c> also provides some options for controlling the kinds of links that
            users may draw: the <see cref="P:Northwoods.GoWeb.GoDocument.ValidCycle"/> property.
            </para>
            <para>
            For document persistence, you will need to implement code to read/write to your
            desired medium.  If you are reading/writing XML, you may find GoXML useful.
            In particular, <c>GoXmlBindingTransformer</c> may be very convenient to use.
            We also offer a sample, DataSetDemo, demonstrating persistence to and from a DataSet.
            </para>
            <para>
            Read the User Guide and FAQ for more details.
            </para>
            </remarks>
        </member>
        <member name="T:Northwoods.GoWeb.IGoLayerCollectionContainer">
            <summary>
            GoDocument and GoView implement this interface for holding a GoLayerCollection collection.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.IGoLayerAbilities">
            <summary>
            This interface specifies the properties used by <see cref="T:Northwoods.GoWeb.GoLayer"/>,
            <see cref="T:Northwoods.GoWeb.GoDocument"/>, and <see cref="T:Northwoods.GoWeb.GoView"/> for describing what
            kinds of actions the user is allowed to do.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.IGoLayerAbilities.CanSelectObjects">
            <summary>
            Called to see if the user can select objects in this layer, document or view.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.IGoLayerAbilities.CanMoveObjects">
            <summary>
            Called to see if the user can move selected objects in this layer, document or view.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.IGoLayerAbilities.CanCopyObjects">
            <summary>
            Called to see if the user can copy selected objects in this layer, document or view.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.IGoLayerAbilities.CanResizeObjects">
            <summary>
            Called to see if the user can resize selected objects in this layer, document or view.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.IGoLayerAbilities.CanReshapeObjects">
            <summary>
            Called to see if the user can reshape resizable selected objects in this layer, document or view.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.IGoLayerAbilities.CanDeleteObjects">
            <summary>
            Called to see if the user can delete selected objects in this layer, document or view.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.IGoLayerAbilities.CanInsertObjects">
            <summary>
            Called to see if the user can insert objects in this layer, document or view.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.IGoLayerAbilities.CanLinkObjects">
            <summary>
            Called to see if the user can link objects in this layer, document or view.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.IGoLayerAbilities.CanEditObjects">
            <summary>
            Called to see if the user can edit objects in this layer, document or view.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.IGoLayerAbilities.SetModifiable(System.Boolean)">
            <summary>
            Set the <c>AllowMove</c>, <c>AllowResize</c>, <c>AllowReshape</c>,
            <c>AllowDelete</c>, <c>AllowInsert</c>, <c>AllowLink</c>, and
            <c>AllowEdit</c> properties.
            </summary>
            <param name="b"></param>
        </member>
        <member name="P:Northwoods.GoWeb.IGoLayerAbilities.AllowSelect">
            <summary>
            Gets or sets whether the user can select objects in this layer, document or view.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.IGoLayerAbilities.AllowMove">
            <summary>
            Gets or sets whether the user can move selected objects in this layer, document or view.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.IGoLayerAbilities.AllowCopy">
            <summary>
            Gets or sets whether the user can copy selected objects in this layer, document or view.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.IGoLayerAbilities.AllowResize">
            <summary>
            Gets or sets whether the user can resize selected objects in this layer, document or view.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.IGoLayerAbilities.AllowReshape">
            <summary>
            Gets or sets whether the user can reshape resizable selected objects in this layer, document or view.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.IGoLayerAbilities.AllowDelete">
            <summary>
            Gets or sets whether the user can delete selected objects in this layer, document or view.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.IGoLayerAbilities.AllowInsert">
            <summary>
            Gets or sets whether the user can insert objects in this layer, document or view.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.IGoLayerAbilities.AllowLink">
            <summary>
            Gets or sets whether the user can link objects in this layer, document or view.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.IGoLayerAbilities.AllowEdit">
            <summary>
            Gets or sets whether the user can edit objects in this layer, document or view.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.IGoLayerCollectionContainer.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)">
            <summary>
            This method is called when one of a document's or a view's
            layer collection, layer, or object is modified.
            </summary>
            <param name="hint">identifies the kind of change</param>
            <param name="subhint">identifies a particular kind of change for the <paramref name="hint"/></param>
            <param name="obj">helps identify the change</param>
            <param name="oldI">specifies an old/previous integer value</param>
            <param name="oldVal">specifies an old/previous object value</param>
            <param name="oldRect">specifies an old/previous float, <c>PointF</c>, <c>SizeF</c>, or <c>RectangleF</c> value</param>
            <param name="newI">specifies a new integer value</param>
            <param name="newVal">specifies a new object value</param>
            <param name="newRect">specifies a new float, <c>PointF</c>, <c>SizeF</c>, or <c>RectangleF</c> value</param>
        </member>
        <member name="P:Northwoods.GoWeb.IGoLayerCollectionContainer.Layers">
            <summary>
            Gets the collection of layers.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.RepaintAll">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint to tell all of the <see cref="T:Northwoods.GoWeb.GoView"/>s
            on this document to call <see cref="M:Northwoods.GoWeb.GoView.UpdateView"/>.
            </summary>
            <remarks>
            Because there is no real document state change associated with this event case,
            the Object and the old and new values (integer, Object, and RectangleF) passed to <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            and stored in a <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/> are not meaningful.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.BeginUpdateAllViews">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint to tell all of the <see cref="T:Northwoods.GoWeb.GoView"/>s
            on this document to call <see cref="M:Northwoods.GoWeb.GoView.BeginUpdate"/>.
            </summary>
            <remarks>
            Because there is no real document state change associated with this event case,
            the Object and the old and new values (integer, Object, and RectangleF) passed to <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            and stored in a <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/> are not meaningful.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.EndUpdateAllViews">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint to tell all of the <see cref="T:Northwoods.GoWeb.GoView"/>s
            on this document to call <see cref="M:Northwoods.GoWeb.GoView.EndUpdate"/>.
            </summary>
            <remarks>
            Because there is no real document state change associated with this event case,
            the Object and the old and new values (integer, Object, and RectangleF) passed to <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            and stored in a <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/> are not meaningful.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.UpdateAllViews">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint to tell all of the <see cref="T:Northwoods.GoWeb.GoView"/>s
            on this document to call <c>Control.Update</c>.
            </summary>
            <remarks>
            Because there is no real document state change associated with this event case,
            the Object and the old and new values (integer, Object, and RectangleF) passed to <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            and stored in a <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/> are not meaningful.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.StartedTransaction">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint,
            called by <see cref="M:Northwoods.GoWeb.GoDocument.StartTransaction"/> just after a call to <see cref="T:Northwoods.GoWeb.GoUndoManager"/>.<see cref="M:Northwoods.GoWeb.GoUndoManager.StartTransaction"/>.
            </summary>
            <remarks>
            Because there is no real document state change associated with this event case,
            the Object and the old and new values (integer, Object, and RectangleF) passed to <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            and stored in a <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/> are not meaningful.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.FinishedTransaction">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint
            called by <see cref="M:Northwoods.GoWeb.GoDocument.FinishTransaction(System.String)"/> just after a call to <see cref="T:Northwoods.GoWeb.GoUndoManager"/>.<see cref="M:Northwoods.GoWeb.GoUndoManager.FinishTransaction(System.String)"/>.
            </summary>
            <remarks>
            Because there is no real document state change associated with this event case,
            the Object and the old and new values (integer, Object, and RectangleF) passed to <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            and stored in a <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/> have a different meaning.
            The <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.Object"/> is the <see cref="P:Northwoods.GoWeb.GoUndoManager.CurrentEdit"/> after having been committed,
            the <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.OldValue"/> is the transaction name,
            and the <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.NewValue"/> is the presentation name.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.AbortedTransaction">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint,
            called by <see cref="M:Northwoods.GoWeb.GoDocument.AbortTransaction"/> just after a call to <see cref="T:Northwoods.GoWeb.GoUndoManager"/>.<see cref="M:Northwoods.GoWeb.GoUndoManager.AbortTransaction"/>.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.Object"/> is the <see cref="P:Northwoods.GoWeb.GoUndoManager.CurrentEdit"/>,
            the <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.OldValue"/> is the transaction name,
            and the <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.NewValue"/> is the presentation name.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.StartingUndo">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint,
            called by <see cref="M:Northwoods.GoWeb.GoDocument.Undo"/> just before a call to <see cref="T:Northwoods.GoWeb.GoUndoManager"/>.<see cref="M:Northwoods.GoWeb.GoUndoManager.Undo"/>.
            </summary>
            <remarks>
            The <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/>.<see cref="P:Northwoods.GoWeb.GoChangedEventArgs.Object"/>
            is the <see cref="T:Northwoods.GoWeb.GoUndoManagerCompoundEdit"/> that was the value of
            <see cref="P:Northwoods.GoWeb.GoUndoManager.EditToUndo"/> before calling Undo.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.FinishedUndo">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint,
            called by <see cref="M:Northwoods.GoWeb.GoDocument.Undo"/> just after a call to <see cref="T:Northwoods.GoWeb.GoUndoManager"/>.<see cref="M:Northwoods.GoWeb.GoUndoManager.Undo"/>.
            </summary>
            <remarks>
            The <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/>.<see cref="P:Northwoods.GoWeb.GoChangedEventArgs.Object"/>
            is the <see cref="T:Northwoods.GoWeb.GoUndoManagerCompoundEdit"/> that was the value of
            <see cref="P:Northwoods.GoWeb.GoUndoManager.EditToUndo"/> before calling Undo.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.StartingRedo">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint,
            called by <see cref="M:Northwoods.GoWeb.GoDocument.Redo"/> just before a call to <see cref="T:Northwoods.GoWeb.GoUndoManager"/>.<see cref="M:Northwoods.GoWeb.GoUndoManager.Redo"/>.
            </summary>
            <remarks>
            The <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/>.<see cref="P:Northwoods.GoWeb.GoChangedEventArgs.Object"/>
            is the <see cref="T:Northwoods.GoWeb.GoUndoManagerCompoundEdit"/> that was the value of
            <see cref="P:Northwoods.GoWeb.GoUndoManager.EditToRedo"/> before calling Redo.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.FinishedRedo">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint,
            called by <see cref="M:Northwoods.GoWeb.GoDocument.Redo"/> just after a call to <see cref="T:Northwoods.GoWeb.GoUndoManager"/>.<see cref="M:Northwoods.GoWeb.GoUndoManager.Redo"/>.
            </summary>
            <remarks>
            The <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/>.<see cref="P:Northwoods.GoWeb.GoChangedEventArgs.Object"/>
            is the <see cref="T:Northwoods.GoWeb.GoUndoManagerCompoundEdit"/> that was the value of
            <see cref="P:Northwoods.GoWeb.GoUndoManager.EditToRedo"/> before calling Redo.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.ChangedName">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDocument.Name"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.ChangedSize">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDocument.Size"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.ChangedTopLeft">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDocument.TopLeft"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.ChangedFixedSize">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDocument.FixedSize"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.ChangedPaperColor">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDocument.PaperColor"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.ChangedDataFormat">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDocument.DataFormat"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.ChangedAllowSelect">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDocument.AllowSelect"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.ChangedAllowMove">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDocument.AllowMove"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.ChangedAllowCopy">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDocument.AllowCopy"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.ChangedAllowResize">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDocument.AllowResize"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.ChangedAllowReshape">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDocument.AllowReshape"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.ChangedAllowDelete">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDocument.AllowDelete"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.ChangedAllowInsert">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDocument.AllowInsert"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.ChangedAllowLink">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDocument.AllowLink"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.ChangedAllowEdit">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDocument.AllowEdit"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.AllArranged">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.ChangedUserFlags">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDocument.UserFlags"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.ChangedUserObject">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDocument.UserObject"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.ChangedLinksLayer">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDocument.LinksLayer"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.ChangedMaintainsPartID">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDocument.MaintainsPartID"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.ChangedValidCycle">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDocument.ValidCycle"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.ChangedLastPartID">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDocument.LastPartID"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.ChangedWorldScale">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDocument.WorldScale"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.ChangedRoutingTime">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDocument.RoutingTime"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.ChangedInitializing">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoDocument.Initializing"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.ChangedObject">
            <summary>
            This <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint is a synonym for <see cref="T:Northwoods.GoWeb.GoLayer"/>.<see cref="F:Northwoods.GoWeb.GoLayer.ChangedObject"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.LastHint">
            <summary>
            This is the last system-defined <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint.
            </summary>
            <remarks>
            Subclasses of GoDocument should use values larger than this one
            to identify document, layer collection, and layer change events.
            GoLayerCollection hints are 800-899.
            GoLayer hints are 900-999.
            GoObject hints are 1000-9999, even though they are stored as subhints and thus cannot conflict.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.#ctor">
            <summary>
            Create a document containing one empty layer.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.Copy">
            <summary>
            Make a copy of this document.
            </summary>
            <returns>
            A new <c>GoDocument</c> containing copies of all the layers
            and all of their <see cref="T:Northwoods.GoWeb.GoObject"/>s.
            </returns>
            <remarks>
            The <see cref="P:Northwoods.GoWeb.GoDocument.UndoManager"/>, if any, is not copied or shared
            with the new document.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.TestSerialization">
            <summary>
            Test serializing and deserializing this document, to help discover unserializable objects by
            getting <c>SerializationException</c>s when debugging serialization errors such as during a copy-and-paste.
            [Not in GoDiagram Pocket]
            </summary>
            <returns>a copy of this document, including all of its contents and any referenced objects</returns>
            <remarks>
            <para>
            Serialization of a <see cref="T:Northwoods.GoWeb.GoDocument"/> and its <see cref="T:Northwoods.GoWeb.GoObject"/>s is important
            for copy-and-paste and drag-and-drop (in Windows Forms) and for session state (in ASP.NET Web Forms).
            Sometimes copy-and-paste will result in missing objects, due to unserializable objects
            or serialization errors.
            </para>
            <para>
            You can call this method to help debug serialization problems.
            This method serializes this document into a <c>MemoryStream</c>
            and then immediately deserializes it back into a newly copied document.
            If there is a problem, you are likely to get a <c>SerializationException</c>,
            which should give you a clue as to which class needs to be attributed <c>Serializable</c>
            or which fields need to be attributed <c>NonSerialized</c>.
            </para>
            <para>
            This method is implemented as:
            <code>
            public GoDocument TestSerialization() {
              MemoryStream memstream = new MemoryStream();
              IFormatter oformatter = new BinaryFormatter();
              oformatter.Serialize(memstream, this);
              memstream.Position = 0;
              IFormatter iformatter = new BinaryFormatter();
              return iformatter.Deserialize(memstream) as GoDocument;
            }
            </code>
            </para>
            <para>
            Because this may consume significant time and space without actually changing anything,
            do not call this method in a production environment except when investigating a serialization problem.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.Add(Northwoods.GoWeb.GoObject)">
            <summary>
            Add an object to the <see cref="P:Northwoods.GoWeb.GoDocument.DefaultLayer"/>,
            or to the <see cref="P:Northwoods.GoWeb.GoDocument.LinksLayer"/> if the object is an <see cref="T:Northwoods.GoWeb.IGoLink"/>.
            </summary>
            <param name="obj"></param>
            <remarks>
            It is an error if the <paramref name="obj"/> belongs to a different document
            or to a <see cref="T:Northwoods.GoWeb.GoGroup"/>.
            If the object already belongs to this document, nothing happens.
            If the object is a link, it adds the link to the <see cref="P:Northwoods.GoWeb.GoDocument.LinksLayer"/>
            rather than to the <see cref="P:Northwoods.GoWeb.GoDocument.DefaultLayer"/>, as is conventional.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.AddCopy(Northwoods.GoWeb.GoObject,System.Drawing.PointF)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.Remove(Northwoods.GoWeb.GoObject)">
            <summary>
            Remove an object from this document.
            </summary>
            <param name="obj"></param>
            <remarks>
            It is an error if the <paramref name="obj"/> belongs to a different document.
            If it already has been removed from this document, this method does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.Contains(Northwoods.GoWeb.GoObject)">
            <summary>
            Determine if an object belongs to this document.
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <remarks>
            This implementation currently depends on the object's <see cref="P:Northwoods.GoWeb.GoObject.Layer"/>
            property to see if it is part of this document.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.Clear">
            <summary>
            Remove all objects from all layers in this document.
            </summary>
            <remarks>
            All layers remain in the <see cref="P:Northwoods.GoWeb.GoDocument.Layers"/> collection, but
            each layer will be <see cref="M:Northwoods.GoWeb.GoLayer.Clear"/>ed.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.CopyArray">
            <summary>
            Gets a newly allocated array of all of the GoObjects in this collection.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.IGoCollection.CopyArray"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.CopyTo(System.Array,System.Int32)">
            <summary>
            Copy references to all of the document objects into the given Array.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.CopyTo(Northwoods.GoWeb.GoObject[],System.Int32)">
            <summary>
            Copy references to all of the document objects into the given array of <see cref="T:Northwoods.GoWeb.GoObject"/>s.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.GetEnumerator">
            <summary>
            Get an Enumerator that iterates over all layers to include all document objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.PickObject(System.Drawing.PointF,System.Boolean)">
            <summary>
            Find the top-most (front-most) document object at a given point.
            </summary>
            <param name="p">A <c>PointF</c> location in document coordinates.</param>
            <param name="selectableOnly"></param>
            <returns></returns>
            <remarks>
            This iterates over the collection of layers, backwards from top to bottom,
            calling <see cref="M:Northwoods.GoWeb.GoLayer.PickObject(System.Drawing.PointF,System.Boolean)"/>.
            If <paramref name="selectableOnly"/> is true but <see cref="M:Northwoods.GoWeb.GoDocument.CanSelectObjects"/>
            is false, this method returns null.
            Please note that if an object is found, it might not be a top-level object.
            In fact, when <paramref name="selectableOnly"/> is false, it is very likely
            that if any object is found at the given point, it will be a child of some
            group.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.PickObjects(System.Drawing.PointF,System.Boolean,Northwoods.GoWeb.IGoCollection,System.Int32)">
            <summary>
            Return a collection of objects that can be picked at a particular point.
            </summary>
            <param name="p">A <c>PointF</c> location in document coordinates.</param>
            <param name="selectableOnly">If true, only consider objects for which <see cref="M:Northwoods.GoWeb.GoObject.CanSelect"/> is true.</param>
            <param name="coll">An <see cref="T:Northwoods.GoWeb.IGoCollection"/> that is modified by adding results and then returned.
            If this value is null, a <see cref="T:Northwoods.GoWeb.GoCollection"/> is allocated and returned.</param>
            <param name="max">A limit on the number of objects to be found and added to the result collection.</param>
            <returns>The <paramref name="coll"/> argument, or a newly allocated one if that was null.</returns>
            <remarks>
            This calls <see cref="M:Northwoods.GoWeb.GoLayer.PickObjects(System.Drawing.PointF,System.Boolean,Northwoods.GoWeb.IGoCollection,System.Int32)"/> on each of the layers of this document
            in reverse order, from front to back.
            Please note that when objects are found, they might not be a top-level objects.
            In fact, when <paramref name="selectableOnly"/> is false, it is very likely
            that if any object is found at the given point, it will be a child of some group.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.PickObjectsInRectangle(System.Drawing.RectangleF,Northwoods.GoWeb.GoPickInRectangleStyle,Northwoods.GoWeb.IGoCollection,System.Int32)">
            <summary>
            Return a collection of objects that are surrounded by a given rectangle.
            </summary>
            <param name="rect">A <c>RectangleF</c> in document coordinates.</param>
            <param name="pickstyle">
            If <see cref="F:Northwoods.GoWeb.GoPickInRectangleStyle.SelectableOnlyContained"/>
            or <see cref="F:Northwoods.GoWeb.GoPickInRectangleStyle.SelectableOnlyIntersectsBounds"/>,
            only consider objects for which <see cref="M:Northwoods.GoWeb.GoObject.CanSelect"/> is true.
            </param>
            <param name="coll">An <see cref="T:Northwoods.GoWeb.IGoCollection"/> that is modified by adding results and then returned.
            If this value is null, a <see cref="T:Northwoods.GoWeb.GoCollection"/> is allocated and returned.</param>
            <param name="max">A limit on the number of objects to be found and added to the result collection.</param>
            <returns>The <paramref name="coll"/> argument, or a newly allocated one if that was null.</returns>
            <remarks>
            This basically calls <see cref="T:Northwoods.GoWeb.GoLayer"/>.<see cref="M:Northwoods.GoWeb.GoLayer.PickObjectsInRectangle(System.Drawing.RectangleF,Northwoods.GoWeb.GoPickInRectangleStyle,Northwoods.GoWeb.IGoCollection,System.Int32)"/>
            on each layer in this document.
            If <paramref name="pickstyle"/> is <c>GoPickInRectangleStyle.SelectableOnlyContained</c> and <see cref="M:Northwoods.GoWeb.GoDocument.CanSelectObjects"/> is false,
            this will not add any objects to the result collection.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.UpdateDocumentBounds(Northwoods.GoWeb.GoObject)">
            <summary>
            Called when a document object's bounds changes to possibly update the document's bounds.
            </summary>
            <param name="obj"></param>
            <remarks>
            This method does nothing if <see cref="P:Northwoods.GoWeb.GoDocument.FixedSize"/> is true.
            Otherwise it increases the <see cref="P:Northwoods.GoWeb.GoDocument.Size"/> property and moves
            the <see cref="P:Northwoods.GoWeb.GoDocument.TopLeft"/> point farther towards negative coordinates
            as needed to include the <paramref name="obj"/>'s bounds.
            By default this method never shrinks the document.
            Note also that this method is not called while <see cref="P:Northwoods.GoWeb.GoDocument.SuspendsUpdates"/> is true.
            If you do add objects or modify their bounds while <see cref="P:Northwoods.GoWeb.GoDocument.SuspendsUpdates"/>
            is true, afterwards you can explicitly set <see cref="P:Northwoods.GoWeb.GoDocument.TopLeft"/> and <see cref="P:Northwoods.GoWeb.GoDocument.Size"/>
            to accommodate the new or modified document objects.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.FindNode(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Search this document for an object whose <see cref="P:Northwoods.GoWeb.IGoLabeledPart.Text"/>
            property matches a given string, possibly considering the initial part of
            the part's text string and possibly comparing in a case-insensitive manner.
            </summary>
            <param name="s">the <c>String</c> to search for</param>
            <param name="prefix">
            true to just find parts beginning with <paramref name="s"/>;
            false to compare the whole string
            </param>
            <param name="ignorecase">
            true to upcase both the <paramref name="s"/> search string as well
            as each part's text string;
            false to do a case-sensitive comparison
            </param>
            <param name="insidesubgraph">
            true to recurse into subgraphs;
            false to only consider top-level <see cref="T:Northwoods.GoWeb.IGoLabeledPart"/>'s
            [assumed to be false in GoDiagram Express]
            </param>
            <returns>
            A <see cref="T:Northwoods.GoWeb.GoObject"/> that implements <see cref="T:Northwoods.GoWeb.IGoLabeledPart"/>
            with a matching text string, or null if no such part exists in this document.
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.FindNode(System.String,System.Boolean,System.Boolean)">
            <summary>
            Find a top-level object whose <see cref="P:Northwoods.GoWeb.IGoLabeledPart.Text"/> property value
            matches a given string.
            </summary>
            <param name="s"></param>
            <param name="prefix"></param>
            <param name="ignorecase"></param>
            <returns>
            The result of calling <c>FindNode(s, prefix, ignorecase, false)</c>
            </returns>
            <remarks>
            This method's functionality is implemented by <see cref="M:Northwoods.GoWeb.GoDocument.FindNode(System.String,System.Boolean,System.Boolean,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.FindNode(System.String)">
            <summary>
            Find a top-level object whose <see cref="P:Northwoods.GoWeb.IGoLabeledPart.Text"/> property value is
            exactly the same as a given string.
            </summary>
            <param name="s">the <c>String</c> to search for</param>
            <returns>
            The result of <c>FindNode(s, false, false, false)</c>.
            </returns>
            <remarks>
            This method's functionality is implemented by <see cref="M:Northwoods.GoWeb.GoDocument.FindNode(System.String,System.Boolean,System.Boolean,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.ComputeBounds(Northwoods.GoWeb.IGoCollection,Northwoods.GoWeb.GoView)">
            <summary>
            Get the smallest rectangle that includes the bounds of all of the
            objects in a collection.
            </summary>
            <param name="coll"></param>
            <param name="view">May be null.</param>
            <returns>
            A <c>RectangleF</c> that encloses all of the objects in the
            collection, which might not include the (0, 0) origin point
            </returns>
            <remarks>
            This method uses <see cref="M:Northwoods.GoWeb.GoObject.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.GoWeb.GoView)"/> to include
            areas beyond the immediate <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/>, perhaps
            affected by the <paramref name="view"/>.
            This ignores non-visible objects, by checking <see cref="M:Northwoods.GoWeb.GoObject.CanView"/>.
            If the view <see cref="P:Northwoods.GoWeb.GoView.IsPrinting"/>, this checks <see cref="M:Northwoods.GoWeb.GoObject.CanPrint"/> instead.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.ComputeBounds">
            <summary>
            Call <see cref="M:Northwoods.GoWeb.GoDocument.ComputeBounds(Northwoods.GoWeb.IGoCollection,Northwoods.GoWeb.GoView)"/>
            on this document but with no view.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.CanSelectObjects">
            <summary>
            Called to see if the user can select objects in this document.
            </summary>
            <remarks>
            By default this just returns <c>AllowSelect</c>,
            This property is used by methods such as <see cref="M:Northwoods.GoWeb.GoView.SelectInRectangle(System.Drawing.RectangleF)"/>
            and <see cref="M:Northwoods.GoWeb.GoDocument.PickObject(System.Drawing.PointF,System.Boolean)"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.AllowSelect"/>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanSelectObjects"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.CanSelect"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.CanMoveObjects">
            <summary>
            Called to see if the user can move selected objects in this document.
            </summary>
            <remarks>
            By default this just returns <c>AllowMove</c>,
            This property is used by methods such as <see cref="M:Northwoods.GoWeb.GoView.MoveSelection(Northwoods.GoWeb.GoSelection,System.Drawing.SizeF,System.Boolean)"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.AllowMove"/>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanMoveObjects"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.CanMove"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.CanCopyObjects">
            <summary>
            Called to see if the user can copy selected objects in this document.
            </summary>
            <remarks>
            By default this just returns <c>AllowCopy</c>,
            This property is used by methods such as <see cref="M:Northwoods.GoWeb.GoView.CopySelection(Northwoods.GoWeb.GoSelection,System.Drawing.SizeF,System.Boolean)"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.AllowCopy"/>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanCopyObjects"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.CanCopy"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.CanResizeObjects">
            <summary>
            Called to see if the user can resize selected objects in this document.
            </summary>
            <remarks>
            By default this just returns <c>AllowResize</c>,
            This property is used by <see cref="T:Northwoods.GoWeb.GoToolResizing"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.AllowResize"/>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanResizeObjects"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.CanResize"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.CanReshapeObjects">
            <summary>
            Called to see if the user can reshape resizable objects in this document.
            </summary>
            <remarks>
            By default this just returns <c>AllowReshape</c>,
            This property is used by <see cref="T:Northwoods.GoWeb.GoToolResizing"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.AllowReshape"/>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanReshapeObjects"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.CanReshape"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.CanDeleteObjects">
            <summary>
            Called to see if the user can delete selected objects in this document.
            </summary>
            <remarks>
            By default this just returns <c>AllowDelete</c>,
            This property is used by methods such as <see cref="M:Northwoods.GoWeb.GoView.DeleteSelection(Northwoods.GoWeb.GoSelection)"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.AllowDelete"/>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanDeleteObjects"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.CanDelete"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.CanInsertObjects">
            <summary>
            Called to see if the user can insert objects in this document.
            </summary>
            <remarks>
            By default this just returns <c>AllowInsert</c>,
            This property is used by methods such as <see cref="M:Northwoods.GoWeb.GoView.EditPaste"/> and by
            <see cref="T:Northwoods.GoWeb.GoToolDragging"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.AllowInsert"/>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanInsertObjects"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.CanLinkObjects">
            <summary>
            Called to see if the user can link objects in this document.
            </summary>
            <remarks>
            This just returns <c>AllowLink</c>.
            This property is used by <see cref="T:Northwoods.GoWeb.GoToolLinking"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.AllowLink"/>
            <seealso cref="M:Northwoods.GoWeb.GoPort.CanLinkFrom"/>
            <seealso cref="M:Northwoods.GoWeb.GoPort.CanLinkTo"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.CanEditObjects">
            <summary>
            Called to see if the user can edit objects in this document.
            </summary>
            <remarks>
            By default this just returns <c>AllowEdit</c>,
            This property is used by methods such as <see cref="M:Northwoods.GoWeb.GoText.OnSingleClick(Northwoods.GoWeb.GoInputEventArgs,Northwoods.GoWeb.GoView)"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.AllowEdit"/>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanEditObjects"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.CanEdit"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.SetModifiable(System.Boolean)">
            <summary>
            This method sets some properties that determine whether the user can
            modify the document from any view.
            </summary>
            <param name="b"></param>
            <remarks>
            By default this just sets the <see cref="P:Northwoods.GoWeb.GoDocument.AllowMove"/>, <see cref="P:Northwoods.GoWeb.GoDocument.AllowResize"/>, 
            <see cref="P:Northwoods.GoWeb.GoDocument.AllowReshape"/>, <see cref="P:Northwoods.GoWeb.GoDocument.AllowDelete"/>, <see cref="P:Northwoods.GoWeb.GoDocument.AllowInsert"/>, 
            <see cref="P:Northwoods.GoWeb.GoDocument.AllowLink"/>, and <see cref="P:Northwoods.GoWeb.GoDocument.AllowEdit"/> properties.
            You may want to override this in order to also control other properties you
            may have defined that govern the user's ability to modify this document.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.OnChanged(Northwoods.GoWeb.GoChangedEventArgs)">
            <summary>
            Called when any part of this document has changed, to invoke all Changed event handlers.
            </summary>
            <param name="evt"></param>
            <remarks>
            This method is called after this document of a part of this document has been modified.
            To avoid confusion, this method and any method that it calls should not modify the
            document.
            Besides invoking all Changed event handlers, this also calls
            <see cref="M:Northwoods.GoWeb.GoUndoManager.DocumentChanged(System.Object,Northwoods.GoWeb.GoChangedEventArgs)"/> if there is an <see cref="P:Northwoods.GoWeb.GoDocument.UndoManager"/>
            and sets <see cref="P:Northwoods.GoWeb.GoDocument.IsModified"/> to true, unless <see cref="P:Northwoods.GoWeb.GoDocument.SkipsUndoManager"/> is true.
            This method calls <see cref="M:Northwoods.GoWeb.GoDocument.UpdateDocumentBounds(Northwoods.GoWeb.GoObject)"/>
            if an object is inserted into a layer or it its bounds change.
            An insertion or removal of an object from a layer, if <see cref="P:Northwoods.GoWeb.GoDocument.MaintainsPartID"/> is true
            and the object is an <see cref="T:Northwoods.GoWeb.IGoIdentifiablePart"/>,
            will also update the object's <see cref="P:Northwoods.GoWeb.IGoIdentifiablePart.PartID"/> and
            the document's internal table of part ID mappings.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)">
            <summary>
            Any change to a document or to a part of a document may call this method
            to invoke the <see cref="M:Northwoods.GoWeb.GoDocument.OnChanged(Northwoods.GoWeb.GoChangedEventArgs)"/> method, after the change has occurred.
            </summary>
            <param name="hint"></param>
            <param name="subhint"></param>
            <param name="obj"></param>
            <param name="oldI"></param>
            <param name="oldVal"></param>
            <param name="oldRect"></param>
            <param name="newI"></param>
            <param name="newVal"></param>
            <param name="newRect"></param>
            <remarks>
            <para>
            This implementation tries to reuse a <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/> instance
            that it initializes with the information in the parameters before calling
            <see cref="M:Northwoods.GoWeb.GoDocument.OnChanged(Northwoods.GoWeb.GoChangedEventArgs)"/>.
            This method is often called by <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>.
            </para>
            <para>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoDocument"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDocument.RepaintAll"/></term> <term>100</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDocument.BeginUpdateAllViews"/></term> <term>101</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDocument.EndUpdateAllViews"/></term> <term>102</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDocument.UpdateAllViews"/></term> <term>103</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDocument.StartedTransaction"/></term> <term>104</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDocument.FinishedTransaction"/></term> <term>105</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDocument.AbortedTransaction"/></term> <term>106</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDocument.StartingUndo"/></term> <term>107</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDocument.FinishedUndo"/></term> <term>108</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDocument.StartingRedo"/></term> <term>109</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDocument.FinishedRedo"/></term> <term>110</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDocument.ChangedName"/></term> <term>201</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDocument.ChangedSize"/></term> <term>202</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDocument.ChangedTopLeft"/></term> <term>203</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDocument.ChangedFixedSize"/></term> <term>204</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDocument.ChangedPaperColor"/></term> <term>205</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDocument.ChangedDataFormat"/></term> <term>206</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDocument.ChangedAllowSelect"/></term> <term>207</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDocument.ChangedAllowMove"/></term> <term>208</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDocument.ChangedAllowCopy"/></term> <term>209</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDocument.ChangedAllowResize"/></term> <term>210</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDocument.ChangedAllowReshape"/></term> <term>211</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDocument.ChangedAllowDelete"/></term> <term>212</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDocument.ChangedAllowInsert"/></term> <term>213</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDocument.ChangedAllowLink"/></term> <term>214</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDocument.ChangedAllowEdit"/></term> <term>215</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDocument.AllArranged"/></term> <term>220</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDocument.ChangedUserFlags"/></term> <term>221</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDocument.ChangedUserObject"/></term> <term>222</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDocument.ChangedLinksLayer"/></term> <term>223</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDocument.ChangedMaintainsPartID"/></term> <term>224</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDocument.ChangedValidCycle"/></term> <term>225</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDocument.ChangedLastPartID"/></term> <term>226</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDocument.ChangedRoutingTime"/></term> <term>228</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDocument.ChangedInitializing"/></term> <term>241</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoDocument.LastHint"/></term> <term>10000</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoLayerCollection"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLayerCollection.InsertedLayer"/></term> <term>801</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLayerCollection.RemovedLayer"/></term> <term>802</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLayerCollection.MovedLayer"/></term> <term>803</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLayerCollection.ChangedDefault"/></term> <term>804</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoLayer"/></term></listheader>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLayer.ChangedObject"/></term> <term>901 See also the GoObject.Changed method: <see cref="M:Northwoods.GoWeb.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/></term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLayer.InsertedObject"/></term> <term>902</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLayer.RemovedObject"/></term> <term>903</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLayer.ChangedObjectLayer"/></term> <term>904</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLayer.ChangedAllowView"/></term> <term>910</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLayer.ChangedAllowSelect"/></term> <term>911</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLayer.ChangedAllowMove"/></term> <term>912</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLayer.ChangedAllowCopy"/></term> <term>913</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLayer.ChangedAllowResize"/></term> <term>914</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLayer.ChangedAllowReshape"/></term> <term>915</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLayer.ChangedAllowDelete"/></term> <term>916</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLayer.ChangedAllowInsert"/></term> <term>917</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLayer.ChangedAllowLink"/></term> <term>918</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLayer.ChangedAllowEdit"/></term> <term>919</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLayer.ChangedAllowPrint"/></term> <term>920</term> </item>
            <item> <term><see cref="F:Northwoods.GoWeb.GoLayer.ChangedIdentifier"/></term> <term>930</term> </item>
            </list>
            Please note that this list may not be complete--in fact you are encouraged to
            add new subhints for your own properties and other changes.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.RaiseChanging(System.Int32,System.Int32,System.Object)">
            <summary>
            Call this method to invoke the <see cref="M:Northwoods.GoWeb.GoDocument.OnChanged(Northwoods.GoWeb.GoChangedEventArgs)"/> method before
            any change occurs.
            </summary>
            <param name="hint"></param>
            <param name="subhint"></param>
            <param name="obj"></param>
            <remarks>
            You should call this method before making any changes for which the
            call to <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> does not have the complete previous
            (old) state.
            You should also implement <see cref="M:Northwoods.GoWeb.GoDocument.CopyOldValueForUndo(Northwoods.GoWeb.GoChangedEventArgs)"/> and
            <see cref="M:Northwoods.GoWeb.GoDocument.CopyNewValueForRedo(Northwoods.GoWeb.GoChangedEventArgs)"/> to record the state information for
            the particular hint passed to this method.
            When the call to <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> has the complete before-and-after
            state as arguments, calling this method is not necessary.
            You will typically call <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanging(System.Int32,System.Int32,System.Object)"/> followed by a call
            to <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> when making a bunch of changes while
            <see cref="P:Northwoods.GoWeb.GoDocument.SuspendsUpdates"/> is true, if you still want to maintain
            the ability to undo and redo all of those changes.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.InvalidateViews">
            <summary>
            Cause all views to completely repaint sometime in the future.
            </summary>
            <remarks>
            This uses the <see cref="F:Northwoods.GoWeb.GoDocument.RepaintAll"/> hint.
            This is only useful for Windows Forms.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.BeginUpdateViews">
            <summary>
            Cause all views to stop painting.
            </summary>
            <remarks>
            This uses the <see cref="F:Northwoods.GoWeb.GoDocument.BeginUpdateAllViews"/> hint.
            <see cref="M:Northwoods.GoWeb.GoView.OnDocumentChanged(System.Object,Northwoods.GoWeb.GoChangedEventArgs)"/> will detect this hint and
            call <c>GoView.BeginUpdate</c>.
            Note that preventing views from painting does not keep them from
            receiving and handling <see cref="E:Northwoods.GoWeb.GoDocument.Changed"/> events,
            nor does it interfere with any other event handlers or with any
            <see cref="P:Northwoods.GoWeb.GoDocument.UndoManager"/>.
            This is only useful for Windows Forms.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.EndUpdateViews"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.EndUpdateViews">
            <summary>
            Cause all views to continue painting normally.
            </summary>
            <remarks>
            This uses the <see cref="F:Northwoods.GoWeb.GoDocument.EndUpdateAllViews"/> hint.
            <see cref="M:Northwoods.GoWeb.GoView.OnDocumentChanged(System.Object,Northwoods.GoWeb.GoChangedEventArgs)"/> will detect this hint and
            call <c>GoView.EndUpdate</c>.
            This is only useful for Windows Forms.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.BeginUpdateViews"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.UpdateViews">
            <summary>
            Cause all views to repaint their invalidated areas.
            </summary>
            <remarks>
            This uses the <see cref="F:Northwoods.GoWeb.GoDocument.UpdateAllViews"/> hint.
            <see cref="M:Northwoods.GoWeb.GoView.OnDocumentChanged(System.Object,Northwoods.GoWeb.GoChangedEventArgs)"/> will detect this hint and
            call <c>Control.Update</c>.
            This is only useful for Windows Forms.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.CreateCopyDictionary">
            <summary>
            Allocate a <see cref="T:Northwoods.GoWeb.GoCopyDictionary"/> for use in a call to
            <see cref="M:Northwoods.GoWeb.GoDocument.CopyFromCollection(Northwoods.GoWeb.IGoCollection,System.Boolean,System.Boolean,System.Drawing.SizeF,Northwoods.GoWeb.GoCopyDictionary)"/>
            </summary>
            <returns>this must not return null</returns>
            <remarks>
            By default this also sets the <see cref="P:Northwoods.GoWeb.GoCopyDictionary.DestinationDocument"/> to
            this document:
            <code>
              GoCopyDictionary env = new GoCopyDictionary();
              env.DestinationDocument = this;
              return env;
            </code>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.AddCopy(Northwoods.GoWeb.GoObject,System.Drawing.PointF)">
            <summary>
            Add a copy of an object into this document at the given point.
            </summary>
            <param name="obj"></param>
            <param name="loc"></param>
            <returns>The newly inserted object.</returns>
            <remarks>
            <para>
            This creates a singleton collection and calls
            <see cref="M:Northwoods.GoWeb.GoDocument.CopyFromCollection(Northwoods.GoWeb.IGoCollection,System.Boolean,System.Boolean,System.Drawing.SizeF,Northwoods.GoWeb.GoCopyDictionary)"/>
            with the appropriate offset.
            This method is different from <see cref="M:Northwoods.GoWeb.GoDocument.Add(Northwoods.GoWeb.GoObject)"/> in that the latter method
            causes the document to own the object; i.e., the object's <see cref="P:Northwoods.GoWeb.GoObject.Layer"/>
            property is modified to be this document's default layer.
            But this method does not modify the <paramref name="obj"/> and may add the
            copy to a different layer, if <paramref name="obj"/> belongs to a layer and
            <c>CopyFromCollection</c> can find a matching layer in this document.
            </para>
            <para>
            If you want to make a copy of a <see cref="T:Northwoods.GoWeb.GoObject"/> but do not
            want to add it to a document, you can call <see cref="T:Northwoods.GoWeb.GoCopyDictionary"/>.<see cref="M:Northwoods.GoWeb.GoCopyDictionary.CopyComplete(Northwoods.GoWeb.GoObject)"/>
            or <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="M:Northwoods.GoWeb.GoObject.Copy"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.CopyFromCollection(Northwoods.GoWeb.IGoCollection)">
            <summary>
            Make copies of a collection of objects in this document.
            </summary>
            <param name="coll"></param>
            <returns>A <see cref="T:Northwoods.GoWeb.GoCopyDictionary"/> describing the results of the copy.</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.CopyFromCollection(Northwoods.GoWeb.IGoCollection,System.Boolean,System.Boolean,System.Drawing.SizeF,Northwoods.GoWeb.GoCopyDictionary)">
            <summary>
            Add a copy of the objects in the given collection into this document, with locations
            offset from their existing locations.
            </summary>
            <param name="coll">the <see cref="T:Northwoods.GoWeb.IGoCollection"/> of <see cref="T:Northwoods.GoWeb.GoObject"/>s</param>
            <param name="copyableOnly">whether to heed the <see cref="M:Northwoods.GoWeb.GoObject.CanCopy"/>
            property for each object that might be copied, and whether to heed the
            <see cref="M:Northwoods.GoWeb.GoLayer.CanInsertObjects"/> predicate for the corresponding destination layer</param>
            <param name="dragging">whether to copy the <see cref="P:Northwoods.GoWeb.GoObject.DraggingObject"/> instead
            of the object itself</param>
            <param name="offset">the <c>SizeF</c> offset in document coordinates</param>
            <param name="env">
            the copy dictionary which can control and record the results of the copy;
            if null it calls <see cref="M:Northwoods.GoWeb.GoDocument.CreateCopyDictionary"/> to get one
            </param>
            <returns>the <see cref="T:Northwoods.GoWeb.GoCopyDictionary"/> holding the results of the copy</returns>
            <remarks>
            This is a two-pass process.
            In the first pass, this method copies everything, by calling
            <see cref="M:Northwoods.GoWeb.GoCopyDictionary.Copy(Northwoods.GoWeb.GoObject)"/> on each object and then adding the
            object to the appropriate layer in this document.
            The layer is chosen to be one that matches the layer of the original object,
            by calling <see cref="M:Northwoods.GoWeb.GoLayerCollection.Find(System.Object)"/>.  If no such layer is found,
            it adds the new object to the default layer.
            The second pass checks for any objects that were delayed during the copy.
            Any such objects have their <see cref="M:Northwoods.GoWeb.GoObject.CopyObjectDelayed(Northwoods.GoWeb.GoCopyDictionary,Northwoods.GoWeb.GoObject)"/>
            method called to fix up whatever is needed.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.MergeLayersFrom(Northwoods.GoWeb.GoDocument)">
            <summary>
            Make sure this document has all of the identified layers of another document.
            </summary>
            <param name="other"></param>
            <remarks>
            Only non-null <see cref="P:Northwoods.GoWeb.GoLayer.Identifier"/>s of the layers of the
            <paramref name="other"/> document are checked for presence in this document.
            No <see cref="T:Northwoods.GoWeb.GoObject"/>s are inserted or removed from any layer.
            No pre-existing layers are removed or reordered.
            The <see cref="P:Northwoods.GoWeb.GoDocument.DefaultLayer"/> property is changed to match that of
            the other document too, if its <see cref="P:Northwoods.GoWeb.GoDocument.DefaultLayer"/> has an identifier.
            The <see cref="P:Northwoods.GoWeb.GoDocument.LinksLayer"/> is also updated to match that of the other
            document, if that layer has an identifier.
            The principal use of this method is to initialize a clipboard document--
            <see cref="M:Northwoods.GoWeb.GoView.CopyToClipboard(Northwoods.GoWeb.IGoCollection)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.CanUndo">
            <summary>
            This predicate is true if this document has an UndoManager whose CanUndo predicate is true.
            </summary>
            <returns><see cref="M:Northwoods.GoWeb.GoUndoManager.CanUndo"/></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.Undo">
            <summary>
            Call the UndoManager's <see cref="M:Northwoods.GoWeb.GoUndoManager.Undo"/> method if <see cref="M:Northwoods.GoWeb.GoDocument.CanUndo"/> is true.
            </summary>
            <remarks>
            <see cref="T:Northwoods.GoWeb.GoUndoManager"/>.<see cref="M:Northwoods.GoWeb.GoUndoManager.Undo"/> will raise a
            Changed event with a hint of <see cref="F:Northwoods.GoWeb.GoDocument.StartingUndo"/> before actually
            performing the undo, and will raise a
            Changed event with a hint of <see cref="F:Northwoods.GoWeb.GoDocument.FinishedUndo"/> afterwards.
            The <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/>.<see cref="P:Northwoods.GoWeb.GoChangedEventArgs.Object"/>
            is the <see cref="T:Northwoods.GoWeb.GoUndoManagerCompoundEdit"/> that was the value of
            <see cref="T:Northwoods.GoWeb.GoUndoManager"/>.<see cref="P:Northwoods.GoWeb.GoUndoManager.EditToUndo"/> before calling
            <see cref="M:Northwoods.GoWeb.GoUndoManager.Undo"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.CanRedo">
            <summary>
            This predicate is true if this document has an UndoManager whose CanRedo predicate is true.
            </summary>
            <returns><see cref="M:Northwoods.GoWeb.GoUndoManager.CanRedo"/></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.Redo">
            <summary>
            Call the UndoManager's <see cref="M:Northwoods.GoWeb.GoUndoManager.Redo"/> method if <see cref="M:Northwoods.GoWeb.GoDocument.CanRedo"/> is true.
            </summary>
            <remarks>
            <see cref="T:Northwoods.GoWeb.GoUndoManager"/>.<see cref="M:Northwoods.GoWeb.GoUndoManager.Redo"/> will raise a
            Changed event with a hint of <see cref="F:Northwoods.GoWeb.GoDocument.StartingRedo"/> before actually
            performing the redo, and will raise a
            Changed event with a hint of <see cref="F:Northwoods.GoWeb.GoDocument.FinishedRedo"/> afterwards.
            The <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/>.<see cref="P:Northwoods.GoWeb.GoChangedEventArgs.Object"/>
            is the <see cref="T:Northwoods.GoWeb.GoUndoManagerCompoundEdit"/> that was the value of
            <see cref="T:Northwoods.GoWeb.GoUndoManager"/>.<see cref="P:Northwoods.GoWeb.GoUndoManager.EditToRedo"/> before calling
            <see cref="M:Northwoods.GoWeb.GoUndoManager.Redo"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.StartTransaction">
            <summary>
            Call the UndoManager's <see cref="M:Northwoods.GoWeb.GoUndoManager.StartTransaction"/> method.
            </summary>
            <returns>the value of <see cref="M:Northwoods.GoWeb.GoUndoManager.StartTransaction"/></returns>
            <remarks>
            <see cref="T:Northwoods.GoWeb.GoUndoManager"/>.<see cref="M:Northwoods.GoWeb.GoUndoManager.StartTransaction"/>,
            will raise a Changed event with a hint of <see cref="F:Northwoods.GoWeb.GoDocument.StartedTransaction"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.FinishTransaction(System.String)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.FinishTransaction(System.String)">
            <summary>
            Call the UndoManager's <see cref="M:Northwoods.GoWeb.GoUndoManager.FinishTransaction(System.String)"/> method.
            </summary>
            <param name="tname">a String describing the transaction</param>
            <returns><see cref="M:Northwoods.GoWeb.GoUndoManager.FinishTransaction(System.String)"/></returns>
            <remarks>
            <see cref="T:Northwoods.GoWeb.GoUndoManager"/>.<see cref="M:Northwoods.GoWeb.GoUndoManager.FinishTransaction(System.String)"/>,
            will raise a Changed event with a hint of <see cref="F:Northwoods.GoWeb.GoDocument.FinishedTransaction"/>,
            and with a <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/>.<see cref="P:Northwoods.GoWeb.GoChangedEventArgs.Object"/>
            that is the <see cref="T:Northwoods.GoWeb.GoUndoManagerCompoundEdit"/>
            that was the value of <see cref="T:Northwoods.GoWeb.GoUndoManager"/>.<see cref="P:Northwoods.GoWeb.GoUndoManager.CurrentEdit"/> before calling
            <see cref="M:Northwoods.GoWeb.GoUndoManager.FinishTransaction(System.String)"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.StartTransaction"/>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.AbortTransaction"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.AbortTransaction">
            <summary>
            Call the UndoManager's <see cref="M:Northwoods.GoWeb.GoUndoManager.AbortTransaction"/> method.
            </summary>
            <returns><see cref="M:Northwoods.GoWeb.GoUndoManager.AbortTransaction"/></returns>
            <remarks>
            After calling <see cref="M:Northwoods.GoWeb.GoUndoManager.AbortTransaction"/>, if that call returned true,
            this raises a Changed event with a hint of <see cref="F:Northwoods.GoWeb.GoDocument.AbortedTransaction"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.FinishTransaction(System.String)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.CopyOldValueForUndo(Northwoods.GoWeb.GoChangedEventArgs)">
            <summary>
            This is called during the construction of a <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/> in
            order to record the older/previous value for a document change.
            </summary>
            <param name="e"></param>
            <remarks>
            This method needs to be overridden for a particular kind of changed event only
            when the previous value state is not held in arguments to the call to
            <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>, or when those arguments are actually references to
            objects containing the real previous state that might be overwritten or lost by
            subsequent changes.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.CopyNewValueForRedo(Northwoods.GoWeb.GoChangedEventArgs)">
            <summary>
            This is called during the construction of a <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/> in
            order to record the newer/next value for a document change.
            </summary>
            <param name="e"></param>
            <remarks>
            This method needs to be overridden for a particular kind of changed event only
            when the next value state is not held in arguments to the call to
            <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>, or when those arguments are actually references to
            objects containing the real newer state that might be overwritten or lost by
            subsequent changes.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)">
             <summary>
             This method is called by <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/> in order to perform
             the Undo or Redo or a particular document change.
             </summary>
             <param name="e">this value's <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.Hint"/> property
             identifies the kind of document change</param>
             <param name="undo">true if this method should restore the older/previous state
             from before the change event; false if this method should restore the newer/next
             state from after the change event</param>
             <remarks>
             <para>
             This handles changes to the document, such as <see cref="F:Northwoods.GoWeb.GoDocument.ChangedAllowMove"/>;
             to the collection of document layers, such as <see cref="F:Northwoods.GoWeb.GoLayerCollection.InsertedLayer"/>;
             and to any document layer, such as <see cref="F:Northwoods.GoWeb.GoLayer.InsertedObject"/>.
             For a <see cref="F:Northwoods.GoWeb.GoLayer.ChangedObject"/> event hint, this just calls
             <see cref="M:Northwoods.GoWeb.GoObject.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)"/> on the <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.GoObject"/>,
             to handle all the changes for objects such as <see cref="F:Northwoods.GoWeb.GoObject.ChangedMovable"/>.
             This method will raise an <c>ArgumentException</c> if the argument
             <paramref name="e"/>'s <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.Hint"/> value is not recognized.
             </para>
             <para>
             If you add a property to a class inheriting from <see cref="T:Northwoods.GoWeb.GoDocument"/>,
             you may want to override this method in order to handle undo/redo.
             Be sure to call the base method for all <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.Hint"/>
             values that your override does not handle.
             </para>
             <para>
             Although properties should be designed so that setting one property
             does not modify other properties, this is sometimes not practical.
             Nevertheless it is important to avoid having side-effects when
             the value is changing due to an undo or redo.
             One way of doing this is to copy the needed code, but not the
             auxiliary side-effecting code, from the property setter to the
             <see cref="M:Northwoods.GoWeb.GoDocument.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)"/> override.  Or similarly, you could define
             a method called from both the setter and the ChangeValue method,
             parameterized by whether the caller is the setter or not.
             </para>
             <para>
             But a more convenient way to achieve this is to check the
             <see cref="P:Northwoods.GoWeb.GoDocument.Initializing"/> property that is set to true when the
             <see cref="M:Northwoods.GoWeb.GoDocument.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)"/> method is being called on this document.
             You should check this property before making "unrelated" side-effects.
             </para>
             <code>
               public bool MaintainsPartID {
                 get { return myMaintainsPartID; }
                 set {
                   // only set the value and do other things if the value has changed
                   bool old = myMaintainsPartID;
                   if (old != value) {
                     myMaintainsPartID = value;
                     // notify about the change
                     RaiseChanged(ChangedMaintainsPartID, 0, null, 0, old, NullRect, 0, value, NullRect);
                     // when set to true, and when not undoing/redoing, make sure all parts have unique IDs
                     if (!this.Initializing) {
                       if (value)
                         EnsureUniquePartID();
                       else
                         ClearPartIDTable();
                     }
                   }
                 }
               }
            
               public override void ChangeValue(GoChangedEventArgs e, bool undo) {
                 switch (e.SubHint) {
                   case ChangedMaintainsPartID:
                     this.MaintainsPartID = (bool)e.GetValue(undo);
                     return;
                   default:
                     base.ChangeValue(e, undo);
                     return;
                 }
               }
             </code>
             </remarks>
             <seealso cref="M:Northwoods.GoWeb.GoObject.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.MakesDirectedCycleFast(Northwoods.GoWeb.IGoNode,Northwoods.GoWeb.IGoNode)">
            <summary>
            This method returns true if adding a link from <paramref name="a"/> to <paramref name="b"/>
            would result in a cycle of directed links going through the node <paramref name="a"/>.
            </summary>
            <param name="a">the node to start from</param>
            <param name="b">the node that the proposed link would connect to</param>
            <returns></returns>
            <remarks>
            This method ignores any reflexive links--i.e. links whose ports are both part of the same node.
            This assumes that there are no directed cycles already present in the graph.
            If there are any such cycles, this recursive method may cause stack overflows or
            infinite recursion.
            However, this method is faster than <see cref="M:Northwoods.GoWeb.GoDocument.MakesDirectedCycle(Northwoods.GoWeb.IGoNode,Northwoods.GoWeb.IGoNode)"/>.
            Set <see cref="P:Northwoods.GoWeb.GoDocument.ValidCycle"/> to <see cref="F:Northwoods.GoWeb.GoDocumentValidCycle.NotDirectedFast"/>
            when you can be sure there are never any cycles in the graph; otherwise set it
            to <see cref="F:Northwoods.GoWeb.GoDocumentValidCycle.NotDirected"/>, which is slower but can handle
            existing cycles in the graph.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.ValidCycle"/>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.MakesDirectedCycle(Northwoods.GoWeb.IGoNode,Northwoods.GoWeb.IGoNode)"/>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.MakesUndirectedCycle(Northwoods.GoWeb.IGoNode,Northwoods.GoWeb.IGoNode)"/>
            <seealso cref="M:Northwoods.GoWeb.GoPort.IsValidLink(Northwoods.GoWeb.IGoPort)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.MakesDirectedCycle(Northwoods.GoWeb.IGoNode,Northwoods.GoWeb.IGoNode)">
            <summary>
            This method returns true if adding a link from <paramref name="a"/> to <paramref name="b"/>
            would result in a cycle of directed links going through the node <paramref name="a"/>.
            </summary>
            <param name="a">the node to start from</param>
            <param name="b">the node that the proposed link would connect to</param>
            <returns></returns>
            <remarks>
            This method ignores any reflexive links--i.e. links whose ports are both part of the same node.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.ValidCycle"/>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.MakesDirectedCycleFast(Northwoods.GoWeb.IGoNode,Northwoods.GoWeb.IGoNode)"/>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.MakesUndirectedCycle(Northwoods.GoWeb.IGoNode,Northwoods.GoWeb.IGoNode)"/>
            <seealso cref="M:Northwoods.GoWeb.GoPort.IsValidLink(Northwoods.GoWeb.IGoPort)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.MakesUndirectedCycle(Northwoods.GoWeb.IGoNode,Northwoods.GoWeb.IGoNode)">
            <summary>
            This method returns true if adding a link from <paramref name="a"/> to <paramref name="b"/>
            would result in a cycle or loop of links, regardless of link direction,
            going through the node <paramref name="a"/>.
            </summary>
            <param name="a">the node to start from</param>
            <param name="b">the node that the proposed link would connect to</param>
            <returns></returns>
            <remarks>
            This method ignores any reflexive links--i.e. links whose ports are both part of the same node.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.ValidCycle"/>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.MakesDirectedCycle(Northwoods.GoWeb.IGoNode,Northwoods.GoWeb.IGoNode)"/>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.MakesDirectedCycleFast(Northwoods.GoWeb.IGoNode,Northwoods.GoWeb.IGoNode)"/>
            <seealso cref="M:Northwoods.GoWeb.GoPort.IsValidLink(Northwoods.GoWeb.IGoPort)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.UpdateRoute(Northwoods.GoWeb.IGoRoutable)">
            <summary>
            If <see cref="P:Northwoods.GoWeb.GoDocument.SuspendsRouting"/> is true add the given <see cref="T:Northwoods.GoWeb.IGoRoutable"/>
            <see cref="T:Northwoods.GoWeb.GoObject"/> to the <see cref="P:Northwoods.GoWeb.GoDocument.DelayedRoutings"/> collection;
            otherwise just call <see cref="M:Northwoods.GoWeb.IGoRoutable.CalculateRoute"/> immediately.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.DoDelayedRouting(Northwoods.GoWeb.IGoCollection)">
            <summary>
            Call <see cref="T:Northwoods.GoWeb.IGoRoutable"/>.<see cref="M:Northwoods.GoWeb.IGoRoutable.CalculateRoute"/>
            on each of the objects in the <see cref="P:Northwoods.GoWeb.GoDocument.DelayedRoutings"/> collection,
            and clear that collection.
            </summary>
            <param name="moved">an <see cref="T:Northwoods.GoWeb.IGoCollection"/>, or null</param>
            <remarks>
            This method is called by <see cref="M:Northwoods.GoWeb.GoView.MoveSelection(Northwoods.GoWeb.GoSelection,System.Drawing.SizeF,System.Boolean)"/>, <see cref="M:Northwoods.GoWeb.GoView.CopySelection(Northwoods.GoWeb.GoSelection,System.Drawing.SizeF,System.Boolean)"/>,
            <see cref="M:Northwoods.GoWeb.GoView.EditPaste"/> and (in full Windows Forms) <c>GoView.DoExternalDrop</c>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.IsAvoidable(Northwoods.GoWeb.GoObject)">
            <summary>
            This predicate determines whether the given object is considered when
            trying to route links whose <see cref="P:Northwoods.GoWeb.GoLink.AvoidsNodes"/> property
            is true.
            </summary>
            <param name="obj"></param>
            <returns>
            By default this returns true when the <paramref name="obj"/> is an <see cref="T:Northwoods.GoWeb.IGoNode"/>.
            </returns>
            <remarks>
            This is called on all top-level objects in the document.
            If the top-level object is a <see cref="T:Northwoods.GoWeb.GoSubGraphBase"/>,
            it is called on its non-subgraph children.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.GetAvoidableRectangle(Northwoods.GoWeb.GoObject)">
            <summary>
            Return the effective bounds of an object that should be avoided when
            routing links whose <see cref="P:Northwoods.GoWeb.GoLink.AvoidsNodes"/> property is true.
            </summary>
            <param name="obj"></param>
            <returns>
            By default this returns the bounds of the <paramref name="obj"/>,
            expanded by <see cref="M:Northwoods.GoWeb.GoObject.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.GoWeb.GoView)"/>.
            </returns>
            <remarks>
            This is called for top-level non-<see cref="T:Northwoods.GoWeb.GoSubGraphBase"/> objects and
            <see cref="T:Northwoods.GoWeb.GoSubGraphBase"/> children for which <see cref="M:Northwoods.GoWeb.GoDocument.IsAvoidable(Northwoods.GoWeb.GoObject)"/> returned true.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.IsUnoccupied(System.Drawing.RectangleF,Northwoods.GoWeb.GoObject)">
            <summary>
            Returns true if there are any "avoidable" objects within or
            intersecting the given rectangular region.
            </summary>
            <param name="r">a RectangleF in document coordinates</param>
            <param name="skip">
            an object that should be ignored when checking for collisions,
            usually the object in the document that you are considering moving;
            may be <c>null</c> to consider all avoidable objects
            </param>
            <returns></returns>
            <remarks>
            This only considers document objects for which <see cref="M:Northwoods.GoWeb.GoDocument.IsAvoidable(Northwoods.GoWeb.GoObject)"/>
            returns true, with the "occupied" space determined by <see cref="M:Northwoods.GoWeb.GoDocument.GetAvoidableRectangle(Northwoods.GoWeb.GoObject)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.FindPart(System.Int32)">
            <summary>
            Returns an <see cref="T:Northwoods.GoWeb.IGoIdentifiablePart"/> in this document with the given ID.
            </summary>
            <param name="id"></param>
            <returns>null if no such part is known</returns>
            <remarks>
            If <see cref="P:Northwoods.GoWeb.GoDocument.MaintainsPartID"/> is false, the value may not be correct.
            If <see cref="P:Northwoods.GoWeb.GoDocument.MaintainsPartID"/> is true, you must not set the <see cref="T:Northwoods.GoWeb.IGoIdentifiablePart"/>
            <see cref="P:Northwoods.GoWeb.IGoIdentifiablePart.PartID"/> of any object while it is part of a document,
            or else this method may produce incorrect results.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoDocument.EnsureUniquePartID">
            <summary>
            Make sure every <see cref="T:Northwoods.GoWeb.IGoIdentifiablePart"/> in this
            document has a unique <see cref="P:Northwoods.GoWeb.IGoIdentifiablePart.PartID"/>.
            </summary>
            <remarks>
            Although this is called automatically when setting <see cref="P:Northwoods.GoWeb.GoDocument.MaintainsPartID"/>
            to true, you may need to call this method explicitly after adding some objects
            to this document while <see cref="P:Northwoods.GoWeb.GoDocument.SuspendsUpdates"/> is true.
            You may also want to call this method explicitly after loading a document
            from persistent storage if there is a possibility of any inconsistencies.
            This method will also make sure that the value of <see cref="P:Northwoods.GoWeb.GoDocument.LastPartID"/>
            is at least as large as any <see cref="P:Northwoods.GoWeb.IGoIdentifiablePart.PartID"/> of
            any <see cref="T:Northwoods.GoWeb.IGoIdentifiablePart"/> in this document.
            If you set any <see cref="P:Northwoods.GoWeb.IGoIdentifiablePart.PartID"/> to a non-negative integer
            before adding the object to the document, you are responsible for making
            sure that the value is in fact unique within the document.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoDocument.NullRect">
            <summary>
            This is an empty <c>RectangleF</c>, which is convenient when calling <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.IsEmpty">
            <summary>
            This predicate is true when there are no objects in this collection.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.IGoCollection.IsEmpty"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.Count">
            <summary>
            Gets the total number of objects in all document layers.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.IsSynchronized">
            <summary>
            Gets whether this collection of objects is thread-safe.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.SyncRoot">
            <summary>
            Gets an object to be used for synchronizing access to this collection.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.Backwards">
            <summary>
            Gets an enumerable whose enumerator will iterate over the GoObjects in reverse order.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.IGoCollection.Backwards"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.Layers">
            <summary>
            Gets the collection of layers belonging to this document.
            </summary>
            <remarks>
            This value is the list of this document's layers.
            Use <see cref="T:Northwoods.GoWeb.GoLayerCollection"/> methods for creating new
            document layers, removing them, or operating on particular layers,
            such as the <see cref="P:Northwoods.GoWeb.GoLayerCollection.Default"/> one.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.DefaultLayer"/>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.LinksLayer"/>
            <seealso cref="T:Northwoods.GoWeb.GoLayer"/>
            <seealso cref="T:Northwoods.GoWeb.GoView"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.DefaultLayer">
            <summary>
            Gets or sets the layer that is considered the default layer for document
            operations that do not specify a layer.
            </summary>
            <value>
            The <see cref="T:Northwoods.GoWeb.GoLayer"/> value must not be null and must already
            belong to this document.
            </value>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.LinksLayer"/>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.Layers"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.LinksLayer">
            <summary>
            Gets or sets the layer that is normally used for holding links.
            </summary>
            <value>
            The <see cref="T:Northwoods.GoWeb.GoLayer"/> value must not be null and must already
            belong to this document.  By default the links layer is the same as
            the default layer, because the document only has a single layer.
            </value>
            <remarks>
            It is common to want to display all links behind all nodes, or all
            links in front of all nodes.  Either policy can be implemented easily
            by creating a new document layer and assigning it to this property.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.DefaultLayer"/>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.Layers"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.Name">
            <summary>
            Gets or sets a name for this document.
            </summary>
            <value>
            The name may be any string.  The default value is an empty string.
            A new value must not be null.
            </value>
            <remarks>
            Normally this property is used to hold a user-visible name for a document.
            Additional properties are then used to hold information about how to
            load and store the information in the document.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.Size">
            <summary>
            Gets or sets the size of this document.
            </summary>
            <value>
            The <c>SizeF</c> value is in document coordinates and should have non-negative
            width and height.
            </value>
            <remarks>
            The default behavior is that this property automatically expands to include all
            of the objects in the document.  This policy is implemented in
            <see cref="M:Northwoods.GoWeb.GoDocument.UpdateDocumentBounds(Northwoods.GoWeb.GoObject)"/>.  Set <see cref="P:Northwoods.GoWeb.GoDocument.FixedSize"/> to avoid this
            default policy, or override <see cref="M:Northwoods.GoWeb.GoDocument.UpdateDocumentBounds(Northwoods.GoWeb.GoObject)"/> to implement your
            own policy.
            This property automatically affects what a view can show and where the user can
            scroll to.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.Bounds"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.TopLeft">
            <summary>
            Gets or sets the top-left corner position of this document.
            </summary>
            <value>
            The <c>PointF</c> value is in document coordinates.
            Initially this value is (0, 0).
            </value>
            <remarks>
            The default behavior is that this property automatically moves toward
            negative coordinates to include all of the objects in the document.
            This policy is implemented in <see cref="M:Northwoods.GoWeb.GoDocument.UpdateDocumentBounds(Northwoods.GoWeb.GoObject)"/>.
            Set <see cref="P:Northwoods.GoWeb.GoDocument.FixedSize"/> to avoid this default policy,
            or override <see cref="M:Northwoods.GoWeb.GoDocument.UpdateDocumentBounds(Northwoods.GoWeb.GoObject)"/> to implement your own policy.
            This property automatically affects what a view can show and where the user can
            scroll to.
            Note that the <see cref="P:Northwoods.GoWeb.GoView.ShowsNegativeCoordinates"/> property has
            no effect on any document.  That property constrains what the user can see,
            even if the document includes objects at negative positions.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.Bounds"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.Bounds">
            <summary>
            This property is just a combination of <see cref="P:Northwoods.GoWeb.GoDocument.TopLeft"/> and <see cref="P:Northwoods.GoWeb.GoDocument.Size"/>
            as a <c>RectangleF</c>.
            </summary>
            <remarks>
            To limit the scrolling extent of views where objects in the document have been
            deleted or gathered together, you may want to do:
            <code>doc.Bounds = doc.ComputeBounds()</code>
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.FixedSize">
            <summary>
            Gets or sets whether <see cref="M:Northwoods.GoWeb.GoDocument.UpdateDocumentBounds(Northwoods.GoWeb.GoObject)"/> should update
            the <see cref="P:Northwoods.GoWeb.GoDocument.Size"/> and <see cref="P:Northwoods.GoWeb.GoDocument.TopLeft"/> properties as objects
            are added or moved.
            </summary>
            <value>
            The default value is false.
            </value>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.Size"/>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.TopLeft"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.WorldScale">
            <summary>
            Gets or sets a horizontal and vertical scaling factor for converting document
            coordinates in other units to and from pixel units.
            </summary>
            <value>
            The default value is 1.0f--document units have the same size as pixels
            (when the view's <see cref="P:Northwoods.GoWeb.GoView.DocScale"/> is 1.0f).
            </value>
            <remarks>
            For example, for an object with a <see cref="P:Northwoods.GoWeb.GoObject.Width"/> equal to 1
            to be (nominally) one centimeter wide, set the world scale as follows:
            <code>
            Bitmap bm = new Bitmap(10, 10);
            Graphics g = Graphics.FromImage(bm);
            g.PageUnit = GraphicsUnit.Pixel;
            myDoc.WorldScale = new SizeF(g.DpiX / 2.54f, g.DpiY / 2.54f);
            g.Dispose();
            bm.Dispose();
            </code>
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.PaperColor">
            <summary>
            Gets or sets the color for this document's background.
            </summary>
            <value>
            The default value is <c>Color.Empty</c>.
            </value>
            <remarks>
            Documents can have their own background, independent of any background
            color provided by a view.  The normal behavior is that a view will
            use the document's <c>PaperColor</c> property when that color is
            not <c>Color.Empty</c>, but will otherwise use the view's <c>BackColor</c>
            property.  However, there may be times when both or neither color is
            used in a rendering of the document.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.PaintPaperColor(System.Drawing.Graphics,System.Drawing.RectangleF)"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.AllowSelect">
            <summary>
            Gets or sets whether the user can select objects in this document.
            </summary>
            <remarks>
            A false value prevents the user from selecting objects in this document
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            selectable by the user because the object or its layer disallows it,
            or because the view disallows it, or because the object is not visible.
            Your code can always select objects programmatically by calling
            <c>aView.Selection.Select(obj)</c> or <c>aView.Selection.Add(obj)</c>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.CanSelectObjects"/>
            <seealso cref="P:Northwoods.GoWeb.GoLayer.AllowSelect"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Selectable"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.AllowMove">
            <summary>
            Gets or sets whether the user can move selected objects in this document.
            </summary>
            <remarks>
            A false value prevents the user from moving objects in this document
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            movable by the user because the object or its layer disallows it,
            or because the view disallows it.
            Your code can always move objects programmatically by calling
            <c>obj.Position = newPos</c>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.CanMoveObjects"/>
            <seealso cref="P:Northwoods.GoWeb.GoLayer.AllowMove"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Movable"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.AllowCopy">
            <summary>
            Gets or sets whether the user can copy selected objects in this document.
            </summary>
            <remarks>
            A false value prevents the user from copying objects in this document
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            copyable by the user because the object or its layer disallows it,
            or because the view disallows it.
            Your code can always copy objects programmatically by calling
            <see cref="M:Northwoods.GoWeb.GoDocument.CopyFromCollection(Northwoods.GoWeb.IGoCollection)"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.CanCopyObjects"/>
            <seealso cref="P:Northwoods.GoWeb.GoLayer.AllowCopy"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Copyable"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.AllowResize">
            <summary>
            Gets or sets whether the user can resize selected objects in this document.
            </summary>
            <remarks>
            A false value prevents the user from resizing objects in this document
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            resizable by the user because the object or its layer disallows it,
            or because the view disallows it.
            Your code can always resize objects programmatically by calling
            <c>obj.Size = newSize</c> or <c>obj.Bounds = newRect</c>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.CanResizeObjects"/>
            <seealso cref="P:Northwoods.GoWeb.GoLayer.AllowResize"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Resizable"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.AllowReshape">
            <summary>
            Gets or sets whether the user can reshape resizable objects in this document.
            </summary>
            <remarks>
            A false value prevents the user from reshaping objects in this document
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            reshapable by the user because the object or its layer disallows it,
            or because the view disallows it.
            Your code can always reshape objects programmatically by calling
            <c>obj.Size = newSize</c> or <c>obj.Bounds = newRect</c>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.CanReshapeObjects"/>
            <seealso cref="P:Northwoods.GoWeb.GoLayer.AllowReshape"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Reshapable"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.AllowDelete">
            <summary>
            Gets or sets whether the user can delete selected objects in this document.
            </summary>
            <remarks>
            A false value prevents the user from deleting objects in this document
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            deletable by the user because the object or its layer disallows it,
            or because the view disallows it.
            Your code can always delete objects programmatically by calling
            <c>obj.Remove()</c>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.CanDeleteObjects"/>
            <seealso cref="P:Northwoods.GoWeb.GoLayer.AllowDelete"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Deletable"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.AllowInsert">
            <summary>
            Gets or sets whether the user can insert objects in this document.
            </summary>
            <remarks>
            A false value prevents the user from inserting objects in this document
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            insertable by the user because the layer or view disallows it.
            Your code can always insert objects programmatically by calling
            <c>Add(obj)</c>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.CanInsertObjects"/>
            <seealso cref="P:Northwoods.GoWeb.GoLayer.AllowInsert"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.AllowLink">
            <summary>
            Gets or sets whether the user can link objects in this document.
            </summary>
            <remarks>
            A false value prevents the user from linking objects in this document
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            linkable by the user because the ports disallow it,
            or because the view disallows it.
            Your code can always link objects programmatically by calling
            <c>LinksLayers.Add(newLink)</c>, where <c>newLink</c> is
            a newly created instance of a class like <see cref="T:Northwoods.GoWeb.GoLink"/> or
            <see cref="T:Northwoods.GoWeb.GoLabeledLink"/> whose <see cref="P:Northwoods.GoWeb.IGoLink.FromPort"/> and
            <see cref="P:Northwoods.GoWeb.IGoLink.ToPort"/> properties have been set to ports in
            the same document.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.CanLinkObjects"/>
            <seealso cref="P:Northwoods.GoWeb.GoLayer.AllowLink"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.AllowLink"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.AllowEdit">
            <summary>
            Gets or sets whether the user can edit objects in this document.
            </summary>
            <remarks>
            A false value prevents the user from editing objects in this document
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            editable by the user because the object or its layer disallows it,
            or because the view disallows it.
            Your code can always edit objects programmatically by calling
            <c>obj.DoBeginEdit(aView)</c>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.CanEditObjects"/>
            <seealso cref="P:Northwoods.GoWeb.GoLayer.AllowEdit"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Editable"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.IsModified">
            <summary>
            Gets or sets whether this document is considered changed from an earlier state.
            </summary>
            <value>
            true if this document has been marked as having been modified,
            if the <see cref="P:Northwoods.GoWeb.GoDocument.UndoManager"/> has recorded any changes, or
            if an undo has been performed without a corresponding redo.
            </value>
            <remarks>
            <para>
            This property is set to true in <see cref="M:Northwoods.GoWeb.GoDocument.OnChanged(Northwoods.GoWeb.GoChangedEventArgs)"/>.
            Setting this property to a new value calls <see cref="M:Northwoods.GoWeb.GoDocument.InvalidateViews"/>,
            but does not raise a Changed event.
            </para>
            <para>
            Although you can set this property at any time, the value of
            <c>GoDocument.IsModified</c> will continue to be true as long as
            there have been changes made to the document and you are using an
            <see cref="P:Northwoods.GoWeb.GoDocument.UndoManager"/>.
            Any modifications to a GoDocument or one of its parts will result
            in setting <c>GoDocument.IsModified</c> to true and in adding a
            <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/> to the
            <see cref="T:Northwoods.GoWeb.GoUndoManager"/>.<see cref="P:Northwoods.GoWeb.GoUndoManager.CurrentEdit"/> list,
            which holds all of the changes for undo/redo.
            </para>
            <para>
            When using an UndoManager, you should be making all changes within a transaction.
            After finishing or aborting a transaction, you can set <c>GoDocument.IsModified</c>
            to false, and then it will remain false until another change is made to the document.
            </para>
            <para>
            When there is no <see cref="P:Northwoods.GoWeb.GoDocument.UndoManager"/>, this property is
            implemented as only a simple boolean state variable.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.SuspendsUpdates">
            <summary>
            Gets or sets whether any Changed event handlers are called upon a
            document or document object change.
            </summary>
            <value>
            A value of true means that any Changed event handlers and any
            UndoManager are not called.
            A value of false means that the notifications do take place.
            The default value is false.
            </value>
            <remarks>
            <para>
            Warning!  You probably shouldn't be using this property.
            </para>
            <para>
            When this property is true, no views of this document will be updated
            as the document is changed, and no undo/redo information is kept.
            When you set the property to false again, you will need to make
            sure all the views are correct (you may wish to call <see cref="M:Northwoods.GoWeb.GoDocument.InvalidateViews"/>)
            and that the <see cref="P:Northwoods.GoWeb.GoDocument.UndoManager"/>
            (if any) is in a satisfactory state (you may wish to call
            <see cref="M:Northwoods.GoWeb.GoUndoManager.Clear"/>,
            so that it cannot be confused by the loss of any undo/redo
            information while this property was true).
            You may also need to update the document's bounds (<see cref="P:Northwoods.GoWeb.GoDocument.TopLeft"/>
            and <see cref="P:Northwoods.GoWeb.GoDocument.Size"/>) and perhaps call <see cref="M:Northwoods.GoWeb.GoDocument.EnsureUniquePartID"/>.
            No Changed event is raised when this property is set.
            </para>
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.OnChanged(Northwoods.GoWeb.GoChangedEventArgs)"/>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.SuspendsUpdates"/>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.SkipsUndoManager"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.SkipsUndoManager">
            <summary>
            Gets or sets whether the <see cref="P:Northwoods.GoWeb.GoDocument.UndoManager"/> is notified upon a
            document or document object change.
            </summary>
            <value>
            A value of true means the <see cref="P:Northwoods.GoWeb.GoDocument.UndoManager"/>'s
            <see cref="M:Northwoods.GoWeb.GoUndoManager.DocumentChanged(System.Object,Northwoods.GoWeb.GoChangedEventArgs)"/> method is not called.
            A value of false means that if there is an <see cref="P:Northwoods.GoWeb.GoDocument.UndoManager"/>,
            it is notified so that it can record changes for undo and redo purposes.
            The default value is false.
            </value>
            <remarks>
            You must be careful that any changes that occur while this property
            is true will not confuse the user when they perform Undo's and Redo's
            but the changes are not undone or redone.
            No Changed event is raised when this property is set.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.OnChanged(Northwoods.GoWeb.GoChangedEventArgs)"/>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.SkipsUndoManager"/>
            <seealso cref="M:Northwoods.GoWeb.GoUndoManager.Clear"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.Initializing">
            <summary>
            Gets or sets whether this document is in the process of being initialized.
            </summary>
            <remarks>
            This property is provided as a standard way to indicate that the document
            is not yet completely initialized, thereby allowing some methods to optimize
            their behavior.
            During an undo or a redo, this property will be set to true.
            See the documentation for <see cref="M:Northwoods.GoWeb.GoDocument.ChangeValue(Northwoods.GoWeb.GoChangedEventArgs,System.Boolean)"/>.
            Setting this property does not call <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.SerializesUndoManager">
            <summary>
            Gets or sets whether the <see cref="P:Northwoods.GoWeb.GoDocument.UndoManager"/> is serialized
            when the document is.
            </summary>
            <value>
            The default value is false for Windows Forms but is true for Web Forms.
            </value>
            <remarks>
            If you set this to true, you will need to make sure that all
            <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/> that are remembered as changes by the
            undo manager are themselves serializable.
            This might be a problem if you are tracking a field
            that has a non-serializable value, since those values are naturally
            remembered by the <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/>.
            No Changed event is raised when this property is set.
            </remarks>
        </member>
        <member name="E:Northwoods.GoWeb.GoDocument.Changed">
            <summary>
            The Changed event is raised whenever a document or a part of a document is modified.
            </summary>
            <remarks>
            Any Changed event handlers should not modify this document or any part of this document.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.DataFormat">
            <summary>
            Gets or sets this document's data format name for the clipboard.
            </summary>
            <value>
            Normally this <c>String</c> will be the fully qualified name
            of this document <c>Type</c>.
            This value must not be null.
            </value>
            <remarks>
            The default value for this property ensures that the user will not
            be able to copy the selection from one kind of document and paste
            it into another kind of document, but that they can do so when the
            document classes are the same.  If you want to be able to copy and
            paste between views where the documents are of different classes,
            you will have to assign the same values for this property for
            both documents.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.CopyToClipboard(Northwoods.GoWeb.IGoCollection)"/>
            <seealso cref="M:Northwoods.GoWeb.GoView.PasteFromClipboard"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.UndoManager">
            <summary>
            Gets or sets the UndoManager for this document.
            </summary>
            <value>
            This value may be null, when there is no <see cref="T:Northwoods.GoWeb.GoUndoManager"/>.
            By default this value is null.
            </value>
            <remarks>
            Of course, when there is no UndoManager, the user cannot
            perform an Undo or a Redo.
            No Changed event is raised when this property is set.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.SkipsUndoManager"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.UserFlags">
            <summary>
            Gets or sets an integer value associated with this document.
            </summary>
            <value>
            The initial value is zero.
            </value>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.UserObject"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.UserObject">
            <summary>
            Gets or sets an object associated with this document.
            </summary>
            <value>
            The initial value is null.  The value should be serializable.
            </value>
            <remarks>
            In some cases you may be able to avoid creating a subclass of <see cref="T:Northwoods.GoWeb.GoDocument"/>
            by using this property to hold your application specific state.
            However, in general it would be best to derive a subclass holding your custom
            fields, because you will be able to control access to your document state
            more clearly, and because you will be able to override various methods to customize
            behavior more cleanly.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.UserFlags"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.ValidCycle">
            <summary>
            Gets or sets whether a valid link can be made between two ports that may produce a
            directed or undirected cycle in this document.
            </summary>
            <value>
            This defaults to <see cref="F:Northwoods.GoWeb.GoDocumentValidCycle.All"/>, resulting in no checks for a
            new link possibly producing any kind of cycle or loop.
            </value>
            <remarks>
            <see cref="M:Northwoods.GoWeb.GoPort.IsValidLink(Northwoods.GoWeb.IGoPort)"/> uses this property in the following manners:
            <list type="table">
            <listheader><term><see cref="T:Northwoods.GoWeb.GoDocumentValidCycle"/></term></listheader>
            <item>
            <term><see cref="F:Northwoods.GoWeb.GoDocumentValidCycle.All"/></term>
            <term>produces no checking for cycles.</term>
            </item>
            <item>
            <term><see cref="F:Northwoods.GoWeb.GoDocumentValidCycle.NotDirected"/></term>
            <term>checks for possible cycle consisting of directed links.
            This check is slower and consumes more memory than the "Fast" version,
            but will not fail even if there are cycles or loops in the graph.</term>
            </item>
            <item>
            <term><see cref="F:Northwoods.GoWeb.GoDocumentValidCycle.NotDirectedFast"/></term>
            <term>checks for possible cycle consisting of directed links,
            without concern for any existing directed cycles elsewhere in the graph.
            Thus using this mode may result in infinite recursion and stack overflows if
            there happen to be any directed cycles accessible from either port in a
            call to <see cref="M:Northwoods.GoWeb.GoPort.IsValidLink(Northwoods.GoWeb.IGoPort)"/>.</term>
            </item>
            <item>
            <term><see cref="F:Northwoods.GoWeb.GoDocumentValidCycle.NotUndirected"/></term>
            <term>checks for possible cycle consisting of links in either direction.</term>
            </item>
            <item>
            <term><see cref="F:Northwoods.GoWeb.GoDocumentValidCycle.DestinationTree"/></term>
            <term>checks for possible links that would cause the graph no longer to be a tree,
            with each node having at most one source link.</term>
            </item>
            <item>
            <term><see cref="F:Northwoods.GoWeb.GoDocumentValidCycle.SourceTree"/></term>
            <term>checks for possible links that would cause the graph no longer to be a tree,
            with each node having at most one destination link.</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.SuspendsRouting">
            <summary>
            Gets or sets whether <see cref="T:Northwoods.GoWeb.IGoRoutable"/> <see cref="T:Northwoods.GoWeb.GoObject"/>s should
            have their <see cref="T:Northwoods.GoWeb.IGoRoutable"/>.<see cref="M:Northwoods.GoWeb.IGoRoutable.CalculateRoute"/>
            method called immediately, or later when this property is set back to false.
            </summary>
            <value>
            The default value of this property is false.
            It is temporarily set to true in methods such as <see cref="M:Northwoods.GoWeb.GoView.MoveSelection(Northwoods.GoWeb.GoSelection,System.Drawing.SizeF,System.Boolean)"/>,
            where the moving of multiple objects might cause repeated routing calls for the
            same objects.
            </value>
            <remarks>
            You probably shouldn't be using this property.
            No Changed event is raised when this property is set.
            If you set this property to false, you are also responsible for calling
            <see cref="M:Northwoods.GoWeb.GoDocument.DoDelayedRouting(Northwoods.GoWeb.IGoCollection)"/> in order to properly deal with any
            <see cref="T:Northwoods.GoWeb.IGoRoutable"/> objects that have been added to the
            <see cref="P:Northwoods.GoWeb.GoDocument.DelayedRoutings"/> collection.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.DelayedRoutings">
            <summary>
            A collection of <see cref="T:Northwoods.GoWeb.GoObject"/>s that implement the <see cref="T:Northwoods.GoWeb.IGoRoutable"/>
            interface and whose <see cref="M:Northwoods.GoWeb.IGoRoutable.CalculateRoute"/> needs to be called.
            </summary>
            <remarks>
            Modifications of this collection do not produce any <see cref="E:Northwoods.GoWeb.GoDocument.Changed"/> events,
            nor are they recorded by the <see cref="T:Northwoods.GoWeb.GoUndoManager"/>.
            Normally the only modifications to this collection are implemented by the
            <see cref="T:Northwoods.GoWeb.GoDocument"/> class; in particular by the <see cref="M:Northwoods.GoWeb.GoDocument.UpdateRoute(Northwoods.GoWeb.IGoRoutable)"/>
            and <see cref="M:Northwoods.GoWeb.GoDocument.DoDelayedRouting(Northwoods.GoWeb.IGoCollection)"/> methods.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.RoutingTime">
            <summary>
            Gets or sets when <see cref="T:Northwoods.GoWeb.IGoRoutable"/> objects should have their
            routes recalculated.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoWeb.GoRoutingTime.Delayed"/>,
            so that routable objects have their routes recalculated by
            <see cref="M:Northwoods.GoWeb.GoDocument.DoDelayedRouting(Northwoods.GoWeb.IGoCollection)"/>, such as at the end of the implementations of
            <see cref="M:Northwoods.GoWeb.GoView.MoveSelection(Northwoods.GoWeb.GoSelection,System.Drawing.SizeF,System.Boolean)"/>, <see cref="M:Northwoods.GoWeb.GoView.CopySelection(Northwoods.GoWeb.GoSelection,System.Drawing.SizeF,System.Boolean)"/>,
            <see cref="M:Northwoods.GoWeb.GoView.EditPaste"/> and (in full Windows Forms) <c>GoView.DoExternalDrop</c>.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.MaintainsPartID">
            <summary>
            Gets or sets whether the document should make sure each <see cref="T:Northwoods.GoWeb.IGoIdentifiablePart"/>
            has a unique <see cref="P:Northwoods.GoWeb.IGoIdentifiablePart.PartID"/>.
            </summary>
            <remarks>
            <para>
            Setting this property to true will call <see cref="M:Northwoods.GoWeb.GoDocument.EnsureUniquePartID"/>.
            When this property is false, any <see cref="P:Northwoods.GoWeb.IGoIdentifiablePart.PartID"/>'s are invalid.
            When this property is true, adding any object to this document will cause every
            <see cref="T:Northwoods.GoWeb.IGoIdentifiablePart"/> whose <see cref="P:Northwoods.GoWeb.IGoIdentifiablePart.PartID"/> is
            -1 to be assigned a unique part ID, a non-negative integer.
            </para>
            <para>
            If you add any <see cref="T:Northwoods.GoWeb.IGoIdentifiablePart"/> with a non-negative integer to
            a document, all parts (including parts nested inside groups) must have unique
            <see cref="P:Northwoods.GoWeb.IGoIdentifiablePart.PartID"/>s already.
            Since PartIDs are integers, the number of unique part IDs for the lifetime of a
            document is limited to the number of positive integers.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoDocument.LastPartID">
            <summary>
            Gets or sets the last PartID value that this document assigned to an
            <see cref="T:Northwoods.GoWeb.IGoIdentifiablePart"/> when <see cref="P:Northwoods.GoWeb.GoDocument.MaintainsPartID"/> is true.
            </summary>
            <value>
            Initially the value is -1.
            </value>
            <remarks>
            You should not set this property except when loading/deserializing an
            existing document.
            Setting this property at other times may cause inconsistent results, just as
            setting the <see cref="T:Northwoods.GoWeb.IGoIdentifiablePart"/>.<see cref="P:Northwoods.GoWeb.IGoIdentifiablePart.PartID"/>
            at other times can cause problems.
            </remarks>
        </member>
        <member name="T:Northwoods.GoWeb.MouseButtons">
            <summary>
            Specifies constants that define which mouse button was pressed.
            </summary>
            <remarks>
            This enumeration has a Flags attribute that allows a bitwise combination of its member values.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.MouseButtons.None">
            <summary>
            No mouse button was pressed.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.MouseButtons.Left">
            <summary>
            The left mouse button was pressed.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.MouseButtons.Right">
            <summary>
            The right mouse button was pressed.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.MouseButtons.Middle">
            <summary>
            The middle mouse button was pressed.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoInputState">
            <summary>
            Specifies a kind of abstract input event state.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoInputState.Cancel">
            <summary>
            Used by tools and object event handling methods to indicate that the
            user is no longer interested in completing the mouse gesture command.
            </summary>
            <remarks>
            Typically this is caused by the user pressing the Escape key.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoInputState.Start">
            <summary>
            Used by tools and object event handling methods to indicate that the
            user has started a mouse gesture command.
            </summary>
            <remarks>
            Typically this is caused by a mouse button down event.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoInputState.Continue">
            <summary>
            Used by tools and object event handling methods to indicate that the
            user is continuing a mouse gesture command.
            </summary>
            <remarks>
            Typically this is caused by a mouse move event.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoInputState.Finish">
            <summary>
            Used by tools and object event handling methods to indicate that the
            user has finished a mouse gesture command.
            </summary>
            <remarks>
            Typically this is caused by a mouse button up event.
            </remarks>
        </member>
        <member name="T:Northwoods.GoWeb.GoInputEventHandler">
            <summary>
            Represents methods that handle <see cref="T:Northwoods.GoWeb.GoInputEventArgs"/>.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoInputEventArgs">
            <summary>
            Holds information for unified input events for views, for both
            keyboard input and mouse input, including mouse button and mouse wheel
            and drag-and-drop mouse actions, where no <see cref="T:Northwoods.GoWeb.GoObject"/>
            is involved.
            </summary>
            <remarks>
            <para>
            For input events that occur in the "background", there is of course
            no particular <see cref="T:Northwoods.GoWeb.GoObject"/>.
            Such events include:
            <see cref="E:Northwoods.GoWeb.GoView.BackgroundDoubleClicked"/>, 
            <see cref="E:Northwoods.GoWeb.GoView.BackgroundSingleClicked"/>, 
            <see cref="E:Northwoods.GoWeb.GoView.BackgroundContextClicked"/>, 
            <c>GoView.ExternalObjectsDropped</c> (in WinForms), and
            <c>GoView.BackgroundHover</c> (in WinForms).
            </para>
            <para>
            For input events that do
            involve an object, event handlers use the <see cref="T:Northwoods.GoWeb.GoObjectEventArgs"/>
            class.  When no particular input information is associated with an
            event, <see cref="T:Northwoods.GoWeb.GoSelectionEventArgs"/> is used when there is a
            particular object, and <see cref="T:System.EventArgs"/> is used otherwise.
            </para>
            </remarks>
            <seealso cref="T:Northwoods.GoWeb.GoObjectEventArgs"/>
            <seealso cref="T:Northwoods.GoWeb.GoSelectionEventArgs"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoInputEventArgs.#ctor">
            <summary>
            The constructor produces an empty object, describing no event.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoInputEventArgs.#ctor(Northwoods.GoWeb.GoInputEventArgs)">
            <summary>
            This copy constructor makes a copy of the argument object.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="P:Northwoods.GoWeb.GoInputEventArgs.ViewPoint">
            <summary>
            Gets or sets the point at which this input event occurred.
            </summary>
            <value>
            The <c>Point</c> is in view coordinates.
            </value>
            <remarks>
            This should be valid for mouse and drag-and-drop events.
            For keyboard input, this is the last available mouse point.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoInputEventArgs.DocPoint"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoInputEventArgs.DocPoint">
            <summary>
            Gets or sets the point at which this input event occurred.
            </summary>
            <value>
            The <c>PointF</c> is in document coordinates.
            </value>
            <remarks>
            This should be valid for mouse and drag-and-drop events.
            For keyboard input, this is the last available mouse point.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoInputEventArgs.ViewPoint"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoInputEventArgs.Buttons">
            <summary>
            Gets or sets the MouseButtons used with this input event.
            </summary>
            <value>
            The <c>MouseButtons</c> value will be some combination of
            <c>MouseButtons.Left</c>, <c>MouseButtons.Middle</c>, and <c>MouseButtons.Right</c>.
            </value>
            <remarks>
            This value may not be meaningful for keyboard input, but should be valid
            for mouse and drag-and-drop events.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoInputEventArgs.Modifiers"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoInputEventArgs.Modifiers">
            <summary>
            Gets or sets the modifier keys used with this input event.
            </summary>
            <value>
            The <c>Keys</c> value will be some combination of
            <c>Keys.Control</c>, <c>Keys.Shift</c>, and <c>Keys.Alt</c>.
            </value>
            <seealso cref="P:Northwoods.GoWeb.GoInputEventArgs.Control"/>
            <seealso cref="P:Northwoods.GoWeb.GoInputEventArgs.Shift"/>
            <seealso cref="P:Northwoods.GoWeb.GoInputEventArgs.Alt"/>
            <seealso cref="P:Northwoods.GoWeb.GoInputEventArgs.Buttons"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoInputEventArgs.Key">
            <summary>
            Gets or sets the key pressed as this input event.
            </summary>
            <remarks>
            The <c>Keys</c> value will be something like <c>Keys.C</c>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoInputEventArgs.Control"/>
            <seealso cref="P:Northwoods.GoWeb.GoInputEventArgs.Shift"/>
            <seealso cref="P:Northwoods.GoWeb.GoInputEventArgs.Alt"/>
            <seealso cref="P:Northwoods.GoWeb.GoInputEventArgs.Buttons"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoInputEventArgs.DoubleClick">
            <summary>
            Gets or sets whether this is a double-click event.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoInputEventArgs.Delta">
            <summary>
            Gets or sets the amount of change associated with a mouse-wheel rotation.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoInputEventArgs.InputState">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoWeb.GoInputState"/> as defined by various tools.
            </summary>
            <value>
            This property is not meaningful or valid unless the input event is
            associated with certain tools such as <see cref="T:Northwoods.GoWeb.GoToolDragging"/>
            and <see cref="T:Northwoods.GoWeb.GoToolResizing"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoInputEventArgs.Control">
            <summary>
            Gets whether <see cref="P:Northwoods.GoWeb.GoInputEventArgs.Modifiers"/> has the Control flag (mask == 2) set.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoInputEventArgs.Shift">
            <summary>
            Gets whether <see cref="P:Northwoods.GoWeb.GoInputEventArgs.Modifiers"/> has the Shift flag (mask == 1) set.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoInputEventArgs.Alt">
            <summary>
            Gets whether <see cref="P:Northwoods.GoWeb.GoInputEventArgs.Modifiers"/> has the Alt flag (mask == 4) set.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoInputEventArgs.IsContextButton">
            <summary>
            Gets whether <see cref="P:Northwoods.GoWeb.GoInputEventArgs.Buttons"/> equals <c>MouseButtons.Right</c>.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoLayer">
            <summary>
            This represents a collection of objects that are to be drawn behind or in front of
            objects in other layers.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLayer.ChangedObject">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint used for all property changes to <see cref="T:Northwoods.GoWeb.GoObject"/>s.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLayer.InsertedObject">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLayer.RemovedObject">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLayer.ChangedObjectLayer">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLayer.ChangedObjectZOrder">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLayer.ChangedAllowView">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoLayer.AllowView"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLayer.ChangedAllowSelect">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoLayer.AllowSelect"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLayer.ChangedAllowMove">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoLayer.AllowMove"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLayer.ChangedAllowCopy">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoLayer.AllowCopy"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLayer.ChangedAllowResize">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoLayer.AllowResize"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLayer.ChangedAllowReshape">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoLayer.AllowReshape"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLayer.ChangedAllowDelete">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoLayer.AllowDelete"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLayer.ChangedAllowInsert">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoLayer.AllowInsert"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLayer.ChangedAllowLink">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoLayer.AllowLink"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLayer.ChangedAllowEdit">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoLayer.AllowEdit"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLayer.ChangedAllowPrint">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoLayer.AllowPrint"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLayer.ChangedIdentifier">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint identifying changes to the value of the <see cref="P:Northwoods.GoWeb.GoLayer.Identifier"/> property.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayer.Add(Northwoods.GoWeb.GoObject)">
            <summary>
            Add an object to this layer.
            </summary>
            <param name="obj"></param>
            <remarks>
            The <paramref name="obj"/> must not already belong to a different document or view, nor to a group.
            If the object already belongs to this layer, nothing happens.
            The object's <see cref="P:Northwoods.GoWeb.GoObject.Layer"/> property will be changed to be this layer.
            If the object already belonged to a different layer in this same document or view,
            the Changed hint will be <see cref="F:Northwoods.GoWeb.GoLayer.ChangedObjectLayer"/>, otherwise it will be
            <see cref="F:Northwoods.GoWeb.GoLayer.InsertedObject"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayer.Remove(Northwoods.GoWeb.GoObject)">
            <summary>
            Make sure this layer no longer holds an object.
            </summary>
            <param name="obj"></param>
            <remarks>
            It is an error if the object <paramref name="obj"/> currently belongs to a different layer.
            If the object already is not in this layer, this method does nothing.
            Just before changing the object's <see cref="P:Northwoods.GoWeb.GoObject.Layer"/> property
            to null, the object's document or view will be notified with a Changed hint
            of <see cref="F:Northwoods.GoWeb.GoLayer.RemovedObject"/>.
            During that notification the object's <see cref="P:Northwoods.GoWeb.GoObject.BeingRemoved"/>
            property will be true.
            For convenience, if the object belongs to a <see cref="T:Northwoods.GoWeb.GoGroup"/>,
            this method will remove the object from the group.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayer.MoveBefore(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject)">
            <summary>
            Change the Z-order of an object in this layer by moving it to be before (i.e. behind) another object.
            </summary>
            <param name="dest">
            the object in this layer that <paramref name="moving"/> will be placed before;
            if null, <paramref name="moving"/> will be painted as the first (i.e. rear-most) object in this layer.
            </param>
            <param name="moving">
            the top-level object in this layer whose Z-order will be changed
            </param>
            <remarks>
            This method signals an exception if <paramref name="moving"/> is not a top-level object in this layer,
            if <paramref name="dest"/> is not null and is not in this layer, or
            if you are trying to move an object before (i.e. behind) itself.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoGroup.InsertBefore(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayer.MoveAfter(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject)">
            <summary>
            Change the Z-order of an object in this layer by moving it to be after (i.e. in front of) another object.
            </summary>
            <param name="dest">
            the object in this layer that <paramref name="moving"/> will be placed after;
            if null, <paramref name="moving"/> will be painted as the last (i.e. front-most) object in this layer.
            </param>
            <param name="moving">
            the top-level object in this layer whose Z-order will be changed
            </param>
            <remarks>
            This method signals an exception if <paramref name="moving"/> is not a top-level object in this layer,
            if <paramref name="dest"/> is not null and is not in this layer, or
            if you are trying to move an object after (i.e. in front of) itself.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoGroup.InsertAfter(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayer.NextObject(Northwoods.GoWeb.GoObject,System.Int32)">
            <summary>
            Return the next object in the Z-order, given an object in this layer.
            </summary>
            <param name="obj">a <see cref="T:Northwoods.GoWeb.GoObject"/> that is in this layer</param>
            <param name="relativeZorder">
            a value of <c>1</c> returns the next object (just in front of <paramref name="obj"/>);
            a value of <c>-1</c> returns the previous object (just behind <paramref name="obj"/>)
            </param>
            <returns>
            null if <paramref name="obj"/> is null or does not belong to this layer
            or if there is no object at the Z-order position indicated by <paramref name="relativeZorder"/>.
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayer.AddCollection(Northwoods.GoWeb.IGoCollection,System.Boolean)">
            <summary>
            Re-parent some objects to be top-level objects, even if they
            are part of groups in this same layer.
            </summary>
            <param name="coll"></param>
            <param name="reparentLinks">whether to make sure all connected links belong to the proper subgraph or layer</param>
            <returns>a collection of the objects that were added to this layer</returns>
            <remarks>
            This method tries to preserve the links connecting any ports of the objects
            being added to this layer.
            Just as with the <see cref="M:Northwoods.GoWeb.GoLayer.Add(Northwoods.GoWeb.GoObject)"/> method, you may find that you will want to 
            set the <see cref="P:Northwoods.GoWeb.GoObject.Selectable"/> property to true for each of the objects
            being added to this layer.  The need for this depends on the behavior you want
            in your application.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayer.Contains(Northwoods.GoWeb.GoObject)">
            <summary>
            Determine if an object belongs to this layer.
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <remarks>
            This implementation currently depends on the <see cref="P:Northwoods.GoWeb.GoObject.Layer"/>
            property, a "back-pointer".
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayer.Clear">
            <summary>
            Remove all objects from this layer.
            </summary>
            <remarks>
            This repeatedly calls <see cref="M:Northwoods.GoWeb.GoLayer.Remove(Northwoods.GoWeb.GoObject)"/>.
            The default implementation tries to avoid duplicate removals,
            in case removing one object automatically removes another one.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayer.CopyArray">
            <summary>
            Returns a newly allocated array of all of the GoObjects in this collection.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.IGoCollection.CopyArray"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayer.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies references to all of the objects in this layer into an Array.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayer.CopyTo(Northwoods.GoWeb.GoObject[],System.Int32)">
            <summary>
            Copies references to all of the objects in this layer into an array of <see cref="T:Northwoods.GoWeb.GoObject"/>s.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayer.GetEnumerator">
            <summary>
            Get an GoLayerEnumerator that iterates over all objects in this layer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayer.CanViewObjects">
            <summary>
            Called to see if the user can see objects in this layer.
            </summary>
            <remarks>
            This just returns <c>AllowView</c>.
            This predicate is used by methods such as <see cref="M:Northwoods.GoWeb.GoLayer.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView,System.Drawing.RectangleF)"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoLayer.AllowView"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.CanView"/>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanPrintObjects"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayer.CanPrintObjects">
            <summary>
            Called to see if the view should print objects in this layer.
            </summary>
            <remarks>
            This just returns <c>AllowPrint</c>.
            This predicate is used by methods such as <see cref="M:Northwoods.GoWeb.GoLayer.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView,System.Drawing.RectangleF)"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoLayer.AllowPrint"/>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanViewObjects"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayer.CanSelectObjects">
            <summary>
            Called to see if the user can select objects in this layer.
            </summary>
            <remarks>
            This just returns <c>AllowSelect</c>, and, if this is a document layer,
            <c>Document.CanSelectObjects</c>.
            This predicate is used by methods such as <see cref="M:Northwoods.GoWeb.GoView.SelectInRectangle(System.Drawing.RectangleF)"/>
            and <see cref="M:Northwoods.GoWeb.GoLayer.PickObject(System.Drawing.PointF,System.Boolean)"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoLayer.AllowSelect"/>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.CanSelectObjects"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.CanSelect"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayer.CanMoveObjects">
            <summary>
            Called to see if the user can move selected objects in this layer.
            </summary>
            <remarks>
            This just returns <c>AllowMove</c>, and, if this is a document layer,
            <c>Document.CanMoveObjects</c>.
            This predicate is used by methods such as <see cref="M:Northwoods.GoWeb.GoView.MoveSelection(Northwoods.GoWeb.GoSelection,System.Drawing.SizeF,System.Boolean)"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoLayer.AllowMove"/>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.CanMoveObjects"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.CanMove"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayer.CanCopyObjects">
            <summary>
            Called to see if the user can copy selected objects in this layer.
            </summary>
            <remarks>
            This just returns <c>AllowCopy</c>, and, if this is a document layer,
            <c>Document.CanCopyObjects</c>.
            This predicate is used by methods such as <see cref="M:Northwoods.GoWeb.GoView.CopySelection(Northwoods.GoWeb.GoSelection,System.Drawing.SizeF,System.Boolean)"/>
            and <see cref="M:Northwoods.GoWeb.GoDocument.CopyFromCollection(Northwoods.GoWeb.IGoCollection)"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoLayer.AllowCopy"/>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.CanCopyObjects"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.CanCopy"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayer.CanResizeObjects">
            <summary>
            Called to see if the user can resize selected objects in this layer.
            </summary>
            <remarks>
            This just returns <c>AllowResize</c>, and, if this is a document layer,
            <c>Document.CanResizeObjects</c>.
            This predicate is used by <see cref="T:Northwoods.GoWeb.GoToolResizing"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoLayer.AllowResize"/>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.CanResizeObjects"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.CanResize"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayer.CanReshapeObjects">
            <summary>
            Called to see if the user can reshape resizable objects in this layer.
            </summary>
            <remarks>
            This just returns <c>AllowReshape</c>, and, if this is a document layer,
            <c>Document.CanReshapeObjects</c>.
            This predicate is used by <see cref="T:Northwoods.GoWeb.GoToolResizing"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoLayer.AllowReshape"/>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.CanReshapeObjects"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.CanReshape"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayer.CanDeleteObjects">
            <summary>
            Called to see if the user can delete selected objects in this layer.
            </summary>
            <remarks>
            This just returns <c>AllowDelete</c>, and, if this is a document layer,
            <c>Document.CanDeleteObjects</c>.
            This predicate is used by methods such as <see cref="M:Northwoods.GoWeb.GoView.DeleteSelection(Northwoods.GoWeb.GoSelection)"/>
            and <see cref="M:Northwoods.GoWeb.GoView.EditCut"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoLayer.AllowDelete"/>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.CanDeleteObjects"/>
            <seealso cref="M:Northwoods.GoWeb.GoObject.CanDelete"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayer.CanInsertObjects">
            <summary>
            Called to see if the user can insert objects in this layer.
            </summary>
            <remarks>
            This just returns <c>AllowInsert</c>, and, if this is a document layer,
            <c>Document.CanInsertObjects</c>.
            This predicate is used by methods such as <see cref="M:Northwoods.GoWeb.GoView.EditPaste"/> and by
            <see cref="T:Northwoods.GoWeb.GoToolDragging"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoLayer.AllowInsert"/>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.CanInsertObjects"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayer.CanLinkObjects">
            <summary>
            Called to see if the user can link objects in this layer.
            </summary>
            <remarks>
            This just returns <c>AllowLink &amp;&amp; Document.CanLinkObjects</c>.
            This predicate is used by <see cref="T:Northwoods.GoWeb.GoToolLinking"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoLayer.AllowLink"/>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.CanLinkObjects"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayer.CanEditObjects">
            <summary>
            Called to see if the user can edit objects in this layer.
            </summary>
            <remarks>
            This just returns <c>AllowEdit &amp;&amp; Document.CanEditObjects</c>.
            This predicate is used by methods such as <see cref="M:Northwoods.GoWeb.GoText.OnSingleClick(Northwoods.GoWeb.GoInputEventArgs,Northwoods.GoWeb.GoView)"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoLayer.AllowEdit"/>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.CanEditObjects"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayer.SetModifiable(System.Boolean)">
            <summary>
            This method sets some properties that determine whether the user can
            modify any objects in this layer.
            </summary>
            <param name="b"></param>
            <remarks>
            By default this just sets the <see cref="P:Northwoods.GoWeb.GoLayer.AllowMove"/>, <see cref="P:Northwoods.GoWeb.GoLayer.AllowResize"/>, 
            <see cref="P:Northwoods.GoWeb.GoLayer.AllowReshape"/>, <see cref="P:Northwoods.GoWeb.GoLayer.AllowDelete"/>, <see cref="P:Northwoods.GoWeb.GoLayer.AllowInsert"/>, 
            <see cref="P:Northwoods.GoWeb.GoLayer.AllowLink"/>, and <see cref="P:Northwoods.GoWeb.GoLayer.AllowEdit"/> properties.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayer.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView,System.Drawing.RectangleF)">
            <summary>
            Render all of the visible objects in this layer within a rectangle to a <c>Graphics</c>.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <param name="clipRect"></param>
            <remarks>
            This method calls <see cref="M:Northwoods.GoWeb.GoObject.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)"/> on each object in this
            layer whose <see cref="M:Northwoods.GoWeb.GoObject.CanView"/> property is true and whose
            paint bounds, calculated by calling <see cref="M:Northwoods.GoWeb.GoObject.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.GoWeb.GoView)"/>,
            intersects with <paramref name="clipRect"/>.
            If <see cref="P:Northwoods.GoWeb.GoView.IsPrinting"/> is true, it calls <see cref="M:Northwoods.GoWeb.GoObject.CanPrint"/>
            on each object instead of calling <see cref="M:Northwoods.GoWeb.GoObject.CanView"/>.
            If <see cref="M:Northwoods.GoWeb.GoLayer.CanViewObjects"/> is false,
            or if <see cref="P:Northwoods.GoWeb.GoView.IsPrinting"/> is true
            and <see cref="M:Northwoods.GoWeb.GoLayer.CanPrintObjects"/> is false, this method does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayer.PickObject(System.Drawing.PointF,System.Boolean)">
            <summary>
            Find a visible object in this layer at a given point.
            </summary>
            <param name="p">the point in document coordinates</param>
            <param name="selectableOnly">this is passed on to calls to <see cref="M:Northwoods.GoWeb.GoObject.Pick(System.Drawing.PointF,System.Boolean)"/></param>
            <returns>the result of <see cref="M:Northwoods.GoWeb.GoObject.Pick(System.Drawing.PointF,System.Boolean)"/>; null if no object contains the point <paramref name="p"/></returns>
            <remarks>
            This method calls <see cref="M:Northwoods.GoWeb.GoObject.Pick(System.Drawing.PointF,System.Boolean)"/> on each object in this
            layer until a call returns an object, which is returned by this method.
            The objects are tested in reverse order in which they are painted, so
            as to get the "top-most" object at the given point <paramref name="p"/>.
            If <see cref="M:Northwoods.GoWeb.GoLayer.CanViewObjects"/> is false, this method does nothing.
            If <paramref name="selectableOnly"/> is true but <see cref="M:Northwoods.GoWeb.GoLayer.CanSelectObjects"/>
            is false, this method returns null.
            Please note that if an object is found, it might not be a top-level object.
            In fact, when <paramref name="selectableOnly"/> is false, it is very likely
            that if any object is found at the given point, it will be a child of some
            group.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayer.PickObjects(System.Drawing.PointF,System.Boolean,Northwoods.GoWeb.IGoCollection,System.Int32)">
            <summary>
            Return a collection of objects that can be picked at a particular point.
            </summary>
            <param name="p">A <c>PointF</c> location in document coordinates.</param>
            <param name="selectableOnly">If true, only consider objects for which <see cref="M:Northwoods.GoWeb.GoObject.CanSelect"/> is true.</param>
            <param name="coll">An <see cref="T:Northwoods.GoWeb.IGoCollection"/> that is modified by adding results and then returned.
            If this value is null, a <see cref="T:Northwoods.GoWeb.GoCollection"/> is allocated and returned.</param>
            <param name="max">A limit on the number of objects to be found and added to the result collection.</param>
            <returns>The <paramref name="coll"/> argument, or a newly allocated one if that was null.</returns>
            <remarks>
            See the remarks about <see cref="M:Northwoods.GoWeb.GoLayer.PickObject(System.Drawing.PointF,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayer.PickObjectsInRectangle(System.Drawing.RectangleF,Northwoods.GoWeb.GoPickInRectangleStyle,Northwoods.GoWeb.IGoCollection,System.Int32)">
            <summary>
            Return a collection of objects that are surrounded by a given rectangle.
            </summary>
            <param name="rect">A <c>RectangleF</c> in document coordinates.</param>
            <param name="pickstyle">
            If <see cref="F:Northwoods.GoWeb.GoPickInRectangleStyle.SelectableOnlyContained"/>
            or <see cref="F:Northwoods.GoWeb.GoPickInRectangleStyle.SelectableOnlyIntersectsBounds"/>,
            only consider objects for which <see cref="M:Northwoods.GoWeb.GoObject.CanSelect"/> is true.
            </param>
            <param name="coll">An <see cref="T:Northwoods.GoWeb.IGoCollection"/> that is modified by adding results and then returned.
            If this value is null, a <see cref="T:Northwoods.GoWeb.GoCollection"/> is allocated and returned.</param>
            <param name="max">A limit on the number of objects to be found and added to the result collection.</param>
            <returns>The <paramref name="coll"/> argument, or a newly allocated one if that was null.</returns>
            <remarks>
            This heeds this <see cref="T:Northwoods.GoWeb.GoLayer"/>'s <see cref="M:Northwoods.GoWeb.GoLayer.CanViewObjects"/>
            and the <see cref="T:Northwoods.GoWeb.GoObject"/>'s <see cref="M:Northwoods.GoWeb.GoObject.CanView"/> predicates.
            If <paramref name="pickstyle"/> is <c>GoPickInRectangleStyle.SelectableOnlyContained</c>, this method also heeds the
            <see cref="M:Northwoods.GoWeb.GoLayer.CanSelectObjects"/> and <see cref="M:Northwoods.GoWeb.GoObject.CanSelect"/> predicates.
            This actually checks to see if the whole <see cref="P:Northwoods.GoWeb.GoObject.SelectionObject"/>
            is within the <paramref name="rect"/> bounds.  Such a policy allows a
            <see cref="T:Northwoods.GoWeb.GoGroup"/> to be selected even though only one part of the group
            is in the rectangle, the object's <see cref="P:Northwoods.GoWeb.GoObject.SelectionObject"/> that appears
            to the user to be selected.
            This will consider the children of <see cref="T:Northwoods.GoWeb.GoGroup"/>s.
            Once it finds a selectable object within the rectangle,
            it does not recurse further into that object.
            This method is called by <see cref="M:Northwoods.GoWeb.GoView.SelectInRectangle(System.Drawing.RectangleF)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoLayer.IsEmpty">
            <summary>
            This predicate is true when there are no objects in this collection.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.IGoCollection.IsEmpty"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLayer.Count">
            <summary>
            Gets the number of objects in this layer.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLayer.IsSynchronized">
            <summary>
            Gets whether this collection of objects is thread-safe.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLayer.SyncRoot">
            <summary>
            Gets an object to be used for synchronizing access to this collection.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLayer.Backwards">
            <summary>
            Gets an enumerable whose enumerator will iterate over the GoObjects in reverse order.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.IGoCollection.Backwards"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLayer.LayerCollectionContainer">
            <summary>
            Gets the document or view to which this layer belongs.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoLayer.IsInDocument"/>
            <seealso cref="P:Northwoods.GoWeb.GoLayer.Document"/>
            <seealso cref="P:Northwoods.GoWeb.GoLayer.IsInView"/>
            <seealso cref="P:Northwoods.GoWeb.GoLayer.View"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLayer.IsInDocument">
            <summary>
            Gets whether this layer belongs to a document.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoLayer.LayerCollectionContainer"/>
            <seealso cref="P:Northwoods.GoWeb.GoLayer.Document"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLayer.Document">
            <summary>
            Gets the document that this layer belongs to, or null if this is a view layer.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoLayer.LayerCollectionContainer"/>
            <seealso cref="P:Northwoods.GoWeb.GoLayer.IsInDocument"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLayer.IsInView">
            <summary>
            Gets whether this layer belongs to a view.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoLayer.LayerCollectionContainer"/>
            <seealso cref="P:Northwoods.GoWeb.GoLayer.View"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLayer.View">
            <summary>
            Gets the view that this layer belongs to, or null if this is a document layer.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoLayer.LayerCollectionContainer"/>
            <seealso cref="P:Northwoods.GoWeb.GoLayer.IsInView"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLayer.AllowView">
            <summary>
            Gets or sets whether the user can see objects in this layer.
            </summary>
            <remarks>
            A false value prevents the user from seeing objects in this layer
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            seeable by the user because the object is not visible.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanViewObjects"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Visible"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLayer.AllowPrint">
            <summary>
            Gets or sets whether the objects in this layer will be printed.
            </summary>
            <remarks>
            A false value prevents the view from printing objects in this layer.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanPrintObjects"/>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanViewObjects"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLayer.AllowSelect">
            <summary>
            Gets or sets whether the user can select objects in this layer.
            </summary>
            <remarks>
            A false value prevents the user from selecting objects in this layer
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            selectable by the user because the object or its document disallows it,
            or because the view disallows it, or because the object is not visible.
            Your code can always select objects programmatically by calling
            <c>aView.Selection.Select(obj)</c> or <c>aView.Selection.Add(obj)</c>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanSelectObjects"/>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.AllowSelect"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Selectable"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLayer.AllowMove">
            <summary>
            Gets or sets whether the user can move selected objects in this layer.
            </summary>
            <remarks>
            A false value prevents the user from moving objects in this layer
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            movable by the user because the object or its document disallows it,
            or because the view disallows it.
            Your code can always move objects programmatically by calling
            <c>obj.Position = newPos</c>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanMoveObjects"/>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.AllowMove"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Movable"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLayer.AllowCopy">
            <summary>
            Gets or sets whether the user can copy selected objects in this layer.
            </summary>
            <remarks>
            A false value prevents the user from copying objects in this layer
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            copyable by the user because the object or its document disallows it,
            or because the view disallows it.
            Your code can always copy objects programmatically by calling
            <see cref="M:Northwoods.GoWeb.GoDocument.CopyFromCollection(Northwoods.GoWeb.IGoCollection,System.Boolean,System.Boolean,System.Drawing.SizeF,Northwoods.GoWeb.GoCopyDictionary)"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanCopyObjects"/>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.AllowCopy"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Copyable"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLayer.AllowResize">
            <summary>
            Gets or sets whether the user can resize selected objects in this layer.
            </summary>
            <remarks>
            A false value prevents the user from resizing objects in this layer
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            resizable by the user because the object or its document disallows it,
            or because the view disallows it.
            Your code can always resize objects programmatically by calling
            <c>obj.Size = newSize</c> or <c>obj.Bounds = newRect</c>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanResizeObjects"/>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.AllowResize"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Resizable"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLayer.AllowReshape">
            <summary>
            Gets or sets whether the user can reshape resizable objects in this layer.
            </summary>
            <remarks>
            A false value prevents the user from reshaping objects in this layer
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            reshapable by the user because the object or its document disallows it,
            or because the view disallows it.
            Your code can always reshape objects programmatically by calling
            <c>obj.Size = newSize</c> or <c>obj.Bounds = newRect</c>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanReshapeObjects"/>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.AllowReshape"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Reshapable"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLayer.AllowDelete">
            <summary>
            Gets or sets whether the user can delete selected objects in this layer.
            </summary>
            <remarks>
            A false value prevents the user from deleting objects in this layer
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            deletable by the user because the object or its document disallows it,
            or because the view disallows it.
            Your code can always delete objects programmatically by calling
            <c>obj.Remove()</c>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanDeleteObjects"/>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.AllowDelete"/>
            <seealso cref="P:Northwoods.GoWeb.GoObject.Deletable"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLayer.AllowInsert">
            <summary>
            Gets or sets whether the user can insert objects in this layer.
            </summary>
            <remarks>
            A false value prevents the user from inserting objects in this layer
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            insertable by the user because the document or view disallows it.
            Your code can always insert objects programmatically by calling
            <c>Add(obj)</c>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanInsertObjects"/>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.AllowInsert"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLayer.AllowLink">
            <summary>
            Gets or sets whether the user can link objects in this layer.
            </summary>
            <remarks>
            A false value prevents the user from linking objects in this layer
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            linkable by the user because the document or the ports disallow it,
            or because the view disallows it.
            Your code can always link objects programmatically by calling
            <c>Document.LinksLayers.Add(newLink)</c>, where <c>newLink</c> is
            a newly created instance of a class like <see cref="T:Northwoods.GoWeb.GoLink"/> or
            <see cref="T:Northwoods.GoWeb.GoLabeledLink"/> whose <see cref="P:Northwoods.GoWeb.IGoLink.FromPort"/> and
            <see cref="P:Northwoods.GoWeb.IGoLink.ToPort"/> properties have been set to ports in
            the same document.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanLinkObjects"/>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.AllowLink"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLayer.AllowEdit">
            <summary>
            Gets or sets whether the user can edit objects in this layer.
            </summary>
            <remarks>
            A false value prevents the user from editing objects in this layer
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            editable by the user because the document or the object disallows it,
            or because the view disallows it.
            Your code can always edit objects programmatically by calling
            <c>obj.DoBeginEdit(aView)</c>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.CanEditObjects"/>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.AllowEdit"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLayer.Identifier">
            <summary>
            Gets or sets an identifier for this layer.
            </summary>
            <value>
            The default value is null.  However, the initial, default layer for
            each <see cref="T:Northwoods.GoWeb.GoLayerCollection"/> has as a default identifier an
            instance of <c>Integer</c> <c>0</c>.
            </value>
            <remarks>
            Typically identifiers will be <c>String</c>s, but could be other more
            complex serializable objects.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.MergeLayersFrom(Northwoods.GoWeb.GoDocument)"/>
        </member>
        <member name="T:Northwoods.GoWeb.GoLayerEnumerator">
            <summary>
            Iterate over the GoObjects that are in this layer.
            </summary>
            <remarks>
            Although this structure is public, it is rarely used explicitly.
            Instead you should use the <c>foreach</c> (or <c>For Each</c>) construct to
            iterate through the objects that are part of a layer.  In C#:
            <code>
            foreach (GoObject obj in aLayer) {
              . . .
            }
            </code>
            In VB.NET:
            <code>
            Dim obj As GoObject
            For Each obj in aLayer
              . . .
            Next
            </code>
            <para>
            Remember that you must not modify the layer collection, by adding,
            removing, or re-ordering its objects, while you are iterating over them.
            This structure type does not support comparison for equality.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayerEnumerator.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the GoObjects in this layer.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayerEnumerator.MoveNext">
            <summary>
            Advance the enumerator to the next GoObject.
            </summary>
            <returns>True if there is a next GoObject; false if it has finished iterating over the collection.</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayerEnumerator.Reset">
            <summary>
            Reset the enumerator to its original position.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLayerEnumerator.Current">
            <summary>
             Gets the current object in the layer.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoLayerCollection">
            <summary>
            An ordered collection of layers.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLayerCollection.InsertedLayer">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLayerCollection.RemovedLayer">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLayerCollection.MovedLayer">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoLayerCollection.ChangedDefault">
            <summary>
            This is a <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> hint.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayerCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies references to all of the layers in this collection into the given Array.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayerCollection.CopyTo(Northwoods.GoWeb.GoLayer[],System.Int32)">
            <summary>
            Copies references to all of the layers in this collection into the given array of <see cref="T:Northwoods.GoWeb.GoLayer"/>s.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayerCollection.GetEnumerator">
            <summary>
            Get an Enumerator that iterates over all of the layers of this collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayerCollection.CopyArray">
            <summary>
            Returns a newly allocated array holding references to all of the layers.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.IGoCollection.CopyArray"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayerCollection.CreateNewLayerAfter(Northwoods.GoWeb.GoLayer)">
            <summary>
            Create a new <see cref="T:Northwoods.GoWeb.GoLayer"/> positioned after (i.e. in front of) an existing layer.
            </summary>
            <param name="dest">an existing layer in this collection, or null to signify the <see cref="P:Northwoods.GoWeb.GoLayerCollection.Top"/> layer</param>
            <returns>The new <see cref="T:Northwoods.GoWeb.GoLayer"/>.</returns>
            <remarks>
            The new layer will be owned by this collection's <see cref="P:Northwoods.GoWeb.GoLayerCollection.LayerCollectionContainer"/>,
            which may be either a <see cref="T:Northwoods.GoWeb.GoDocument"/> or a <see cref="T:Northwoods.GoWeb.GoView"/>.
            The <see cref="M:Northwoods.GoWeb.IGoLayerCollectionContainer.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            call gets a <see cref="F:Northwoods.GoWeb.GoLayerCollection.InsertedLayer"/> hint.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoLayerCollection.CreateNewLayerBefore(Northwoods.GoWeb.GoLayer)"/>
            <seealso cref="M:Northwoods.GoWeb.GoLayerCollection.Remove(Northwoods.GoWeb.GoLayer)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayerCollection.CreateNewLayerBefore(Northwoods.GoWeb.GoLayer)">
            <summary>
            Create a new <see cref="T:Northwoods.GoWeb.GoLayer"/> positioned before (i.e. behind) an existing layer.
            </summary>
            <param name="dest">an existing layer in this collection, or null to signify the <see cref="P:Northwoods.GoWeb.GoLayerCollection.Bottom"/> layer</param>
            <returns>The new <see cref="T:Northwoods.GoWeb.GoLayer"/>.</returns>
            <remarks>
            The new layer will be owned by this collection's <see cref="P:Northwoods.GoWeb.GoLayerCollection.LayerCollectionContainer"/>,
            which may be either a <see cref="T:Northwoods.GoWeb.GoDocument"/> or a <see cref="T:Northwoods.GoWeb.GoView"/>.
            The <see cref="M:Northwoods.GoWeb.IGoLayerCollectionContainer.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            call gets a <see cref="F:Northwoods.GoWeb.GoLayerCollection.InsertedLayer"/> hint.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoLayerCollection.CreateNewLayerAfter(Northwoods.GoWeb.GoLayer)"/>
            <seealso cref="M:Northwoods.GoWeb.GoLayerCollection.Remove(Northwoods.GoWeb.GoLayer)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayerCollection.InsertDocumentLayerAfter(Northwoods.GoWeb.GoLayer,Northwoods.GoWeb.GoLayer)">
            <summary>
            Add a reference to a document layer into this view's collection of layers.
            </summary>
            <param name="dest">A layer already in this view's collection of layers.</param>
            <param name="doclayer">A layer owned by this view's document.</param>
            <remarks>
            By allowing a view's collection of layers to include both view layers owned by
            the view and document layers owned by the view's document, we permit each view on
            a document to display a different set of document layers, perhaps in different
            orders.
            This functionality is called by <see cref="M:Northwoods.GoWeb.GoView.InitializeLayersFromDocument"/>.
            It is an error if this collection does not belong to a <see cref="T:Northwoods.GoWeb.GoView"/>,
            or if <paramref name="doclayer"/> does not belong to this view's <see cref="P:Northwoods.GoWeb.GoView.Document"/>.
            The document layer continues to be owned by the document; the view just acquires
            a shared reference to that layer.
            The <see cref="M:Northwoods.GoWeb.IGoLayerCollectionContainer.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            call gets a <see cref="F:Northwoods.GoWeb.GoLayerCollection.InsertedLayer"/> hint.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoLayerCollection.InsertDocumentLayerBefore(Northwoods.GoWeb.GoLayer,Northwoods.GoWeb.GoLayer)"/>
            <seealso cref="M:Northwoods.GoWeb.GoLayerCollection.CreateNewLayerAfter(Northwoods.GoWeb.GoLayer)"/>
            <seealso cref="M:Northwoods.GoWeb.GoLayerCollection.Remove(Northwoods.GoWeb.GoLayer)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayerCollection.InsertDocumentLayerBefore(Northwoods.GoWeb.GoLayer,Northwoods.GoWeb.GoLayer)">
            <summary>
            Add a reference to a document layer into this view's collection of layers.
            </summary>
            <param name="dest">A layer already in this view's collection of layers.</param>
            <param name="doclayer">A layer owned by this view's document.</param>
            <remarks>
            It is an error if this collection does not belong to a <see cref="T:Northwoods.GoWeb.GoView"/>,
            or if <paramref name="doclayer"/> does not belong to this view's <see cref="P:Northwoods.GoWeb.GoView.Document"/>.
            The document layer continues to be owned by the document; the view just acquires
            a shared reference to that layer.
            The <see cref="M:Northwoods.GoWeb.IGoLayerCollectionContainer.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            call gets a <see cref="F:Northwoods.GoWeb.GoLayerCollection.InsertedLayer"/> hint.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoLayerCollection.InsertDocumentLayerAfter(Northwoods.GoWeb.GoLayer,Northwoods.GoWeb.GoLayer)"/>
            <seealso cref="M:Northwoods.GoWeb.GoLayerCollection.CreateNewLayerBefore(Northwoods.GoWeb.GoLayer)"/>
            <seealso cref="M:Northwoods.GoWeb.GoLayerCollection.Remove(Northwoods.GoWeb.GoLayer)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayerCollection.Remove(Northwoods.GoWeb.GoLayer)">
            <summary>
            Remove a layer from this collection.
            </summary>
            <param name="layer"></param>
            <remarks>
            If the layer is owned by this collection's container, this method
            calls <see cref="M:Northwoods.GoWeb.GoLayer.Clear"/> on <paramref name="layer"/>.
            The <see cref="M:Northwoods.GoWeb.IGoLayerCollectionContainer.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            call gets a <see cref="F:Northwoods.GoWeb.GoLayerCollection.RemovedLayer"/> hint.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayerCollection.MoveBefore(Northwoods.GoWeb.GoLayer,Northwoods.GoWeb.GoLayer)">
            <summary>
            Reorder the layers in this collection by moving a layer to be immediately
            before (i.e. behind) another layer.
            </summary>
            <param name="dest"></param>
            <param name="moving"></param>
            <remarks>
            Both layer arguments must be present in this collection.
            The <see cref="M:Northwoods.GoWeb.IGoLayerCollectionContainer.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            call gets a <see cref="F:Northwoods.GoWeb.GoLayerCollection.MovedLayer"/> hint.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayerCollection.MoveAfter(Northwoods.GoWeb.GoLayer,Northwoods.GoWeb.GoLayer)">
            <summary>
            Reorder the layers in this collection by moving a layer to be immediately
            after (i.e. in front of) another layer.
            </summary>
            <param name="dest"></param>
            <param name="moving"></param>
            <remarks>
            Both layer arguments must be present in this collection.
            The <see cref="M:Northwoods.GoWeb.IGoLayerCollectionContainer.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            call gets a <see cref="F:Northwoods.GoWeb.GoLayerCollection.MovedLayer"/> hint.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayerCollection.NextLayer(Northwoods.GoWeb.GoLayer,System.Int32)">
            <summary>
            Return the next layer in the Z-order, given a layer.
            </summary>
            <param name="layer">a <see cref="T:Northwoods.GoWeb.GoLayer"/> that is in this layer collection</param>
            <param name="relativeZorder">
            a value of <c>1</c> returns the next layer (just in front of <paramref name="layer"/>);
            a value of <c>-1</c> returns the previous layer (just behind <paramref name="layer"/>)
            </param>
            <returns>
            null if <paramref name="layer"/> is null or does not belong to this layer collection
            or if there is no layer at the Z-order position indicated by <paramref name="relativeZorder"/>.
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayerCollection.Find(System.Object)">
            <summary>
            Search for a layer with a particular identifier.
            </summary>
            <param name="identifier"></param>
            <returns></returns>
            <seealso cref="P:Northwoods.GoWeb.GoLayer.Identifier"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayerCollection.SortByZOrder(Northwoods.GoWeb.GoObject[])">
            <summary>
            Sort an <c>Array</c> of <see cref="T:Northwoods.GoWeb.GoObject"/>s by their Z-order position in these layers.
            </summary>
            <param name="a">an array of <see cref="T:Northwoods.GoWeb.GoObject"/>s in layers of this layer collection; this array is modified</param>
            <remarks>
            <para>
            This method does not modify the order of any objects in any layer--it simply
            modifies the argument array by sorting the objects by their current Z-order in these layers.
            For example, if you have a few selected objects, you can use this method to find the
            selected object which is in front of the other selected objects.  That would be the last
            object in the array after calling this method.
            </para>
            <para>
            If one or more elements of the argument array <paramref name="a"/> are not
            <see cref="T:Northwoods.GoWeb.GoObject"/>s that belong to one of these layers, the resulting sort order is indeterminate.
            In many circumstances you can easily create an array of <c>GoObject</c>s by calling
            <see cref="T:Northwoods.GoWeb.IGoCollection"/>.<see cref="M:Northwoods.GoWeb.IGoCollection.CopyArray"/>.
            </para>
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoLayerCollection.SortByZOrder(Northwoods.GoWeb.GoCollection)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayerCollection.SortByZOrder(Northwoods.GoWeb.GoCollection)">
            <summary>
            Modify the order of the objects in the given <see cref="T:Northwoods.GoWeb.GoCollection"/> <paramref name="c"/>
            to be in their Z-order position in the layers of this collection.
            </summary>
            <param name="c">a <see cref="T:Northwoods.GoWeb.GoCollection"/> that will be modified</param>
            <remarks>See the remarks for <see cref="M:Northwoods.GoWeb.GoLayerCollection.SortByZOrder(Northwoods.GoWeb.GoObject[])"/>.</remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayerCollection.GetObjectEnumerator(System.Boolean)">
            <summary>
            Get an Enumerator that iterates over all of the objects in all of the layers
            in this collection, in the desired order.
            </summary>
            <param name="forward"></param>
            <returns></returns>
        </member>
        <member name="P:Northwoods.GoWeb.GoLayerCollection.Count">
            <summary>
            Get the number of layers.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLayerCollection.IsSynchronized">
            <summary>
            Gets whether this collection of layers is thread-safe.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLayerCollection.SyncRoot">
            <summary>
            Gets an object to be used for synchronizing access to this collection.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLayerCollection.Backwards">
            <summary>
            Gets an enumerable whose enumerator will iterate over the layers in reverse order.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.IGoCollection.Backwards"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLayerCollection.LayerCollectionContainer">
            <summary>
            Gets the document or view to which this layer collection belongs.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoLayerCollection.Document"/>
            <seealso cref="P:Northwoods.GoWeb.GoLayerCollection.View"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLayerCollection.Document">
            <summary>
            Gets the document that this layer collection belongs to, or null if this is in a view.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoLayerCollection.LayerCollectionContainer"/>
            <seealso cref="P:Northwoods.GoWeb.GoLayerCollection.View"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLayerCollection.View">
            <summary>
            Gets the view that this layer collection belongs to, or null if this is in a document.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoLayerCollection.LayerCollectionContainer"/>
            <seealso cref="P:Northwoods.GoWeb.GoLayerCollection.Document"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoLayerCollection.Bottom">
            <summary>
            Gets the first layer, normally drawn underneath all other layers.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLayerCollection.Top">
            <summary>
            Gets the last layer, normally drawn on top of all other layers.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLayerCollection.Default">
            <summary>
            Gets or sets the default layer for adding objects.
            </summary>
            <value>
            The <see cref="T:Northwoods.GoWeb.GoLayer"/> must belong to the same <see cref="P:Northwoods.GoWeb.GoLayerCollection.LayerCollectionContainer"/>
            and must not be null.
            Initially this value is the first and only layer, created when this collection
            was initialized.
            </value>
        </member>
        <member name="T:Northwoods.GoWeb.GoLayerCollectionEnumerator">
            <summary>
            Iterate over the layers in this collection, either forwards or backwards.
            </summary>
            <remarks>
            Although this structure is public, it is rarely used explicitly.
            Instead you should use the <c>foreach</c> (or <c>For Each</c>) construct to
            iterate through the layers that are part of a layer collection.  In C#:
            <code>
            foreach (GoLayer layer in aDocument.Layers) {
              . . .
            }
            </code>
            In VB.NET:
            <code>
            Dim layer As GoLayer
            For Each layer in aDocument.Layers
              . . .
            Next
            </code>
            This structure type does not support comparison for equality.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayerCollectionEnumerator.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the GoLayers in this collection.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayerCollectionEnumerator.MoveNext">
            <summary>
            Advance the enumerator to the next GoLayer.
            </summary>
            <returns>True if there is a next GoLayer; false if it has finished iterating over the collection.</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayerCollectionEnumerator.Reset">
            <summary>
            Reset the enumerator to its original position.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLayerCollectionEnumerator.Current">
            <summary>
             Gets the current layer in the collection.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoLayerCollectionObjectEnumerator">
            <summary>
            Iterate over all of the GoObjects in all of the layers, either forwards or backwards.
            </summary>
            <remarks>
            Although this structure is public, it is rarely used explicitly.
            Instead you should use the <c>foreach</c> (or <c>For Each</c>) construct to
            iterate through the objects that are part of a document.  In C#:
            <code>
            foreach (GoObject obj in aDocument) {
              . . .
            }
            </code>
            In VB.NET:
            <code>
            Dim obj As GoObject
            For Each obj in aDocument
              . . .
            Next
            </code>
            <para>
            Remember that you must not modify any layer collection, by adding,
            removing, or re-ordering any objects, while you are iterating over them.
            This structure type does not support comparison for equality.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayerCollectionObjectEnumerator.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the all of the GoObjects in all of the layers.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayerCollectionObjectEnumerator.MoveNext">
            <summary>
            Advance the enumerator to the next GoObject in the whole collection of layers of GoObjects.
            </summary>
            <returns>True if there is a next GoObject; false if it has finished iterating over the collection.</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoLayerCollectionObjectEnumerator.Reset">
            <summary>
            Reset the enumerator to its original position.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoLayerCollectionObjectEnumerator.Current">
            <summary>
             Gets the current object in the collection of layers.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoObjectEnterLeaveEventHandler">
            <summary>
            Represents methods that handle <see cref="T:Northwoods.GoWeb.GoObjectEnterLeaveEventArgs"/>.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoObjectEnterLeaveEventArgs">
            <summary>
            Holds information for the <see cref="T:Northwoods.GoWeb.GoView"/> event <see cref="E:Northwoods.GoWeb.GoView.ObjectEnterLeave"/>
            that occurs when a mouse moves onto or out of a <see cref="T:Northwoods.GoWeb.GoObject"/>.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.GoWeb.GoObjectEnterLeaveEventArgs.From"/> property refers to the object that the mouse had been over.
            The <see cref="P:Northwoods.GoWeb.GoObjectEnterLeaveEventArgs.To"/> property refers to the object that the mouse is now over.
            Either property may be null, if the mouse had been, or now is, over the view's background.
            </remarks>
            <seealso cref="T:Northwoods.GoWeb.GoInputEventArgs"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObjectEnterLeaveEventArgs.#ctor(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoInputEventArgs)">
            <summary>
            Create a <see cref="T:Northwoods.GoWeb.GoObjectEnterLeaveEventArgs"/> that knows about an input event
            involving a <see cref="T:Northwoods.GoWeb.GoObject"/>.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="evt"></param>
        </member>
        <member name="P:Northwoods.GoWeb.GoObjectEnterLeaveEventArgs.From">
            <summary>
            Gets the <see cref="T:Northwoods.GoWeb.GoObject"/> that the mouse had been over.
            </summary>
            <value>
            If this value is null, the mouse had not been over any object, but had been in the view's background.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoObjectEnterLeaveEventArgs.To">
            <summary>
            Gets the <see cref="T:Northwoods.GoWeb.GoObject"/> that the mouse is now over.
            </summary>
            <value>
            If this value is null, the mouse is no longer over an object, but is in the view's background.
            </value>
        </member>
        <member name="T:Northwoods.GoWeb.GoObjectEventHandler">
            <summary>
            Represents methods that handle <see cref="T:Northwoods.GoWeb.GoObjectEventArgs"/>.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoObjectEventArgs">
            <summary>
            Holds information for the <see cref="T:Northwoods.GoWeb.GoView"/> events involving both
            a <see cref="P:Northwoods.GoWeb.GoObjectEventArgs.GoObject"/> and some input event.
            </summary>
            <remarks>
            <para>
            This class knows about the <see cref="P:Northwoods.GoWeb.GoObjectEventArgs.GoObject"/>
            that got clicked as well as about how and where the click happened.
            Such <see cref="T:Northwoods.GoWeb.GoView"/> events include:
            <see cref="E:Northwoods.GoWeb.GoView.ObjectSingleClicked"/>,
            <see cref="E:Northwoods.GoWeb.GoView.ObjectDoubleClicked"/>, 
            <see cref="E:Northwoods.GoWeb.GoView.ObjectContextClicked"/>,
            and <c>GoView.ObjectHover</c> (in full Windows Forms).
            </para>
            <para>
            The <see cref="E:Northwoods.GoWeb.GoView.ObjectSelectionDropReject"/> event also uses this event argument class.
            Those event handlers may set the <see cref="P:Northwoods.GoWeb.GoInputEventArgs.InputState"/> property
            to be <see cref="T:Northwoods.GoWeb.GoInputState"/>.<see cref="F:Northwoods.GoWeb.GoInputState.Cancel"/>.
            <see cref="P:Northwoods.GoWeb.GoObjectEventArgs.GoObject"/> may also be null in this case.
            </para>
            </remarks>
            <seealso cref="T:Northwoods.GoWeb.GoInputEventArgs"/>
            <seealso cref="T:Northwoods.GoWeb.GoSelectionEventArgs"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoObjectEventArgs.#ctor(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoInputEventArgs)">
            <summary>
            Create a <see cref="T:Northwoods.GoWeb.GoObjectEventArgs"/> that knows about an input event
            involving a <see cref="P:Northwoods.GoWeb.GoObjectEventArgs.GoObject"/>.
            </summary>
            <param name="obj"></param>
            <param name="evt"></param>
        </member>
        <member name="P:Northwoods.GoWeb.GoObjectEventArgs.GoObject">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoObjectEventArgs.GoObject"/> associated with this event.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoOverview">
            <summary>
            Provide a reduced-scale view of a document, showing the size and position of
            another view's viewport onto that same document, and support panning and
            zooming of that observed view.
            </summary>
            <remarks>
            <para>
            The user can drag around the rectangle representing the observed view's
            viewport in order to scroll it and can resize it to change the scale of
            the observed view.  Clicking will move the observed view's viewport to
            that location in the view's document.  Doing a rubber-band drag will change
            the observed view's position and scale to match the box that was drawn,
            because by default it replaces the standard <see cref="T:Northwoods.GoWeb.GoToolRubberBanding"/>
            tool with an instance of <see cref="T:Northwoods.GoWeb.GoToolZooming"/>.
            </para>
            <para>
            The rectangle displaying the <see cref="P:Northwoods.GoWeb.GoOverview.Observed"/> <see cref="T:Northwoods.GoWeb.GoView"/>'s
            <see cref="P:Northwoods.GoWeb.GoView.DocExtent"/> is implemented by a <see cref="T:Northwoods.GoWeb.GoOverviewRectangle"/>,
            created by the <see cref="M:Northwoods.GoWeb.GoOverview.CreateOverviewRectangle(Northwoods.GoWeb.GoView)"/> method, and
            accessible by the <see cref="P:Northwoods.GoWeb.GoOverview.OverviewRect"/> property.
            </para>
            <para>
            Most of the document-modifying-ability properties have been turned off:
            <see cref="P:Northwoods.GoWeb.GoView.AllowCopy"/>, <see cref="P:Northwoods.GoWeb.GoView.AllowDelete"/>,
            <see cref="P:Northwoods.GoWeb.GoView.AllowInsert"/>, <see cref="P:Northwoods.GoWeb.GoView.AllowLink"/>,
            <see cref="P:Northwoods.GoWeb.GoView.AllowEdit"/>, <see cref="P:Northwoods.GoWeb.GoView.AllowDragOut"/>,
            and <b>AllowDrop</b>.
            The user cannot pick any document object.
            The only pickable object is the <see cref="P:Northwoods.GoWeb.GoOverview.OverviewRect"/>, which is in
            this overview's default layer.
            Grids are also disabled for this view.
            </para>
            </remarks>
        </member>
        <member name="T:Northwoods.GoWeb.GoView">
            <summary>
            GoView is a Control that provides display and editing of abstract graphs or
            networks of 2D graphical objects.
            </summary>
            <remarks>
            Read the User Guide and FAQ for more details.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.#ctor">
            <summary>
            Create a GoView displaying an empty GoDocument.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.#ctor(Northwoods.GoWeb.GoDocument)">
            <summary>
            Create a GoView displaying the contents of a given GoDocument.
            </summary>
            <param name="doc">The <see cref="T:Northwoods.GoWeb.GoDocument"/> to display.</param>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.CreateView">
            <summary>
            Initialize this view by creating its <see cref="T:Northwoods.GoWeb.GoLayerCollection"/>,
            by calling <see cref="M:Northwoods.GoWeb.GoView.CreateDocument"/>, <see cref="M:Northwoods.GoWeb.GoView.CreateGrid"/>,
            <see cref="M:Northwoods.GoWeb.GoView.CreateSelection"/> and <see cref="M:Northwoods.GoWeb.GoView.CreateDefaultTool"/>,
            and by initializing its default appearance and behavior.
            </summary>
            <remarks>
            This will be called by <see cref="M:Northwoods.GoWeb.GoView.OnLoad(System.EventArgs)"/> when a view with this
            ID is not found in the <see cref="M:Northwoods.GoWeb.GoView.GetSessionViewsTable"/>,
            normally because either it is a new session or the session has timed out.
            If you override this method, be sure to call the base class method first.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.LoadView(Northwoods.GoWeb.GoView)"/>
            <seealso cref="M:Northwoods.GoWeb.GoView.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.Dispose">
            <summary>
            Free up any resources that this view caches.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.UpdateExtent">
            <summary>
            This method is called when this GoView's Size (or Width or Height) is changed,
            to allow the view to scroll or rescale itself.
            </summary>
            <remarks>
            <para>
            The behavior depends on the value of <see cref="P:Northwoods.GoWeb.GoView.SheetStyle"/>
            and perhaps on the size of the <see cref="P:Northwoods.GoWeb.GoView.Sheet"/>.
            When the <see cref="P:Northwoods.GoWeb.GoView.SheetStyle"/> is <see cref="T:Northwoods.GoWeb.GoViewSheetStyle"/>.<see cref="F:Northwoods.GoWeb.GoViewSheetStyle.WholeSheet"/>,
            the <see cref="P:Northwoods.GoWeb.GoView.DocScale"/> and <see cref="P:Northwoods.GoWeb.GoView.DocPosition"/> are
            set to have all of the <see cref="P:Northwoods.GoWeb.GoView.Sheet"/> be visible in the view.
            A <see cref="P:Northwoods.GoWeb.GoView.SheetStyle"/> of <see cref="F:Northwoods.GoWeb.GoViewSheetStyle.SheetWidth"/>
            causes the scale to be set so that the full width of the <see cref="P:Northwoods.GoWeb.GoView.Sheet"/> is visible.
            A <see cref="P:Northwoods.GoWeb.GoView.SheetStyle"/> of <see cref="F:Northwoods.GoWeb.GoViewSheetStyle.SheetHeight"/>
            causes the scale to be set so that the full height of the <see cref="P:Northwoods.GoWeb.GoView.Sheet"/> is visible.
            A <see cref="P:Northwoods.GoWeb.GoView.SheetStyle"/> of <see cref="F:Northwoods.GoWeb.GoViewSheetStyle.Sheet"/>
            does not cause the scale to be changed.
            Finally, when <see cref="P:Northwoods.GoWeb.GoView.SheetStyle"/> is <see cref="F:Northwoods.GoWeb.GoViewSheetStyle.None"/>,
            or when there is no <see cref="P:Northwoods.GoWeb.GoView.Sheet"/>, this method does nothing.
            The <see cref="P:Northwoods.GoWeb.GoView.Sheet"/>'s <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/> are needed to decide how
            to scroll and scale the view, but the <see cref="P:Northwoods.GoWeb.GoView.Sheet"/> need not be
            <see cref="P:Northwoods.GoWeb.GoObject.Visible"/>.
            </para>
            <para>
            For all of the <see cref="P:Northwoods.GoWeb.GoView.SheetStyle"/> values other than <see cref="F:Northwoods.GoWeb.GoViewSheetStyle.None"/>,
            this method calls <see cref="M:Northwoods.GoWeb.GoView.RescaleWithCenter(System.Single,System.Drawing.PointF)"/> to try to keep centered
            the document point that had been in the center of the view.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.CreateDocument">
            <summary>
            This method is called by the constructor to create a document for this view.
            </summary>
            <returns>A <see cref="T:Northwoods.GoWeb.GoDocument"/></returns>
            <remarks>
            By default this just creates a new instance of <see cref="T:Northwoods.GoWeb.GoDocument"/>.
            Often you will want to override this method so that creating a
            particular kind of view will automatically create the right kind
            of document.
            This method is not called when the constructor is passed a non-null
            <see cref="T:Northwoods.GoWeb.GoDocument"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.InitializeLayersFromDocument">
            <summary>
            This method is responsible for setting up the view's collection of layers
            to include all of the document's layers, in order, followed by the
            view's default layer.
            </summary>
            <remarks>
            This removes all old document layers and clears out all view layers
            from this view's <see cref="T:Northwoods.GoWeb.GoLayerCollection"/>, adds all of the
            new document's layers, and leaves the default view layer in front of all layers.
            Any <see cref="P:Northwoods.GoWeb.GoView.BackgroundGrid"/> or <see cref="P:Northwoods.GoWeb.GoView.Sheet"/>
            is kept in the <see cref="P:Northwoods.GoWeb.GoView.BackgroundLayer"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.ConvertViewToDoc(System.Drawing.Point)">
            <summary>
            Given a point in this view, calculate the corresponding point in the view's document.
            </summary>
            <param name="p">
            A <c>Point</c> in view coordinates.
            </param>
            <returns>
            The corresponding <c>PointF</c> in document coordinates.
            </returns>
            <remarks>
            This method takes this view's current position in the document, and the current
            view scale, into account when computing the transformation from view coordinates
            to document coordinates.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.ConvertDocToView(System.Drawing.PointF)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.ConvertViewToDoc(System.Drawing.Size)">
            <summary>
            Given a size in this view, calculate the corresponding size in the view's document.
            </summary>
            <param name="s">
            A <c>Size</c> in view coordinates.
            </param>
            <returns>
            The corresponding <c>SizeF</c> in document coordinates.
            </returns>
            <remarks>
            This method takes this view's current view scale into account when computing the
            transformation from view coordinates to document coordinates.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.ConvertDocToView(System.Drawing.SizeF)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.ConvertViewToDoc(System.Drawing.Rectangle)">
            <summary>
            Given a rectangle in this view, calculate the corresponding rectangle in the view's document.
            </summary>
            <param name="r">
            A <c>Rectangle</c> in view coordinates.
            </param>
            <returns>
            The corresponding <c>RectangleF</c> in document coordinates.
            </returns>
            <remarks>
            This method takes this view's current position in the document, and the current
            view scale, into account when computing the transformation from view coordinates
            to document coordinates.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.ConvertDocToView(System.Drawing.RectangleF)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.ConvertDocToView(System.Drawing.PointF)">
            <summary>
            Given a point in this document, calculate the corresponding point in this view.
            </summary>
            <param name="p">
            A <c>PointF</c> in document coordinates.
            </param>
            <returns>
            The corresponding <c>Point</c> in view coordinates.
            </returns>
            <remarks>
            This method takes this view's current position in the document, and the current
            view scale, into account when computing the transformation from document coordinates
            to view coordinates.
            Note that because documents are often larger than the views,
            many object positions will often have corresponding view positions outside the
            view's client area.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.ConvertViewToDoc(System.Drawing.Point)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.ConvertDocToView(System.Drawing.SizeF)">
            <summary>
            Given a size in this document, calculate the corresponding size in this view.
            </summary>
            <param name="s">
            A <c>SizeF</c> in document coordinates.
            </param>
            <returns>
            The corresponding <c>Size</c> in view coordinates.
            </returns>
            <remarks>
            This method takes this view's current view scale into account when computing the
            transformation from document coordinates to view coordinates.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.ConvertViewToDoc(System.Drawing.Size)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.ConvertDocToView(System.Drawing.RectangleF)">
            <summary>
            Given a rectangle in this document, calculate the corresponding rectangle in this view.
            </summary>
            <param name="r">
            A <c>RectangleF</c> in document coordinates.
            </param>
            <returns>
            The corresponding <c>Rectangle</c> in view coordinates.
            </returns>
            <remarks>
            This method takes this view's current position in the document, and the current
            view scale, into account when computing the transformation from document coordinates
            to view coordinates.
            Note that because documents are often larger than the views,
            many object positions will often have corresponding view positions outside the
            view's client area.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.ConvertViewToDoc(System.Drawing.Rectangle)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.LimitDocPosition(System.Drawing.PointF)">
            <summary>
            This method is called when setting the <see cref="P:Northwoods.GoWeb.GoView.DocPosition"/> property to make
            sure the view only takes reasonable, desired positions.
            </summary>
            <param name="p"></param>
            <returns></returns>
            <remarks>
            By default this method tries to keep the view within the document.
            However, when the <see cref="P:Northwoods.GoWeb.GoView.SheetStyle"/> is not <see cref="F:Northwoods.GoWeb.GoViewSheetStyle.None"/>,
            there are no limits--the <see cref="P:Northwoods.GoWeb.GoView.DocumentTopLeft"/> and
            <see cref="P:Northwoods.GoWeb.GoView.DocumentSize"/> properties automatically adjust themselves
            to accomodate viewing any part of the document or the <see cref="P:Northwoods.GoWeb.GoView.Sheet"/>
            at any <see cref="P:Northwoods.GoWeb.GoView.DocScale"/> given the size of this view control.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.ScrollRectangleToVisible(System.Drawing.RectangleF)">
            <summary>
            Change this view's DocPosition so that the given rectangle is visible.
            </summary>
            <param name="contentRect">the area, in document coordinates, to try to scroll into view</param>
            <remarks>
            Usually you call this method with the bounds of an object, to make
            that object visible to the user and not scrolled off somewhere.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.ScrollPage(System.Single,System.Single)"/>
            <seealso cref="M:Northwoods.GoWeb.GoView.ScrollLine(System.Single,System.Single)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.ScrollPage(System.Single,System.Single)">
            <summary>
            Programmatically scroll the view by a "page" (a large change).
            </summary>
            <param name="dx">the number of pages to change the X coordinate of the <see cref="P:Northwoods.GoWeb.GoView.DocPosition"/>; positive increases, negative decreases</param>
            <param name="dy">the number of pages to change the Y coordinate of the <see cref="P:Northwoods.GoWeb.GoView.DocPosition"/>; positive increases, negative decreases</param>
            <remarks>
            This method does not depend on the existence of any scrollbars,
            but does depend on the values of <see cref="P:Northwoods.GoWeb.GoView.DocExtentSize"/> and <see cref="P:Northwoods.GoWeb.GoView.ScrollSmallChange"/> to determine
            a new value for <see cref="P:Northwoods.GoWeb.GoView.DocPosition"/> that is a "line" less than one full "page" away from the old position
            times the factor provided by the parameters for each direction.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.ScrollLine(System.Single,System.Single)"/>
            <seealso cref="M:Northwoods.GoWeb.GoView.ScrollRectangleToVisible(System.Drawing.RectangleF)"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.DisableKeys"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.ScrollLine(System.Single,System.Single)">
            <summary>
            Programmatically scroll the view by a "line" (a small change).
            </summary>
            <param name="dx">the number of lines to change the X coordinate of the <see cref="P:Northwoods.GoWeb.GoView.DocPosition"/>; positive increases, negative decreases</param>
            <param name="dy">the number of lines to change the Y coordinate of the <see cref="P:Northwoods.GoWeb.GoView.DocPosition"/>; positive increases, negative decreases</param>
            <remarks>
            This method does not depend on the existence of any scrollbars,
            but does depend on the value of <see cref="P:Northwoods.GoWeb.GoView.ScrollSmallChange"/> to determine
            a new value for <see cref="P:Northwoods.GoWeb.GoView.DocPosition"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.ScrollPage(System.Single,System.Single)"/>
            <seealso cref="M:Northwoods.GoWeb.GoView.ScrollRectangleToVisible(System.Drawing.RectangleF)"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.DisableKeys"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.CanScroll(System.Boolean,System.Boolean)">
            <summary>
            Determine if there is room for the view to be scrolled in a given direction.
            </summary>
            <param name="down"></param>
            <param name="vertical"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.LimitDocScale(System.Single)">
            <summary>
            This method is called when setting the DocScale property to make
            sure that the view only displays objects at a reasonable scale.
            </summary>
            <param name="s"></param>
            <returns></returns>
            <remarks>
            By default this limits the value to between 0.01f and 10.0f.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.ComputeDocumentBounds">
            <summary>
            Determine the actual extent of all of the objects in the document
            as seen by this view.
            </summary>
            <returns>A <c>RectangleF</c> in document coordinates</returns>
            <remarks>
            This is called by methods such as <see cref="M:Northwoods.GoWeb.GoView.RescaleToFit"/>, that
            want to know how much area is taken up by visible document objects.
            <see cref="P:Northwoods.GoWeb.GoView.DocumentSize"/> is different in that that property is
            likely to be less changeable as objects are moved or deleted.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.RescaleToFit">
            <summary>
            Change the <see cref="P:Northwoods.GoWeb.GoView.DocScale"/> and <see cref="P:Northwoods.GoWeb.GoView.DocPosition"/> properties
            so that all document objects are visible.
            </summary>
            <remarks>
            <para>
            This calls <see cref="M:Northwoods.GoWeb.GoView.ComputeDocumentBounds"/> to determine the size and position of
            this view's document.
            If the document is very large, the <see cref="M:Northwoods.GoWeb.GoView.LimitDocScale(System.Single)"/>
            method might prevent the whole document from fitting.
            <see cref="M:Northwoods.GoWeb.GoView.LimitDocPosition(System.Drawing.PointF)"/> may similarly prevent the whole document from fitting.
            </para>
            <para>
            Calling this method will not necessarily cause the scroll bars to
            disappear, because the scroll bars normally show the extent of the
            document, which is normally greater than the extent of the actual
            objects in the document.
            This method does not modify the size and position of the view's document.
            Depending on your application, you may wish to shrink the size of the document
            in order to cause the scroll bars to disappear.
            <code>
              goView1.Document.Bounds = goView1.ComputeDocumentBounds();
              goView1.RescaleToFit();
            </code>
            </para>
            <para>
            The value of the new <see cref="P:Northwoods.GoWeb.GoView.DocScale"/> will not be larger than one.
            In other words, if the document is small and thus fits easily in the view,
            it will not be scaled up beyond normal to expand to fit the view.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.RescaleWithCenter(System.Single,System.Drawing.PointF)">
            <summary>
            Change the <see cref="P:Northwoods.GoWeb.GoView.DocScale"/>, and adjust the <see cref="P:Northwoods.GoWeb.GoView.DocPosition"/> so that
            the <paramref name="docPt"/> remains at the center of the view.
            </summary>
            <param name="newscale">the new value for <see cref="P:Northwoods.GoWeb.GoView.DocScale"/></param>
            <param name="docPt">a PointF in document coordinates</param>
            <remarks>
            <para>
            The given <paramref name="docPt"/> may not actually remain at the center
            of the view if the <see cref="M:Northwoods.GoWeb.GoView.LimitDocPosition(System.Drawing.PointF)"/> method limits where the
            view can be scrolled to.
            </para>
            <para>
            <see cref="M:Northwoods.GoWeb.GoView.UpdateExtent"/> calls this method, even if the scale is not changing.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.ComputeAutoPanDocPosition(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            This method is called to determine the next position in the document for this view,
            given a point at which the user is holding the mouse during a pan operation.
            </summary>
            <param name="originPnt">
            The original panning point, in view coordinates.
            </param>
            <param name="viewPnt">
            The mouse point, in view coordinates.
            </param>
            <remarks>
            This uses the <see cref="P:Northwoods.GoWeb.GoView.ScrollSmallChange"/> property to calculate a new <see cref="P:Northwoods.GoWeb.GoView.DocPosition"/>.
            When the current mouse point is within the <see cref="P:Northwoods.GoWeb.GoView.AutoPanRegion"/> width or height
            distance from the <paramref name="originPnt"/>, no scrolling occurs.
            When the current mouse point is outside of this region, between the <see cref="P:Northwoods.GoWeb.GoView.AutoPanRegion"/>
            distance (width or height) and three times that distance, automatic scrolling proceeds
            at the smallest scrolling increment, <see cref="P:Northwoods.GoWeb.GoView.ScrollSmallChange"/>.
            The farther away the <paramref name="viewPnt"/> is from the <paramref name="originPnt"/>, the larger a multiple of
            the <see cref="P:Northwoods.GoWeb.GoView.ScrollSmallChange"/> is used as a scroll step in that direction.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.CanSelectObjects">
            <summary>
            Called to see if the user can select objects in this view for this document.
            </summary>
            <remarks>
            This just returns <c>AllowSelect &amp;&amp; Document.CanSelectObjects</c>.
            This predicate is used by methods such as <see cref="M:Northwoods.GoWeb.GoView.SelectAll"/> and
            <see cref="M:Northwoods.GoWeb.GoView.SelectInRectangle(System.Drawing.RectangleF)"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoView.AllowSelect"/>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.CanSelectObjects"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.CanMoveObjects">
            <summary>
            Called to see if the user can move objects in this view for this document.
            </summary>
            <remarks>
            This just returns <c>AllowMove &amp;&amp; Document.CanMoveObjects</c>.
            This predicate is used by methods such as <see cref="M:Northwoods.GoWeb.GoView.MoveSelection(Northwoods.GoWeb.GoSelection,System.Drawing.SizeF,System.Boolean)"/> and
            by <see cref="T:Northwoods.GoWeb.GoToolDragging"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoView.AllowMove"/>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.CanMoveObjects"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.CanCopyObjects">
            <summary>
            Called to see if the user can copy objects in this view for this document.
            </summary>
            <remarks>
            This just returns <c>AllowCopy &amp;&amp; Document.CanCopyObjects</c>.
            This predicate is used by methods such as <see cref="M:Northwoods.GoWeb.GoView.CopySelection(Northwoods.GoWeb.GoSelection,System.Drawing.SizeF,System.Boolean)"/>
            and <see cref="M:Northwoods.GoWeb.GoView.EditCopy"/> and by <see cref="T:Northwoods.GoWeb.GoToolDragging"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoView.AllowCopy"/>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.CanCopyObjects"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.CanResizeObjects">
            <summary>
            Called to see if the user can resize objects in this view for this document.
            </summary>
            <remarks>
            This just returns <c>AllowResize &amp;&amp; Document.CanResizeObjects</c>.
            This predicate is used by <see cref="T:Northwoods.GoWeb.GoToolResizing"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoView.AllowResize"/>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.CanResizeObjects"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.CanReshapeObjects">
            <summary>
            Called to see if the user can reshape objects in this view for this document.
            </summary>
            <remarks>
            This just returns <c>AllowReshape &amp;&amp; Document.CanReshapeObjects</c>.
            <seealso cref="P:Northwoods.GoWeb.GoView.AllowReshape"/>
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.CanReshapeObjects"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.CanDeleteObjects">
            <summary>
            Called to see if the user can delete objects in this view for this document.
            </summary>
            <remarks>
            This just returns <c>AllowDelete &amp;&amp; Document.CanDeleteObjects</c>.
            This predicate is used by methods such as <see cref="M:Northwoods.GoWeb.GoView.DeleteSelection(Northwoods.GoWeb.GoSelection)"/> and
            <see cref="M:Northwoods.GoWeb.GoView.EditCut"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoView.AllowDelete"/>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.CanDeleteObjects"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.CanInsertObjects">
            <summary>
            Called to see if the user can insert objects into this view for this document.
            </summary>
            <remarks>
            This just returns <c>AllowInsert &amp;&amp; Document.CanInsertObjects</c>.
            This predicate is used by methods such as <see cref="M:Northwoods.GoWeb.GoView.EditPaste"/> and by
            <see cref="T:Northwoods.GoWeb.GoToolDragging"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoView.AllowInsert"/>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.CanInsertObjects"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.CanLinkObjects">
            <summary>
            Called to see if the user can link objects together in this view for this document.
            </summary>
            <remarks>
            This just returns <c>AllowLink &amp;&amp; Document.CanLinkObjects</c>.
            This predicate is used by <see cref="T:Northwoods.GoWeb.GoToolLinking"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoView.AllowLink"/>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.CanLinkObjects"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.CanEditObjects">
            <summary>
            Called to see if the user can edit objects in this view for this document.
            </summary>
            <remarks>
            This just returns <c>AllowEdit &amp;&amp; Document.CanEditObjects</c>.
            This predicate is used by methods such as <see cref="T:Northwoods.GoWeb.GoText"/>'s <see cref="M:Northwoods.GoWeb.GoText.OnSingleClick(Northwoods.GoWeb.GoInputEventArgs,Northwoods.GoWeb.GoView)"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoView.AllowEdit"/>
            <seealso cref="M:Northwoods.GoWeb.GoDocument.CanEditObjects"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.SetModifiable(System.Boolean)">
            <summary>
            This method sets some properties that determine whether the user can
            modify the document from this view.
            </summary>
            <param name="b"></param>
            <remarks>
            By default this just sets the <see cref="P:Northwoods.GoWeb.GoView.AllowMove"/>, <see cref="P:Northwoods.GoWeb.GoView.AllowResize"/>, 
            <see cref="P:Northwoods.GoWeb.GoView.AllowReshape"/>, <see cref="P:Northwoods.GoWeb.GoView.AllowDelete"/>, <see cref="P:Northwoods.GoWeb.GoView.AllowInsert"/>, 
            <see cref="P:Northwoods.GoWeb.GoView.AllowLink"/>, and <see cref="P:Northwoods.GoWeb.GoView.AllowEdit"/> properties.
            You may want to override this in order to also control other properties you
            may have defined that govern the user's ability to modify the view's document.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.PickObject(System.Boolean,System.Boolean,System.Drawing.PointF,System.Boolean)">
            <summary>
            Find a visible object at a given point.
            </summary>
            <param name="doc">If true, consider objects in document layers.</param>
            <param name="view">If true, consider objects in view layers.</param>
            <param name="p">The <c>PointF</c> in document coordinates at which to search.</param>
            <param name="selectableOnly">
            If true, skip over any objects whose <see cref="M:Northwoods.GoWeb.GoObject.CanSelect"/> property is false.
            </param>
            <returns>
            A <see cref="T:Northwoods.GoWeb.GoObject"/> that contains the <paramref name="p"/>, or null if
            no such object exists.
            </returns>
            <remarks>
            This method never actually selects any object--use <see cref="T:Northwoods.GoWeb.GoSelection"/>
            instead.
            Please note that if an object is found, it might not be a top-level object.
            In fact, when <paramref name="selectableOnly"/> is false, it is very likely
            that if any object is found at the given point, it will be a child of some
            group.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.PickObject(System.Drawing.PointF,System.Boolean)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.PickObjects(System.Boolean,System.Boolean,System.Drawing.PointF,System.Boolean,Northwoods.GoWeb.IGoCollection,System.Int32)">
            <summary>
            Return a collection of objects that can be picked at a particular point.
            </summary>
            <param name="doc">If true, consider objects in document layers.</param>
            <param name="view">If true, consider objects in view layers.</param>
            <param name="p">A <c>PointF</c> location in document coordinates.</param>
            <param name="selectableOnly">If true, only consider objects for which <see cref="M:Northwoods.GoWeb.GoObject.CanSelect"/> is true.</param>
            <param name="coll">An <see cref="T:Northwoods.GoWeb.IGoCollection"/> that is modified by adding results and then returned.
            If this value is null, a <see cref="T:Northwoods.GoWeb.GoCollection"/> is allocated and returned.</param>
            <param name="max">A limit on the number of objects to be found and added to the result collection.</param>
            <returns>The <paramref name="coll"/> argument, or a newly allocated one if that was null.</returns>
            <remarks>
            This calls <see cref="M:Northwoods.GoWeb.GoLayer.PickObjects(System.Drawing.PointF,System.Boolean,Northwoods.GoWeb.IGoCollection,System.Int32)"/> on each of the <see cref="T:Northwoods.GoWeb.GoLayer"/>s used by this view
            and as filtered by the <paramref name="doc"/> and <paramref name="view"/> arguments,
            in reverse order, from front to back.
            Please note that when objects are found, they might not be a top-level objects.
            In fact, when <paramref name="selectableOnly"/> is false, it is very likely
            that if any object is found at the given point, it will be a child of some group.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.PickObjectsInRectangle(System.Boolean,System.Boolean,System.Drawing.RectangleF,Northwoods.GoWeb.GoPickInRectangleStyle,Northwoods.GoWeb.IGoCollection,System.Int32)">
            <summary>
            Return a collection of objects that are surrounded by a given rectangle.
            </summary>
            <param name="doc">If true, consider objects in document layers.</param>
            <param name="view">If true, consider objects in view layers.</param>
            <param name="rect">A <c>RectangleF</c> in document coordinates.</param>
            <param name="pickstyle">
            If <see cref="F:Northwoods.GoWeb.GoPickInRectangleStyle.SelectableOnlyContained"/>
            or <see cref="F:Northwoods.GoWeb.GoPickInRectangleStyle.SelectableOnlyIntersectsBounds"/>,
            only consider objects for which <see cref="M:Northwoods.GoWeb.GoObject.CanSelect"/> is true.
            </param>
            <param name="coll">An <see cref="T:Northwoods.GoWeb.IGoCollection"/> that is modified by adding results and then returned.
            If this value is null, a <see cref="T:Northwoods.GoWeb.GoCollection"/> is allocated and returned.</param>
            <param name="max">A limit on the number of objects to be found and added to the result collection.</param>
            <returns>The <paramref name="coll"/> argument, or a newly allocated one if that was null.</returns>
            <remarks>
            This basically calls <see cref="T:Northwoods.GoWeb.GoLayer"/>.<see cref="M:Northwoods.GoWeb.GoLayer.PickObjectsInRectangle(System.Drawing.RectangleF,Northwoods.GoWeb.GoPickInRectangleStyle,Northwoods.GoWeb.IGoCollection,System.Int32)"/>
            on each layer in this document.
            If <paramref name="pickstyle"/> is <c>GoPickInRectangleStyle.SelectableOnlyContained</c> and <see cref="M:Northwoods.GoWeb.GoView.CanSelectObjects"/> is false,
            this will not add any objects to the result collection.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.CreateSelection">
            <summary>
            This method is called by the constructor to create a selection collection for this view.
            </summary>
            <returns>A <see cref="T:Northwoods.GoWeb.GoSelection"/>.</returns>
            <remarks>
            If you need to use your own subclass of <see cref="T:Northwoods.GoWeb.GoSelection"/>, this is
            the place to create it.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.SelectAll">
            <summary>
            Add all eligible document objects to this view's selection.
            </summary>
            <remarks>
            <para>
            This method only selects document objects.
            It heeds this view's <see cref="M:Northwoods.GoWeb.GoView.CanSelectObjects"/> predicate,
            the <see cref="T:Northwoods.GoWeb.GoLayer"/>'s <see cref="M:Northwoods.GoWeb.GoLayer.CanViewObjects"/> and <see cref="M:Northwoods.GoWeb.GoLayer.CanSelectObjects"/> predicates,
            and the <see cref="T:Northwoods.GoWeb.GoObject"/>'s <see cref="M:Northwoods.GoWeb.GoObject.CanView"/> and <see cref="M:Northwoods.GoWeb.GoObject.CanSelect"/> predicates.
            </para>
            <para>
            This raises the <see cref="E:Northwoods.GoWeb.GoView.SelectionStarting"/> and <see cref="E:Northwoods.GoWeb.GoView.SelectionFinished"/> events.
            </para>
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoView.DisableKeys"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.SelectInRectangle(System.Drawing.RectangleF)">
            <summary>
            Add all eligible document objects that are within a given rectangle to this view's selection.
            </summary>
            <param name="rect">A <c>RectangleF</c> in document coordinates.</param>
            <remarks>
            <para>
            This method only selects document objects.
            It basically just calls <see cref="T:Northwoods.GoWeb.GoLayer"/>.<see cref="M:Northwoods.GoWeb.GoLayer.PickObjectsInRectangle(System.Drawing.RectangleF,Northwoods.GoWeb.GoPickInRectangleStyle,Northwoods.GoWeb.IGoCollection,System.Int32)"/>
            for each document layer that this view uses, passing in the value of
            <see cref="P:Northwoods.GoWeb.GoView.SelectInRectangleStyle"/> to control how the inclusion decision is made.
            If <see cref="M:Northwoods.GoWeb.GoView.CanSelectObjects"/> is false, this will not select anything.
            This method is called by <see cref="T:Northwoods.GoWeb.GoToolRubberBanding"/>'s
            <see cref="M:Northwoods.GoWeb.GoToolRubberBanding.DoRubberBand(System.Drawing.Rectangle)"/> method.
            </para>
            <para>
            This raises the <see cref="E:Northwoods.GoWeb.GoView.SelectionStarting"/> and <see cref="E:Northwoods.GoWeb.GoView.SelectionFinished"/> events.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.MoveSelection(Northwoods.GoWeb.GoSelection,System.Drawing.SizeF,System.Boolean)">
            <summary>
            Move a collection of objects by a given offset.
            </summary>
            <param name="sel">
            The collection of objects to be moved; if null, this view's <see cref="P:Northwoods.GoWeb.GoView.Selection"/> is used.
            </param>
            <param name="offset">
            The distance the objects should be moved.
            </param>
            <param name="grid">
            Whether to adjust the computed destination location by calling <see cref="M:Northwoods.GoWeb.GoView.SnapPoint(System.Drawing.PointF,Northwoods.GoWeb.GoObject)"/>.
            This is normally true, to allow any relevant grids to decide how to control movement of objects.
            </param>
            <remarks>
            <para>
            This method heeds the <see cref="M:Northwoods.GoWeb.GoView.CanMoveObjects"/> property if <paramref name="sel"/>
            is this view's <see cref="P:Northwoods.GoWeb.GoView.Selection"/>, and the <see cref="M:Northwoods.GoWeb.GoObject.CanMove"/> predicate
            for each <see cref="T:Northwoods.GoWeb.GoObject"/> that is not an <see cref="T:Northwoods.GoWeb.IGoLink"/>.
            To accomplish the move, each object's <see cref="M:Northwoods.GoWeb.GoObject.DoMove(Northwoods.GoWeb.GoView,System.Drawing.PointF,System.Drawing.PointF)"/> is called,
            to support object-specific move behavior.
            All actions take place within a <see cref="T:Northwoods.GoWeb.GoUndoManager"/>.<see cref="F:Northwoods.GoWeb.GoUndoManager.MoveSelectionName"/> transaction.
            This does not raise the <c>SelectionMoved</c> event;
            that event is raised by the <see cref="T:Northwoods.GoWeb.GoToolDragging"/> tool's <see cref="M:Northwoods.GoWeb.GoToolDragging.DoMouseUp"/> method.
            If there are any duplicates in the selection, objects may get moved multiple times.
            Note that an object may be moved twice if both it and one of its parents are
            in the selection.
            </para>
            <para>
            When <paramref name="grid"/> is true, each of the non-link objects in the selection <paramref name="sel"/>
            is "snapped" to the proper location, by calling <see cref="M:Northwoods.GoWeb.GoView.SnapPoint(System.Drawing.PointF,Northwoods.GoWeb.GoObject)"/>.
            It is always each object's <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="P:Northwoods.GoWeb.GoObject.Location"/>
            that is snapped to some point.
            However, links that are in the selection are never "snapped"; they are always moved by the
            distance that the first movable non-link object in the selection is moved, which may have
            been grid-snapped.
            This policy supports moving links without recalculating their paths, as long as their connected
            ports/nodes are all moved together by the same distance, whether those nodes are "snapped" or not.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.OnSelectionMoved(System.EventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.GoWeb.GoView.SelectionMoved"/> event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.RaiseSelectionMoved">
            <summary>
            Call <see cref="M:Northwoods.GoWeb.GoView.OnSelectionMoved(System.EventArgs)"/> to raise a <see cref="E:Northwoods.GoWeb.GoView.SelectionMoved"/> event.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.CopySelection(Northwoods.GoWeb.GoSelection,System.Drawing.SizeF,System.Boolean)">
            <summary>
            Make copies of the objects in a collection and add them to this view's document at the given offset.
            </summary>
            <param name="sel">
            The collection of objects to be copied; if null, this view's <see cref="P:Northwoods.GoWeb.GoView.Selection"/> is used.
            </param>
            <param name="offset">
            The distance the objects should be moved from the original's location.
            </param>
            <param name="grid">
            Whether to adjust the computed destination location by calling <see cref="M:Northwoods.GoWeb.GoView.SnapPoint(System.Drawing.PointF,Northwoods.GoWeb.GoObject)"/>.
            This is normally true, to allow any relevant grids to decide how to control movement of objects.
            </param>
            <remarks>
            This method heeds the <see cref="M:Northwoods.GoWeb.GoView.CanCopyObjects"/> property if <paramref name="sel"/>
            is this view's <see cref="P:Northwoods.GoWeb.GoView.Selection"/>, and it heeds each object's <see cref="M:Northwoods.GoWeb.GoObject.CanCopy"/>
            property as well.
            The <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="P:Northwoods.GoWeb.GoObject.DraggingObject"/> property allows
            individual objects to decide to copy the parent group instead of the object itself.
            To accomplish the copy, this method calls <see cref="T:Northwoods.GoWeb.GoDocument"/>'s <see cref="M:Northwoods.GoWeb.GoDocument.CopyFromCollection(Northwoods.GoWeb.IGoCollection,System.Boolean,System.Boolean,System.Drawing.SizeF,Northwoods.GoWeb.GoCopyDictionary)"/>.
            To accomplish the move, each object's <see cref="M:Northwoods.GoWeb.GoObject.DoMove(Northwoods.GoWeb.GoView,System.Drawing.PointF,System.Drawing.PointF)"/> is called,
            to support object-specific move behavior.
            All actions take place within a <see cref="T:Northwoods.GoWeb.GoUndoManager"/>.<see cref="F:Northwoods.GoWeb.GoUndoManager.CopySelectionName"/> transaction.
            The newly copied top-level objects become this view's new <see cref="P:Northwoods.GoWeb.GoView.Selection"/>.
            This does not raise the <c>SelectionCopied</c> event;
            that event is raised by the <see cref="M:Northwoods.GoWeb.GoToolDragging.DoMouseUp"/> method of a <see cref="T:Northwoods.GoWeb.GoToolDragging"/> tool.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.OnSelectionCopied(System.EventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.GoWeb.GoView.SelectionCopied"/> event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.RaiseSelectionCopied">
            <summary>
            Call <see cref="M:Northwoods.GoWeb.GoView.OnSelectionCopied(System.EventArgs)"/> to raise a <see cref="E:Northwoods.GoWeb.GoView.SelectionCopied"/> event.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.DeleteSelection(Northwoods.GoWeb.GoSelection)">
            <summary>
            Delete a collection of objects.
            </summary>
            <param name="sel">
            The collection of objects to be copied; if null, this view's <see cref="P:Northwoods.GoWeb.GoView.Selection"/> is used.
            </param>
            <remarks>
            This method heeds the <see cref="M:Northwoods.GoWeb.GoView.CanDeleteObjects"/> property if <paramref name="sel"/>
            is this view's <see cref="P:Northwoods.GoWeb.GoView.Selection"/>, and it heeds each object's <see cref="M:Northwoods.GoWeb.GoObject.CanDelete"/>
            property as well.
            All actions take place within a <see cref="T:Northwoods.GoWeb.GoUndoManager"/>.<see cref="F:Northwoods.GoWeb.GoUndoManager.DeleteSelectionName"/> transaction.
            This method also calls <see cref="M:Northwoods.GoWeb.GoView.RaiseSelectionDeleting(System.ComponentModel.CancelEventArgs)"/>, <see cref="M:Northwoods.GoWeb.GoView.RaiseSelectionStarting"/>,
            <see cref="M:Northwoods.GoWeb.GoView.RaiseSelectionFinished"/>, and <see cref="M:Northwoods.GoWeb.GoView.RaiseSelectionDeleted"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.OnSelectionDeleting(System.ComponentModel.CancelEventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.GoWeb.GoView.SelectionDeleting"/> event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.RaiseSelectionDeleting(System.ComponentModel.CancelEventArgs)">
            <summary>
            Call <see cref="M:Northwoods.GoWeb.GoView.OnSelectionDeleting(System.ComponentModel.CancelEventArgs)"/> with the given <c>CancelEventArgs</c>
            to raise a <see cref="E:Northwoods.GoWeb.GoView.SelectionDeleting"/> event.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.OnSelectionDeleted(System.EventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.GoWeb.GoView.SelectionDeleted"/> event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.RaiseSelectionDeleted">
            <summary>
            Call <see cref="M:Northwoods.GoWeb.GoView.OnSelectionDeleted(System.EventArgs)"/> to raise a <see cref="E:Northwoods.GoWeb.GoView.SelectionDeleted"/> event.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.CanEditDelete">
            <summary>
            This predicate is true when the user can perform the <see cref="M:Northwoods.GoWeb.GoView.EditDelete"/> action.
            </summary>
            <remarks>
            This returns false if the <see cref="P:Northwoods.GoWeb.GoView.Selection"/> is empty,
            if <see cref="M:Northwoods.GoWeb.GoView.CanDeleteObjects"/> is false,
            or if the primary selection's <see cref="M:Northwoods.GoWeb.GoObject.CanDelete"/> property is false.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.EditDelete"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.DisableKeys"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.EditDelete">
            <summary>
            Remove all selected objects from this view's document.
            </summary>
            <remarks>
            This just calls <see cref="M:Northwoods.GoWeb.GoView.DeleteSelection(Northwoods.GoWeb.GoSelection)"/> with this view's
            <see cref="P:Northwoods.GoWeb.GoView.Selection"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.CanEditDelete"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.DisableKeys"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.EditObject(Northwoods.GoWeb.GoObject)">
            <summary>
            Begin having the user edit an object.
            </summary>
            <param name="obj"></param>
            <remarks>
            This method does nothing if <see cref="M:Northwoods.GoWeb.GoView.CanEditObjects"/> is false
            or if <paramref name="obj"/>'s <see cref="M:Northwoods.GoWeb.GoObject.CanEdit"/> property
            is false.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoObject.DoBeginEdit(Northwoods.GoWeb.GoView)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.CanEditEdit">
            <summary>
            This predicate is true when the user can perform the <see cref="M:Northwoods.GoWeb.GoView.EditEdit"/> action.
            </summary>
            <remarks>
            This returns false if the <see cref="P:Northwoods.GoWeb.GoView.Selection"/> is empty,
            if <see cref="M:Northwoods.GoWeb.GoView.CanEditObjects"/> is false,
            or if the primary selection's <see cref="M:Northwoods.GoWeb.GoObject.CanEdit"/> property is false.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.EditObject(Northwoods.GoWeb.GoObject)"/>
            <seealso cref="M:Northwoods.GoWeb.GoView.EditEdit"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.DisableKeys"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.EditEdit">
            <summary>
            Have the user edit the primary selection.
            </summary>
            <remarks>
            This just calls <see cref="M:Northwoods.GoWeb.GoView.EditObject(Northwoods.GoWeb.GoObject)"/> with the view's
            <see cref="P:Northwoods.GoWeb.GoSelection.Primary"/> selection.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.CanEditEdit"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.DisableKeys"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.OnObjectGotSelection(Northwoods.GoWeb.GoSelectionEventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.GoWeb.GoView.ObjectGotSelection"/> event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.RaiseObjectGotSelection(Northwoods.GoWeb.GoObject)">
            <summary>
            Call <see cref="M:Northwoods.GoWeb.GoView.OnObjectGotSelection(Northwoods.GoWeb.GoSelectionEventArgs)"/> for the given object
            to raise an <see cref="E:Northwoods.GoWeb.GoView.ObjectGotSelection"/> event.
            </summary>
            <param name="obj"></param>
            <remarks>
            This is called by methods in <see cref="T:Northwoods.GoWeb.GoSelection"/> for each object added to the selection.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.OnObjectLostSelection(Northwoods.GoWeb.GoSelectionEventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.GoWeb.GoView.ObjectLostSelection"/> event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.RaiseObjectLostSelection(Northwoods.GoWeb.GoObject)">
            <summary>
            Call <see cref="M:Northwoods.GoWeb.GoView.OnObjectLostSelection(Northwoods.GoWeb.GoSelectionEventArgs)"/> for the given object
            to raise an <see cref="E:Northwoods.GoWeb.GoView.ObjectLostSelection"/> event.
            </summary>
            <param name="obj"></param>
            <remarks>
            This is called by methods in <see cref="T:Northwoods.GoWeb.GoSelection"/> for each object removed from the selection.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.OnSelectionStarting(System.EventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.GoWeb.GoView.SelectionStarting"/> event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.RaiseSelectionStarting">
            <summary>
            Call <see cref="M:Northwoods.GoWeb.GoView.OnSelectionStarting(System.EventArgs)"/>.
            </summary>
            <remarks>
            This is called by methods before they select or unselect a variable number of objects.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.OnSelectionFinished(System.EventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.GoWeb.GoView.SelectionFinished"/> event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.RaiseSelectionFinished">
            <summary>
            Call <see cref="M:Northwoods.GoWeb.GoView.OnSelectionFinished(System.EventArgs)"/>.
            </summary>
            <remarks>
            This is called by methods after they select or unselect a variable number of objects.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.OnObjectResized(Northwoods.GoWeb.GoSelectionEventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.GoWeb.GoView.ObjectResized"/> event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.RaiseObjectResized(Northwoods.GoWeb.GoObject)">
            <summary>
            Call <see cref="M:Northwoods.GoWeb.GoView.OnObjectResized(Northwoods.GoWeb.GoSelectionEventArgs)"/> for the given object
            to raise an <see cref="E:Northwoods.GoWeb.GoView.ObjectResized"/> event.
            </summary>
            <param name="obj"></param>
            <remarks>
            This method is called by <see cref="T:Northwoods.GoWeb.GoToolResizing"/>.<see cref="M:Northwoods.GoWeb.GoToolResizing.DoMouseUp"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.SelectNextNode(System.Char)">
            <summary>
            Change the primary selection to be the next object whose label
            starts with a given letter or digit.
            </summary>
            <param name="c"></param>
            <returns>true if it found another part</returns>
            <remarks>
            This method iterates through the <see cref="T:Northwoods.GoWeb.IGoLabeledPart"/>s
            of this view's document, starting with the current primary
            selection (if it is an <see cref="T:Northwoods.GoWeb.IGoLabeledPart"/>), looking
            for the next part that satisfies the <see cref="M:Northwoods.GoWeb.GoView.MatchesNodeLabel(Northwoods.GoWeb.IGoLabeledPart,System.Char)"/>
            predicate.
            If it finds such an object, it makes it this view's only selected object.
            This method is called by <see cref="T:Northwoods.GoWeb.GoToolManager"/> when the user
            types a letter or digit, if the value of <see cref="P:Northwoods.GoWeb.GoView.DisableKeys"/>
            does not have the <see cref="F:Northwoods.GoWeb.GoViewDisableKeys.SelectsByFirstChar"/> flag set.
            (This method does not check for that flag.)
            This method does nothing if <see cref="M:Northwoods.GoWeb.GoView.CanSelectObjects"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.MatchesNodeLabel(Northwoods.GoWeb.IGoLabeledPart,System.Char)">
            <summary>
            This predicate is called by <see cref="M:Northwoods.GoWeb.GoView.SelectNextNode(System.Char)"/> to
            decide if a part's text label starts with a given character.
            </summary>
            <param name="part"></param>
            <param name="c">a <c>Char</c>, normally a letter or digit</param>
            <returns>
            true if the <paramref name="part"/>'s <see cref="P:Northwoods.GoWeb.IGoLabeledPart.Text"/>'s
            first character is the same as <paramref name="c"/>, ignoring case
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.GetBitmapFromCollection(Northwoods.GoWeb.IGoCollection)">
            <summary>
            Return a <c>Bitmap</c> displaying all of the visible objects in the given collection.
            </summary>
            <param name="coll"></param>
            <returns></returns>
            <remarks>
            The intended size of the <c>Bitmap</c> is determined by the result of calling
            the <see cref="T:Northwoods.GoWeb.GoDocument"/> method
            <see cref="M:Northwoods.GoWeb.GoDocument.ComputeBounds(Northwoods.GoWeb.IGoCollection,Northwoods.GoWeb.GoView)"/> on the collection.
            If the bitmap is too wide or too tall, the objects are drawn at a smaller scale.
            The bitmap is first filled with the paper color.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.GetBitmapFromCollection(Northwoods.GoWeb.IGoCollection,System.Drawing.RectangleF,System.Single,System.Boolean)"/>
            <seealso cref="M:Northwoods.GoWeb.GoView.GetBitmap"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.GetBitmapFromCollection(Northwoods.GoWeb.IGoCollection,System.Drawing.RectangleF,System.Boolean)">
            <summary>
            This calls <see cref="M:Northwoods.GoWeb.GoView.GetBitmapFromCollection(Northwoods.GoWeb.IGoCollection,System.Drawing.RectangleF,System.Single,System.Boolean)"/>
            with a scale that will cause the resulting bitmap not to be too large.
            </summary>
            <param name="coll"></param>
            <param name="bounds">a <c>RectangleF</c> in document coordinates</param>
            <param name="paper">whether to call <see cref="M:Northwoods.GoWeb.GoView.PaintPaperColor(System.Drawing.Graphics,System.Drawing.RectangleF)"/> for the background</param>
            <returns>A <c>Bitmap</c></returns>
            <remarks>
            If the bitmap is too wide or too tall, the objects are drawn at a smaller scale.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.GetBitmap"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.GetBitmapFromCollection(Northwoods.GoWeb.IGoCollection,System.Drawing.RectangleF,System.Single,System.Boolean)">
            <summary>
            Return a Bitmap displaying all of the visible objects in the given collection
            that paint within the given bounds.
            </summary>
            <param name="coll"></param>
            <param name="bounds">The portion of the rendering, in document coordinates</param>
            <param name="scale">The scale at which to draw; 1.0 is normal</param>
            <param name="paper">Whether to call <see cref="M:Northwoods.GoWeb.GoView.PaintPaperColor(System.Drawing.Graphics,System.Drawing.RectangleF)"/> for the background</param>
            <returns>A <c>Bitmap</c></returns>
            <remarks>
            This method creates a <c>Bitmap</c> whose size is determined by
            <paramref name="bounds"/> multiplied by the <paramref name="scale"/> (minimum 1x1),
            that displays what is painted starting at the rectangle's top-left position in the document.
            It calls <see cref="M:Northwoods.GoWeb.GoView.PaintPaperColor(System.Drawing.Graphics,System.Drawing.RectangleF)"/> to fill in the bitmap and then calls
            <see cref="M:Northwoods.GoWeb.GoObject.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView)"/> for each object in <paramref name="coll"/>
            whose <see cref="M:Northwoods.GoWeb.GoObject.CanView"/> property is true.
            <para>
            In GoDiagram Pocket, the <paramref name="paper"/> argument is assumed to be true,
            because the .NET Compact Framework does not support alpha-blending.
            </para>
            <para>
            Unlike the other <see cref="M:Northwoods.GoWeb.GoView.GetBitmapFromCollection(Northwoods.GoWeb.IGoCollection)"/> methods,
            this method does not automatically limit the size of the Bitmap based on the
            <paramref name="bounds"/> and <paramref name="scale"/> values.
            </para>
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.GetBitmap"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.GetBitmap">
            <summary>
            Produce a rendering of this view.
            </summary>
            <returns>a <c>Bitmap</c> containing the appearance of this view in its current state</returns>
            <remarks>
            The <see cref="P:Northwoods.GoWeb.GoView.DocPosition"/> and <see cref="P:Northwoods.GoWeb.GoView.DocScale"/> determine what part of this
            view's <see cref="P:Northwoods.GoWeb.GoView.Document"/> and this view's state are painted in a bitmap.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.HandleScroll(System.Drawing.Point,System.Drawing.Point,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Consider handling mouse events in the scroll margin.
            </summary>
            <returns>true to indicate that the event has been handled (by scrolling)
            and the standard mouse event processing should be skipped
            </returns>
            <remarks>
            If the <paramref name="downPt"/> and <paramref name="upPt"/> both occur in
            the scroll margin, and <see cref="M:Northwoods.GoWeb.GoView.CanScroll(System.Boolean,System.Boolean)"/> in that direction is true,
            this method calls either <see cref="M:Northwoods.GoWeb.GoView.ScrollLine(System.Single,System.Single)"/> or (if the shift key
            was held down) <see cref="M:Northwoods.GoWeb.GoView.ScrollPage(System.Single,System.Single)"/> and then this method returns true.
            Holding down the control key causes the motion's distance to be multiplied
            by a factor of 10.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.CreateDataRenderer">
            <summary>
            The constructor calls this method to supply the initial value for <see cref="P:Northwoods.GoWeb.GoView.DataRenderer"/>,
            an instance of <see cref="T:Northwoods.GoWeb.GoViewDataRenderer"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Produce the HTML IMG tag and other elements and attributes that allow
            this view to be seen in a browser.
            </summary>
            <param name="wrt"></param>
            <remarks>
            This method first raises the <see cref="E:Northwoods.GoWeb.GoView.Updated"/> event.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.RenderScript"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.RenderCss">
            <summary>
            Produce a header <c>&lt;link&gt;</c> to a CSS file if <see cref="P:Northwoods.GoWeb.GoView.CssFile"/> is specified;
            otherwise produce the standard <c>&lt;style&gt;</c> definitions used by generated context menus.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoView.RenderScript"/>
            <seealso cref="M:Northwoods.GoWeb.GoView.Render(System.Web.UI.HtmlTextWriter)"/>
            <remarks>
            If <see cref="P:Northwoods.GoWeb.GoView.CssFile"/> is a non-empty string, that value is used as
            the <c>HREF</c> attribute value for an external <c>&lt;link&gt;</c>.
            Otherwise it produces inline definitions of the standard style definitions
            that are needed for context menus that may be generated on the client.
            This calls <c>Page.RegisterClientScriptBlock</c> with a key of "Northwoods.GoWeb.styles",
            and does nothing if that script block is already registered.
            When <see cref="P:Northwoods.GoWeb.GoView.CssFile"/> is null or the string "none", this method does nothing:
            if your page requires using "goContextMenu" or "goMenuItem" or related styles,
            your ASPX page will need to explicitly include or define those styles.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.RenderScript">
            <summary>
            Produce client-side JavaScript helper function definitions, needed to handle
            user-input events.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoView.Render(System.Web.UI.HtmlTextWriter)"/>
            <remarks>
            If <see cref="P:Northwoods.GoWeb.GoView.ScriptFile"/> is a non-empty string, that value is used as
            the <c>SRC</c> attribute value for an external <c>&lt;script&gt;</c>.
            Otherwise it produces inline definitions of the standard JavaScript functions
            that are needed.
            This calls <c>Page.RegisterClientScriptBlock</c> with a key of "Northwoods.GoWeb.functions",
            and does nothing if that script block is already registered.
            When <see cref="P:Northwoods.GoWeb.GoView.ScriptFile"/> is null, this method does nothing:
            if your page requires using JavaScript on the client, your ASPX page will need
            to include a <c>&lt;script&gt;</c> element referencing the appropriate code.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.GetSessionViewsTable">
            <summary>
            A <c>Hashtable</c> of all <c>GoView</c>s is maintained for the current <c>Session</c>.
            </summary>
            <returns>a <c>Hashtable</c> mapping ID strings to <c>GoView</c> instances</returns>
            <remarks>
            This hashtable is used by the <see cref="P:Northwoods.GoWeb.GoView.ImagePage"/> to find the proper view to render as an image.
            The keys are normally generated by calls to <see cref="M:Northwoods.GoWeb.GoView.MakeSessionViewID"/>.
            This hashtable also holds objects considered to be stored in the clipboard.
            If you know that you will not be using this state any longer, for example when you will
            be calling <c>HttpResponse.Redirect</c> to go to another website,
            you may wish to <c>Clear</c> this table in order to free up memory, rather than waiting
            for the session to time out.
            If you want to free up session state for just one view, call <see cref="M:Northwoods.GoWeb.GoView.ClearSessionView"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.FindSessionView"/>
            <seealso cref="M:Northwoods.GoWeb.GoView.StoreSessionView"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.MakeSessionViewID">
            <summary>
            Generate a string identifier used as a key in the <see cref="M:Northwoods.GoWeb.GoView.GetSessionViewsTable"/>
            for this view.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.FindSessionView">
            <summary>
            Get the <c>GoView</c> saved in the <see cref="M:Northwoods.GoWeb.GoView.GetSessionViewsTable"/> that is identified
            by this view's unique ID.
            </summary>
            <returns>a <c>GoView</c>, or null if no such view is stored in the table by this unique ID</returns>
            <remarks>
            The table lookup key is generated by <see cref="M:Northwoods.GoWeb.GoView.MakeSessionViewID"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.StoreSessionView">
            <summary>
            Save this <c>GoView</c> in the <see cref="M:Northwoods.GoWeb.GoView.GetSessionViewsTable"/>, identified by this
            view's unique ID.
            </summary>
            <remarks>
            The view must be saved in the <see cref="M:Northwoods.GoWeb.GoView.GetSessionViewsTable"/> so that the
            <see cref="P:Northwoods.GoWeb.GoView.ImagePage"/> image request (normally to <i>GoWebImage.aspx</i>) can find this view
            and so that the PostBackEvent handler can pass on the PostBackEvent to the proper <c>GoView</c>.
            The table lookup key is generated by <see cref="M:Northwoods.GoWeb.GoView.MakeSessionViewID"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.ClearSessionView">
            <summary>
            Remove this <c>GoView</c> from the <see cref="M:Northwoods.GoWeb.GoView.GetSessionViewsTable"/>, as identified
            by this view's unique ID.
            </summary>
            <remarks>
            <see cref="M:Northwoods.GoWeb.GoView.OnLoad(System.EventArgs)"/> normally calls <see cref="M:Northwoods.GoWeb.GoView.StoreSessionView"/> to make sure the view's
            state is available for <see cref="M:Northwoods.GoWeb.GoWebImage.OnLoad(System.EventArgs)"/> (to generate an image)
            and for future postbacks.  If you know that no future postbacks or <see cref="T:Northwoods.GoWeb.GoWebImage"/>
            <c>IMG</c> requests are needed, you can call this method to reduce the size of the
            session state.
            The table lookup key is generated by <see cref="M:Northwoods.GoWeb.GoView.MakeSessionViewID"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.LoadViewState(System.Object)">
            <summary>
            When <c>EnableViewState</c> is true, this method is called
            to restore an internal identifier that distinguishes this view
            from others with the same document ID.
            </summary>
            <param name="savedState"></param>
            <remarks>
            If you override this method, you should also call the base method.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.SaveViewState">
            <summary>
            When <c>EnableViewState</c> is true, this method is called
            to save an internal identifier that distinguishes this view
            from others with the same document ID.
            </summary>
            <returns></returns>
            <remarks>
            If you override this method, you should also call the base method.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.LoadView(Northwoods.GoWeb.GoView)">
            <summary>
            This method is called by <see cref="M:Northwoods.GoWeb.GoView.OnLoad(System.EventArgs)"/> in order to restore the state
            of this view from a <c>GoView</c> serialized in the <see cref="M:Northwoods.GoWeb.GoView.GetSessionViewsTable"/>.
            </summary>
            <param name="saved">the deserialized view</param>
            <remarks>
            <para>
            Generally you will want to copy all of your fields from the <paramref name="saved"/>
            view to this view.  Remember to call the base method first.
            You will also be overriding the <see cref="M:Northwoods.GoWeb.GoView.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/> method and
            defining your own deserialization constructor.  See the example code in
            the description for <see cref="M:Northwoods.GoWeb.GoView.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>.
            </para>
            <para>
            The event handlers associated with events on this view are <i>not</i> restored.
            Thus you will need to re-establish event handlers for the view in the Page's
            Init or Load event:
            <code>
            protected override void OnLoad(EventArgs evt) { // handling the Page's Load event
              base.OnLoad(evt);
              MyView.SessionStarted += new EventHandler(InitializeDocument);
              MyView.LinkCreated += new GoSelectionEventHandler(LinkDrawn);
            }
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
            <remarks>
            You must define your own deserialization constructor for each subclass of
            <c>GoView</c> that you define.
            See the example code in the description of <see cref="M:Northwoods.GoWeb.GoView.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization function.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
            <remarks>
            If you add any state to a subclass of <c>GoView</c>, you will need
            to override <see cref="M:Northwoods.GoWeb.GoView.LoadView(Northwoods.GoWeb.GoView)"/>, <see cref="M:Northwoods.GoWeb.GoView.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>,
            and define a deserialization constructor.
            When you override this method, be sure to call the base method,
            and make certain that all the same serialized information that you
            add to <paramref name="info"/> you read again with the same name
            in your deserialization constructor:
            <code>
              public override void LoadView(GoView saved) {
                base.LoadView(saved);
                MyView v = (MyView)saved;
                myClickCount = v.myClickCount;
              }
              protected MyView(SerializationInfo info, StreamingContext context) : base(info, context) {
                myClickCount = (int)info.GetValue("myClickCount", typeof(int));
              }
              public override void GetObjectData(SerializationInfo info, StreamingContext context) {
                base.GetObjectData(info, context);
                info.AddValue("myClickCount", myClickCount);
              }
            </code>
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.LoadView(Northwoods.GoWeb.GoView)"/>
            <seealso cref="M:Northwoods.GoWeb.GoView.CreateView"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.OnSessionStarted(System.EventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.GoWeb.GoView.SessionStarted"/> event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.OnUpdated(System.EventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.GoWeb.GoView.Updated"/> event handlers.
            </summary>
            <param name="evt"></param>
            <remarks>
            This just calls all <see cref="E:Northwoods.GoWeb.GoView.Updated"/> event handlers.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.OnLoad(System.EventArgs)">
            <summary>
            When this view is being loaded, call <see cref="M:Northwoods.GoWeb.GoView.LoadView(Northwoods.GoWeb.GoView)"/>
            to restore this view's state from the session views table or
            call <see cref="M:Northwoods.GoWeb.GoView.CreateView"/> and raise the
            <see cref="E:Northwoods.GoWeb.GoView.SessionStarted"/> event if no such
            view can be found in the session identified by unique ID.
            </summary>
            <param name="evt"></param>
            <remarks>
            When this view is being loaded for the first time in the session,
            this method raises a <see cref="E:Northwoods.GoWeb.GoView.SessionStarted"/> event
            by calling <see cref="M:Northwoods.GoWeb.GoView.OnSessionStarted(System.EventArgs)"/>.
            Subsequent loads of this view will result in <see cref="M:Northwoods.GoWeb.GoView.FindSessionView"/>
            returning a non-null <c>GoView</c>, which is passed as the argument
            in a call to <see cref="M:Northwoods.GoWeb.GoView.LoadView(Northwoods.GoWeb.GoView)"/>.
            Whether or not it found a saved view in the session, this method remembers
            this view in the session by calling <see cref="M:Northwoods.GoWeb.GoView.StoreSessionView"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.OnNoPostLoad">
            <summary>
            This method is called by <see cref="M:Northwoods.GoWeb.GoWebImage.OnLoad(System.EventArgs)"/> to
            support initialization of a view after being deserialized for use
            by a direct request to a <see cref="T:Northwoods.GoWeb.GoWebImage"/>.
            </summary>
            <remarks>
            Normal first-time and postback requests to an ASP.NET page
            will result in a <c>Page</c> to be constructed and initialized,
            including its web control children.  You will want to establish
            event handlers on a view in the page's <c>Init</c> or <c>Load</c>
            event handlers.
            However, no <c>Page</c> containing a <c>GoView</c> is constructed
            in a request to <see cref="T:Northwoods.GoWeb.GoWebImage"/>, so such initialization
            of the view cannot be done.
            A <see cref="T:Northwoods.GoWeb.GoWebImage"/> page request with event information
            in the query string such as mouse events will directly manipulate
            the deserialized view.  Such a view instance will need to have
            its non-serialized state restored, including event handlers.
            <code>
            public override void OnNoPostLoad() {
              base.OnNoPostLoad();
              this.LinkCreated += new GoSelectionEventHandler(LinkDrawn);
            }
            </code>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.RaisePostBackEvent(System.String)">
            <summary>
            Implement <c>IPostBackEventHandler</c> to handle user-input events.
            </summary>
            <param name="evtargs">a string encoding the input event state</param>
            <remarks>
            This method parses the <paramref name="evtargs"/> argument to
            determine the nature of the user-input event.
            If it includes the "request" parameter, this method just calls
            <see cref="M:Northwoods.GoWeb.GoViewDataRenderer.HandleClientRequest(System.String,System.Collections.Hashtable)"/>.
            If it describes a mouse operation, we set up the <see cref="P:Northwoods.GoWeb.GoView.FirstInput"/>
            and <see cref="P:Northwoods.GoWeb.GoView.LastInput"/> unified input state and call
            <see cref="M:Northwoods.GoWeb.GoView.DoMouseDown"/>, <see cref="M:Northwoods.GoWeb.GoView.DoMouseMove"/>, and
            <see cref="M:Northwoods.GoWeb.GoView.DoMouseUp"/>.
            If the <paramref name="evtargs"/> describes a keyboard event,
            we also set up the input state and call <see cref="M:Northwoods.GoWeb.GoView.DoKeyDown"/>.
            This also handles various other commands.
            This method does nothing if this control is not <see cref="P:Northwoods.GoWeb.GoView.Enabled"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.GetPostBackEventParams(System.String)">
            <summary>
            Parse the postback event argument string.
            </summary>
            <param name="evtargs"></param>
            <returns>a <c>Hashtable</c> associating keys and string values</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.PaintView(System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            Paint all of the objects of this view or its document that are visible in
            the given rectangle.
            </summary>
            <param name="g"></param>
            <param name="clipRect">A <c>RectangleF</c> in document coordinates.</param>
            <remarks>
            This calls <see cref="M:Northwoods.GoWeb.GoView.PaintPaperColor(System.Drawing.Graphics,System.Drawing.RectangleF)"/>,
            <see cref="M:Northwoods.GoWeb.GoView.PaintBackgroundDecoration(System.Drawing.Graphics,System.Drawing.RectangleF)"/>, and
            <see cref="M:Northwoods.GoWeb.GoView.PaintObjects(System.Boolean,System.Boolean,System.Drawing.Graphics,System.Drawing.RectangleF)"/> for both document and view objects.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.PaintPaperColor(System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            Fill in the document paper color or view background color.
            </summary>
            <param name="g"></param>
            <param name="clipRect"></param>
            <remarks>
            If this view's document's <see cref="P:Northwoods.GoWeb.GoDocument.PaperColor"/> is
            <c>Color.Empty</c> we use this view's <c>BackColor</c> instead.
            However, if the <see cref="P:Northwoods.GoWeb.GoView.SheetStyle"/> is not <see cref="F:Northwoods.GoWeb.GoViewSheetStyle.None"/>,
            this method just fills in this control's <c>BackColor</c>, because
            the <see cref="P:Northwoods.GoWeb.GoDocument.PaperColor"/> is used for the <see cref="P:Northwoods.GoWeb.GoView.Sheet"/> instead.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.PaintBackgroundDecoration(System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            Draw any decoration that should appear behind all of the objects.
            </summary>
            <param name="g"></param>
            <param name="clipRect"></param>
            <remarks>
            By default this method draws this <c>Control</c>'s <c>BackgroundImage</c>, if any.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.PaintObjects(System.Boolean,System.Boolean,System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            Paint all the document and/or view objects.
            </summary>
            <param name="doc">If true, paint document objects.</param>
            <param name="view">If true, paint view objects.</param>
            <param name="g"></param>
            <param name="clipRect"></param>
            <seealso cref="M:Northwoods.GoWeb.GoLayer.Paint(System.Drawing.Graphics,Northwoods.GoWeb.GoView,System.Drawing.RectangleF)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.UpdateView">
            <summary>
            Cause the whole view to be redrawn.
            </summary>
            <remarks>
            This request is currently ignored, because each call to <see cref="M:Northwoods.GoWeb.GoView.GetBitmap"/>
            paints the whole bitmap.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.BeginUpdate">
            <summary>
            Disable painting of this view.
            </summary>
            <remarks>
            This request is currently ignored, because each call to <see cref="M:Northwoods.GoWeb.GoView.GetBitmap"/>
            paints the whole bitmap.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.EndUpdate">
            <summary>
            Re-enable painting of this view.
            </summary>
            <remarks>
            This request is currently ignored, because each call to <see cref="M:Northwoods.GoWeb.GoView.GetBitmap"/>
            paints the whole bitmap.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.Invalidate(System.Drawing.Rectangle)">
            <summary>
            Indicate that part of the view may no longer be up-to-date.
            </summary>
            <param name="rect"></param>
            <remarks>
            This information is currently ignored.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)">
            <summary>
            Handle changes to any view layers or view objects.
            </summary>
            <param name="hint"></param>
            <param name="subhint"></param>
            <param name="x"></param>
            <param name="oldI"></param>
            <param name="oldVal"></param>
            <param name="oldRect"></param>
            <param name="newI"></param>
            <param name="newVal"></param>
            <param name="newRect"></param>
            <remarks>
            By default this does nothing, because views are always completely redrawn
            on a call to <see cref="M:Northwoods.GoWeb.GoView.GetBitmap"/>, so no part of a bitmap image needs
            to be invalidated.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Call all <see cref="E:Northwoods.GoWeb.GoView.PropertyChanged"/> event handlers.
            </summary>
            <param name="evt"></param>
            <remarks>
            This also calls <see cref="M:Northwoods.GoWeb.GoView.UpdateView"/>, unless the property is
            known to be a minor one.
            If you override this method, be sure to call the base method too.
            This is called by <see cref="M:Northwoods.GoWeb.GoView.RaisePropertyChangedEvent(System.String)"/>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.RaisePropertyChangedEvent(System.String)">
            <summary>
            Raise a <see cref="E:Northwoods.GoWeb.GoView.PropertyChanged"/> event for the given property name.
            </summary>
            <param name="propname"></param>
            <remarks>
            This just calls <see cref="M:Northwoods.GoWeb.GoView.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.OnDocumentChanged(System.Object,Northwoods.GoWeb.GoChangedEventArgs)">
            <summary>
            Handle changes to the view's document or any of the document's layers or objects.
            </summary>
            <param name="sender">A <see cref="T:Northwoods.GoWeb.GoDocument"/>.</param>
            <param name="e">A <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/> describing the change.</param>
            <remarks>
            <para>
            By default this method just invalidates part or all of this view
            whenever an object is modified, inserted, or removed from a layer in this view's
            document, or when a document layer is modified, added, or removed, or when a
            document is changed.
            It also passes the event args on to all <see cref="E:Northwoods.GoWeb.GoView.DocumentChanged"/> event
            handlers registered with this view.
            </para>
            <para>
            When the <see cref="P:Northwoods.GoWeb.GoView.Document"/>'s <see cref="P:Northwoods.GoWeb.GoDocument.PaperColor"/> changes,
            we also try to update the brush of the <see cref="P:Northwoods.GoWeb.GoView.Sheet"/>'s <see cref="P:Northwoods.GoWeb.GoSheet.Paper"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.DoKeyDown">
            <summary>
            Handle a canonicalized keyboard input event.
            </summary>
            <remarks>
            <para>
            This method assumes <see cref="P:Northwoods.GoWeb.GoView.LastInput"/> has information
            representing a keyboard input event.
            By default this just calls <see cref="M:Northwoods.GoWeb.IGoTool.DoKeyDown"/>
            on the current <see cref="P:Northwoods.GoWeb.GoView.Tool"/>.
            </para>
            <para>
            This is normally called by <see cref="M:Northwoods.GoWeb.GoView.RaisePostBackEvent(System.String)"/> and any
            other code that wishes to simulate a canonicalized keyboard event.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.DoMouseDown">
            <summary>
            Handle a canonicalized mouse down input event.
            </summary>
            <remarks>
            <para>
            This method assumes <see cref="P:Northwoods.GoWeb.GoView.LastInput"/> has information
            representing a mouse down input event.
            We also assume that <see cref="P:Northwoods.GoWeb.GoView.FirstInput"/> has a copy
            of the canonicalized input event.
            By default this just calls <see cref="M:Northwoods.GoWeb.IGoTool.DoMouseDown"/>
            on the current <see cref="P:Northwoods.GoWeb.GoView.Tool"/>.
            </para>
            <para>
            This is normally called by <see cref="M:Northwoods.GoWeb.GoView.RaisePostBackEvent(System.String)"/> and any
            other code that wishes to simulate a canonicalized mouse down event.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.DoMouseMove">
            <summary>
            Handle a canonicalized mouse move input event.
            </summary>
            <remarks>
            <para>
            This method assumes <see cref="P:Northwoods.GoWeb.GoView.LastInput"/> has information
            representing a mouse move input event.
            By default this just calls <see cref="M:Northwoods.GoWeb.IGoTool.DoMouseMove"/>
            on the current <see cref="P:Northwoods.GoWeb.GoView.Tool"/>.
            </para>
            <para>
            This is normally called by <see cref="M:Northwoods.GoWeb.GoView.RaisePostBackEvent(System.String)"/> and any
            other code that wishes to simulate a canonicalized mouse move event.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.DoMouseUp">
            <summary>
            Handle a canonicalized mouse up input event.
            </summary>
            <remarks>
            <para>
            This method assumes <see cref="P:Northwoods.GoWeb.GoView.LastInput"/> has information
            representing a mouse up input event.
            By default this just calls <see cref="M:Northwoods.GoWeb.IGoTool.DoMouseUp"/>
            on the current <see cref="P:Northwoods.GoWeb.GoView.Tool"/>.
            </para>
            <para>
            This is normally called by <see cref="M:Northwoods.GoWeb.GoView.RaisePostBackEvent(System.String)"/> and any
            other code that wishes to simulate a canonicalized mouse up event.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.DoMouseWheel">
            <summary>
            Handle a canonicalized mouse wheel input event.
            </summary>
            <remarks>
            <para>
            This method assume <see cref="P:Northwoods.GoWeb.GoView.LastInput"/> has information
            representing an input event describing the rotation of the
            mouse wheel.
            By default this just calls <see cref="M:Northwoods.GoWeb.IGoTool.DoMouseWheel"/>
            on the current <see cref="P:Northwoods.GoWeb.GoView.Tool"/>.
            </para>
            <para>
            This is normally called by <see cref="M:Northwoods.GoWeb.GoView.RaisePostBackEvent(System.String)"/> and any
            other code that wishes to simulate a canonicalized mouse wheel event.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.DoCancelMouse">
            <summary>
            Handle a canonicalized cancel input event.
            </summary>
            <remarks>
            <para>
            This method assumes <see cref="P:Northwoods.GoWeb.GoView.LastInput"/> has information
            representing a mouse down input event.
            By default this just calls <see cref="M:Northwoods.GoWeb.IGoTool.DoMouseDown"/>
            on the current <see cref="P:Northwoods.GoWeb.GoView.Tool"/>.
            </para>
            <para>
            This method is not normally called by <see cref="M:Northwoods.GoWeb.GoView.RaisePostBackEvent(System.String)"/>
            directly, because there is no way to interrupt a post.  However,
            this method may be called by various tools to simulate a cancelling
            user input event, or when the view's <see cref="P:Northwoods.GoWeb.GoView.Document"/> is changed.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.CreateDefaultTool">
            <summary>
            Create an instance of the default <see cref="P:Northwoods.GoWeb.GoView.DefaultTool"/> for this view.
            </summary>
            <returns></returns>
            <remarks>
            By default this creates an instance of <see cref="T:Northwoods.GoWeb.GoToolManager"/>:
            <code>
              return new GoToolManager(this);
            </code>
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoView.Tool"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.ReplaceMouseTool(System.Type,Northwoods.GoWeb.IGoTool)">
            <summary>
            Replace one of the "mode-less" tools used by this view.
            </summary>
            <param name="tooltype">the <c>Type</c> of the tool to be replaced;
            this should not be a base class of the actual tool instance type</param>
            <param name="newtool">the tool to use instead of the existing one of
            <c>Type</c> <paramref name="tooltype"/>;
            if null, the old tool is only removed</param>
            <returns>the tool that was replaced, or null if no such instance was found</returns>
            <remarks>
            When you want to customize an existing "mode-less" tool, and when setting one of its properties
            is insufficient, you may need to define your own subclass of that tool or define
            your own tool inheriting from <see cref="T:Northwoods.GoWeb.GoTool"/>.
            In order for the view to use your tool, you'll need to create an instance of
            your tool class for the view, and then you can either set <see cref="P:Northwoods.GoWeb.GoView.Tool"/>
            explicitly, or let <see cref="T:Northwoods.GoWeb.GoToolManager"/> find your tool in one of the mouse tool
            lists, such as <see cref="P:Northwoods.GoWeb.GoView.MouseDownTools"/>.
            For the latter case, you could just add an instance of your tool to one of those lists.
            But often you will not want to allow the instance of the original tool class to be used.
            This method makes it easy to replace an existing tool with a different one.
            This method searches all of the lists of mode-less tools:
            <seealso cref="P:Northwoods.GoWeb.GoView.MouseDownTools"/>, <seealso cref="P:Northwoods.GoWeb.GoView.MouseMoveTools"/>, <seealso cref="P:Northwoods.GoWeb.GoView.MouseUpTools"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.FindMouseTool(System.Type)"/>
            <example>
            You have defined a new subclass of <see cref="T:Northwoods.GoWeb.GoToolLinkingNew"/>, called <c>CustomLinkTool</c>.
            For each view that you want to use of this new tool instead of the standard way
            for users to draw new links, call
            <c>aView.ReplaceMouseTool(typeof(GoToolLinkingNew), new CustomLinkTool(aView))</c>
            </example>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.FindMouseTool(System.Type)">
            <summary>
            Find one of the tools used by this view that is an instance of a given tool type.
            </summary>
            <param name="tooltype"></param>
            <returns>null if no mouse tool's type is exactly <paramref name="tooltype"/></returns>
            <remarks>
            This is most useful when you want to modify one of the standard tools, typically by
            setting one of its properties.
            This method searches all of the lists of mode-less tools:
            <see cref="P:Northwoods.GoWeb.GoView.MouseDownTools"/>, <see cref="P:Northwoods.GoWeb.GoView.MouseMoveTools"/>, <see cref="P:Northwoods.GoWeb.GoView.MouseUpTools"/>.
            Note that the class of the tool that is found must match exactly with the
            given <paramref name="tooltype"/>--it cannot inherit from that type.
            This is implemented by calling <c>FindMouseTool(tooltype, false)</c>.
            </remarks>
            <example>
            (myView.FindMouseTool(typeof(GoToolContext)) as GoToolContext).SingleSelection = false;
            (myView.FindMouseTool(typeof(GoToolLinkingNew)) as GoToolLinkingNew).ForwardsOnly = true;
            </example>
            <example>
            GoToolDragging dragtool = FindMouseTool(typeof(GoToolDragging)) as GoToolDragging;
            if (dragtool != null) {
              ... dragtool.ComputeEffectiveSelection(clipsel, false) ...
            }
            </example>
            <seealso cref="M:Northwoods.GoWeb.GoView.FindMouseTool(System.Type,System.Boolean)"/>
            <seealso cref="M:Northwoods.GoWeb.GoView.ReplaceMouseTool(System.Type,Northwoods.GoWeb.IGoTool)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.FindMouseTool(System.Type,System.Boolean)">
            <summary>
            Find one of the tools used by this view that is an instance of a given tool type
            or of a subclass of that type.
            </summary>
            <param name="tooltype"></param>
            <param name="subclass">true if an instances of subclass of <paramref name="tooltype"/> is acceptable</param>
            <returns>null if no mouse tool's type is the same or is a subclass of <paramref name="tooltype"/></returns>
            <remarks>
            This is most useful when you want to modify one of the standard tools, typically by
            setting one of its properties.
            This method searches all of the lists of mode-less tools:
            <see cref="P:Northwoods.GoWeb.GoView.MouseDownTools"/>, <see cref="P:Northwoods.GoWeb.GoView.MouseMoveTools"/>, <see cref="P:Northwoods.GoWeb.GoView.MouseUpTools"/>.
            For examples, see <see cref="M:Northwoods.GoWeb.GoView.FindMouseTool(System.Type)"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.FindMouseTool(System.Type)"/>
            <seealso cref="M:Northwoods.GoWeb.GoView.ReplaceMouseTool(System.Type,Northwoods.GoWeb.IGoTool)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.CreateLink(Northwoods.GoWeb.IGoPort,Northwoods.GoWeb.IGoPort)">
            <summary>
            The <see cref="T:Northwoods.GoWeb.GoToolLinking"/> class calls this method to create a new link between ports.
            </summary>
            <param name="fromPort">if null, this method will return null</param>
            <param name="toPort">if null, this method will return null</param>
            <returns></returns>
            <remarks>
            By default this method creates a copy of the <see cref="P:Northwoods.GoWeb.GoView.NewLinkPrototype"/> object,
            assigns the <see cref="P:Northwoods.GoWeb.IGoLink.FromPort"/> and <see cref="P:Northwoods.GoWeb.IGoLink.ToPort"/>
            properties.
            How it adds the new link to this view's document depends on the ports.
            If both of the ports belong to <see cref="T:Northwoods.GoWeb.GoSubGraphBase"/>s, it adds the new link
            to the common parent <see cref="T:Northwoods.GoWeb.GoSubGraphBase"/> for both ports.
            Otherwise it adds the new link to the document's <see cref="P:Northwoods.GoWeb.GoDocument.LinksLayer"/>.
            If the new link is <see cref="T:Northwoods.GoWeb.IGoRoutable"/>, its <see cref="M:Northwoods.GoWeb.IGoRoutable.UpdateRoute"/>
            method is called.
            The <c>LinkCreated</c> event is <i>not</i> raised here;
            it is raised by <see cref="M:Northwoods.GoWeb.GoToolLinking.DoNewLink(Northwoods.GoWeb.IGoPort,Northwoods.GoWeb.IGoPort)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.OnLinkCreated(Northwoods.GoWeb.GoSelectionEventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.GoWeb.GoView.LinkCreated"/> event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.RaiseLinkCreated(Northwoods.GoWeb.GoObject)">
            <summary>
            Call <see cref="M:Northwoods.GoWeb.GoView.OnLinkCreated(Northwoods.GoWeb.GoSelectionEventArgs)"/> for the given object
            to raise a <see cref="E:Northwoods.GoWeb.GoView.LinkCreated"/> event.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.OnLinkRelinked(Northwoods.GoWeb.GoSelectionEventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.GoWeb.GoView.LinkRelinked"/> event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.RaiseLinkRelinked(Northwoods.GoWeb.GoObject)">
            <summary>
            Call <see cref="M:Northwoods.GoWeb.GoView.OnLinkRelinked(Northwoods.GoWeb.GoSelectionEventArgs)"/> for the given object
            to raise a <see cref="E:Northwoods.GoWeb.GoView.LinkRelinked"/> event.
            </summary>
            <param name="obj"></param>
            <remarks>
            This method is called by <see cref="M:Northwoods.GoWeb.GoToolLinking.DoRelink(Northwoods.GoWeb.IGoLink,Northwoods.GoWeb.IGoPort,Northwoods.GoWeb.IGoPort)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.DoSingleClick(Northwoods.GoWeb.GoInputEventArgs)">
            <summary>
            Perform the behavior that normally occurs upon a single click.
            </summary>
            <param name="evt"></param>
            <returns>true if the single click occured on a document object
            whose <see cref="M:Northwoods.GoWeb.GoObject.OnSingleClick(Northwoods.GoWeb.GoInputEventArgs,Northwoods.GoWeb.GoView)"/> method returned true</returns>
            <remarks>
            By default this picks the document object at the event's
            <see cref="P:Northwoods.GoWeb.GoInputEventArgs.DocPoint"/>.
            If an object is found, it raises the <c>ObjectSingleClicked</c> event and
            calls <see cref="M:Northwoods.GoWeb.GoObject.OnSingleClick(Northwoods.GoWeb.GoInputEventArgs,Northwoods.GoWeb.GoView)"/> on the object and
            on its <see cref="P:Northwoods.GoWeb.GoObject.Parent"/>s (if any) until it returns
            true.
            If no object is found at the event's point, it raises the
            <see cref="E:Northwoods.GoWeb.GoView.BackgroundSingleClicked"/> event.
            This is normally called from the <see cref="T:Northwoods.GoWeb.GoTool"/>.<see cref="M:Northwoods.GoWeb.GoTool.DoClick(Northwoods.GoWeb.GoInputEventArgs)"/>
            method, which is called by those tools that treat clicks in the
            standard fashion.
            <para>
            In GoDiagram Pocket, this method also calls <c>DoToolTipObject</c>,
            because there is no mouse-over event.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.DoDoubleClick(Northwoods.GoWeb.GoInputEventArgs)">
            <summary>
            Perform the behavior that normally occurs upon a double click.
            </summary>
            <param name="evt"></param>
            <returns>true if the double click occured on a document object
            whose <see cref="M:Northwoods.GoWeb.GoObject.OnDoubleClick(Northwoods.GoWeb.GoInputEventArgs,Northwoods.GoWeb.GoView)"/> method returned true</returns>
            <remarks>
            By default this picks the document object at the event's
            <see cref="P:Northwoods.GoWeb.GoInputEventArgs.DocPoint"/>.
            If an object is found, it raises the <c>ObjectDoubleClicked</c> event and
            calls <see cref="M:Northwoods.GoWeb.GoObject.OnDoubleClick(Northwoods.GoWeb.GoInputEventArgs,Northwoods.GoWeb.GoView)"/> on the object and
            on its <see cref="P:Northwoods.GoWeb.GoObject.Parent"/>s (if any) until it returns
            true.
            If no object is found at the event's point, it raises the
            <see cref="E:Northwoods.GoWeb.GoView.BackgroundDoubleClicked"/> event.
            This is normally called from the <see cref="T:Northwoods.GoWeb.GoTool"/>.<see cref="M:Northwoods.GoWeb.GoTool.DoClick(Northwoods.GoWeb.GoInputEventArgs)"/>
            method, which is called by those tools that treat clicks in the
            standard fashion.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.DoContextClick(Northwoods.GoWeb.GoInputEventArgs)">
            <summary>
            Perform the behavior that normally occurs upon a context click.
            </summary>
            <param name="evt"></param>
            <returns>true if the context click occured on a document object
            whose <see cref="M:Northwoods.GoWeb.GoObject.OnContextClick(Northwoods.GoWeb.GoInputEventArgs,Northwoods.GoWeb.GoView)"/> method returned true</returns>
            <remarks>
            <para>
            By default this picks the document object at the event's
            <see cref="P:Northwoods.GoWeb.GoInputEventArgs.DocPoint"/>.
            If an object is found, it raises the <c>ObjectContextClicked</c> event and
            calls <see cref="M:Northwoods.GoWeb.GoObject.OnContextClick(Northwoods.GoWeb.GoInputEventArgs,Northwoods.GoWeb.GoView)"/> on the object and
            on its <see cref="P:Northwoods.GoWeb.GoObject.Parent"/>s (if any) until it returns
            true.
            </para>
            <para>
            If no object is found at the event's point, it raises the
            <see cref="E:Northwoods.GoWeb.GoView.BackgroundContextClicked"/> event.
            </para>
            <para>
            This is normally called from a context mouse button handling tool.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.DoWheel(Northwoods.GoWeb.GoInputEventArgs)">
            <summary>
            Perform the standard mouse wheel behavior for views.
            </summary>
            <param name="evt"></param>
            <remarks>
            <para>
            When the Control key is held down, rotating the mouse wheel changes the
            <see cref="P:Northwoods.GoWeb.GoView.DocScale"/> to "zoom" the view in or out at the current mouse point.
            Otherwise rotating the mouse wheel scrolls the view by calling <see cref="M:Northwoods.GoWeb.GoView.ScrollLine(System.Single,System.Single)"/>.
            If the Shift key is held down, the scrolling is horizontal instead of vertical.
            </para>
            <para>
            This is normally called from the <see cref="T:Northwoods.GoWeb.GoToolManager"/>.<see cref="M:Northwoods.GoWeb.GoToolManager.DoMouseWheel"/>
            method, to handle mouse wheel turns in the standard manner.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.OnObjectSingleClicked(Northwoods.GoWeb.GoObjectEventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.GoWeb.GoView.ObjectSingleClicked"/> event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.RaiseObjectSingleClicked(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoInputEventArgs)">
            <summary>
            Raise an <see cref="E:Northwoods.GoWeb.GoView.ObjectSingleClicked"/> event for a given object and canonicalized input event.
            </summary>
            <param name="obj"></param>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.OnObjectDoubleClicked(Northwoods.GoWeb.GoObjectEventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.GoWeb.GoView.ObjectDoubleClicked"/> event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.RaiseObjectDoubleClicked(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoInputEventArgs)">
            <summary>
            Raise an <see cref="E:Northwoods.GoWeb.GoView.ObjectDoubleClicked"/> event for a given object and canonicalized input event.
            </summary>
            <param name="obj"></param>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.OnObjectContextClicked(Northwoods.GoWeb.GoObjectEventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.GoWeb.GoView.ObjectContextClicked"/> event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.RaiseObjectContextClicked(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoInputEventArgs)">
            <summary>
            Raise an <see cref="E:Northwoods.GoWeb.GoView.ObjectContextClicked"/> event for a given object and canonicalized input event.
            </summary>
            <param name="obj"></param>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.OnBackgroundSingleClicked(Northwoods.GoWeb.GoInputEventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.GoWeb.GoView.BackgroundSingleClicked"/> event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.RaiseBackgroundSingleClicked(Northwoods.GoWeb.GoInputEventArgs)">
            <summary>
            Raise a <see cref="E:Northwoods.GoWeb.GoView.BackgroundSingleClicked"/> event for a given canonicalized input event.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.OnBackgroundDoubleClicked(Northwoods.GoWeb.GoInputEventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.GoWeb.GoView.BackgroundDoubleClicked"/> event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.RaiseBackgroundDoubleClicked(Northwoods.GoWeb.GoInputEventArgs)">
            <summary>
            Raise a <see cref="E:Northwoods.GoWeb.GoView.BackgroundDoubleClicked"/> event for a given canonicalized input event.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.OnBackgroundContextClicked(Northwoods.GoWeb.GoInputEventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.GoWeb.GoView.BackgroundContextClicked"/> event handlers.
            </summary>
            <param name="evt"></param>
            <remarks>
            This event is often used to provide a context menu for the view when no
            object is at the click point.
            We recommend not using the <c>Control.ContextMenu</c> property, but bringing
            up a context menu explicitly when handling this event.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.RaiseBackgroundContextClicked(Northwoods.GoWeb.GoInputEventArgs)">
            <summary>
            Raise a <see cref="E:Northwoods.GoWeb.GoView.BackgroundContextClicked"/> event for a given canonicalized input event.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.OnObjectEnterLeave(Northwoods.GoWeb.GoObjectEnterLeaveEventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.GoWeb.GoView.ObjectEnterLeave"/> event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.RaiseObjectEnterLeave(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoInputEventArgs)">
            <summary>
            Raise an <see cref="E:Northwoods.GoWeb.GoView.ObjectEnterLeave"/> event for a given object.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.DoObjectEnterLeave(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoInputEventArgs)">
            <summary>
            Perform the behavior that normally occurs when there is a change in the
            document object that the mouse is over.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="evt"></param>
            <remarks>
            <para>
            By default this raises the <see cref="E:Northwoods.GoWeb.GoView.ObjectEnterLeave"/> event by calling <see cref="M:Northwoods.GoWeb.GoView.RaiseObjectEnterLeave(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoInputEventArgs)"/>.
            It calls <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="M:Northwoods.GoWeb.GoObject.OnEnterLeave(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoView)"/> for the
            <paramref name="from"/> object (if not null) and the <paramref name="to"/> object
            (if not null) and proceeds up the <see cref="P:Northwoods.GoWeb.GoObject.Parent"/> chain for both objects.
            This allows groups such as nodes the ability to easily detect when the mouse enters
            or leaves the node, and to detect when the mouse moves over different child objects of a node.
            If both <paramref name="from"/> and <paramref name="to"/> are part of the same group,
            this method does not call <see cref="M:Northwoods.GoWeb.GoObject.OnEnterLeave(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoView)"/> twice on the common parent group.
            A true value from a call to <see cref="M:Northwoods.GoWeb.GoObject.OnEnterLeave(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoView)"/> will stop that
            chain of calls up the <see cref="P:Northwoods.GoWeb.GoObject.Parent"/> tree.
            </para>
            <para>
            This is normally called from the <see cref="T:Northwoods.GoWeb.GoToolManager"/>.<see cref="M:Northwoods.GoWeb.GoToolManager.DoMouseMove"/> method,
            and from the <see cref="T:Northwoods.GoWeb.GoToolDragging"/>.<see cref="M:Northwoods.GoWeb.GoToolDragging.DoMouseMove"/> method.
            Therefore this <see cref="E:Northwoods.GoWeb.GoView.ObjectEnterLeave"/> event is not raised during
            a resize or a linking or a rubber-band selection operation.
            However, you may extend existing tools or define new tools to call this method
            under the circumstances and with the objects that your policy would indicate.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.OnObjectSelectionDropReject(Northwoods.GoWeb.GoObjectEventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.GoWeb.GoView.ObjectSelectionDropReject"/> event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.RaiseObjectSelectionDropReject(Northwoods.GoWeb.GoObjectEventArgs)">
            <summary>
            Call <see cref="M:Northwoods.GoWeb.GoView.OnObjectSelectionDropReject(Northwoods.GoWeb.GoObjectEventArgs)"/> with the given <see cref="T:Northwoods.GoWeb.GoObjectEventArgs"/>
            to raise a <see cref="E:Northwoods.GoWeb.GoView.ObjectSelectionDropReject"/> event.
            </summary>
            <remarks>
            The caller needs to allocate a <see cref="T:Northwoods.GoWeb.GoObjectEventArgs"/> and afterwards
            examine the <see cref="P:Northwoods.GoWeb.GoInputEventArgs.InputState"/> to see if an event handler
            had set the value to <see cref="T:Northwoods.GoWeb.GoInputState"/>.<see cref="F:Northwoods.GoWeb.GoInputState.Cancel"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.OnBackgroundSelectionDropReject(Northwoods.GoWeb.GoInputEventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.GoWeb.GoView.BackgroundSelectionDropReject"/> event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.RaiseBackgroundSelectionDropReject(Northwoods.GoWeb.GoInputEventArgs)">
            <summary>
            Call <see cref="M:Northwoods.GoWeb.GoView.OnBackgroundSelectionDropReject(Northwoods.GoWeb.GoInputEventArgs)"/> with the given <see cref="T:Northwoods.GoWeb.GoInputEventArgs"/>
            to raise a <see cref="E:Northwoods.GoWeb.GoView.BackgroundSelectionDropReject"/> event.
            </summary>
            <remarks>
            The caller needs to allocate a <see cref="T:Northwoods.GoWeb.GoInputEventArgs"/> and afterwards
            examine the <see cref="P:Northwoods.GoWeb.GoInputEventArgs.InputState"/> to see if an event handler
            had set the value to <see cref="T:Northwoods.GoWeb.GoInputState"/>.<see cref="F:Northwoods.GoWeb.GoInputState.Cancel"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.DoSelectionDropReject(Northwoods.GoWeb.GoInputEventArgs)">
            <summary>
            Invoke <see cref="E:Northwoods.GoWeb.GoView.BackgroundSelectionDropReject"/> or
            <see cref="E:Northwoods.GoWeb.GoView.ObjectSelectionDropReject"/> event handlers and
            <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="M:Northwoods.GoWeb.GoObject.OnSelectionDropReject(Northwoods.GoWeb.GoObjectEventArgs,Northwoods.GoWeb.GoView)"/> methods
            to see if any want to prevent a drop.
            </summary>
            <param name="evt"></param>
            <returns>true if no drop should occur; false if a drop is acceptable.</returns>
            <remarks>
            This is normally called from the <see cref="T:Northwoods.GoWeb.GoToolDragging"/> tool's
            <see cref="M:Northwoods.GoWeb.GoToolDragging.DoMouseMove"/> and <see cref="M:Northwoods.GoWeb.GoToolDragging.DoMouseUp"/> methods,
            to decide whether a drop is permissible at the given input event point.
            In Windows Forms, it is also called by <c>DoExternalDrop</c> when dropping <c>GoObject</c>s,
            for completeness, when the <see cref="T:Northwoods.GoWeb.GoToolDragging"/> tool is not used
            for normal external drag-and-drops.
            This method must be called before calling <see cref="M:Northwoods.GoWeb.GoView.DoSelectionDropped(Northwoods.GoWeb.GoInputEventArgs)"/>,
            but it may be called many times during a drag before a drop actually happens.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.OnObjectSelectionDropped(Northwoods.GoWeb.GoObjectEventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.GoWeb.GoView.ObjectSelectionDropped"/> event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.RaiseObjectSelectionDropped(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoInputEventArgs)">
            <summary>
            Raise an <see cref="E:Northwoods.GoWeb.GoView.ObjectSelectionDropped"/> event for a given object and canonicalized input event.
            </summary>
            <param name="obj"></param>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.OnBackgroundSelectionDropped(Northwoods.GoWeb.GoInputEventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.GoWeb.GoView.BackgroundSelectionDropped"/> event handlers.
            </summary>
            <param name="evt"></param>
            <remarks>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.RaiseBackgroundSelectionDropped(Northwoods.GoWeb.GoInputEventArgs)">
            <summary>
            Raise a <see cref="E:Northwoods.GoWeb.GoView.BackgroundSelectionDropped"/> event for a given canonicalized input event.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.DoSelectionDropped(Northwoods.GoWeb.GoInputEventArgs)">
            <summary>
            Perform the behavior that normally occurs when the <see cref="P:Northwoods.GoWeb.GoView.Selection"/> has been
            dropped in this view.
            </summary>
            <param name="evt"></param>
            <returns>true if the selection was dropped on a document object
            whose <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="M:Northwoods.GoWeb.GoObject.OnSelectionDropped(Northwoods.GoWeb.GoObjectEventArgs,Northwoods.GoWeb.GoView)"/> method returned true</returns>
            <remarks>
            <para>
            By default this picks the document object at the event's
            <see cref="P:Northwoods.GoWeb.GoInputEventArgs.DocPoint"/>, ignoring all objects that are in
            the <see cref="P:Northwoods.GoWeb.GoView.Selection"/> or are part of any selected object.
            If an object is found, it raises the <see cref="E:Northwoods.GoWeb.GoView.ObjectSelectionDropped"/> event and
            calls <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="M:Northwoods.GoWeb.GoObject.OnSelectionDropped(Northwoods.GoWeb.GoObjectEventArgs,Northwoods.GoWeb.GoView)"/> on the object and
            on its <see cref="P:Northwoods.GoWeb.GoObject.Parent"/>s (if any) until it returns
            true.
            </para>
            <para>
            If no object is found at the event's point, it raises the
            <see cref="E:Northwoods.GoWeb.GoView.BackgroundSelectionDropped"/> event.
            </para>
            <para>
            This is normally called from the <see cref="T:Northwoods.GoWeb.GoToolDragging"/> tool's
            <see cref="M:Northwoods.GoWeb.GoToolDragging.DoMouseUp"/> method.
            For external drag-and-drops from other Controls, in Windows Forms,
            this method is also called.  If <c>ExternalDragDropsOnEnter</c> is true,
            this method is called by the <see cref="T:Northwoods.GoWeb.GoToolDragging"/> tool, just as
            for an internal drag-and-drop.  If <c>ExternalDragDropsOnEnter</c> is false,
            <c>DoExternalDrop</c> calls this method, since the regular <see cref="T:Northwoods.GoWeb.GoToolDragging"/>
            tool is not used on a normal external drop.
            This method should only be called when <see cref="M:Northwoods.GoWeb.GoView.DoSelectionDropReject(Northwoods.GoWeb.GoInputEventArgs)"/> returns false.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.StandardizeCursorName(System.String)">
            <summary>
            Convert a cursor name to a standardized name.
            </summary>
            <param name="s"></param>
            <returns></returns>
            <remarks>
            <para>
            Standard cursor names are basically those used by CSS2.
            This list includes:
            "default", "pointer", "move", "crosshair", "text", "help", "wait", "not-allowed",
            and "*-resize" where "*" is one of: "n", "ne", "nw", "s", "se", "sw", "e", "w", "col", or "row".
            Other names are lowercased and returned, allowing for the user of
            other cursors supported by Windows Forms (e.g. "pannorth") that are
            not recognized by CSS2, or those cursors defined by CSS for WebForms or SVG
            but that are not standard in Windows Forms.
            </para>
            <para>
            This method will recognize the names of some
            <c>System.Windows.Forms.Cursors</c> properties and substitute
            the corresponding standard cursor names.  These currently include:
            "Cross" (becomes "crosshair"),
            "Hand" (becomes "pointer"),
            "SizeAll" (becomes "move"),
            "SizeNESW" (becomes "ne-resize"),
            "SizeNS" (becomes "s-resize"),
            "SizeNWSE" (becomes "se-resize"),
            "SizeWE" (becomes "e-resize"),
            "VSplit" (becomes "col-resize"),
            "HSplit" (becomes "row-resize"),
            "No" (becomes "not-allowed"),
            "WaitCursor" (becomes "wait"),
            and "IBeam" (becomes "text").
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.CanEditCopy">
            <summary>
            This predicate is true when the user can perform the <see cref="M:Northwoods.GoWeb.GoView.EditCopy"/> action.
            </summary>
            <remarks>
            This returns false if the <see cref="P:Northwoods.GoWeb.GoView.Selection"/> is empty,
            if <see cref="M:Northwoods.GoWeb.GoView.CanCopyObjects"/> is false,
            or if the primary selection's <see cref="M:Northwoods.GoWeb.GoObject.CanCopy"/> property is false.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.CopyToClipboard(Northwoods.GoWeb.IGoCollection)"/>
            <seealso cref="M:Northwoods.GoWeb.GoView.EditCopy"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.DisableKeys"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.EditCopy">
            <summary>
            Copy the <see cref="P:Northwoods.GoWeb.GoView.Selection"/> to the clipboard.
            </summary>
            <remarks>
            <para>
            This method does nothing if <see cref="M:Northwoods.GoWeb.GoView.CanCopyObjects"/> is false.
            After calling <see cref="M:Northwoods.GoWeb.GoView.CopyToClipboard(Northwoods.GoWeb.IGoCollection)"/>,
            this calls <see cref="M:Northwoods.GoWeb.GoView.RaiseClipboardCopied"/>.
            All the actions occur within a transaction.
            </para>
            <para>
            All of the objects in the selection will be copied by serializing them.
            If any of the objects, or any of the objects that they refer to, are not
            serializable, there will be a serialization exception, and the clipboard
            might not a copy of the selection.
            <see cref="M:Northwoods.GoWeb.GoView.CopyToClipboard(Northwoods.GoWeb.IGoCollection)"/> will log any exceptions to any trace listeners.
            The User Guide discusses serialization and deserialization in more detail.
            </para>
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.CanEditCopy"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.DisableKeys"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.OnClipboardCopied(System.EventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.GoWeb.GoView.ClipboardCopied"/> event handlers.
            </summary>
            <param name="evt"></param>
            <remarks>
            This is called after <see cref="M:Northwoods.GoWeb.GoView.EditCopy"/> and <see cref="M:Northwoods.GoWeb.GoView.EditCut"/>
            call to <see cref="M:Northwoods.GoWeb.GoView.CopyToClipboard(Northwoods.GoWeb.IGoCollection)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.RaiseClipboardCopied">
            <summary>
            Call <see cref="M:Northwoods.GoWeb.GoView.OnClipboardCopied(System.EventArgs)"/> to raise a <see cref="E:Northwoods.GoWeb.GoView.ClipboardCopied"/> event.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.CopyToClipboard(Northwoods.GoWeb.IGoCollection)">
            <summary>
            Put a copy of a collection of objects in the clipboard.
            </summary>
            <param name="coll"></param>
            <remarks>
            The collection is copied into a new document of the same
            class as the <see cref="P:Northwoods.GoWeb.GoView.Document"/> property value.
            (That document class must have a public zero-argument constructor.)
            This method then calls <see cref="M:Northwoods.GoWeb.GoDocument.MergeLayersFrom(Northwoods.GoWeb.GoDocument)"/> this
            view's document and then calls <see cref="M:Northwoods.GoWeb.GoDocument.CopyFromCollection(Northwoods.GoWeb.IGoCollection,System.Boolean,System.Boolean,System.Drawing.SizeF,Northwoods.GoWeb.GoCopyDictionary)"/>
            to make a copy of all of the objects in <paramref name="coll"/> in
            the new document in the appropriate layers.
            Note that in order to maintain the distinct layers of the objects being copied,
            each layer needs to have a unique identifier, <see cref="P:Northwoods.GoWeb.GoLayer.Identifier"/>.
            The new document is then saved in the Session with the key "Northwoods.GoWeb.Clipboard".
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.CanEditCut">
            <summary>
            This predicate is true when the user can perform the <see cref="M:Northwoods.GoWeb.GoView.EditCut"/> action.
            </summary>
            <remarks>
            This returns false if the <see cref="P:Northwoods.GoWeb.GoView.Selection"/> is empty,
            if <see cref="M:Northwoods.GoWeb.GoView.CanCopyObjects"/> is false,
            if <see cref="M:Northwoods.GoWeb.GoView.CanDeleteObjects"/> is false,
            or if the primary selection's <see cref="M:Northwoods.GoWeb.GoObject.CanCopy"/>
            or <see cref="M:Northwoods.GoWeb.GoObject.CanDelete"/> properties are false.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.EditCut"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.DisableKeys"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.EditCut">
            <summary>
            Copy the current <see cref="P:Northwoods.GoWeb.GoView.Selection"/> to the clipboard and then delete it.
            </summary>
            <remarks>
            This method does nothing if <see cref="M:Northwoods.GoWeb.GoView.CanCopyObjects"/> or
            <see cref="M:Northwoods.GoWeb.GoView.CanDeleteObjects"/> is false.
            After calling <see cref="M:Northwoods.GoWeb.GoView.CopyToClipboard(Northwoods.GoWeb.IGoCollection)"/> and <see cref="M:Northwoods.GoWeb.GoView.DeleteSelection(Northwoods.GoWeb.GoSelection)"/>,
            this calls <see cref="M:Northwoods.GoWeb.GoView.RaiseClipboardCopied"/>.
            All the actions occur within a transaction.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.CanEditCut"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.DisableKeys"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.CanEditPaste">
            <summary>
            This predicate is true when the user can perform the <see cref="M:Northwoods.GoWeb.GoView.EditPaste"/> action.
            </summary>
            <remarks>
            This returns false if <see cref="M:Northwoods.GoWeb.GoView.CanInsertObjects"/> is false,
            or if the clipboard doesn't have data supporting the <see cref="P:Northwoods.GoWeb.GoDocument.DataFormat"/> format.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.PasteFromClipboard"/>
            <seealso cref="M:Northwoods.GoWeb.GoView.EditPaste"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.DisableKeys"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.EditPaste">
            <summary>
            Paste and select a copy of the clipboard's GoObjects into this view's document.
            </summary>
            <remarks>
            <para>
            After calling <see cref="M:Northwoods.GoWeb.GoView.PasteFromClipboard"/>, it selects all of the
            newly inserted top-level objects, and then calls <see cref="M:Northwoods.GoWeb.GoView.RaiseClipboardPasted"/>.
            This method does nothing if <see cref="M:Northwoods.GoWeb.GoView.CanInsertObjects"/> is false.
            All the actions occur within a transaction.
            The selection is built between <see cref="E:Northwoods.GoWeb.GoView.SelectionStarting"/> and
            <see cref="E:Northwoods.GoWeb.GoView.SelectionFinished"/> events.
            </para>
            <para>
            All of the pasted objects will be copied by deserializing them.
            If any of the objects, or any of the objects that they refer to, are not
            (de-)serializable, there will be a serialization exception, and the paste
            might fail.
            <see cref="M:Northwoods.GoWeb.GoView.PasteFromClipboard"/> will log any exceptions to any trace listeners.
            The User Guide discusses serialization and deserialization in more detail.
            </para>
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.CanEditPaste"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.DisableKeys"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.OnClipboardPasted(System.EventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.GoWeb.GoView.ClipboardPasted"/> event handlers.
            </summary>
            <param name="evt"></param>
            <remarks>
            This is called after a call to <see cref="M:Northwoods.GoWeb.GoView.PasteFromClipboard"/> in <see cref="M:Northwoods.GoWeb.GoView.EditPaste"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.RaiseClipboardPasted">
            <summary>
            Call <see cref="M:Northwoods.GoWeb.GoView.OnClipboardPasted(System.EventArgs)"/> to raise a <see cref="E:Northwoods.GoWeb.GoView.ClipboardPasted"/> event.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.PasteFromClipboard">
            <summary>
            Copy the GoObjects in the clipboard into this view's document.
            </summary>
            <returns>The <see cref="T:Northwoods.GoWeb.GoCopyDictionary"/> representing the results of the copy.</returns>
            <remarks>
            The clipboard is stored in a Session variable, under the key "Northwoods.GoWeb.Clipboard".
            The value will be a <see cref="T:Northwoods.GoWeb.GoDocument"/>; we just call
            <see cref="M:Northwoods.GoWeb.GoDocument.CopyFromCollection(Northwoods.GoWeb.IGoCollection,System.Boolean,System.Boolean,System.Drawing.SizeF,Northwoods.GoWeb.GoCopyDictionary)"/> to copy the objects
            from the clipboard document into this document.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.CreateGrid">
            <summary>
            This method is called by the constructor to create a grid object for this view.
            </summary>
            <returns>A <see cref="T:Northwoods.GoWeb.GoGrid"/></returns>
            <remarks>
            If you need to use your own subclass of <see cref="T:Northwoods.GoWeb.GoGrid"/>, this is
            one natural place to create it if you create more than one view.
            Otherwise you can just set the <see cref="P:Northwoods.GoWeb.GoView.Grid"/> property.
            By default this does:
            <code>
              GoGrid g = new GoGrid();
              g.OriginRelative = false;
              g.UnboundedSpots = (GoObject.TopLeft | GoObject.BottomRight);
              g.Selectable = false;
              return g;
            </code>
            The constructor will automatically call this method and add the
            resulting grid to this view's background layer, as if:
            <c>this.BackgroundLayer.Add(g);</c>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.FindNearestGridPoint(System.Drawing.PointF)">
            <summary>
            Find the nearest <see cref="P:Northwoods.GoWeb.GoView.Grid"/> point to a given point.
            </summary>
            <param name="p">A <c>PointF</c> in document coordinates.</param>
            <returns>A <c>PointF</c> grid point in document coordinates.</returns>
            <remarks>This just calls <c>this.Grid.FindNearestGridPoint</c>.</remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.SnapPoint(System.Drawing.PointF,Northwoods.GoWeb.GoObject)">
            <summary>
            Find the nearest grid point to a given point when <see cref="M:Northwoods.GoWeb.GoView.MoveSelection(Northwoods.GoWeb.GoSelection,System.Drawing.SizeF,System.Boolean)"/>
            or <see cref="M:Northwoods.GoWeb.GoView.CopySelection(Northwoods.GoWeb.GoSelection,System.Drawing.SizeF,System.Boolean)"/> need to snap object locations to a grid.
            </summary>
            <param name="p">A <c>PointF</c> in document coordinates.</param>
            <param name="obj">the <see cref="T:Northwoods.GoWeb.GoObject"/> being moved or resized</param>
            <returns>
            A <c>PointF</c> grid point in document coordinates, or else
            the value of <paramref name="p"/> if the point is not in or near any grid.
            </returns>
            <remarks>
            This method looks at all top-level <see cref="T:Northwoods.GoWeb.IGoDragSnapper"/> objects, from front to back,
            in all layers that are part of this view, to see which one has the grid point
            closest to the given point <paramref name="p"/>.
            This calls <see cref="T:Northwoods.GoWeb.IGoDragSnapper"/>.<see cref="M:Northwoods.GoWeb.IGoDragSnapper.CanSnapPoint(System.Drawing.PointF,Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoView)"/>
            to ask whether a grid object can participate in this calculation.
            If a grid's <see cref="P:Northwoods.GoWeb.IGoDragSnapper.SnapOpaque"/> property is true, it stops the
            search for any additional <see cref="T:Northwoods.GoWeb.IGoDragSnapper"/> objects that are underneath it.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.CreateSheet">
            <summary>
            This method is called by the constructor to create a page object for this view.
            </summary>
            <returns>
            a <see cref="T:Northwoods.GoWeb.GoGroup"/> including a bounded, shadowed <see cref="T:Northwoods.GoWeb.GoGrid"/> filled with the
            <see cref="P:Northwoods.GoWeb.GoDocument.PaperColor"/> positioned at the origin.
            </returns>
            <remarks>
            If you need to use your own subclass of <see cref="T:Northwoods.GoWeb.GoSheet"/>, this is
            one natural place to create it if you create more than one view.
            Otherwise you can just set the <see cref="P:Northwoods.GoWeb.GoView.Sheet"/> property.
            By default this does:
            <code>
              public virtual GoSheet CreateSheet() {
                GoSheet sheet = new GoSheet();
                sheet.Visible = (this.SheetStyle != GoViewSheetStyle.None);
                sheet.Printable = false;
                sheet.Selectable = false;
                // the following three lines are executed only in WinForms, in a try-catch:
                  PrintDocument pd = new PrintDocument();
                  PageSettings ps = pd.DefaultPageSettings;
                  sheet.UpdateBounds(ps, this.PrintScale);
                GoRectangle paper = sheet.Paper;
                Color color = this.Document.PaperColor;
                if (color == Color.Empty)
                  color = Color.White;
                paper.BrushColor = color;
                return sheet;
              }
            </code>
            The <see cref="P:Northwoods.GoWeb.GoView.BackgroundHasSheet"/> setter will automatically call this method
            and set the <see cref="P:Northwoods.GoWeb.GoView.Sheet"/> property, which will add that
            sheet to this view's background layer, as if:
            <c>this.BackgroundLayer.Add(s);</c>
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundHasSheet"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.GetShadowBrush(Northwoods.GoWeb.GoObject)">
            <summary>
            Get a Brush for filling in an object's drop-shadow.
            </summary>
            <param name="obj">the object casting a shadow; ignored by the default implementation</param>
            <returns>A <c>SolidBrush</c> whose color is <see cref="P:Northwoods.GoWeb.GoView.ShadowColor"/></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.GetShadowPen(Northwoods.GoWeb.GoObject,System.Single)">
            <summary>
            Get a Pen for drawing an object's drop-shadow.
            </summary>
            <param name="obj">the object casting a shadow; ignored by the default implementation</param>
            <param name="width">the desired width of the Pen</param>
            <returns>A <c>Pen</c> whose color is <see cref="P:Northwoods.GoWeb.GoView.ShadowColor"/></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.CanUndo">
            <summary>
            This just calls <c>Document.CanUndo()</c>.
            </summary>
            <returns><see cref="M:Northwoods.GoWeb.GoDocument.CanUndo"/></returns>
            <seealso cref="M:Northwoods.GoWeb.GoView.Undo"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.DisableKeys"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.Undo">
            <summary>
            This just calls <c>Document.Undo()</c>.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoView.Redo"/>
            <seealso cref="M:Northwoods.GoWeb.GoView.CanUndo"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.DisableKeys"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.CanRedo">
            <summary>
            This just calls <c>Document.CanRedo()</c>.
            </summary>
            <returns><see cref="M:Northwoods.GoWeb.GoDocument.CanRedo"/></returns>
            <seealso cref="M:Northwoods.GoWeb.GoView.Redo"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.DisableKeys"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.Redo">
            <summary>
            This just calls <c>Document.Redo()</c>.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoView.Undo"/>
            <seealso cref="M:Northwoods.GoWeb.GoView.CanRedo"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.DisableKeys"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.StartTransaction">
            <summary>
            This just calls <c>Document.StartTransaction()</c>.
            </summary>
            <returns><see cref="M:Northwoods.GoWeb.GoDocument.StartTransaction"/></returns>
            <seealso cref="M:Northwoods.GoWeb.GoView.FinishTransaction(System.String)"/>
            <seealso cref="M:Northwoods.GoWeb.GoView.AbortTransaction"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.FinishTransaction(System.String)">
            <summary>
            This just calls <c>Document.FinishTransaction(tname)</c>.
            </summary>
            <param name="tname"></param>
            <returns><see cref="M:Northwoods.GoWeb.GoDocument.FinishTransaction(System.String)"/></returns>
            <seealso cref="M:Northwoods.GoWeb.GoView.StartTransaction"/>
            <seealso cref="M:Northwoods.GoWeb.GoView.AbortTransaction"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoView.AbortTransaction">
            <summary>
            This just calls <c>Document.AbortTransaction()</c>.
            </summary>
            <returns><see cref="M:Northwoods.GoWeb.GoDocument.AbortTransaction"/></returns>
            <seealso cref="M:Northwoods.GoWeb.GoView.StartTransaction"/>
            <seealso cref="M:Northwoods.GoWeb.GoView.FinishTransaction(System.String)"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.Version">
            <summary>
            Return the version of GoDiagram being used.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.VersionName">
            <summary>
            Return the name of the version of GoDiagram being used.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.Width">
            <summary>
            This override calls <see cref="M:Northwoods.GoWeb.GoView.UpdateExtent"/> when the Width changes.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.Height">
            <summary>
            This override calls <see cref="M:Northwoods.GoWeb.GoView.UpdateExtent"/> when the Height changes.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.Document">
            <summary>
            Gets or sets the document that this view is displaying.
            </summary>
            <value>
            The initial value is created by a call to <see cref="M:Northwoods.GoWeb.GoView.CreateDocument"/>.
            The value must not be null.
            </value>
            <remarks>
            <para>
            The document serves as the container of graphical objects that you want
            to display.
            Normally you should create graphical objects (instances of subclasses of
            <see cref="T:Northwoods.GoWeb.GoObject"/>) and add them to the document, in order to make them
            visible to the user.
            Although often there will be one view for each document, there are can be
            more than one view displaying the same document, or sometimes no views at all
            for a document.
            Each view will have its own state, such as scroll position and selection.
            The document holds all of the state that should be shared by all views.
            </para>
            <para>
            Setting this property to a different document will stop any ongoing editing
            in this view, clear out the selection, make this view's OnDocumentChanged method
            the event handler for the new document, and call
            <see cref="M:Northwoods.GoWeb.GoView.InitializeLayersFromDocument"/> to set up the document layers in
            this view.
            </para>
            </remarks>
            <seealso cref="T:Northwoods.GoWeb.GoDocument"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.DocumentSize">
            <summary>
            Gets the dimensions of the document.
            </summary>
            <value>
            The <c>SizeF</c> value measures the document in document coordinates.
            </value>
            <remarks>
            <para>
            This value is normally the same as <c>Document.Size</c>.
            However, a view may decide to change the extent of the document that
            the view displays.
            </para>
            <para>
            For example, the <see cref="P:Northwoods.GoWeb.GoView.SheetStyle"/> controls
            whether the effective document size includes not only the whole document
            but also any part of the <see cref="P:Northwoods.GoWeb.GoView.Sheet"/> at the current <see cref="P:Northwoods.GoWeb.GoView.DocScale"/>
            given the size of this view control.
            </para>
            <para>
            As another example, the <see cref="P:Northwoods.GoWeb.GoView.ShowsNegativeCoordinates"/>
            property, when false, restricts the view to only showing non-negative
            positions in the document.  In addition to restricting the
            <see cref="P:Northwoods.GoWeb.GoView.DocumentTopLeft"/> property to non-negative positions,
            it adjusts this property accordingly.  This property also leaves room
            for any shadows, as specified by <see cref="P:Northwoods.GoWeb.GoView.ShadowOffset"/>.
            </para>
            <para>
            This property is different from the result of <see cref="M:Northwoods.GoWeb.GoView.ComputeDocumentBounds"/>
            because the latter method only takes into account what objects there actually are
            in the document, whereas this property will have the same value even if the
            document is empty.
            </para>
            <para>
            A different document size is used when printing in WinForms, <c>PrintDocumentSize</c>.
            </para>
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoView.DocumentTopLeft"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.ShowsNegativeCoordinates"/>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.Size"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.DocumentTopLeft">
            <summary>
            Gets the top-left position of the document.
            </summary>
            <value>
            The <c>PointF</c> value specifies the top-left corner of the document in
            document coordinates.
            </value>
            <remarks>
            <para>
            This value is normally the same as <c>Document.TopLeft</c>.
            However, a view may decide to change the extent of the document that
            the view displays.
            </para>
            <para>
            For example, the <see cref="P:Northwoods.GoWeb.GoView.SheetStyle"/> controls
            whether the effective document bounds includes not only the whole document
            but also any part of the <see cref="P:Northwoods.GoWeb.GoView.Sheet"/> at the current <see cref="P:Northwoods.GoWeb.GoView.DocScale"/>
            given the size of this view control.
            </para>
            <para>
            As another example, the <see cref="P:Northwoods.GoWeb.GoView.ShowsNegativeCoordinates"/>
            property, when false, restricts the view to only showing non-negative
            positions in the document by always returning the (0, 0) point.
            This property also leaves room
            for any shadows, as specified by <see cref="P:Northwoods.GoWeb.GoView.ShadowOffset"/>.
            </para>
            <para>
            A different document top-left position is used when printing in WinForms,
            <c>PrintDocumentTopLeft</c>.
            </para>
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoView.DocumentSize"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.ShowsNegativeCoordinates"/>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.TopLeft"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.ShowsNegativeCoordinates">
            <summary>
            Controls whether any parts of the document at negative coordinates can be seen
            or scrolled to by the user, when the <see cref="P:Northwoods.GoWeb.GoView.SheetStyle"/> is None.
            </summary>
            <value>
            If this value is true, the user will be able to scroll to negative coordinate
            positions in the document.
            If this value is false, the user cannot see objects located at negative coordinates.
            The default value is true.
            </value>
            <remarks>
            <para>
            When this value is false, it limits the values of the <see cref="P:Northwoods.GoWeb.GoView.DocumentSize"/>
            and <see cref="P:Northwoods.GoWeb.GoView.DocumentTopLeft"/> properties.
            However, when the <see cref="P:Northwoods.GoWeb.GoView.SheetStyle"/> is not <see cref="F:Northwoods.GoWeb.GoViewSheetStyle.None"/>,
            and there is a <see cref="P:Northwoods.GoWeb.GoView.Sheet"/>, the view ignores this property.
            </para>
            <para>
            For <see cref="T:Northwoods.GoWeb.GoPalette"/> the default value is false.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.DocPosition">
            <summary>
            Gets or sets the position in the document that this view is displaying.
            </summary>
            <value>
            The <c>PointF</c> value is in document coordinates and corresponds to
            this view's top-left corner's position in the document.
            Initially the value is (0, 0).
            </value>
            <remarks>
            When setting this property, it first adjusts the value by calling
            <see cref="M:Northwoods.GoWeb.GoView.LimitDocPosition(System.Drawing.PointF)"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.ConvertViewToDoc(System.Drawing.Point)"/>
            <seealso cref="M:Northwoods.GoWeb.GoView.ConvertDocToView(System.Drawing.PointF)"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.DocExtentSize"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.DisplayRectangle"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.DocExtentSize">
            <summary>
            Gets the size of this view in its document.
            </summary>
            <value>
            The <c>SizeF</c> value is in document coordinates.
            </value>
            <remarks>
            The value depends on the actual size of the client area and the scale
            at which the document is being shown.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoView.DocPosition"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.DisplayRectangle"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.DocExtent">
            <summary>
            Gets the extent of the view in its document, both position and size.
            </summary>
            <value>
            The <c>RectangleF</c> value is in document coordinates.
            </value>
            <remarks>
            This convenience method returns <c>new RectangleF(this.DocPosition, this.DocExtentSize)</c>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoView.DocPosition"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.DocExtentSize"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.DisplayRectangle"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.DocExtentCenter">
            <summary>
            Gets or sets the center point of the view in the document, in document coordinates.
            </summary>
            <value>
            This returns the center of the rectangle returned by <see cref="P:Northwoods.GoWeb.GoView.DocExtent"/>.
            When set, this modifies <see cref="P:Northwoods.GoWeb.GoView.DocPosition"/> so that the center of the view
            is at the new point.
            </value>
            <remarks>
            The view might not be able to be scrolled far enough to be able to actually
            make the new point be the center of the view, depending on the behavior of
            <see cref="M:Northwoods.GoWeb.GoView.LimitDocPosition(System.Drawing.PointF)"/>, which is normally limited by the values of
            <see cref="P:Northwoods.GoWeb.GoView.DocumentTopLeft"/> and <see cref="P:Northwoods.GoWeb.GoView.DocumentSize"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.DocScale">
            <summary>
            Gets or sets the scale at which this view displays its document.
            </summary>
            <value>
            <para>
            A value of <c>1.0f</c> specifies that one unit in document coordinates corresponds
            to one pixel in view coordinates.  Values smaller than one make objects appear
            smaller on the screen.  Larger values make it appear that you have zoomed into
            the diagram.
            </para>
            <para>
            The <c>float</c> value must be greater than zero.  The default value is <c>1.0f</c>.
            </para>
            </value>
            <remarks>
            When setting this property, it first limits the value by calling
            <see cref="M:Northwoods.GoWeb.GoView.LimitDocScale(System.Single)"/>.
            A different value is used when printing, <c>PrintScale</c>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.ConvertViewToDoc(System.Drawing.Size)"/>
            <seealso cref="M:Northwoods.GoWeb.GoView.ConvertDocToView(System.Drawing.SizeF)"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.DocExtentSize"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.ScrollSmallChange">
            <summary>
            Gets or sets the distance to scroll when scrolling a small amount.
            </summary>
            <value>
            The <c>Size</c> value must have positive <c>Width</c> and <c>Height</c>, indicating the
            amount in view coordinates to scroll horizontally or vertically in either direction.
            </value>
            <remarks>
            Setting this property also modifies the <c>SmallChange</c> properties of the scroll bars,
            if there are any.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.ScrollLine(System.Single,System.Single)"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.AutoPanRegion">
            <summary>
            Gets or sets the region around the original pan point where automatic panning does not occur.
            </summary>
            <value>
            The value defaults to 16x16; any new values must not be negative.
            </value>
            <remarks>
            This is used by <see cref="M:Northwoods.GoWeb.GoView.ComputeAutoPanDocPosition(System.Drawing.Point,System.Drawing.Point)"/> to decide whether the
            current mouse point is close enough to the original pan point that no scrolling
            should occur.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.Layers">
            <summary>
            Gets the collection of layers that this view displays.
            </summary>
            <remarks>
            <para>
            This value is the list of layers that this view displays.  The view will paint
            the layers in order.  Picking objects at a given point searches this same list
            of layers, but in reverse order.
            </para>
            <para>
            A view's collection of layers includes both view layers that it owns and document
            layers that it refers to.
            It is normal for the view to have references to all of the document's layers,
            in the same order as the document's layers, with a view layer on top for
            selection handles and the like.
            However, each view can have its own set of layers to display.
            The <see cref="M:Northwoods.GoWeb.GoView.InitializeLayersFromDocument"/> method is responsible for setting
            up the <see cref="T:Northwoods.GoWeb.GoLayer"/>s when the view is assigned a document.  It can use
            methods such as <see cref="M:Northwoods.GoWeb.GoLayerCollection.CreateNewLayerAfter(Northwoods.GoWeb.GoLayer)"/> to create
            view layers or <see cref="M:Northwoods.GoWeb.GoLayerCollection.InsertDocumentLayerAfter(Northwoods.GoWeb.GoLayer,Northwoods.GoWeb.GoLayer)"/> to insert
            references to document layers.
            </para>
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.InitializeLayersFromDocument"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundLayer"/>
            <seealso cref="T:Northwoods.GoWeb.GoLayerCollection"/>
            <seealso cref="T:Northwoods.GoWeb.GoLayer"/>
            <seealso cref="T:Northwoods.GoWeb.GoDocument"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.BackgroundLayer">
            <summary>
            Gets or sets the layer that is normally used for holding view-specific objects
            that are behind all of the document layers.
            </summary>
            <value>
            The <see cref="T:Northwoods.GoWeb.GoLayer"/> value must not be null and must already
            belong to this view.
            </value>
            <seealso cref="P:Northwoods.GoWeb.GoView.Layers"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.AllowSelect">
            <summary>
            Gets or sets whether the user can select objects in this view.
            </summary>
            <remarks>
            A false value prevents the user from selecting objects in this view
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            selectable by the user because the document or the object disallows it
            or because the object is not visible.
            Your code can always select objects programmatically by calling
            <c>Selection.Select(obj)</c> or <c>Selection.Add(obj)</c>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.CanSelectObjects"/>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.AllowSelect"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.AllowMove">
            <summary>
            Gets or sets whether the user can move objects in this view.
            </summary>
            <remarks>
            A false value prevents the user from moving objects in this view
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            movable by the user because the document or the object disallows it.
            Your code can always move objects programmatically by calling
            <c>obj.Position = newPos</c>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.CanMoveObjects"/>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.AllowMove"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.AllowCopy">
            <summary>
            Gets or sets whether the user can copy objects in this view.
            </summary>
            <remarks>
            A false value prevents the user from copying objects in this view
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            copyable by the user because the document or the object disallows it.
            Your code can always copy objects programmatically by calling
            <see cref="M:Northwoods.GoWeb.GoDocument.CopyFromCollection(Northwoods.GoWeb.IGoCollection,System.Boolean,System.Boolean,System.Drawing.SizeF,Northwoods.GoWeb.GoCopyDictionary)"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.CanCopyObjects"/>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.AllowCopy"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.AllowResize">
            <summary>
            Gets or sets whether the user can resize objects in this view.
            </summary>
            <remarks>
            A false value prevents the user from resizing objects in this view
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            resizable by the user because the document or the object disallows it.
            Your code can always resize objects programmatically by calling
            <c>obj.Size = newSize</c> or <c>obj.Bounds = newRect</c>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.CanResizeObjects"/>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.AllowResize"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.AllowReshape">
            <summary>
            Gets or sets whether the user can reshape objects in this view.
            </summary>
            <remarks>
            A false value prevents the user from reshaping objects in this view
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            reshapable by the user because the document or the object disallows it.
            Your code can always reshape objects programmatically by calling
            <c>obj.Size = newSize</c> or <c>obj.Bounds = newRect</c>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.CanReshapeObjects"/>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.AllowReshape"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.AllowDelete">
            <summary>
            Gets or sets whether the user can delete objects in this view.
            </summary>
            <remarks>
            A false value prevents the user from deleting objects in this view
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            deletable by the user because the document or the object disallows it.
            Your code can always delete objects programmatically by calling
            <c>obj.Remove()</c>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.CanDeleteObjects"/>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.AllowDelete"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.AllowInsert">
            <summary>
            Gets or sets whether the user can insert objects into this view.
            </summary>
            <remarks>
            A false value prevents the user from inserting objects in this view
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            insertable by the user because the document or the object disallows it.
            Your code can always insert objects programmatically by calling
            <c>Document.Add(obj)</c>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.CanInsertObjects"/>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.AllowInsert"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.AllowLink">
            <summary>
            Gets or sets whether the user can link objects together in this view.
            </summary>
            <remarks>
            A false value prevents the user from linking objects in this view
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            linkable by the user because the document or the object disallows it.
            Your code can always link objects programmatically by calling
            <c>Document.LinksLayers.Add(newLink)</c>, where <c>newLink</c> is
            a newly created instance of a class like <see cref="T:Northwoods.GoWeb.GoLink"/> or
            <see cref="T:Northwoods.GoWeb.GoLabeledLink"/> whose <see cref="P:Northwoods.GoWeb.IGoLink.FromPort"/> and
            <see cref="P:Northwoods.GoWeb.IGoLink.ToPort"/> properties have been set to ports in
            this view's document.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.CanLinkObjects"/>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.AllowLink"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.AllowEdit">
            <summary>
            Gets or sets whether the user can edit objects in this view.
            </summary>
            <remarks>
            A false value prevents the user from editing objects in this view
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            editable by the user because the document or the object disallows it.
            Your code can always edit objects programmatically by calling
            <c>obj.DoBeginEdit(aView)</c>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.CanEditObjects"/>
            <seealso cref="P:Northwoods.GoWeb.GoDocument.AllowEdit"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.Selection">
            <summary>
            Gets the view's selection object.
            </summary>
            <value>
            The view's <see cref="T:Northwoods.GoWeb.GoSelection"/> collection is created by a call to
            <see cref="M:Northwoods.GoWeb.GoView.CreateSelection"/> during construction.
            </value>
            <seealso cref="M:Northwoods.GoWeb.GoView.SelectAll"/>
            <seealso cref="M:Northwoods.GoWeb.GoView.SelectInRectangle(System.Drawing.RectangleF)"/>
            <seealso cref="M:Northwoods.GoWeb.GoView.CopySelection(Northwoods.GoWeb.GoSelection,System.Drawing.SizeF,System.Boolean)"/>
            <seealso cref="M:Northwoods.GoWeb.GoView.MoveSelection(Northwoods.GoWeb.GoSelection,System.Drawing.SizeF,System.Boolean)"/>
            <seealso cref="M:Northwoods.GoWeb.GoView.DeleteSelection(Northwoods.GoWeb.GoSelection)"/>
            <seealso cref="E:Northwoods.GoWeb.GoView.ObjectGotSelection"/>
            <seealso cref="E:Northwoods.GoWeb.GoView.ObjectLostSelection"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.MaximumSelectionCount">
            <summary>
            Gets or sets the maximum number of objects allowed in the selection.
            </summary>
            <value>
            The initial value is 999999.
            The value must be non-negative.
            </value>
            <remarks>
            <para>
            This property is checked by the <see cref="P:Northwoods.GoWeb.GoView.Selection"/>'s <see cref="M:Northwoods.GoWeb.GoSelection.Add(Northwoods.GoWeb.GoObject)"/> method.
            If the selection's <see cref="P:Northwoods.GoWeb.GoCollection.Count"/> is greater than or equal to this value,
            <see cref="M:Northwoods.GoWeb.GoSelection.Add(Northwoods.GoWeb.GoObject)"/> will not add any objects to this collection.
            </para>
            <para>
            If the new value is larger than the current number of selected objects,
            objects are removed from the <see cref="P:Northwoods.GoWeb.GoView.Selection"/> until the count is less than this new value.
            Such removals are done between <see cref="E:Northwoods.GoWeb.GoView.SelectionStarting"/> and
            <see cref="E:Northwoods.GoWeb.GoView.SelectionFinished"/> events.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.ContextClickSingleSelection">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoToolContext.SingleSelection"/> property
            of the <see cref="T:Northwoods.GoWeb.GoToolContext"/> tool that is in the <see cref="P:Northwoods.GoWeb.GoView.MouseDownTools"/> list.
            </summary>
            <value>
            The default value is true: a context click changes the selection so that
            only the object at the click point is selected.  Setting this to false permits
            context menu actions to occur on a multiple selection.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.SelectInRectangleStyle">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoWeb.GoPickInRectangleStyle"/> used by
            <see cref="M:Northwoods.GoWeb.GoView.SelectInRectangle(System.Drawing.RectangleF)"/> to determine whether an object is within
            a rectangle.
            </summary>
            <value>
            This value defaults to <see cref="F:Northwoods.GoWeb.GoPickInRectangleStyle.SelectableOnlyContained"/>.
            The value must be either
            <see cref="F:Northwoods.GoWeb.GoPickInRectangleStyle.SelectableOnlyContained"/> or
            <see cref="F:Northwoods.GoWeb.GoPickInRectangleStyle.SelectableOnlyIntersectsBounds"/>.
            </value>
        </member>
        <member name="E:Northwoods.GoWeb.GoView.SelectionMoved">
            <summary>
            The event that is raised after the user has finished moving the selection.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.GoWeb.GoView.Selection"/> is the collection of objects that were moved,
            although the effective selection, as determined by
            <see cref="T:Northwoods.GoWeb.GoToolDragging"/>.<see cref="M:Northwoods.GoWeb.GoToolDragging.ComputeEffectiveSelection(Northwoods.GoWeb.IGoCollection,System.Boolean)"/>
            may be a rather larger set of objects.
            </remarks>
        </member>
        <member name="E:Northwoods.GoWeb.GoView.SelectionCopied">
            <summary>
            The event that is raised after the user has copied the selection.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.GoWeb.GoView.Selection"/> is the collection of objects that were copied,
            although the effective selection, as determined by
            <see cref="T:Northwoods.GoWeb.GoToolDragging"/>.<see cref="M:Northwoods.GoWeb.GoToolDragging.ComputeEffectiveSelection(Northwoods.GoWeb.IGoCollection,System.Boolean)"/>
            may be a rather larger set of objects if
            <see cref="P:Northwoods.GoWeb.GoToolDragging.CopiesEffectiveSelection"/> is true.
            </remarks>
        </member>
        <member name="E:Northwoods.GoWeb.GoView.SelectionDeleting">
            <summary>
            The cancellable event that is raised just before the user has deleted the selected objects.
            </summary>
            <remarks>
            You can look at the <see cref="P:Northwoods.GoWeb.GoView.Selection"/> collection to examine
            the objects the user is about to remove from the document.
            </remarks>
        </member>
        <member name="E:Northwoods.GoWeb.GoView.SelectionDeleted">
            <summary>
            The event that is raised after the user has deleted the selected objects.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.GoWeb.GoView.Selection"/> collection has already been cleared
            at the time of this event.  If you need access to the collection of
            objects to be deleted before the deletion occurs, consider implementing
            a <see cref="E:Northwoods.GoWeb.GoView.SelectionDeleting"/> event handler.
            </remarks>
        </member>
        <member name="E:Northwoods.GoWeb.GoView.ObjectGotSelection">
            <summary>
            The event that is raised when an object gets added to this view's selection.
            </summary>
            <remarks>
            <para>
            If there is a lot of work to be done in updating various Controls to reflect
            what is currently selected, you may be able to reduce the frequency of
            updates for some user actions by implementing <see cref="E:Northwoods.GoWeb.GoView.SelectionStarting"/>
            and <see cref="E:Northwoods.GoWeb.GoView.SelectionFinished"/> event handlers.
            </para>
            <para>
            All event handlers for this event should not modify the selection.
            </para>
            </remarks>
        </member>
        <member name="E:Northwoods.GoWeb.GoView.ObjectLostSelection">
            <summary>
            The event that is raised when an object is removed from this view's selection.
            </summary>
            <remarks>
            <para>
            If there is a lot of work to be done in updating various Controls to reflect
            what is currently selected, you may be able to reduce the frequency of
            updates for some user actions by implementing <see cref="E:Northwoods.GoWeb.GoView.SelectionStarting"/>
            and <see cref="E:Northwoods.GoWeb.GoView.SelectionFinished"/> event handlers.
            </para>
            <para>
            All event handlers for this event should not modify the selection.
            </para>
            </remarks>
        </member>
        <member name="E:Northwoods.GoWeb.GoView.SelectionStarting">
            <summary>
            The event that is raised before a number of objects are selected or de-selected.
            </summary>
            <remarks>
            <para>
            This is paired with the <see cref="E:Northwoods.GoWeb.GoView.SelectionFinished"/> event in order to permit
            optimizations to skip updating other controls that depend on what is currently selected.
            You still need to implement <see cref="E:Northwoods.GoWeb.GoView.ObjectGotSelection"/> and <see cref="E:Northwoods.GoWeb.GoView.ObjectLostSelection"/>
            event handlers in order to detect the selection or de-selection of individual objects.
            Methods such as <see cref="M:Northwoods.GoWeb.GoView.SelectAll"/>, <see cref="M:Northwoods.GoWeb.GoView.SelectInRectangle(System.Drawing.RectangleF)"/>,
            <see cref="M:Northwoods.GoWeb.GoView.CopySelection(Northwoods.GoWeb.GoSelection,System.Drawing.SizeF,System.Boolean)"/>, <see cref="M:Northwoods.GoWeb.GoView.DeleteSelection(Northwoods.GoWeb.GoSelection)"/>, and <see cref="M:Northwoods.GoWeb.GoView.EditPaste"/>
            will raise this event before (and the
            <see cref="E:Northwoods.GoWeb.GoView.SelectionFinished"/> event after) making changes to the <see cref="P:Northwoods.GoWeb.GoView.Selection"/>.
            </para>
            <para>
            These two events are not raised when individual objects are added or removed
            from the <see cref="P:Northwoods.GoWeb.GoView.Selection"/>, such as when the user clicks on an object.
            These two events have been added to allow certain optimizations to be implemented
            when many <see cref="E:Northwoods.GoWeb.GoView.ObjectGotSelection"/> and <see cref="E:Northwoods.GoWeb.GoView.ObjectLostSelection"/>
            events might occur "at once".
            </para>
            <para>
            All event handlers for this event should not modify the selection.
            </para>
            </remarks>
        </member>
        <member name="E:Northwoods.GoWeb.GoView.SelectionFinished">
            <summary>
            The event that is raised after a number of objects are selected or de-selected.
            </summary>
            <remarks>
            <para>
            This is paired with the <see cref="E:Northwoods.GoWeb.GoView.SelectionStarting"/> event in order to permit
            optimizations to skip updating other controls that depend on what is currently selected.
            You still need to implement <see cref="E:Northwoods.GoWeb.GoView.ObjectGotSelection"/> and <see cref="E:Northwoods.GoWeb.GoView.ObjectLostSelection"/>
            event handlers in order to detect the selection or de-selection of individual objects.
            Methods such as <see cref="M:Northwoods.GoWeb.GoView.SelectAll"/>, <see cref="M:Northwoods.GoWeb.GoView.SelectInRectangle(System.Drawing.RectangleF)"/>,
            <see cref="M:Northwoods.GoWeb.GoView.CopySelection(Northwoods.GoWeb.GoSelection,System.Drawing.SizeF,System.Boolean)"/>, <see cref="M:Northwoods.GoWeb.GoView.DeleteSelection(Northwoods.GoWeb.GoSelection)"/>, and <see cref="M:Northwoods.GoWeb.GoView.EditPaste"/>
            will raise this event after (and the
            <see cref="E:Northwoods.GoWeb.GoView.SelectionStarting"/> event before) making changes to the <see cref="P:Northwoods.GoWeb.GoView.Selection"/>.
            </para>
            <para>
            These two events are not raised when individual objects are added or removed
            from the <see cref="P:Northwoods.GoWeb.GoView.Selection"/>, such as when the user clicks on an object.
            </para>
            <para>
            All event handlers for this event should not modify the selection.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.HidesSelection">
            <summary>
            Gets or sets whether the selection disappears when this view loses focus.
            </summary>
            <value>
            If this value is true, all selection handles are removed from this view when
            it loses focus.
            If this value is false, all selection handles are changed to use the
            <see cref="P:Northwoods.GoWeb.GoView.NoFocusSelectionColor"/> when this view loses focus.
            </value>
            <seealso cref="M:Northwoods.GoWeb.GoSelection.OnLostFocus"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.PrimarySelectionColor">
            <summary>
            Gets or sets the handle color for the primary selection.
            </summary>
            <value>
            The default value is a bright green color.
            </value>
            <seealso cref="T:Northwoods.GoWeb.GoSelection"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.NoFocusSelectionColor"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.SecondarySelectionColor">
            <summary>
            Gets or sets the handle color for selected objects other than the primary selection.
            </summary>
            <value>
            The default value is a light blue color.
            </value>
            <seealso cref="T:Northwoods.GoWeb.GoSelection"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.PrimarySelectionColor"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.NoFocusSelectionColor">
            <summary>
            Gets or sets the handle color for selected objects when this view does not have focus.
            </summary>
            <value>
            The default value is a light gray color.
            </value>
            <remarks>
            If this color is the same as <see cref="P:Northwoods.GoWeb.GoView.PrimarySelectionColor"/>,
            the selection handles will not be re-created as the view gains or loses focus.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoSelection.OnLostFocus"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.PrimarySelectionColor"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.ResizeHandleSize">
            <summary>
            The default size for new resize handles for resizable selected objects.
            </summary>
            <value>
            This <c>SizeF</c> value is in document coordinates.
            The initial value is 6x6.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.ResizeHandleWidth">
            <summary>
            Design-time and PropertyGrid access to <see cref="P:Northwoods.GoWeb.GoView.ResizeHandleSize"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.ResizeHandleHeight">
            <summary>
            Design-time and PropertyGrid access to <see cref="P:Northwoods.GoWeb.GoView.ResizeHandleSize"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.ResizeHandlePenWidth">
            <summary>
            Gets or sets the width of the pen used in resize handles for a selected object.  [Not in GoDiagram Pocket]
            </summary>
            <value>
            The initial value is 1.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.BoundingHandlePenWidth">
            <summary>
            Gets or sets the width of the pen used in bounding handles, surrounding a selected object.  [Not in GoDiagram Pocket]
            </summary>
            <value>
            The initial value is 2.
            </value>
        </member>
        <member name="E:Northwoods.GoWeb.GoView.ObjectResized">
            <summary>
            The event that is raised after the user finishes resizing an object.
            </summary>
            <remarks>
            The resized object is available as the <see cref="T:Northwoods.GoWeb.GoSelectionEventArgs"/>.<see cref="P:Northwoods.GoWeb.GoSelectionEventArgs.GoObject"/> property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.DisableKeys">
            <summary>
            Gets or sets which key commands are disabled in the <see cref="T:Northwoods.GoWeb.GoToolManager"/>'s
            <see cref="M:Northwoods.GoWeb.GoToolManager.DoKeyDown"/> method.
            </summary>
            <value>
            This property is initially <c>GoViewDisableKeys.ArrowMove</c>:
            all standard keystroke commands are enabled except for
            moving selected movable objects using the arrow keys.
            See the list of flags, which can be bit-wise combined, in the description
            for <see cref="T:Northwoods.GoWeb.GoViewDisableKeys"/>.
            </value>&gt;
        </member>
        <member name="P:Northwoods.GoWeb.GoView.ArrowMoveSmall">
            <summary>
            Gets or sets the distance a selected object is moved using the arrow keys with the Ctrl key held down.
            </summary>
            <value>The default value is 1 document unit.</value>
            <seealso cref="P:Northwoods.GoWeb.GoView.DisableKeys"/>
            <seealso cref="F:Northwoods.GoWeb.GoViewDisableKeys.ArrowMove"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.ArrowMoveLarge">
            <summary>
            Gets or sets the distance a selected object is moved using the arrow keys.
            </summary>
            <value>The default value is 10 document units.</value>
            <seealso cref="P:Northwoods.GoWeb.GoView.DisableKeys"/>
            <seealso cref="F:Northwoods.GoWeb.GoViewDisableKeys.ArrowMove"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.IsRenderingBitmap">
            <summary>
            This property is true when this GoView is producing a Bitmap.
            </summary>
            <value>
            The value is true when the <see cref="T:Northwoods.GoWeb.GoWebImageHandler"/> or <see cref="T:Northwoods.GoWeb.GoWebImage"/>
            are generating a Bitmap to be sent to the browser, not during HTML rendering by
            <see cref="M:Northwoods.GoWeb.GoView.Render(System.Web.UI.HtmlTextWriter)"/>, nor by <see cref="P:Northwoods.GoWeb.GoView.DataRenderer"/>.<see cref="M:Northwoods.GoWeb.GoViewDataRenderer.Render"/>.
            The value is false when responding to events or when not rendering at all.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.DisplayRectangle">
            <summary>
            Gets the area where the view displays its document.
            </summary>
            <value>
            The <c>Rectangle</c> value specifies an area in control coordinates
            relative to the top left corner of this control.
            </value>
            <remarks>
            This will return a rectangle whose width and height
            are specified by <c>Control.Width</c> and <c>Control.Height</c> in Pixels,
            minus any <see cref="P:Northwoods.GoWeb.GoView.ScrollMarginSize"/> width and height on both sides.
            The location of the rectangle is also determined by the width and height
            of the <see cref="P:Northwoods.GoWeb.GoView.ScrollMarginSize"/>.
            Note the difference with <see cref="P:Northwoods.GoWeb.GoView.DocExtent"/>, which gets an area
            in a document in document coordinates depending on the <see cref="P:Northwoods.GoWeb.GoView.DocPosition"/>
            and <see cref="P:Northwoods.GoWeb.GoView.DocScale"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.ConvertViewToDoc(System.Drawing.Rectangle)"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.ScrollMarginSize">
            <summary>
            Gets or sets the widths and heights of the margin used by the panning buttons.
            </summary>
            <value>
            This defaults to 10x10.  The width and height must be non-negative.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.SmoothingMode">
            <summary>
            Gets or sets how nicely lines are drawn.  [Not in GoDiagram Pocket]
            </summary>
            <remarks>
            This is not supported in GoDiagram Pocket, because the .NET Compact
            Framework does not support anti-aliased drawing.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoView.TextRenderingHint"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.InterpolationMode"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.CompositingQuality"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.PixelOffsetMode"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.TextRenderingHint">
            <summary>
            Gets or sets how nicely text is rendered.  [Not in GoDiagram Pocket]
            </summary>
            <remarks>
            This is not supported in GoDiagram Pocket, because the .NET Compact
            Framework does not support text rendering hints.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoView.SmoothingMode"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.InterpolationMode"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.CompositingQuality"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.PixelOffsetMode"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.InterpolationMode">
            <summary>
            Gets or sets how images are rendered when scaled or stretched.  [Not in GoDiagram Pocket]
            </summary>
            <remarks>
            This is not supported in GoDiagram Pocket, because the .NET Compact
            Framework does not support image interpolation modes.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoView.SmoothingMode"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.TextRenderingHint"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.CompositingQuality"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.PixelOffsetMode"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.CompositingQuality">
            <summary>
            Gets or sets how pixels are composited for all drawing operations.  [Not in GoDiagram Pocket]
            </summary>
            <remarks>
            This is not supported in GoDiagram Pocket, because the .NET Compact
            Framework does not support CompositingQuality.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoView.SmoothingMode"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.TextRenderingHint"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.InterpolationMode"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.PixelOffsetMode"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.PixelOffsetMode">
            <summary>
            Gets or sets how pixels are positioned for all drawing operations.  [Not in GoDiagram Pocket]
            </summary>
            <remarks>
            This is not supported in GoDiagram Pocket, because the .NET Compact
            Framework does not support PixelOffsetMode.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoView.SmoothingMode"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.TextRenderingHint"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.InterpolationMode"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.CompositingQuality"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.ScrollMarginBackgroundColor">
            <summary>
            Gets or sets the color used by the panning margins.
            </summary>
            <value>
            This defaults to <c>Color.LightGray</c>.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.ScrollMarginForegroundColor">
            <summary>
            Gets or sets the color used by the panning buttons.
            </summary>
            <value>
            This defaults to <c>Color.Black</c>.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.DataRenderer">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoWeb.GoViewDataRenderer"/> that this view uses to
            generate JavaScript data that can be used by client-side code.
            </summary>
            <value>
            This is initially set to the value of <see cref="M:Northwoods.GoWeb.GoView.CreateDataRenderer"/>;
            it must not be null.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.ScrollMarginToolTip">
            <summary>
            Gets or sets a string to be used as the client-side tooltip for the panning margins.
            </summary>
            <remarks>
            The tooltip is only shown over a particular panning button when it is enabled.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.ShowsVerticalScrollButtons">
            <summary>
            Gets or sets whether to render buttons for panning (scrolling) vertically.
            </summary>
            <value>
            By default this property is true.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.ShowsHorizontalScrollButtons">
            <summary>
            Gets or sets whether to render buttons for panning (scrolling) horizontally.
            </summary>
            <value>
            By default this property is true.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.ScriptFile">
            <summary>
            Gets or sets the URL of the file that contains the definitions of the
            JavaScript functions needed to provide interactive functionality in the browser.
            </summary>
            <value>
            <para>
            This defaults to "GoWeb.js", which is the name of the standard JavaScript
            file supplied by GoDiagram.  You will need to make sure this script file
            is present and accessible in your web site.
            If the value is the empty string, the <see cref="M:Northwoods.GoWeb.GoView.RenderScript"/> method
            will render the standard functions inline.
            When this value is a non-empty string, <see cref="M:Northwoods.GoWeb.GoView.RenderScript"/>
            simply generates <c>&lt;script src='...'&gt;&lt;/script&gt;</c>,
            using this property value as the <c>SRC</c>.
            When this value is null or the string "none", no script reference or inline definition is generated.
            A non-empty string should be a relative path; the tilde character is not supported.
            </para>
            <para>
            Note that having different values for different <see cref="T:Northwoods.GoWeb.GoView"/>s on
            the same <c>Page</c> can produce inconsistent results.  They should all
            be the same, so that the order in which the controls are rendered will
            not matter.
            </para>
            </value>
            <remarks>
            The advantages of having a separate JavaScript file include avoiding
            the overhead of rendering and sending and parsing the function definitions
            with each page, caching of that file and those functions by the client,
            and the ease of modifying the functions to accomodate additional features
            and additional browsers.
            Disadvantages include confusion when multiple views have conflicting values,
            and possibly dealing with caching problems when modifying the file.
            GoDiagram provides a standard JavaScript file that you can use, named
            <c>GoWeb.js</c>, that you can copy from the GoDiagram Web Samples directory.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.CssFile">
            <summary>
            Gets or sets the URL of the file that contains Cascading Style Sheet definitions
            needed to show interactive context menus in the browser.
            </summary>
            <value>
            <para>
            This defaults to "GoWeb.css", which is the name of the standard CSS file
            provided by GoDiagram for describing client-side context menus.
            You will need to make sure this CSS file is present and accessible in your web site.
            If the value is the empty string, the <see cref="M:Northwoods.GoWeb.GoView.RenderCss"/> method
            renders the standard style definitions inline.
            When this value is a non-empty string, <see cref="M:Northwoods.GoWeb.GoView.RenderCss"/>
            simply generates <c>&lt;link rel='stylesheet' href='...' type='text/css'&gt;</c>,
            using this property value as the <c>HREF</c>.
            When the value is null or the string "none", no stylesheet reference or style
            definition is generated.
            </para>
            <para>
            Note that having different values for different <see cref="T:Northwoods.GoWeb.GoView"/>s on
            the same <c>Page</c> can produce inconsistent results.  They should all
            be the same, so that the order in which the controls are rendered will
            not matter.
            </para>
            </value>
            <remarks>
            The advantages of having a separate CSS file include avoiding
            the overhead of sending and parsing the style definitions
            with each page, caching of that file and those definitions by the client,
            and the ease of modifying the styles to accomodate additional features.
            Disadvantages include confusion when multiple views have conflicting values,
            and possibly dealing with caching problems when modifying the file.
            GoDiagram provides a standard CSS file that you can use, named
            <c>GoWeb.css</c>, that you can copy from the GoDiagram Web Samples directory.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.Alt">
            <summary>
            Gets or sets the ALT attribute text to be shown if the image is not available
            for some reason.
            </summary>
            <value>
            This defaults to null, which results in an ALT attribute value
            referring to the <see cref="P:Northwoods.GoWeb.GoView.ImagePage"/>.
            </value>
            <remarks>
            <para>
            You may want to set this property to provide application-specific
            information describing the view if the image is not loaded.
            </para>
            <para>
            You can also define a JavaScript error handler; the default handler
            will call <c>location.reload()</c>.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.ImagePage">
            <summary>
            Gets or sets the URL of the page that actually produces the image of this
            view in this web application.
            </summary>
            <value>
            This defaults to "GoWebImage.axd".  A new page name must not be null.
            A non-empty string should be a relative path; the tilde character is not supported.
            </value>
            <remarks>
            <para>
            The default value, "GoWebImage.axd", requires an entry in the <c>Web.config</c>
            as follows:
            <code>
              		&lt;httpHandlers&gt;
                    &lt;add verb="GET" path="GoWebImage.axd" type="Northwoods.GoWeb.GoWebImageHandler"/&gt;
              		&lt;/httpHandlers&gt;
            </code>
            The <see cref="T:Northwoods.GoWeb.GoWebImageHandler"/> class is defined in the <c>Northwoods.GoWeb.dll</c> assembly.
            </para>
            <para>
            An alternative implementation for image generation is to specify "GoWebImage.aspx" as the value.
            You would need to have this page be part of your web site.  The contents of the page,
            in its entirety, would be:
            <code>
            &lt;%@ Page Inherits="Northwoods.GoWeb.GoWebImage" %&gt;
            </code>
            However, using this ASPX page mechanism does suffer from potential interference from ASP.NET templates,
            which may try to write this page.
            </para>
            <para>
            Either standard definition of this page can be shared by multiple <c>GoView</c>
            instances in a web application, including <c>GoPalette</c> or <c>GoOverview</c> instances.
            </para>
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoView.GetSessionViewsTable"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.ImageFormat">
            <summary>
            Gets or sets the data format of the image that is produced by the <see cref="P:Northwoods.GoWeb.GoView.ImagePage"/>.
            </summary>
            <value>
            This defaults to <c>ImageFormat.Png</c>.
            The value must be one of: <c>ImageFormat.Jpeg</c>, <c>ImageFormat.Png</c>, or <c>ImageFormat.Gif</c>.
            </value>
            <remarks>
            This changes the ContentType of the Response.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoView.ImagePage"/>
            <seealso cref="M:Northwoods.GoWeb.GoView.GetSessionViewsTable"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.NoPost">
            <summary>
            Gets or sets whether client-side JavaScript actions on this <c>IMG</c> object
            cause postbacks for the whole page or whether they just cause this <c>IMG</c> to be reloaded.
            </summary>
            <value>
            This defaults to true.
            </value>
            <remarks>
            <para>
            A value of false will cause mouse-up and other events on the <c>IMG</c> object
            (in the client-side DOM that represents this view) to call the standard
            <c>__doPostBack</c> function that ASP.NET defines.
            A value of true will instead reload the <c>IMG</c>'s <c>src</c> attribute, while
            passing along query string commands that would normally have been posted for
            that view.
            </para>
            <para>
            If you set this to true, please be aware that mouse events and other actions that
            are passed through the <see cref="T:Northwoods.GoWeb.GoWebImage"/> operate on this view without the
            context of a <c>Page</c>.  If you want to define any <c>GoView</c> event handlers,
            you will need to do so in an override of <see cref="M:Northwoods.GoWeb.GoView.OnNoPostLoad"/>, and those
            event handlers cannot depend on the <c>Page</c> or other WebControls.  For most
            of the <c>GoView</c> events, it would be simplest to just override the corresponding
            <c>On...</c> protected method.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.SafeID">
            <summary>
            Return a string identifier that is just like <c>UniqueID</c>, but
            has colons replaced by underscores.
            </summary>
            <remarks>
            The <c>Control.UniqueID</c> provides a hierarchically qualified identifier for a control,
            which is needed to distinguish repeating controls or controls in UserControls.
            This safe form can be used as an identifier in JavaScript, and is actually used as
            the <c>id</c> property for the <c>IMG</c> element so that the element can easily be found
            by the JavaScript expression <c>document.getElementById(...)</c>.
            (The <c>Control.ID</c> property is not currently used by any of the standard
            JavaScript used by GoDiagram.)
            </remarks>
        </member>
        <member name="E:Northwoods.GoWeb.GoView.SessionStarted">
            <summary>
            The event that is raised when this view is being loaded in a <c>Page</c>
            for the first time in a user's session.
            </summary>
        </member>
        <member name="E:Northwoods.GoWeb.GoView.Updated">
            <summary>
            The event that is raised when this view has handled its input events
            and is ready to be rendered.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.Enabled">
            <summary>
            Change the appearance of the view when the <c>Enabled</c> state is changed.
            </summary>
            <remarks>
            Currently this just changes the appearance of the selection, if any, to
            appear as if the view had lost focus.  This behavior may be altered in the future.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.BackgroundImage">
            <summary>
            Gets or sets an Image to be displayed in the background of the view.
            </summary>
        </member>
        <member name="E:Northwoods.GoWeb.GoView.PropertyChanged">
            <summary>
            Rather than having separate events whenever any view property changed,
            all such notifications occur through this single event.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoView.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)"/>
            <seealso cref="M:Northwoods.GoWeb.GoView.RaisePropertyChangedEvent(System.String)"/>
        </member>
        <member name="E:Northwoods.GoWeb.GoView.DocumentChanged">
            <summary>
            All <see cref="T:Northwoods.GoWeb.GoDocument"/>.<see cref="E:Northwoods.GoWeb.GoDocument.Changed"/> events get re-raised through this event,
            for the convenience of writing event handlers on the document's view.
            </summary>
            <remarks>
            Because the <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/> that are passed on through
            this event are actually raised by <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            and distributed by <see cref="M:Northwoods.GoWeb.GoDocument.OnChanged(Northwoods.GoWeb.GoChangedEventArgs)"/>, there is no
            <c>GoView.RaiseDocumentChanged</c> method as would be conventional.
            As with all events, it is more efficient to override
            <see cref="M:Northwoods.GoWeb.GoView.OnDocumentChanged(System.Object,Northwoods.GoWeb.GoChangedEventArgs)"/> on <see cref="T:Northwoods.GoWeb.GoView"/>
            or <see cref="M:Northwoods.GoWeb.GoDocument.OnChanged(Northwoods.GoWeb.GoChangedEventArgs)"/> on <see cref="T:Northwoods.GoWeb.GoDocument"/>
            than it is to register delegates as event handlers on this event.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.AllowKey">
            <summary>
            Gets or sets whether the user can type keystroke commands in this view.
            </summary>
            <remarks>
            A false value prevents the user from entering key commands in this view
            by the normal mechanisms.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.AllowMouse">
            <summary>
            Gets or sets whether the user can use the mouse in this view.
            </summary>
            <remarks>
            A false value prevents the user from using the mouse in this view
            by the normal mechanisms.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.FirstInput">
            <summary>
            Gets the canonical event args information for the last mouse down.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoView.LastInput"/>
            <seealso cref="T:Northwoods.GoWeb.GoTool"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.LastInput">
            <summary>
            Gets the canonical event args information for the last mouse or keyboard input.
            </summary>
            <remarks>
            The last input event args information is used by the tools, the view, and objects
            to decide how to behave.  Typically you will use <see cref="P:Northwoods.GoWeb.GoInputEventArgs.DocPoint"/>
            to see where an event occurred, or <see cref="P:Northwoods.GoWeb.GoInputEventArgs.Control"/> to see
            if the Ctrl key was held down at the time of the event.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoView.FirstInput"/>
            <seealso cref="T:Northwoods.GoWeb.GoTool"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.DefaultTool">
            <summary>
            Gets or sets the default tool.
            </summary>
            <value>
            The value must not be null.  Initially this is assigned the value of <see cref="M:Northwoods.GoWeb.GoView.CreateDefaultTool"/>.
            </value>
            <remarks>
            When the <see cref="P:Northwoods.GoWeb.GoView.Tool"/> property is set to null, we actually reset
            <see cref="P:Northwoods.GoWeb.GoView.Tool"/> to be the value of this <see cref="P:Northwoods.GoWeb.GoView.DefaultTool"/> property.
            By default this value is an instance of <see cref="T:Northwoods.GoWeb.GoToolManager"/>, which handles
            standard keyboard commands and invokes the appropriate tool upon mouse down/move/up
            events.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoView.Tool"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.Tool">
            <summary>
            Gets or sets the current tool being used by this view.
            </summary>
            <remarks>
            <para>
            As standard input events occur, the event args information is canonicalized
            into an instance of <see cref="T:Northwoods.GoWeb.GoInputEventArgs"/> and then the current Tool's
            appropriate method is called.
            </para>
            <para>
            Setting this property to null results in setting it to the value of
            <see cref="P:Northwoods.GoWeb.GoView.DefaultTool"/>.
            A tool that has finished will probably need to reset this property to
            the <see cref="P:Northwoods.GoWeb.GoView.DefaultTool"/>,
            typically by calling the <see cref="T:Northwoods.GoWeb.GoTool"/>.<see cref="M:Northwoods.GoWeb.GoTool.StopTool"/> method.
            </para>
            <para>
            If the tool is explicitly set as a result of some user-interface command,
            the tool is being used in a "modal" fashion.
            </para>
            <para>
            If the tool is set as a result of the <see cref="T:Northwoods.GoWeb.GoToolManager"/> searching
            through the lists of tools to be started as a result of a mouse down, a mouse
            move, or a mouse up, then the tool is being used in a "mode-less" fashion.
            </para>
            </remarks>
            <seealso cref="T:Northwoods.GoWeb.GoToolManager"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.MouseDownTools"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.MouseMoveTools"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.MouseUpTools"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.MouseDownTools">
            <summary>
            Gets a list of "mode-less" tools to be considered for becoming the current Tool upon a mouse down event.
            </summary>
            <value>
            The <c>IList</c> may be modified.
            </value>
            <remarks>
            <para>
            <see cref="T:Northwoods.GoWeb.GoToolManager"/>, an instance of which is normally the <see cref="P:Northwoods.GoWeb.GoView.DefaultTool"/>,
            iterates through this list when a mouse down event occurs.  The first tool that it finds
            whose <see cref="M:Northwoods.GoWeb.IGoTool.CanStart"/> method returns true becomes this view's current
            <see cref="P:Northwoods.GoWeb.GoView.Tool"/>.  If no such tool is found, the <see cref="T:Northwoods.GoWeb.GoToolManager"/> continues
            its normal behavior.
            </para>
            <para>
            By default this returns a list containing instances of the <see cref="T:Northwoods.GoWeb.GoToolAction"/>,
            <see cref="T:Northwoods.GoWeb.GoToolContext"/>, <see cref="T:Northwoods.GoWeb.GoToolPanning"/>,
            <see cref="T:Northwoods.GoWeb.GoToolRelinking"/>, and <see cref="T:Northwoods.GoWeb.GoToolResizing"/> tools, in that order.
            The order of the tools matters, because even if several tools can start, only the first one
            actually is started.
            </para>
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoView.MouseMoveTools"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.MouseUpTools"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.MouseMoveTools">
            <summary>
            Gets a list of "mode-less" tools to be considered for becoming the current Tool upon a mouse move event.
            </summary>
            <value>
            The <c>IList</c> may be modified.
            </value>
            <remarks>
            <para>
            <see cref="T:Northwoods.GoWeb.GoToolManager"/>, an instance of which is normally the <see cref="P:Northwoods.GoWeb.GoView.DefaultTool"/>,
            iterates through this list when a mouse move event occurs.  The first tool that it finds
            whose <see cref="M:Northwoods.GoWeb.IGoTool.CanStart"/> method returns true becomes this view's current
            <see cref="P:Northwoods.GoWeb.GoView.Tool"/>.  If no such tool is found, the <see cref="T:Northwoods.GoWeb.GoToolManager"/> continues
            its normal behavior.
            </para>
            <para>
            By default this returns a list containing instances of the
            <see cref="T:Northwoods.GoWeb.GoToolLinkingNew"/>, <see cref="T:Northwoods.GoWeb.GoToolDragging"/>,
            and <see cref="T:Northwoods.GoWeb.GoToolRubberBanding"/> tools, in that order.
            The order of the tools matters, because even if several tools can start, only the first one
            actually is started.
            </para>
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoView.MouseDownTools"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.MouseUpTools"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.MouseUpTools">
            <summary>
            Gets a list of "mode-less" tools to be considered for becoming the current Tool upon a mouse up event.
            </summary>
            <value>
            The <c>IList</c> may be modified.
            </value>
            <remarks>
            <para>
            <see cref="T:Northwoods.GoWeb.GoToolManager"/>, an instance of which is normally the <see cref="P:Northwoods.GoWeb.GoView.DefaultTool"/>,
            iterates through this list when a mouse up event occurs.  The first tool that it finds
            whose <see cref="M:Northwoods.GoWeb.IGoTool.CanStart"/> method returns true becomes this view's current
            <see cref="P:Northwoods.GoWeb.GoView.Tool"/>.  If no such tool is found, the <see cref="T:Northwoods.GoWeb.GoToolManager"/> continues
            its normal behavior.
            </para>
            <para>
            By default this returns a list containing only an instance of the
            <see cref="T:Northwoods.GoWeb.GoToolSelecting"/> tool.
            </para>
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoView.MouseDownTools"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.MouseMoveTools"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.NewLinkClass">
             <summary>
             Gets the Type of <see cref="P:Northwoods.GoWeb.GoView.NewLinkPrototype"/>, and when set,
             creates an instance of the class as the new value of <see cref="P:Northwoods.GoWeb.GoView.NewLinkPrototype"/>.
             </summary>
             <value>the <c>Type</c> of the value of <see cref="P:Northwoods.GoWeb.GoView.NewLinkPrototype"/></value>
             <remarks>
             This property has been superseded by the <see cref="P:Northwoods.GoWeb.GoView.NewLinkPrototype"/> property,
             but it remains for compatibility.
             </remarks>
            ??? [Obsolete]
        </member>
        <member name="P:Northwoods.GoWeb.GoView.NewLinkPrototype">
            <summary>
            Gets or sets a <see cref="T:Northwoods.GoWeb.GoObject"/> that is copied when a new link is created.
            </summary>
            <value>
            The <see cref="T:Northwoods.GoWeb.GoObject"/> must implement the <see cref="T:Northwoods.GoWeb.IGoLink"/> interface
            with a no-argument constructor.
            The value must not be null, either.  You can disable user-drawn links by setting
            <see cref="P:Northwoods.GoWeb.GoView.AllowLink"/> to false instead.
            </value>
            <remarks>
            <para>
            The <see cref="M:Northwoods.GoWeb.GoView.CreateLink(Northwoods.GoWeb.IGoPort,Northwoods.GoWeb.IGoPort)"/> method uses this property to determine
            what kind of link to create.  It is also used by the <see cref="T:Northwoods.GoWeb.GoToolLinking"/>
            tool's <see cref="M:Northwoods.GoWeb.GoToolLinking.CreateTemporaryLink(Northwoods.GoWeb.IGoPort,Northwoods.GoWeb.IGoPort)"/> method.
            </para>
            <para>
            With this property, you can more easily initialize the properties of each new link
            to be created, by setting the properties once on this prototype object, rather
            than each time in a <see cref="E:Northwoods.GoWeb.GoView.LinkCreated"/> event handler.
            For coding purposes, it may be more convenient to refer to either
            the <see cref="P:Northwoods.GoWeb.GoView.NewGoLink"/> property to set <see cref="T:Northwoods.GoWeb.GoLink"/> properties
            if this object is a <see cref="T:Northwoods.GoWeb.GoLink"/>,
            or to the <see cref="P:Northwoods.GoWeb.GoView.NewGoLabeledLink"/> property to set <see cref="T:Northwoods.GoWeb.GoLabeledLink"/>
            properties, if this object is a <see cref="T:Northwoods.GoWeb.GoLabeledLink"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.NewGoLink">
            <summary>
            This convenience property safely casts the value of <see cref="P:Northwoods.GoWeb.GoView.NewLinkPrototype"/>
            as a <see cref="T:Northwoods.GoWeb.GoLink"/>.
            </summary>
            <value>this may be null if <see cref="P:Northwoods.GoWeb.GoView.NewLinkPrototype"/> is not
            an instance of <see cref="T:Northwoods.GoWeb.GoLink"/></value>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.NewGoLabeledLink">
            <summary>
            This convenience property safely casts the value of <see cref="P:Northwoods.GoWeb.GoView.NewLinkPrototype"/>
            as a <see cref="T:Northwoods.GoWeb.GoLabeledLink"/>.
            </summary>
            <value>this may be null if <see cref="P:Northwoods.GoWeb.GoView.NewLinkPrototype"/> is not
            an instance of <see cref="T:Northwoods.GoWeb.GoLabeledLink"/></value>
        </member>
        <member name="E:Northwoods.GoWeb.GoView.LinkCreated">
            <summary>
            The event that is raised after the user draws a new link.
            </summary>
            <remarks>
            The <see cref="T:Northwoods.GoWeb.GoObject"/> that is provided by the <see cref="T:Northwoods.GoWeb.GoSelectionEventArgs"/>.<see cref="P:Northwoods.GoWeb.GoSelectionEventArgs.GoObject"/> property
            will be an <see cref="T:Northwoods.GoWeb.IGoLink"/>, which is typically either a <see cref="T:Northwoods.GoWeb.GoLink"/>
            or a <see cref="T:Northwoods.GoWeb.GoLabeledLink"/>.
            </remarks>
        </member>
        <member name="E:Northwoods.GoWeb.GoView.LinkRelinked">
            <summary>
            The event that is raised after the user reconnects an existing link.
            </summary>
            <remarks>
            The <see cref="T:Northwoods.GoWeb.GoObject"/> that is provided by the <see cref="T:Northwoods.GoWeb.GoSelectionEventArgs"/>.<see cref="P:Northwoods.GoWeb.GoSelectionEventArgs.GoObject"/> property
            will be an <see cref="T:Northwoods.GoWeb.IGoLink"/>, which is typically either a <see cref="T:Northwoods.GoWeb.GoLink"/>
            or a <see cref="T:Northwoods.GoWeb.GoLabeledLink"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.PortGravity">
            <summary>
            Gets or sets the distance at which potential links will snap to valid ports.
            </summary>
            <value>
            The <c>float</c> value must be positive, indicating the document coordinate
            distance from the mouse to the prospective port.
            The default value is <c>100.0f</c>.
            </value>
            <remarks>
            The <see cref="T:Northwoods.GoWeb.GoToolLinking"/> tool uses this property to decide when the
            user's drag of a new link or relink is "close enough" to a valid port that the
            tool should draw the proposed link directly to that port.
            </remarks>
        </member>
        <member name="E:Northwoods.GoWeb.GoView.ObjectSingleClicked">
            <summary>
            A document object was single clicked by the user.
            </summary>
            <remarks>
            This event is raised for the first document object found at the
            <see cref="P:Northwoods.GoWeb.GoInputEventArgs.DocPoint"/>.  Unlike <see cref="M:Northwoods.GoWeb.GoObject.OnSingleClick(Northwoods.GoWeb.GoInputEventArgs,Northwoods.GoWeb.GoView)"/>,
            which proceeds up the <see cref="P:Northwoods.GoWeb.GoObject.Parent"/> chain until a call
            returns true, this event occurs only once.  Thus you will often need
            to look at the <see cref="P:Northwoods.GoWeb.GoObject.ParentNode"/> or <see cref="P:Northwoods.GoWeb.GoObject.TopLevelObject"/>
            in order to find the most meaningful object to really handle the click.
            <code>
                MyView.ObjectSingleClicked += new GoObjectEventHandler(MyView_ObjectSingleClicked);
              ...
              private void MyView_ObjectSingleClicked(Object sender, GoObjectEventArgs evt) {
                GoBasicNode bn = evt.GoObject.ParentNode as GoBasicNode;
                if (bn != null) {
                  MessageBox.Show("Clicked on " + bn.Text);
                }
              }
            </code>
            </remarks>
        </member>
        <member name="E:Northwoods.GoWeb.GoView.ObjectDoubleClicked">
            <summary>
            A document object was double clicked by the user.
            </summary>
            <remarks>
            This event is raised for the first document object found at the
            <see cref="P:Northwoods.GoWeb.GoInputEventArgs.DocPoint"/>.  Unlike <see cref="M:Northwoods.GoWeb.GoObject.OnDoubleClick(Northwoods.GoWeb.GoInputEventArgs,Northwoods.GoWeb.GoView)"/>,
            which proceeds up the <see cref="P:Northwoods.GoWeb.GoObject.Parent"/> chain until a call
            returns true, this event occurs only once.  Thus you will often need
            to look at the <see cref="P:Northwoods.GoWeb.GoObject.ParentNode"/> or <see cref="P:Northwoods.GoWeb.GoObject.TopLevelObject"/>
            in order to find the most meaningful object to really handle the click.
            <code>
                MyView.ObjectDoubleClicked += new GoObjectEventHandler(MyView_ObjectDoubleClicked);
              ...
              private void MyView_ObjectDoubleClicked(Object sender, GoObjectEventArgs evt) {
                GoBasicNode bn = evt.GoObject.ParentNode as GoBasicNode;
                if (bn != null) {
                  MessageBox.Show("Double-clicked on " + bn.Text);
                }
              }
            </code>
            </remarks>
        </member>
        <member name="E:Northwoods.GoWeb.GoView.ObjectContextClicked">
            <summary>
            A document object was context clicked by the user.
            </summary>
            <remarks>
            This event is raised for the first document object found at the
            <see cref="P:Northwoods.GoWeb.GoInputEventArgs.DocPoint"/>.  Unlike <see cref="M:Northwoods.GoWeb.GoObject.OnContextClick(Northwoods.GoWeb.GoInputEventArgs,Northwoods.GoWeb.GoView)"/>,
            which proceeds up the <see cref="P:Northwoods.GoWeb.GoObject.Parent"/> chain until a call
            returns true, this event occurs only once.  Thus you will often need
            to look at the <see cref="P:Northwoods.GoWeb.GoObject.ParentNode"/> or <see cref="P:Northwoods.GoWeb.GoObject.TopLevelObject"/>
            in order to find the most meaningful object to really handle the click.
            <code>
                MyView.ObjectContextClicked += new GoObjectEventHandler(MyView_ObjectContextClicked);
              ...
              private void MyView_ObjectContextClicked(Object sender, GoObjectEventArgs evt) {
                GoBasicNode bn = evt.GoObject.ParentNode as GoBasicNode;
                if (bn != null) {
                  MessageBox.Show("Context-clicked on " + bn.Text);
                }
              }
            </code>
            </remarks>
        </member>
        <member name="E:Northwoods.GoWeb.GoView.BackgroundSingleClicked">
            <summary>
            The user performed a single click on the background, not over any document object.
            </summary>
            <remarks>
            The location of the click is given by the <see cref="T:Northwoods.GoWeb.GoInputEventArgs"/>.<see cref="P:Northwoods.GoWeb.GoInputEventArgs.DocPoint"/> property.
            </remarks>
        </member>
        <member name="E:Northwoods.GoWeb.GoView.BackgroundDoubleClicked">
            <summary>
            The user performed a double click on the background, not over any document object.
            </summary>
            <remarks>
            The location of the click is given by the <see cref="T:Northwoods.GoWeb.GoInputEventArgs"/>.<see cref="P:Northwoods.GoWeb.GoInputEventArgs.DocPoint"/> property.
            </remarks>
        </member>
        <member name="E:Northwoods.GoWeb.GoView.BackgroundContextClicked">
            <summary>
            The user performed a context click in the background, not over any document object.
            </summary>
            <remarks>
            The location of the click is given by the <see cref="T:Northwoods.GoWeb.GoInputEventArgs"/>.<see cref="P:Northwoods.GoWeb.GoInputEventArgs.DocPoint"/> property.
            </remarks>
        </member>
        <member name="E:Northwoods.GoWeb.GoView.ObjectEnterLeave">
            <summary>
            The mouse entered and/or left a document object when dragging.
            </summary>
            <remarks>
            <para>
            This event is raised when the <see cref="T:Northwoods.GoWeb.GoToolManager"/> or the
            <see cref="T:Northwoods.GoWeb.GoToolDragging"/> tool notices that a mouse move
            causes a change in the current document object that the mouse is over.
            The <see cref="T:Northwoods.GoWeb.GoObjectEnterLeaveEventArgs"/> indicates the object that the
            mouse had been over, and the object that it is now over.  Either object may be
            null, indicating that it had been or now is over the background of this view.
            </para>
            </remarks>
        </member>
        <member name="E:Northwoods.GoWeb.GoView.ObjectSelectionDropReject">
            <summary>
            The event that is raised during a drag's mouse over a document object;
            setting the <see cref="P:Northwoods.GoWeb.GoInputEventArgs.InputState"/> property to
            <see cref="T:Northwoods.GoWeb.GoInputState"/>.<see cref="F:Northwoods.GoWeb.GoInputState.Cancel"/> will
            reject a drop of the selection at this input event point.
            </summary>
            <remarks>
            This event is raised for the first document object found at the
            <see cref="P:Northwoods.GoWeb.GoInputEventArgs.DocPoint"/>, excluding objects that are part
            of the <see cref="P:Northwoods.GoWeb.GoView.Selection"/>.
            Unlike the <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="M:Northwoods.GoWeb.GoObject.OnSelectionDropReject(Northwoods.GoWeb.GoObjectEventArgs,Northwoods.GoWeb.GoView)"/> method,
            which proceeds up the <see cref="P:Northwoods.GoWeb.GoObject.Parent"/> chain until a call
            returns true, this event occurs only once per mouse move.
            Thus you will often need to look at the <see cref="P:Northwoods.GoWeb.GoObject.ParentNode"/>
            or <see cref="P:Northwoods.GoWeb.GoObject.TopLevelObject"/> in order to find the most
            meaningful object to really handle the event.
            </remarks>
        </member>
        <member name="E:Northwoods.GoWeb.GoView.BackgroundSelectionDropReject">
            <summary>
            The event that is raised during a drag's mouse move over the background;
            setting the <see cref="P:Northwoods.GoWeb.GoInputEventArgs.InputState"/> property to
            <see cref="T:Northwoods.GoWeb.GoInputState"/>.<see cref="F:Northwoods.GoWeb.GoInputState.Cancel"/> will
            reject a drop of the selection at this input event point.
            </summary>
        </member>
        <member name="E:Northwoods.GoWeb.GoView.ObjectSelectionDropped">
            <summary>
            The user dropped the view's Selection onto a document object.
            </summary>
            <remarks>
            This event is raised for the first document object found at the
            <see cref="P:Northwoods.GoWeb.GoInputEventArgs.DocPoint"/>, excluding objects that are part
            of the <see cref="P:Northwoods.GoWeb.GoView.Selection"/>.
            Unlike the <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="M:Northwoods.GoWeb.GoObject.OnSelectionDropped(Northwoods.GoWeb.GoObjectEventArgs,Northwoods.GoWeb.GoView)"/> method,
            which proceeds up the <see cref="P:Northwoods.GoWeb.GoObject.Parent"/> chain until a call
            returns true, this event occurs only once.  Thus you will often need
            to look at the <see cref="P:Northwoods.GoWeb.GoObject.ParentNode"/> or <see cref="P:Northwoods.GoWeb.GoObject.TopLevelObject"/>
            in order to find the most meaningful object to really handle the drop.
            </remarks>
        </member>
        <member name="E:Northwoods.GoWeb.GoView.BackgroundSelectionDropped">
            <summary>
            The user dropped the view's selection onto the background of the view, not onto any document object.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.CursorName">
            <summary>
            This property exists for source-code compatibility with WinForms,
            but is not used in GoDiagram Pocket or GoDiagram Web.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.ToolTipText">
            <summary>
            Gets or sets a string to be displayed in a tooltip when no
            tooltip text is shown for a <see cref="T:Northwoods.GoWeb.GoObject"/>.
            </summary>
            <value>
            The initial value is null, which means don't display a tooltip.
            </value>
            <remarks>
            <para>
            This is just a renaming of the <c>WebControl.ToolTip</c> property.
            </para>
            <para>
            Note that this is different from the same property that you may find
            on some <see cref="T:Northwoods.GoWeb.GoObject"/> classes such as <see cref="T:Northwoods.GoWeb.GoNode"/>
            (<see cref="P:Northwoods.GoWeb.GoNode.ToolTipText"/>), since here an empty string is
            the same as a value of null/Nothing, meaning not to display a tooltip.
            For <see cref="T:Northwoods.GoWeb.GoObject"/>s a value from <see cref="M:Northwoods.GoWeb.GoObject.GetToolTip(Northwoods.GoWeb.GoView)"/>
            of an empty string will display an empty tooltip, and only a value of
            null/Nothing will indicate no tooltip for that particular <see cref="T:Northwoods.GoWeb.GoObject"/>.
            </para>
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoViewDataRenderer.BuildToolTipSearchArray"/>
        </member>
        <member name="E:Northwoods.GoWeb.GoView.ClipboardCopied">
            <summary>
            The event that is raised after the user has copied something into the clipboard
            from this document.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.GoWeb.GoView.Selection"/> has been copied (serialized) into the clipboard.
            </remarks>
        </member>
        <member name="E:Northwoods.GoWeb.GoView.ClipboardPasted">
            <summary>
            The event that is raised after the user has pasted a copy of the clipboard
            into this document.
            </summary>
            <remarks>
            The newly copied objects that have been added by deserializing from the clipboard
            to this document are held in the <see cref="P:Northwoods.GoWeb.GoView.Selection"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.DragsRealtime">
            <summary>
            Gets or sets whether a user's drag of the selection occurs continuously.
            [In Web Forms there is no continuous visual feedback of a drag.]
            </summary>
            <value>
            If this value is true, the objects in the selection are actually moved
            continuously, following the mouse.
            If this value is false, the user actually drags around an image of
            the selection, and the move only happens on mouse up.
            The default value is false.
            </value>
            <remarks>
            One advantage of a false value for this property is that only one undo record
            per moved object is generated for a user's moving operation--namely the
            final one on mouse up.
            Another advantage, when this property is false, is that a user's drag of
            some objects to another window will not actually modify the source document
            due to objects moved before the pointer leaves the view.
            However, many applications will need this property to be true so as to provide
            accurate continuous feedback to the user regarding where a move or copy will
            occur, particularly when grids or other snapping behaviors are involved.
            If you have many links that are expensive to route, but have to have this
            property set to true, you might want to consider setting <see cref="P:Northwoods.GoWeb.GoView.DragRoutesRealtime"/>
            to false, to delay routing until the end of a drag.
            This property is used by <see cref="T:Northwoods.GoWeb.GoToolDragging"/>.
            This property should be set to true when <c>ExternalDragDropsOnEnter</c> is set to true.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.DragRoutesRealtime">
            <summary>
            Gets or sets whether the routing of links happens continuously
            when <see cref="P:Northwoods.GoWeb.GoView.DragsRealtime"/> is true.
            [In Web Forms there is no continuous visual feedback of the rerouting of links.]
            </summary>
            <value>
            The default value is true.
            </value>
            <remarks>
            Setting this to false will improve dragging performance, particularly
            when there are <see cref="P:Northwoods.GoWeb.GoLink.Orthogonal"/> links that
            <see cref="P:Northwoods.GoWeb.GoLink.AvoidsNodes"/>, at the expense of not maintaining
            apparent link connections during the drag.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.AllowDrop">
            <summary>
            This property exists for source-code compatibility with the full Windows Forms
            implementation, but it is always false and cannot be changed.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.AllowDragOut">
            <summary>
            This property exists for source-code compatibility with the full Windows Forms
            implementation, but it is always false and cannot be changed.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.IsPrinting">
            <summary>
            Gets whether any painting that is ongoing is part of a printing operation.
            </summary>
            <value>
            This is always false.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.BackgroundGrid">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoWeb.GoGrid"/> which is held by
            this view's <see cref="P:Northwoods.GoWeb.GoView.BackgroundLayer"/> and which by default implements
            the various grid properties of this view.
            </summary>
            <value>
            The initial value is provided by <see cref="M:Northwoods.GoWeb.GoView.CreateGrid"/>.
            </value>
            <remarks>
            The various "Grid..." properties get and set the corresponding
            properties of this <see cref="T:Northwoods.GoWeb.GoGrid"/> object.
            If a <see cref="P:Northwoods.GoWeb.GoView.Sheet"/> is visible, it too has a <see cref="T:Northwoods.GoWeb.GoGrid"/>
            that is independent of this grid.  The sheet's grid just covers
            the sheet, whereas this grid is unbounded.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoView.Grid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundHasSheet"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.Sheet"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.Grid">
            <summary>
            Gets or sets the primary <see cref="T:Northwoods.GoWeb.GoGrid"/> used by this view.
            </summary>
            <value>This will normally be either the <see cref="P:Northwoods.GoWeb.GoView.Sheet"/>'s <see cref="P:Northwoods.GoWeb.GoSheet.Grid"/>
            or the <see cref="P:Northwoods.GoWeb.GoView.BackgroundGrid"/>.
            </value>
            <remarks>
            Because the initial value of <see cref="P:Northwoods.GoWeb.GoView.Sheet"/> is null/nothing,
            the initial value of this property will be the <see cref="P:Northwoods.GoWeb.GoView.BackgroundGrid"/>.
            Setting the <see cref="P:Northwoods.GoWeb.GoView.Sheet"/> property to a <see cref="T:Northwoods.GoWeb.GoSheet"/>,
            either explicitly, or implicitly by setting <see cref="P:Northwoods.GoWeb.GoView.BackgroundHasSheet"/> to true,
            will cause this property's value to refer to the <see cref="P:Northwoods.GoWeb.GoView.Sheet"/>'s
            <see cref="P:Northwoods.GoWeb.GoSheet.Grid"/>.
            Setting <see cref="P:Northwoods.GoWeb.GoView.Sheet"/> to null/nothing again, or setting
            <see cref="P:Northwoods.GoWeb.GoView.BackgroundHasSheet"/> to false, will cause this
            property to refer back to the original <see cref="P:Northwoods.GoWeb.GoView.BackgroundGrid"/>.
            Since this property is used by many of this view's "<c>Grid...</c>" properties,
            all of those properties may suddenly change value as this <see cref="T:Northwoods.GoWeb.GoGrid"/>
            reference is changed.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundGrid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundHasSheet"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.Sheet"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.GridOrigin">
            <summary>
            Gets or sets the origin for the <see cref="P:Northwoods.GoWeb.GoView.Grid"/>.
            </summary>
            <value>
            This <c>PointF</c> value is a document coordinate point.
            The default value is (0, 0).
            </value>
            <seealso cref="P:Northwoods.GoWeb.GoView.GridStyle"/>
            <seealso cref="P:Northwoods.GoWeb.GoGrid.Origin"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.Grid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundGrid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundHasSheet"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.Sheet"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.GridCellSize">
            <summary>
            Gets or sets the size of each cell in the <see cref="P:Northwoods.GoWeb.GoView.Grid"/>.
            </summary>
            <value>
            This <c>SizeF</c> value describes the size of each cell in document coordinates.
            The <c>Width</c> and <c>Height</c> must be positive.
            </value>
            <seealso cref="P:Northwoods.GoWeb.GoView.GridStyle"/>
            <seealso cref="P:Northwoods.GoWeb.GoGrid.CellSize"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.Grid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundGrid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundHasSheet"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.Sheet"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.GridStyle">
            <summary>
            Design-time and PropertyGrid access to <see cref="P:Northwoods.GoWeb.GoView.Grid"/> properties.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoView.Grid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundGrid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundHasSheet"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.Sheet"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.GridOriginX">
            <summary>
            Design-time and PropertyGrid access to <see cref="P:Northwoods.GoWeb.GoView.Grid"/> properties.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoView.Grid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundGrid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundHasSheet"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.Sheet"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.GridOriginY">
            <summary>
            Design-time and PropertyGrid access to <see cref="P:Northwoods.GoWeb.GoView.Grid"/> properties.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoView.Grid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundGrid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundHasSheet"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.Sheet"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.GridOriginRelative">
            <summary>
            Design-time and PropertyGrid access to <see cref="P:Northwoods.GoWeb.GoView.Grid"/> properties.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoView.Grid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundGrid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundHasSheet"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.Sheet"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.GridCellSizeWidth">
            <summary>
            Design-time and PropertyGrid access to <see cref="P:Northwoods.GoWeb.GoView.Grid"/> properties.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoView.Grid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundGrid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundHasSheet"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.Sheet"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.GridCellSizeHeight">
            <summary>
            Design-time and PropertyGrid access to <see cref="P:Northwoods.GoWeb.GoView.Grid"/> properties.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoView.Grid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundGrid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundHasSheet"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.Sheet"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.GridLineColor">
            <summary>
            Design-time and PropertyGrid access to <see cref="P:Northwoods.GoWeb.GoView.Grid"/> properties.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoView.Grid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundGrid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundHasSheet"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.Sheet"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.GridUnboundedSpots">
            <summary>
            Design-time and PropertyGrid access to <see cref="P:Northwoods.GoWeb.GoView.Grid"/> properties.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoView.Grid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundGrid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundHasSheet"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.Sheet"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.GridMajorLineColor">
            <summary>
            Design-time and PropertyGrid access to <see cref="P:Northwoods.GoWeb.GoView.Grid"/> properties.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoView.Grid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundGrid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundHasSheet"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.Sheet"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.GridLineWidth">
            <summary>
            Design-time and PropertyGrid access to <see cref="P:Northwoods.GoWeb.GoView.Grid"/> properties.  [Not in GoDiagram Pocket]
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoView.Grid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundGrid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundHasSheet"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.Sheet"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.GridLineDashStyle">
            <summary>
            Design-time and PropertyGrid access to <see cref="P:Northwoods.GoWeb.GoView.Grid"/> properties.  [Not in GoDiagram Pocket]
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoView.Grid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundGrid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundHasSheet"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.Sheet"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.GridLineDashPattern">
            <summary>
            Design-time and PropertyGrid access to <see cref="P:Northwoods.GoWeb.GoView.Grid"/> properties.  [Not in GoDiagram Pocket]
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoView.Grid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundGrid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundHasSheet"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.Sheet"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.GridMajorLineWidth">
            <summary>
            Design-time and PropertyGrid access to <see cref="P:Northwoods.GoWeb.GoView.Grid"/> properties.  [Not in GoDiagram Pocket]
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoView.Grid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundGrid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundHasSheet"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.Sheet"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.GridMajorLineDashStyle">
            <summary>
            Design-time and PropertyGrid access to <see cref="P:Northwoods.GoWeb.GoView.Grid"/> properties.  [Not in GoDiagram Pocket]
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoView.Grid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundGrid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundHasSheet"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.Sheet"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.GridMajorLineDashPattern">
            <summary>
            Design-time and PropertyGrid access to <see cref="P:Northwoods.GoWeb.GoView.Grid"/> properties.  [Not in GoDiagram Pocket]
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoView.Grid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundGrid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundHasSheet"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.Sheet"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.GridMajorLineFrequency">
            <summary>
            Design-time and PropertyGrid access to <see cref="P:Northwoods.GoWeb.GoView.Grid"/> properties.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoView.Grid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundGrid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundHasSheet"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.Sheet"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.GridSnapDrag">
            <summary>
            Design-time and PropertyGrid access to <see cref="P:Northwoods.GoWeb.GoView.Grid"/> properties.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoView.Grid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundGrid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundHasSheet"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.Sheet"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.GridSnapResize">
            <summary>
            Design-time and PropertyGrid access to <see cref="P:Northwoods.GoWeb.GoView.Grid"/> properties.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoView.Grid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundGrid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundHasSheet"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.Sheet"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.GridSnapOpaque">
            <summary>
            Design-time and PropertyGrid access to <see cref="P:Northwoods.GoWeb.GoView.Grid"/> properties.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoView.Grid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundGrid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundHasSheet"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.Sheet"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.GridSnapCellSpot">
            <summary>
            Design-time and PropertyGrid access to <see cref="P:Northwoods.GoWeb.GoView.Grid"/> properties.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoView.Grid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundGrid"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundHasSheet"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.Sheet"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.SheetBackgroundImageSpot">
            <summary>
            Design-time and PropertyGrid access to <see cref="P:Northwoods.GoWeb.GoView.Sheet"/> properties.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundHasSheet"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.SheetPaperBounds">
            <summary>
            Design-time and PropertyGrid access to <see cref="P:Northwoods.GoWeb.GoView.Sheet"/> properties.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundHasSheet"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.SheetMarginBounds">
            <summary>
            Design-time and PropertyGrid access to <see cref="P:Northwoods.GoWeb.GoView.Sheet"/> properties.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundHasSheet"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.SheetTopLeftMargin">
            <summary>
            Design-time and PropertyGrid access to <see cref="P:Northwoods.GoWeb.GoView.Sheet"/> properties.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundHasSheet"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.SheetBottomRightMargin">
            <summary>
            Design-time and PropertyGrid access to <see cref="P:Northwoods.GoWeb.GoView.Sheet"/> properties.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundHasSheet"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.SheetShowsMargins">
            <summary>
            Design-time and PropertyGrid access to <see cref="P:Northwoods.GoWeb.GoView.Sheet"/> properties.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundHasSheet"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.SheetMarginColor">
            <summary>
            Design-time and PropertyGrid access to <see cref="P:Northwoods.GoWeb.GoView.Sheet"/> properties.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundHasSheet"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.Sheet">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoWeb.GoObject"/> that represents the sheet of paper the user sees,
            when the <see cref="P:Northwoods.GoWeb.GoView.SheetStyle"/> is not <see cref="T:Northwoods.GoWeb.GoViewSheetStyle"/>.<see cref="F:Northwoods.GoWeb.GoViewSheetStyle.None"/>.
            </summary>
            <value>
            The initial value is null/nothing.
            </value>
            <remarks>
            Setting this property will implicitly change the value of <see cref="P:Northwoods.GoWeb.GoView.Grid"/>
            from a reference to <see cref="P:Northwoods.GoWeb.GoView.BackgroundGrid"/> to a reference to
            the new <see cref="P:Northwoods.GoWeb.GoView.Sheet"/>'s <see cref="P:Northwoods.GoWeb.GoSheet.Grid"/>, if there had been no
            <see cref="P:Northwoods.GoWeb.GoView.Sheet"/> before, or else from the old sheet's grid to the new sheet's grid.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundHasSheet"/>
            <seealso cref="P:Northwoods.GoWeb.GoView.Grid"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.BackgroundHasSheet">
            <summary>
            Gets or sets whether there is a value for <see cref="P:Northwoods.GoWeb.GoView.Sheet"/>, that is a
            <see cref="T:Northwoods.GoWeb.GoSheet"/> in this view's <see cref="P:Northwoods.GoWeb.GoView.BackgroundLayer"/>.
            </summary>
            <value>
            Initially this is false, since there is initially no <see cref="P:Northwoods.GoWeb.GoView.Sheet"/>.
            Setting this to true when there is no <see cref="P:Northwoods.GoWeb.GoView.Sheet"/> will call
            <see cref="M:Northwoods.GoWeb.GoView.CreateSheet"/> and assign the <see cref="P:Northwoods.GoWeb.GoView.Sheet"/> property.
            Setting this to false when there is a <see cref="P:Northwoods.GoWeb.GoView.Sheet"/> will
            set the <see cref="P:Northwoods.GoWeb.GoView.Sheet"/> property to null/nothing.
            </value>
            <remarks>
            <para>
            This property just controls whether or not a <see cref="T:Northwoods.GoWeb.GoSheet"/>
            exists in the background layer as the <see cref="P:Northwoods.GoWeb.GoView.Sheet"/> property.
            It does not control whether the sheet is actually visible at this time,
            nor the positioning of the sheet in the view, nor what appearance the sheet
            takes--that is controlled by the <see cref="P:Northwoods.GoWeb.GoView.SheetStyle"/> property
            and other <c>Sheet...</c> and <see cref="T:Northwoods.GoWeb.GoSheet"/> properties.
            </para>
            <para>
            When there is a <see cref="P:Northwoods.GoWeb.GoView.Sheet"/>, all of the <c>Grid...</c>
            properties refer to the sheet's <see cref="P:Northwoods.GoWeb.GoSheet.Grid"/> rather
            than to the view's <see cref="P:Northwoods.GoWeb.GoView.BackgroundGrid"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.SheetStyle">
            <summary>
            Gets or sets how the view adjusts its <see cref="P:Northwoods.GoWeb.GoView.DocScale"/> and <see cref="P:Northwoods.GoWeb.GoView.DocPosition"/>
            as the view's size changes.
            </summary>
            <value>
            The default value is <see cref="T:Northwoods.GoWeb.GoViewSheetStyle"/>.<see cref="F:Northwoods.GoWeb.GoViewSheetStyle.None"/>:
            the <see cref="P:Northwoods.GoWeb.GoView.Sheet"/> (if any exists) is not visible.
            </value>
            <remarks>
            The value of this property affects whether the <see cref="P:Northwoods.GoWeb.GoView.Sheet"/> is visible
            and the behavior of <see cref="M:Northwoods.GoWeb.GoView.UpdateExtent"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoView.BackgroundHasSheet"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.SheetRoom">
            <summary>
            Gets or sets the how much of the background to show on each side of the sheet of paper,
            when the <see cref="P:Northwoods.GoWeb.GoView.SheetStyle"/> is not <see cref="F:Northwoods.GoWeb.GoViewSheetStyle.None"/>.
            </summary>
            <value>
            The value is in view coordinates; the default value is 10x10 pixels.
            </value>
            <remarks>
            The value of this property affects the behavior of <see cref="M:Northwoods.GoWeb.GoView.UpdateExtent"/>
            for certain values of <see cref="P:Northwoods.GoWeb.GoView.SheetStyle"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.ShadowOffset">
            <summary>
            Gets or sets the offset distance for drop shadows.
            </summary>
            <value>
            This <c>SizeF</c> value specifies the offset, where positive values move
            the shadow to the right and to the bottom.
            The default value is (5, 5).
            </value>
            <remarks>
            The shadow only appears for those objects that have the <see cref="P:Northwoods.GoWeb.GoObject.Shadowed"/>
            property set to true.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoView.ShadowColor"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.ShadowWidth">
            <summary>
            Design-time and PropertyGrid access to the ShadowOffset.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.ShadowHeight">
            <summary>
            Design-time and PropertyGrid access to the ShadowOffset.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.ShadowColor">
            <summary>
            Gets or sets the color used for drawing drop shadows.
            </summary>
            <value>
            The default color is a partly transparent gray, so that users can see the objects
            underneath the shadow.
            </value>
            <remarks>
            The shadow only appears for those objects that have the <see cref="P:Northwoods.GoWeb.GoObject.Shadowed"/>
            property set to true.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoView.ShadowOffset"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.PaintNothingScale">
            <summary>
            Gets or sets the scale at which greeked objects paint nothing.
            </summary>
            <value>
            This value defaults to <c>0.15f</c>, and should be less than or equal to
            <see cref="P:Northwoods.GoWeb.GoView.PaintGreekScale"/>.
            </value>
            <remarks>
            Not all objects use greeking to simplify and speed up painting at small scales,
            but those that do use this property to govern when to make that decision.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoView.PaintGreekScale"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoView.PaintGreekScale">
            <summary>
            Gets or sets the scale at which greeked objects paint something simple.
            </summary>
            <value>
            This value defaults to <c>0.24f</c> and should be greater than or equal to
            <see cref="P:Northwoods.GoWeb.GoView.PaintNothingScale"/>.
            </value>
            <remarks>
            Not all objects use greeking to simplify and speed up painting at small scales,
            but those that do use this property to govern when to make that decision.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoView.PaintNothingScale"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoOverview.#ctor">
            <summary>
            Create a <see cref="T:Northwoods.GoWeb.GoOverview"/> window capable of displaying the position
            of a different <see cref="T:Northwoods.GoWeb.GoView"/> in its <see cref="T:Northwoods.GoWeb.GoDocument"/>.
            </summary>
            <remarks>
            You need to set the <see cref="P:Northwoods.GoWeb.GoOverview.Observed"/> property to make this
            overview <c>Control</c> useful.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoOverview.Dispose">
            <summary>
            Remove any event handlers from the <see cref="P:Northwoods.GoWeb.GoOverview.Observed"/> view and document.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoOverview.InitializeLayersFromDocument">
            <summary>
            Initialize the layers of this view.
            </summary>
            <remarks>
            This method makes sure this overview's layers are the same as that of its document.
            It also adds the result of <see cref="M:Northwoods.GoWeb.GoOverview.CreateOverviewRectangle(Northwoods.GoWeb.GoView)"/> to this
            view's default layer.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoOverview.CreateGrid">
            <summary>
            No <see cref="P:Northwoods.GoWeb.GoView.Grid"/> for an overview window.
            </summary>
            <returns>null</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoOverview.CreateOverviewRectangle(Northwoods.GoWeb.GoView)">
            <summary>
            Create an instance of <see cref="T:Northwoods.GoWeb.GoOverviewRectangle"/> for the
            given view.
            </summary>
            <param name="observed"></param>
            <returns>An <see cref="T:Northwoods.GoWeb.GoOverviewRectangle"/> that knows which view's extent it represents</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoOverview.PickObject(System.Boolean,System.Boolean,System.Drawing.PointF,System.Boolean)">
            <summary>
            Don't allow the user to select any objects except the OverviewRect
            and other view objects,
            even though that rectangle is a view object, not a document object.
            </summary>
            <param name="doc">ignored, assumed to be false</param>
            <param name="view"></param>
            <param name="p">a <c>PointF</c> in document coordinates</param>
            <param name="selectableOnly">whether to pick only objects that are selectable</param>
            <returns></returns>
            <remarks>
            The <see cref="P:Northwoods.GoWeb.GoOverview.OverviewRect"/> gets picked when the point <paramref name="p"/>
            is in along the rectangle's bounds, even though the the <see cref="P:Northwoods.GoWeb.GoOverview.OverviewRect"/>
            is not even a document object.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoOverview.OnBackgroundSingleClicked(Northwoods.GoWeb.GoInputEventArgs)">
            <summary>
            Allow mouse clicks not on the OverviewRect, but elsewhere in the
            Overview, to cause the OverviewRect to be centered there, or as
            near as allowed.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoOverview.LoadView(Northwoods.GoWeb.GoView)">
            <summary>
            Copy this class's state from a deserialized overview.
            </summary>
            <param name="saved"></param>
            <remarks>
            Each time the <c>Page</c> is loaded you must reset
            the <see cref="P:Northwoods.GoWeb.GoOverview.Observed"/> property with the desired <see cref="T:Northwoods.GoWeb.GoView"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoOverview.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoOverview.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization function.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoOverview.RaisePostBackEvent(System.String)">
            <summary>
            Try to keep the <see cref="P:Northwoods.GoWeb.GoOverview.OverviewRect"/> up-to-date.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoOverview.CreateDataRenderer">
            <summary>
            Customize the cursors that are renderered for the overview.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoOverview.ViewChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handle basic changes to the observed view's DocPosition or DocScale,
            or when the observed view's Document got swapped for a different document.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoOverview.ComponentResized(System.Object,System.EventArgs)">
            <summary>
            Handle changes in the observed view's (window) shape by changing the bounds
            of the OverviewRect.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Northwoods.GoWeb.GoOverview.Observed">
            <summary>
            Gets or sets the view that this overview is watching.
            </summary>
            <value>
            This property should not be set to itself or another GoOverview.
            </value>
            <remarks>
            This overview is useless until it has a <see cref="T:Northwoods.GoWeb.GoView"/> to observe.
            When this property is set, this overview becomes a document <c>Changed</c>
            event handler for the observed view's document so that it can display
            that document.
            It also becomes a <c>PropertyChanged</c> event handler and a <c>Resize</c>
            event handler for the observed view so that it can track the observed
            view's extent (position and size) in its document, as well as any
            replacement of the observed view's document.
            </remarks>
            <seealso cref="T:Northwoods.GoWeb.GoOverviewRectangle"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoOverview.GridStyle">
            <summary>
            No <see cref="P:Northwoods.GoWeb.GoView.Grid"/> for an overview window.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoOverview.OverviewRect">
            <summary>
            Gets the <see cref="T:Northwoods.GoWeb.GoOverviewRectangle"/> representing the observed
            view's extent in its document.
            </summary>
            <remarks>
            This is the rectangle in this view that the user drags to
            change the <see cref="P:Northwoods.GoWeb.GoView.DocPosition"/> of the observed view.
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoOverview.Observed"/>
            <seealso cref="M:Northwoods.GoWeb.GoOverview.CreateOverviewRectangle(Northwoods.GoWeb.GoView)"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoOverview.Document">
            <summary>
            Make this view think the observed view's document is actually its own.
            </summary>
            <remarks>
            Setting this property is not useful except for changing the document
            that is shown when there is no <see cref="P:Northwoods.GoWeb.GoOverview.Observed"/> view.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoOverview.ShowsNegativeCoordinates">
            <summary>
            This should just track what the observed view shows.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoViewDataRenderer">
            <summary>
            This class is responsible for generating JavaScript code
            that defines auxiliary data for a particular <see cref="T:Northwoods.GoWeb.GoView"/>
            that is used by client-side code to handle events
            without having to do round-trips to the web server.
            </summary>
            <remarks>
            An instance of this class is present in a <see cref="T:Northwoods.GoWeb.GoView"/>
            as the <see cref="P:Northwoods.GoWeb.GoView.DataRenderer"/> property.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoViewDataRenderer.#ctor(Northwoods.GoWeb.GoView)">
            <summary>
            Constructs a data renderer for a <see cref="P:Northwoods.GoWeb.GoViewDataRenderer.View"/>.
            </summary>
            <param name="view">
            the <see cref="T:Northwoods.GoWeb.GoView"/> for which this will be rendering data;
            this must not be null
            </param>
        </member>
        <member name="M:Northwoods.GoWeb.GoViewDataRenderer.GenerateViewRef">
            <summary>
            Returns a JavaScript expression for referring to the object representing
            client-side data for a GoView.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoViewDataRenderer.Render">
            <summary>
            Produce JavaScript code that provides data used for client-side interactive behavior
            for the current <see cref="P:Northwoods.GoWeb.GoViewDataRenderer.View"/>.
            </summary>
            <returns>a String of executable JavaScript</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoViewDataRenderer.AddSearchArrayEntry(System.Drawing.Rectangle,System.String)">
            <summary>
            Associate a string value with a given <c>Rectangle</c> area of the image.
            </summary>
            <param name="r">a <c>Rectangle</c> in view coordinates</param>
            <param name="v">a String</param>
            <remarks>
            You can call this method in order to define customized client-side data for parts of an image.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoViewDataRenderer.AddSearchArrayEntry(System.Drawing.RectangleF,System.String)">
            <summary>
            Associate a string value with a given <c>RectangleF</c> area of the image.
            </summary>
            <param name="r">a <c>RectangleF</c> in document coordinates</param>
            <param name="v">a String</param>
            <remarks>
            You can call this method in order to define customized client-side data for parts of an image.
            This just converts the <paramref name="r"/> into view coordinates and calls
            <see cref="M:Northwoods.GoWeb.GoViewDataRenderer.AddSearchArrayEntry(System.Drawing.Rectangle,System.String)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoViewDataRenderer.AddSearchArrayEntry(Northwoods.GoWeb.GoStroke,System.String)">
            <summary>
            Associate a string value with the path of a given <see cref="T:Northwoods.GoWeb.GoStroke"/> in the image.
            </summary>
            <param name="stroke">a <see cref="T:Northwoods.GoWeb.GoStroke"/></param>
            <param name="v">a String</param>
            <remarks>
            You can call this method in order to define customized client-side data for parts of an image.
            This just converts the <paramref name="stroke"/>'s points into view coordinates and adds
            those points, along with <see cref="P:Northwoods.GoWeb.GoObject.Bounds"/> information and the width of the pen
            and <see cref="P:Northwoods.GoWeb.GoStroke.PickMargin"/>, to the search array to be transmitted as JavaScript
            data structures.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoViewDataRenderer.GenerateCursorArrayRef">
            <summary>
            Return a JavaScript expression that refers to the cursor
            data for the current view.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoViewDataRenderer.BuildCursorSearchArray">
            <summary>
            Define the client-side cursors to be used by parts of this view.
            </summary>
            <remarks>
            <para>
            The rendering of this view into HTML will call this method to
            produce a definition of where in the image the browser will
            display a different (non-"auto") cursor.
            This method should call <see cref="M:Northwoods.GoWeb.GoViewDataRenderer.AddSearchArrayEntry(System.Drawing.RectangleF,System.String)"/>
            to define the rectangular regions and their associated cursor names.
            To reduce unneeded data, you will probably want to limit data
            to those objects whose see cref="GoObject.Bounds"/&gt; intersects with
            <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="P:Northwoods.GoWeb.GoView.DocExtent"/> in document
            coordinates, or <see cref="P:Northwoods.GoWeb.GoView.DisplayRectangle"/> in view coordinates.
            </para>
            <para>
            By default this calls <see cref="M:Northwoods.GoWeb.GoViewDataRenderer.AddCursor(Northwoods.GoWeb.GoObject)"/> on each object
            to produce cursors for <see cref="T:Northwoods.GoWeb.GoHandle"/>s
            that are in this view and whose cursors are known for the given
            <see cref="P:Northwoods.GoWeb.GoHandle.HandleID"/>, and for those <see cref="T:Northwoods.GoWeb.GoPort"/>s
            that are linkable.
            </para>
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoViewDataRenderer.Cursors"/>
            <seealso cref="M:Northwoods.GoWeb.GoViewDataRenderer.AddCursor(Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoViewDataRenderer.AddCursor(Northwoods.GoWeb.GoObject)">
            <summary>
            This is called by <see cref="M:Northwoods.GoWeb.GoViewDataRenderer.BuildCursorSearchArray"/> for each object that
            is visible in the view, to possibly add cursor name information for client-side use.
            </summary>
            <param name="obj"></param>
            <remarks>
            At the current time, only rectangular areas are associated with cursors.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoViewDataRenderer.BuildCursorSearchArray"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoViewDataRenderer.GenerateToolTipArrayRef">
            <summary>
            Return a JavaScript expression that refers to the tooltip
            strings for the current view.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoViewDataRenderer.BuildToolTipSearchArray">
            <summary>
            Define the client-side tooltip behavior for this view.
            </summary>
            <remarks>
            <para>
            The rendering of this view into HTML will call this method to
            produce a definition of where in the image the browser will
            display a tooltip.
            (Of course, not all browsers will actually display tooltips.)
            This method should call <see cref="M:Northwoods.GoWeb.GoViewDataRenderer.AddSearchArrayEntry(System.Drawing.RectangleF,System.String)"/>
            or <see cref="M:Northwoods.GoWeb.GoViewDataRenderer.AddSearchArrayEntry(Northwoods.GoWeb.GoStroke,System.String)"/>
            to define the rectangular or stroke-shaped regions and their associated tooltip strings.
            To reduce unneeded data, you will probably want to limit data
            to those objects whose see cref="GoObject.Bounds"/&gt; intersects with
            <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="P:Northwoods.GoWeb.GoView.DocExtent"/> in document
            coordinates, or <see cref="P:Northwoods.GoWeb.GoView.DisplayRectangle"/> in view coordinates.
            </para>
            <para>
            By default this method calls <see cref="M:Northwoods.GoWeb.GoViewDataRenderer.AddToolTip(Northwoods.GoWeb.GoObject)"/> on each object
            to produce tooltips for the visible objects whose <see cref="M:Northwoods.GoWeb.GoObject.GetToolTip(Northwoods.GoWeb.GoView)"/>
            method returns a string.
            It also calls <see cref="M:Northwoods.GoWeb.GoViewDataRenderer.BuildScrollMarginToolTipSearchArray"/> to
            generate tooltips for the scroll margins.
            </para>
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoViewDataRenderer.ToolTips"/>
            <seealso cref="M:Northwoods.GoWeb.GoViewDataRenderer.AddToolTip(Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoViewDataRenderer.AddToolTip(Northwoods.GoWeb.GoObject)">
            <summary>
            This is called by <see cref="M:Northwoods.GoWeb.GoViewDataRenderer.BuildToolTipSearchArray"/> for each object that
            is visible in the view, to possibly add tooltip information for client-side use.
            </summary>
            <param name="obj"></param>
            <remarks>
            This calls <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="M:Northwoods.GoWeb.GoObject.GetToolTip(Northwoods.GoWeb.GoView)"/> to see
            if the <paramref name="obj"/> has a tooltip string.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoViewDataRenderer.BuildToolTipSearchArray"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoViewDataRenderer.BuildScrollMarginToolTipSearchArray">
            <summary>
            Produce the client-side definitions of tooltips for the panning buttons.
            </summary>
            <remarks>
            This calls <see cref="M:Northwoods.GoWeb.GoViewDataRenderer.AddSearchArrayEntry(System.Drawing.Rectangle,System.String)"/> to cause the browser to display
            the <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="P:Northwoods.GoWeb.GoView.ScrollMarginToolTip"/> when appropriate.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoViewDataRenderer.GenerateContextMenuArrayRef">
            <summary>
            Return a JavaScript expression that refers to the context menu
            data for the current view.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoViewDataRenderer.BuildContextMenuSearchArray">
            <summary>
            Define client-side data for defining context menus for this view.
            </summary>
            <remarks>
            <para>
            The rendering of this view into HTML will call this method to
            produce a definition of custom information for areas of the image.
            This method should call <see cref="M:Northwoods.GoWeb.GoViewDataRenderer.AddSearchArrayEntry(System.Drawing.Rectangle,System.String)"/>
            or <see cref="M:Northwoods.GoWeb.GoViewDataRenderer.AddSearchArrayEntry(Northwoods.GoWeb.GoStroke,System.String)"/>
            to define the rectangular or stroke-shaped regions and their associated information string.
            To reduce unneeded data, you will probably want to limit data
            to those objects whose see cref="GoObject.Bounds"/&gt; intersects with
            <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="P:Northwoods.GoWeb.GoView.DocExtent"/> in document
            coordinates, or <see cref="P:Northwoods.GoWeb.GoView.DisplayRectangle"/> in view coordinates.
            </para>
            <para>
            By default this calls <see cref="M:Northwoods.GoWeb.GoViewDataRenderer.AddContextMenu(Northwoods.GoWeb.GoObject)"/> for each object
            to generate any context menu data.
            </para>
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoViewDataRenderer.ContextMenus"/>
            <seealso cref="M:Northwoods.GoWeb.GoViewDataRenderer.AddContextMenu(Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoViewDataRenderer.AddContextMenu(Northwoods.GoWeb.GoObject)">
            <summary>
            This is called by <see cref="M:Northwoods.GoWeb.GoViewDataRenderer.BuildContextMenuSearchArray"/> for each object that
            is visible in the view, to possibly add context menu information for client-side use.
            </summary>
            <param name="obj"></param>
            <remarks>
            This calls <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="M:Northwoods.GoWeb.GoObject.GetContextMenu(Northwoods.GoWeb.GoView)"/> to see
            if the <paramref name="obj"/> has any context menu.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoViewDataRenderer.BuildContextMenuSearchArray"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoViewDataRenderer.GetDefaultContextMenu">
            <summary>
            Returns the <see cref="T:Northwoods.GoWeb.GoContextMenu"/> to display in the view on the client.
            </summary>
            <returns>
            By default this just returns the value of <see cref="P:Northwoods.GoWeb.GoViewDataRenderer.DefaultContextMenu"/>.
            But you can override this method in order to generate a context-specific
            <see cref="T:Northwoods.GoWeb.GoContextMenu"/> (or return null for none) for each rendering.
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoViewDataRenderer.GeneratePartInfoArrayRef">
            <summary>
            Return a JavaScript expression that refers to application-defined
            data for the current view.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoViewDataRenderer.BuildPartInfoSearchArray">
            <summary>
            Define client-side information for this view.
            </summary>
            <remarks>
            <para>
            The rendering of this view into HTML will call this method to
            produce a definition of custom information for areas of the image.
            This method should call <see cref="M:Northwoods.GoWeb.GoViewDataRenderer.AddSearchArrayEntry(System.Drawing.Rectangle,System.String)"/>
            or <see cref="M:Northwoods.GoWeb.GoViewDataRenderer.AddSearchArrayEntry(Northwoods.GoWeb.GoStroke,System.String)"/>
            to define the rectangular or stroke-shaped regions and their associated information string.
            To reduce unneeded data, you will probably want to limit information
            to those objects whose see cref="GoObject.Bounds"/&gt; intersects with
            <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="P:Northwoods.GoWeb.GoView.DocExtent"/> in document
            coordinates, or <see cref="P:Northwoods.GoWeb.GoView.DisplayRectangle"/> in view coordinates.
            </para>
            </remarks>
            <seealso cref="P:Northwoods.GoWeb.GoViewDataRenderer.PartInfos"/>
            <seealso cref="M:Northwoods.GoWeb.GoViewDataRenderer.AddPartInfo(Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoViewDataRenderer.AddPartInfo(Northwoods.GoWeb.GoObject)">
            <summary>
            This is called by <see cref="M:Northwoods.GoWeb.GoViewDataRenderer.BuildPartInfoSearchArray"/> for each top-level object
            (or immediate child of a subgraph) that is visible in the view,
            to possibly add information for client-side use.
            </summary>
            <param name="obj">if null, this method does nothing</param>
            <remarks>
            This just calls <see cref="M:Northwoods.GoWeb.GoViewDataRenderer.AssociatePartInfo(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoPartInfo)"/> with the <see cref="T:Northwoods.GoWeb.GoPartInfo"/>
            (if any) returned by <see cref="T:Northwoods.GoWeb.GoObject"/>.<see cref="M:Northwoods.GoWeb.GoObject.GetPartInfo(Northwoods.GoWeb.GoView,Northwoods.GoWeb.IGoPartInfoRenderer)"/>.
            You may have some objects that have several parts that need separate
            <see cref="T:Northwoods.GoWeb.GoPartInfo"/> descriptions.
            You could override this method in order to recurse on those child objects.
            Or for the same reason, an override of <see cref="M:Northwoods.GoWeb.GoObject.GetPartInfo(Northwoods.GoWeb.GoView,Northwoods.GoWeb.IGoPartInfoRenderer)"/> may also
            want to call this method on some of its child objects.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoViewDataRenderer.BuildPartInfoSearchArray"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoViewDataRenderer.AssociatePartInfo(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoPartInfo)">
            <summary>
            Call <see cref="M:Northwoods.GoWeb.GoViewDataRenderer.AddSearchArrayEntry(System.Drawing.RectangleF,System.String)"/> or
            or <see cref="M:Northwoods.GoWeb.GoViewDataRenderer.AddSearchArrayEntry(Northwoods.GoWeb.GoStroke,System.String)"/> or
            another overload of that method in order to associate the JavaScript
            object corresponding to the <see cref="T:Northwoods.GoWeb.GoPartInfo"/> <paramref name="info"/>
            with the location and shape of a given <paramref name="obj"/>.
            </summary>
            <param name="obj">if null, this method does nothing</param>
            <param name="info">if null, this method does nothing</param>
        </member>
        <member name="M:Northwoods.GoWeb.GoViewDataRenderer.CreatePartInfo">
            <summary>
            Allocate and return a <see cref="T:Northwoods.GoWeb.GoPartInfo"/> for this renderer.
            </summary>
            <returns>a <see cref="T:Northwoods.GoWeb.GoPartInfo"/></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoViewDataRenderer.GetStandardPartInfo(Northwoods.GoWeb.GoObject)">
            <summary>
            Produce a <see cref="T:Northwoods.GoWeb.GoPartInfo"/> describing a <see cref="T:Northwoods.GoWeb.GoObject"/> in this view.
            </summary>
            <param name="obj">if null, this method does nothing</param>
            <returns>
            If the <paramref name="obj"/> is an <see cref="T:Northwoods.GoWeb.IGoLabeledNode"/>,
            this will return a new <see cref="T:Northwoods.GoWeb.GoPartInfo"/> holding the "Text" property,
            plus the "ID" property if the object is an <see cref="T:Northwoods.GoWeb.IGoIdentifiablePart"/>
            and the <see cref="P:Northwoods.GoWeb.IGoIdentifiablePart.PartID"/> is not -1,
            plus the "SingleClick", "DoubleClick", or "ContextClick"
            properties corresponding to the default values given by
            <see cref="P:Northwoods.GoWeb.GoViewDataRenderer.LabeledNodeSingleClick"/>, <see cref="P:Northwoods.GoWeb.GoViewDataRenderer.LabeledNodeDoubleClick"/>,
            or <see cref="P:Northwoods.GoWeb.GoViewDataRenderer.LabeledNodeContextClick"/>, respectively.
            Otherwise this will just return null for "uninteresting" objects.
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoViewDataRenderer.OnUpdated">
            <summary>
            This is called by <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="M:Northwoods.GoWeb.GoView.OnUpdated(System.EventArgs)"/>.
            </summary>
            <remarks>
            You may find that overriding this method and setting the
            <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="P:Northwoods.GoWeb.GoView.DataRenderer"/> property is
            easier than overriding <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="M:Northwoods.GoWeb.GoView.OnUpdated(System.EventArgs)"/>.
            Such an override is needed when using <see cref="P:Northwoods.GoWeb.GoView.NoPost"/> views,
            since there is no <c>Page</c> or other context in which to define
            a <see cref="E:Northwoods.GoWeb.GoView.Updated"/> event handler.
            By default this method does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoViewDataRenderer.HandleClientRequest(System.String,System.Collections.Hashtable)">
            <summary>
            This is called by <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="M:Northwoods.GoWeb.GoView.RaisePostBackEvent(System.String)"/>
            for handling both postback and NoPost queries that have "request" as one of the parameter names.
            </summary>
            <param name="evtargs">the string that was passed to <see cref="M:Northwoods.GoWeb.GoView.RaisePostBackEvent(System.String)"/></param>
            <param name="parameters">a <c>Hashtable</c> that holds name/value pairs from parsing the <paramref name="evtargs"/> string</param>
            <remarks>
            You may find that overriding this method and setting the
            <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="P:Northwoods.GoWeb.GoView.DataRenderer"/> property is
            easier than overriding <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="M:Northwoods.GoWeb.GoView.RaisePostBackEvent(System.String)"/>.
            Such an override is needed when using <see cref="P:Northwoods.GoWeb.GoView.NoPost"/> views,
            since there is no <c>Page</c> or other context in which to define
            a <see cref="E:Northwoods.GoWeb.GoView.Updated"/> event handler.
            By default this method does nothing.
            You can override this method to handle "request" queries in much the same
            manner that <see cref="M:Northwoods.GoWeb.GoView.RaisePostBackEvent(System.String)"/> does for queries such
            as "zoom" and "act".
            For example, if you had a JavaScript function that wanted to change the
            brush color of the current selection:
            <code>
            function changeSelectionColor(colorname) {
              goRequest('MyView', 'color=' + colorname);
            }
            </code>
            And you invoked this function, for example by using a button:
            <code>
              <button onclick="changeSelectionColor('red')" type="button">Make Red</button>
            </code>
            Then you could override this method to handle the request:
            <code>
            public override void HandleClientRequest(String evtargs, Hashtable parameters) {
              String color = (String)parameters["color"];
              if (color != null) {
                Color c = Color.FromName(color);
                foreach (GoObject obj in this.View.Selection) {
                  GoShape shape = obj as GoShape;
                  if (shape != null) {
                    shape.BrushColor = c;
                  }
                }
              }
            }
            </code>
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoViewDataRenderer.View">
            <summary>
            Gets or sets the current <see cref="T:Northwoods.GoWeb.GoView"/> for which a call to
            <see cref="M:Northwoods.GoWeb.GoViewDataRenderer.Render"/> is producing JavaScript code.
            </summary>
            <value>This must not be null.</value>
        </member>
        <member name="P:Northwoods.GoWeb.GoViewDataRenderer.Cursors">
            <summary>
            Gets or sets whether the <see cref="M:Northwoods.GoWeb.GoViewDataRenderer.Render"/> method should generate
            JavaScript data for interactive cursors on the client.
            </summary>
            <value>This defaults to true</value>
            <seealso cref="M:Northwoods.GoWeb.GoViewDataRenderer.BuildCursorSearchArray"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoViewDataRenderer.ToolTips">
            <summary>
            Gets or sets whether the <see cref="M:Northwoods.GoWeb.GoViewDataRenderer.Render"/> method should generate
            JavaScript data for interactive tooltips on the client.
            </summary>
            <value>This defaults to true</value>
            <seealso cref="M:Northwoods.GoWeb.GoViewDataRenderer.BuildToolTipSearchArray"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoViewDataRenderer.ContextMenus">
            <summary>
            Gets or sets whether the <see cref="M:Northwoods.GoWeb.GoViewDataRenderer.Render"/> method should generate
            JavaScript data for application-specific context menus on the client.
            </summary>
            <value>This defaults to true</value>
            <seealso cref="M:Northwoods.GoWeb.GoViewDataRenderer.BuildContextMenuSearchArray"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoViewDataRenderer.DefaultContextMenu">
            <summary>
            Gets or sets the default context menu to be shown in the view on the client,
            if no more specific context menu was found by the <c>goDoClick</c> JavaScript function.
            </summary>
            <value>this defaults to null</value>
            <remarks>
            This property is only used when <see cref="P:Northwoods.GoWeb.GoViewDataRenderer.ContextMenus"/> is true.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoViewDataRenderer.PartInfos">
            <summary>
            Gets or sets whether the <see cref="M:Northwoods.GoWeb.GoViewDataRenderer.Render"/> method should generate
            JavaScript data for application-specific information on the client.
            </summary>
            <value>This defaults to true</value>
            <seealso cref="M:Northwoods.GoWeb.GoViewDataRenderer.BuildPartInfoSearchArray"/>
            <seealso cref="P:Northwoods.GoWeb.GoViewDataRenderer.PartInfosIfLabelNotEditable"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoViewDataRenderer.PartInfosIfLabelNotEditable">
            <summary>
            Gets or sets whether <see cref="M:Northwoods.GoWeb.GoViewDataRenderer.GetStandardPartInfo(Northwoods.GoWeb.GoObject)"/> should produce part information
            for <see cref="T:Northwoods.GoWeb.IGoLabeledNode"/>s even if <c>Label.CanEdit()</c> is false.
            </summary>
            <value>This defaults to true</value>
            <seealso cref="P:Northwoods.GoWeb.GoViewDataRenderer.PartInfos"/>
            <remarks>
            If you only want the client JavaScript code to have label text strings
            when the label (a GoText) is Editable, then you can optimize the data
            transmission by avoiding sending information for read-only labeled nodes
            and labeled links by setting this property to false.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoViewDataRenderer.SingleClickDefault">
            <summary>
            Gets or sets the JavaScript to be executed when the user clicks anywhere in the view
            but where a click is defined.
            </summary>
            <value>This defaults to null</value>
            <remarks>This corresponds to the same-named property on the JavaScript object
            (but not the IMG element) on the client that represents the view.
            This property is only used when <see cref="P:Northwoods.GoWeb.GoViewDataRenderer.PartInfos"/> is true.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoViewDataRenderer.DoubleClickDefault">
            <summary>
            Gets or sets the JavaScript to be executed when the user double-clicks anywhere in the view
            but where a click is defined.
            </summary>
            <value>This defaults to null</value>
            <remarks>This corresponds to the same-named property on the JavaScript object
            (but not the IMG element) on the client that represents the view.
            This property is only used when <see cref="P:Northwoods.GoWeb.GoViewDataRenderer.PartInfos"/> is true.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoViewDataRenderer.ContextClickDefault">
            <summary>
            Gets or sets the JavaScript to be executed when the user context-clicks anywhere in the view
            but where a click is defined.
            </summary>
            <value>This defaults to null</value>
            <remarks>This corresponds to the same-named property on the JavaScript object
            (but not the IMG element) on the client that represents the view.
            This property is only used when <see cref="P:Northwoods.GoWeb.GoViewDataRenderer.PartInfos"/> is true.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoViewDataRenderer.NoClick">
            <summary>
            Gets or sets the JavaScript to be executed when the user does not do a single-click
            a double-click, or a context-click in the view.
            </summary>
            <value>This defaults to null</value>
            <remarks>
            This corresponds to the same-named property on the JavaScript object
            (but not the IMG element) on the client that represents the view.
            This JavaScript (if not null) is also executed if the user does a drag
            (i.e. the mouse up is farther than a few pixels away from the mouse down point)
            or when no specific <see cref="P:Northwoods.GoWeb.GoViewDataRenderer.SingleClickDefault"/>, <see cref="P:Northwoods.GoWeb.GoViewDataRenderer.DoubleClickDefault"/>,
            or <see cref="P:Northwoods.GoWeb.GoViewDataRenderer.ContextClickDefault"/> is available to execute at a click point.
            This property is only used when <see cref="P:Northwoods.GoWeb.GoViewDataRenderer.PartInfos"/> is true.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoViewDataRenderer.LabeledNodeSingleClick">
            <summary>
            Gets or sets the default value to use for the
            <see cref="T:Northwoods.GoWeb.GoPartInfo"/>.<see cref="P:Northwoods.GoWeb.GoPartInfo.SingleClick"/>
            JavaScript property.
            </summary>
            <value>This defaults to null</value>
            <remarks>
            <see cref="M:Northwoods.GoWeb.GoViewDataRenderer.GetStandardPartInfo(Northwoods.GoWeb.GoObject)"/> only uses this property
            when the object is an <see cref="T:Northwoods.GoWeb.IGoLabeledNode"/> and is selectable.
            This property is only used when <see cref="P:Northwoods.GoWeb.GoViewDataRenderer.PartInfos"/> is true.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoViewDataRenderer.LabeledNodeDoubleClick">
            <summary>
            Gets or sets the default value to use for the
            <see cref="T:Northwoods.GoWeb.GoPartInfo"/>.<see cref="P:Northwoods.GoWeb.GoPartInfo.DoubleClick"/>
            JavaScript property when the object is an <see cref="T:Northwoods.GoWeb.IGoLabeledNode"/>
            and is selectable.
            </summary>
            <value>This defaults to null</value>
            <remarks>
            <see cref="M:Northwoods.GoWeb.GoViewDataRenderer.GetStandardPartInfo(Northwoods.GoWeb.GoObject)"/> only uses this property
            when the object is an <see cref="T:Northwoods.GoWeb.IGoLabeledNode"/> and is selectable.
            This property is only used when <see cref="P:Northwoods.GoWeb.GoViewDataRenderer.PartInfos"/> is true.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoViewDataRenderer.LabeledNodeContextClick">
            <summary>
            Gets or sets the default value to use for the
            <see cref="T:Northwoods.GoWeb.GoPartInfo"/>.<see cref="P:Northwoods.GoWeb.GoPartInfo.ContextClick"/>
            JavaScript property when the object is an <see cref="T:Northwoods.GoWeb.IGoLabeledNode"/>
            and is selectable.
            </summary>
            <value>This defaults to null</value>
            <remarks>
            <see cref="M:Northwoods.GoWeb.GoViewDataRenderer.GetStandardPartInfo(Northwoods.GoWeb.GoObject)"/> only uses this property
            when the object is an <see cref="T:Northwoods.GoWeb.IGoLabeledNode"/> and is selectable.
            This property is only used when <see cref="P:Northwoods.GoWeb.GoViewDataRenderer.PartInfos"/> is true.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoOverviewDataRenderer.BuildCursorSearchArray">
            <summary>
            Display in the browser a move cursor for the <see cref="P:Northwoods.GoWeb.GoOverview.OverviewRect"/>.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoOverviewRectangle">
            <summary>
            This class implements the rectangle shown and dragged around in the overview window.
            It is also responsible for keeping track of changes to the view, so that it can resize itself.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoOverviewRectangle.#ctor">
            <summary>
            Create a <see cref="T:Northwoods.GoWeb.GoRectangle"/> that knows about the view that it represents.
            </summary>
            <remarks>
            The overview rectangle must not be <see cref="P:Northwoods.GoWeb.GoObject.Reshapable"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoOverviewRectangle.UpdateRectFromView">
            <summary>
            Make this GoRectangle's position and size correspond to the
            observed view's position and size in the document
            </summary>
            <remarks>
            This method also scrolls this overview window, if needed,
            to make the rectangle visible.
            This method should be a no-op when <see cref="P:Northwoods.GoWeb.GoObject.Initializing"/> is true.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoOverviewRectangle.ContainsPoint(System.Drawing.PointF)">
            <summary>
            Treat this rectangle as being hollow--the user can only pick the rectangle when close to the edge.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoOverviewRectangle.ComputeMove(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Limit where this rectangle can be dragged, to avoid misleading the user
            into believing they could scroll even futher.
            </summary>
            <param name="origLoc"></param>
            <param name="newLoc"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoOverviewRectangle.OnBoundsChanged(System.Drawing.RectangleF)">
            <summary>
            As the user drags this rectangle around, change the observed view's
            DocPosition property.
            </summary>
            <param name="old"></param>
            <remarks>
            This basically just does <c>ObservedView.DocPosition = Position</c>,
            although it can also set the ObservedView.DocScale property
            when this rectangle's size changes.
            It ignores changes caused by a change in the observed view
            by not changing the ObservedView's DocPosition or DocScale when
            <see cref="P:Northwoods.GoWeb.GoObject.Initializing"/> is true.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoOverviewRectangle.GetCursorName(Northwoods.GoWeb.GoView)">
            <summary>
            Display a "move" cursor when the mouse is over the edge of this rectangle.
            </summary>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoOverviewRectangle.OnGotSelection(Northwoods.GoWeb.GoSelection)">
            <summary>
            Just call <see cref="M:Northwoods.GoWeb.GoOverviewRectangle.AddSelectionHandles(Northwoods.GoWeb.GoSelection,Northwoods.GoWeb.GoObject)"/>.
            </summary>
            <param name="sel"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoOverviewRectangle.AddSelectionHandles(Northwoods.GoWeb.GoSelection,Northwoods.GoWeb.GoObject)">
            <summary>
            The overview rectangle should only appear selected if the <see cref="T:Northwoods.GoWeb.GoOverview"/>
            supports resizing (i.e. <see cref="P:Northwoods.GoWeb.GoView.AllowSelect"/> and <see cref="P:Northwoods.GoWeb.GoView.AllowResize"/> are true),
            and even then the handles will not be seen since their <see cref="T:Northwoods.GoWeb.GoHandle"/>.<see cref="T:Northwoods.GoWeb.GoHandleStyle"/>
            is <see cref="F:Northwoods.GoWeb.GoHandleStyle.None"/>.
            </summary>
            <param name="sel"></param>
            <param name="selectedObj"></param>
        </member>
        <member name="P:Northwoods.GoWeb.GoOverviewRectangle.ObservedView">
            <summary>
            Gets the view whose bounds this rectangle is representing in the overview.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.Orientation">
            <summary>
            Specifies the orientation of controls or Go objects.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.Orientation.Horizontal">
            <summary>
            The control or object is oriented horizontally.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.Orientation.Vertical">
            <summary>
            The control or object is oriented vertically.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.SortOrder">
            <summary>
            Specifies how items in a list are sorted.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.SortOrder.Ascending">
            <summary>
            The items are sorted in ascending order.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.SortOrder.Descending">
            <summary>
            The items are sorted in descending order.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.SortOrder.None">
            <summary>
            The items are not sorted.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoPalette">
            <summary>
            A palette is a view holding a number of objects in a grid that the user
            can drag into another document.
            </summary>
            <remarks>
            <para>
            The spacing and positioning of the items is controlled by the
            <see cref="P:Northwoods.GoWeb.GoView.Grid"/>.<see cref="P:Northwoods.GoWeb.GoView.GridCellSizeWidth"/> and
            <see cref="P:Northwoods.GoWeb.GoView.GridCellSizeHeight"/>
            control the spacing between items--smaller values will allow the objects to be
            placed closer together without overlapping, but will increase the likelihood of
            unaligned columns (or rows) if the objects have different sizes.
            <see cref="P:Northwoods.GoWeb.GoView.GridOriginX"/> and <see cref="P:Northwoods.GoWeb.GoView.GridOriginY"/>
            control the amount of "margin" space at the top and left of the view.
            However, if <see cref="P:Northwoods.GoWeb.GoPalette.AlignsSelectionObject"/> is true and the selection objects tend
            to be smaller than the items, this margin should be larger to accomodate those
            wider item parts (unless you want to allow them to be clipped).
            </para>
            <para>
            You can control whether the objects are sorted, and in what order they
            are sorted, by setting the <see cref="P:Northwoods.GoWeb.GoPalette.Sorting"/> property.
            You can control the way the objects are laid out in a grid, with the
            scrollbar (if needed) either vertical or horizontal, by setting the
            <see cref="P:Northwoods.GoWeb.GoPalette.Orientation"/> property.
            Because <see cref="M:Northwoods.GoWeb.GoPalette.LayoutItems"/> is designed to take this view's
            scale and size into accout, this class is not designed to share its
            document with other views.
            </para>
            <para>
            Palettes do not support sheets or <see cref="P:Northwoods.GoWeb.GoView.SheetStyle"/>.
            Since users are not expected to move or resize any of the objects,
            the grid <see cref="P:Northwoods.GoWeb.GoView.GridSnapDrag"/> and <see cref="P:Northwoods.GoWeb.GoView.GridSnapResize"/>
            behavior is ignored.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoPalette.#ctor">
            <summary>
            Create a <see cref="T:Northwoods.GoWeb.GoPalette"/> window that can show a collection of
            <see cref="T:Northwoods.GoWeb.GoObject"/> items arranged in a grid that the user can drag from.
            </summary>
            <remarks>
            This kind of view allows no modifications by users, but does allow copying
            objects by dragging objects out of the view or through clipboard copy.
            The grid cell size defaults to 60 by 60, with an initial origin of 20,5.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoPalette.CreateSheet">
            <summary>
            Palettes do not support <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="P:Northwoods.GoWeb.GoView.Sheet"/>.
            </summary>
            <returns>null</returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoPalette.LayoutItems">
            <summary>
            Position all of this document's objects in a grid, according to the
            orientation and sort order.
            </summary>
            <remarks>
            If the <see cref="P:Northwoods.GoWeb.GoPalette.Orientation"/> is <c>Orientation.Vertical</c>, for
            example, this method will position all of the objects in the document
            in the grid, specified by <see cref="P:Northwoods.GoWeb.GoView.GridCellSizeWidth"/>,
            <see cref="P:Northwoods.GoWeb.GoView.GridCellSizeHeight"/>, <see cref="P:Northwoods.GoWeb.GoView.GridOriginX"/>,
            and <see cref="P:Northwoods.GoWeb.GoView.GridOriginY"/>, starting at the top left corner,
            and proceeding to fill each row before adding rows.
            The order in which document objects are taken as palette items is
            determined by the <see cref="P:Northwoods.GoWeb.GoPalette.Sorting"/> and the <see cref="P:Northwoods.GoWeb.GoPalette.Comparer"/>
            comparison method.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoPalette.OnDocumentChanged(System.Object,Northwoods.GoWeb.GoChangedEventArgs)">
            <summary>
            When an object is inserted or removed from the document, call <see cref="M:Northwoods.GoWeb.GoPalette.LayoutItems"/>.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoPalette.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)">
            <summary>
            When the <see cref="P:Northwoods.GoWeb.GoView.Grid"/> changes, call <see cref="M:Northwoods.GoWeb.GoPalette.LayoutItems"/>.
            </summary>
            <param name="hint"></param>
            <param name="subhint"></param>
            <param name="x"></param>
            <param name="oldI"></param>
            <param name="oldVal"></param>
            <param name="oldRect"></param>
            <param name="newI"></param>
            <param name="newVal"></param>
            <param name="newRect"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoPalette.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            When the <see cref="P:Northwoods.GoWeb.GoView.DocScale"/> property changes, call <see cref="M:Northwoods.GoWeb.GoPalette.LayoutItems"/>.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoPalette.LoadView(Northwoods.GoWeb.GoView)">
            <summary>
            Copy this class's state from a deserialized palette.
            </summary>
            <param name="saved"></param>
            <remarks>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoPalette.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoPalette.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization function.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Northwoods.GoWeb.GoPalette.SheetStyle">
            <summary>
            SheetStyle is always <c>GoViewSheetStyle.None</c>, and cannot be set.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoPalette.SheetRoom">
            <summary>
            Palettes do not support <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="P:Northwoods.GoWeb.GoView.Sheet"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoPalette.Orientation">
            <summary>
            Gets or sets how to fill the palette by positioning its items.
            </summary>
            <value>
            The default value is <c>Orientation.Vertical</c>.
            </value>
            <remarks>
            This property determines whether the automatic layout of the items in
            the palette fills and adds rows (<c>Orientation.Vertical</c>) or fills
            and adds columns (<c>Orientation.Horizontal</c>).
            A vertical orientation means that there is no horizontal scroll bar,
            and that the vertical scroll bar shows itself when it is needed because
            the rows do not all fit in the display area.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoPalette.AlignsSelectionObject">
            <summary>
            Gets or sets whether to align each item's <see cref="P:Northwoods.GoWeb.GoObject.SelectionObject"/>
            instead of the whole item.
            </summary>
            <value>
            The default value is true.
            </value>
            <remarks>
            A true value causes node icons to be aligned instead of the top-left
            corners of the objects.  The node labels, then, are unlikely to be aligned.
            To reduce overlap <see cref="M:Northwoods.GoWeb.GoPalette.LayoutItems"/> may skip cells in order to place
            an item.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoPalette.Sorting">
            <summary>
            Gets or sets whether and how LayoutItems sorts before it positions all of the items.
            </summary>
            <value>
            If the value is not <c>SortOrder.None</c>, <see cref="P:Northwoods.GoWeb.GoPalette.Comparer"/> is used to
            determine the sort order.  Otherwise, <see cref="M:Northwoods.GoWeb.GoPalette.LayoutItems"/> places the
            palette items in a grid in an order of its own choosing.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoPalette.Comparer">
            <summary>
            Gets or sets the way the palette items are compared during sorting.
            </summary>
            <value>
            This defaults to a comparer that compares the <see cref="P:Northwoods.GoWeb.IGoLabeledPart.Text"/> strings.
            If the object is not a <see cref="T:Northwoods.GoWeb.IGoLabeledPart"/>, the default comparer
            compares as if it were null.
            Attempting to set this property to null will restore the default comparer.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoPalette.AutomaticLayout">
            <summary>
            Gets or sets whether <see cref="M:Northwoods.GoWeb.GoPalette.LayoutItems"/> actually positions all the items.
            </summary>
            <value>
            This defaults to true.
            </value>
        </member>
        <member name="T:Northwoods.GoWeb.GoSelection">
            <summary>
            The selection is a collection of <see cref="T:Northwoods.GoWeb.GoObject"/>s that the user
            can manipulate in a <see cref="T:Northwoods.GoWeb.GoView"/>.
            </summary>
            <remarks>
            You should use the <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="P:Northwoods.GoWeb.GoView.Selection"/>
            to display and manipulate the selection of objects that the user sees.
            Occasionally you may need to have a separate collection of objects that
            is a <see cref="T:Northwoods.GoWeb.GoSelection"/>, in which case you may want to call the
            constructor with a null/Nothing argument.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoSelection.#ctor(Northwoods.GoWeb.GoView)">
            <summary>
            Create an empty collection of objects representing the user's selection for a view.
            </summary>
            <param name="view">
            if the view is not null/Nothing, this will automatically create selection handles
            for document objects as they are <see cref="M:Northwoods.GoWeb.GoSelection.Add(Northwoods.GoWeb.GoObject)"/>'ed to this collection
            </param>
            <remarks>
            The only normal use of this constructor with a non-null argument should be by
            <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="M:Northwoods.GoWeb.GoView.CreateSelection"/>.
            If you do create a <see cref="T:Northwoods.GoWeb.GoSelection"/> with a non-null <paramref name="view"/>
            that is not the value of that view's <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="P:Northwoods.GoWeb.GoView.Selection"/>,
            you need to be responsible for maintaining the selection handles in the view.
            For example, a change in the bounds of an object will not automatically update the
            handles that are in any <see cref="T:Northwoods.GoWeb.GoSelection"/> but the one that is the
            <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="P:Northwoods.GoWeb.GoView.Selection"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoSelection.Add(Northwoods.GoWeb.GoObject)">
            <summary>
            Add an object to this selection.
            </summary>
            <param name="obj"></param>
            <remarks>
            If the <paramref name="obj"/> is already part of this selection,
            nothing happens.
            Otherwise this method calls <see cref="M:Northwoods.GoWeb.GoObject.OnGotSelection(Northwoods.GoWeb.GoSelection)"/>
            and raises the <see cref="E:Northwoods.GoWeb.GoView.ObjectGotSelection"/> event by
            calling <see cref="M:Northwoods.GoWeb.GoView.RaiseObjectGotSelection(Northwoods.GoWeb.GoObject)"/>.
            No notifications occur if there is no <see cref="P:Northwoods.GoWeb.GoSelection.View"/> for this selection.
            If adding an object would increase the <see cref="P:Northwoods.GoWeb.GoCollection.Count"/> beyond
            the <see cref="P:Northwoods.GoWeb.GoView.MaximumSelectionCount"/>, this collection is not augmented.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoSelection.Remove(Northwoods.GoWeb.GoObject)"/>
            <seealso cref="M:Northwoods.GoWeb.GoSelection.Contains(Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoSelection.AddRange(Northwoods.GoWeb.IGoCollection)">
            <summary>
            Call <see cref="M:Northwoods.GoWeb.GoView.RaiseSelectionStarting"/> and <see cref="M:Northwoods.GoWeb.GoView.RaiseSelectionFinished"/>
            around the addition of all of the objects in the given collection to this selection.
            </summary>
            <param name="coll"></param>
        </member>
        <member name="M:Northwoods.GoWeb.GoSelection.Remove(Northwoods.GoWeb.GoObject)">
            <summary>
            Remove an object from this selection.
            </summary>
            <param name="obj"></param>
            <remarks>
            If the <paramref name="obj"/> is not part of this selection,
            nothing happens.
            Otherwise this method calls <see cref="M:Northwoods.GoWeb.GoObject.OnLostSelection(Northwoods.GoWeb.GoSelection)"/>
            and raises the <see cref="E:Northwoods.GoWeb.GoView.ObjectLostSelection"/> event by
            calling <see cref="M:Northwoods.GoWeb.GoView.RaiseObjectLostSelection(Northwoods.GoWeb.GoObject)"/>.
            The notification happens after the object has been removed from
            this selection.
            Removing the primary selection may cause another selected object to lose
            selection and then gain it back again as the primary selection.
            No notifications occur if there is no <see cref="P:Northwoods.GoWeb.GoSelection.View"/> for this selection.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoSelection.Add(Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoSelection.Contains(Northwoods.GoWeb.GoObject)">
            <summary>
            Determine if an object is part of this selection.
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <remarks>
            The default implementation uses a hashtable to decide quickly.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoSelection.Add(Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoSelection.Clear">
            <summary>
            Clearing the selection raises the <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="E:Northwoods.GoWeb.GoView.SelectionStarting"/>
            and <see cref="E:Northwoods.GoWeb.GoView.SelectionFinished"/> events, if there were multiple objects selected.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoSelection.Select(Northwoods.GoWeb.GoObject)">
            <summary>
            Make the given object the one and only selected object.
            </summary>
            <param name="obj"></param>
            <returns><paramref name="obj"/></returns>
            <remarks>
            This will clear any existing selection and then add the single given object.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoSelection.Add(Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoSelection.Toggle(Northwoods.GoWeb.GoObject)">
            <summary>
            If the given object is part of this selection, remove it; otherwise add it.
            </summary>
            <param name="obj"></param>
            <seealso cref="M:Northwoods.GoWeb.GoSelection.Add(Northwoods.GoWeb.GoObject)"/>
            <seealso cref="M:Northwoods.GoWeb.GoSelection.Remove(Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoSelection.CreateBoundingHandle(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject)">
            <summary>
            Create and determine the appearance of a large handle around an object.
            </summary>
            <param name="obj"></param>
            <param name="selectedObj"></param>
            <returns></returns>
            <remarks>
            This method uses <see cref="M:Northwoods.GoWeb.GoObject.CreateBoundingHandle"/> to
            actually allocate the handle and to set the size and location of the
            handle, as determined by the bounding rectangle of <paramref name="obj"/>.
            The pen of the handle is determined by
            <see cref="P:Northwoods.GoWeb.GoView.PrimarySelectionColor"/> and
            <see cref="P:Northwoods.GoWeb.GoView.SecondarySelectionColor"/>; the brush is set to null.
            The new handle is associated with the <paramref name="obj"/> and its
            <see cref="P:Northwoods.GoWeb.IGoHandle.SelectedObject"/> property is set to
            <paramref name="selectedObj"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoSelection.CreateResizeHandle(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject,System.Drawing.PointF,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoSelection.CreateResizeHandle(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject,System.Drawing.PointF,System.Int32,System.Boolean)">
            <summary>
            Create and determine the appearance of a small handle for an object.
            </summary>
            <param name="obj"></param>
            <param name="selectedObj"></param>
            <param name="loc"></param>
            <param name="handleid"></param>
            <param name="filled"></param>
            <returns></returns>
            <remarks>
            This method uses <see cref="M:Northwoods.GoWeb.GoObject.CreateResizeHandle(System.Int32)"/> to
            actually allocate the handle.
            The size of the handle, if not already non-zero, is determined by
            <see cref="P:Northwoods.GoWeb.GoView.ResizeHandleSize"/>.
            The pen and brush of the handle are determined by
            <see cref="P:Northwoods.GoWeb.GoView.PrimarySelectionColor"/> and <see cref="P:Northwoods.GoWeb.GoView.SecondarySelectionColor"/>.
            The new handle is associated with the <paramref name="obj"/> and its
            <see cref="P:Northwoods.GoWeb.IGoHandle.SelectedObject"/> property is set to <paramref name="selectedObj"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoSelection.CreateBoundingHandle(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoSelection.AddHandle(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.IGoHandle)">
            <summary>
            Associate a handle with an object in this selection.
            </summary>
            <param name="obj"></param>
            <param name="handle"></param>
            <remarks>
            This method also adds the <paramref name="handle"/>'s
            <see cref="P:Northwoods.GoWeb.IGoHandle.GoObject"/> to the view's default layer.
            This method is called by <see cref="M:Northwoods.GoWeb.GoSelection.CreateResizeHandle(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject,System.Drawing.PointF,System.Int32,System.Boolean)"/> and <see cref="M:Northwoods.GoWeb.GoSelection.CreateBoundingHandle(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.GoObject)"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoSelection.RemoveHandles(Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoSelection.RemoveHandles(Northwoods.GoWeb.GoObject)">
            <summary>
            Remove all handles associated with an object in this selection.
            </summary>
            <param name="obj"></param>
            <remarks>
            Each handle for the <paramref name="obj"/> 
            has its <see cref="P:Northwoods.GoWeb.IGoHandle.SelectedObject"/> property
            set to null and its <see cref="P:Northwoods.GoWeb.IGoHandle.GoObject"/>
            removed from its view layer.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoSelection.AddHandle(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.IGoHandle)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoSelection.GetHandleCount(Northwoods.GoWeb.GoObject)">
            <summary>
            Return the number of handles associated with an object in this selection.
            </summary>
            <param name="obj">the "handled" object, not the "selected" object</param>
            <returns></returns>
            <seealso cref="M:Northwoods.GoWeb.GoSelection.GetHandleEnumerable(Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoSelection.GetAnExistingHandle(Northwoods.GoWeb.GoObject)">
            <summary>
            Return one of the handles associated with an object in this selection.
            </summary>
            <param name="obj">the "handled" object, not the "selected" object</param>
            <returns>
            An <see cref="T:Northwoods.GoWeb.IGoHandle"/>, or null if there are none for <paramref name="obj"/>.
            </returns>
            <seealso cref="M:Northwoods.GoWeb.GoSelection.GetHandleEnumerable(Northwoods.GoWeb.GoObject)"/>
            <seealso cref="M:Northwoods.GoWeb.GoSelection.FindHandleByID(Northwoods.GoWeb.GoObject,System.Int32)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoSelection.GetHandleEnumerable(Northwoods.GoWeb.GoObject)">
            <summary>
            Return an enumerable collection of the selection handles for an object.
            </summary>
            <param name="obj">an object that may have selection handles; the "handled" object, not the "selected" object</param>
            <returns>an <c>IEnumerable</c></returns>
            <seealso cref="M:Northwoods.GoWeb.GoSelection.AddHandle(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.IGoHandle)"/>
            <seealso cref="M:Northwoods.GoWeb.GoSelection.GetHandleCount(Northwoods.GoWeb.GoObject)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoSelection.FindHandleByID(Northwoods.GoWeb.GoObject,System.Int32)">
            <summary>
            Find a particular selection handle for an object, given its <see cref="P:Northwoods.GoWeb.IGoHandle.HandleID"/>.
            </summary>
            <param name="obj">an object that may have selection handles; the "handled" object, not the "selected" object</param>
            <param name="id">the <see cref="P:Northwoods.GoWeb.IGoHandle.HandleID"/> to look for</param>
            <returns>
            An <see cref="T:Northwoods.GoWeb.IGoHandle"/> that has the given ID, or null if no such handle is found.
            Note that if there is more than one such handle with the given ID, this will just return
            the first one it finds.
            </returns>
            <seealso cref="M:Northwoods.GoWeb.GoSelection.GetHandleEnumerable(Northwoods.GoWeb.GoObject)"/>
            <seealso cref="M:Northwoods.GoWeb.GoSelection.AddHandle(Northwoods.GoWeb.GoObject,Northwoods.GoWeb.IGoHandle)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoSelection.RemoveAllSelectionHandles">
            <summary>
            Call <see cref="M:Northwoods.GoWeb.GoObject.RemoveSelectionHandles(Northwoods.GoWeb.GoSelection)"/> on the
            <see cref="P:Northwoods.GoWeb.GoObject.SelectionObject"/> of each selected object.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoSelection.AddAllSelectionHandles"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoSelection.AddAllSelectionHandles">
            <summary>
            Call <see cref="M:Northwoods.GoWeb.GoObject.AddSelectionHandles(Northwoods.GoWeb.GoSelection,Northwoods.GoWeb.GoObject)"/> on the
            <see cref="P:Northwoods.GoWeb.GoObject.SelectionObject"/> of each selected object
            if <see cref="M:Northwoods.GoWeb.GoObject.CanView"/> is true, or call
            <see cref="M:Northwoods.GoWeb.GoObject.RemoveSelectionHandles(Northwoods.GoWeb.GoSelection)"/> otherwise.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoSelection.RemoveAllSelectionHandles"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoSelection.OnGotFocus">
            <summary>
            This method is called to make
            sure all selection handles appear normally.
            </summary>
            <remarks>
            This implementation currently just calls <see cref="M:Northwoods.GoWeb.GoSelection.AddAllSelectionHandles"/>
            if <see cref="P:Northwoods.GoWeb.GoView.HidesSelection"/> is true or if
            <see cref="P:Northwoods.GoWeb.GoView.NoFocusSelectionColor"/> is different from
            <see cref="P:Northwoods.GoWeb.GoView.PrimarySelectionColor"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoSelection.OnLostFocus">
            <summary>
            This method is called to make
            sure all selection handles either disappear (if
            <see cref="P:Northwoods.GoWeb.GoView.HidesSelection"/> is true), or appear with the
            <see cref="P:Northwoods.GoWeb.GoView.NoFocusSelectionColor"/> (if different from
            <see cref="P:Northwoods.GoWeb.GoView.PrimarySelectionColor"/>).
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoSelection.View">
            <summary>
            Gets the view that maintains this selection collection.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoSelection.SyncRoot">
            <summary>
            Gets an object to be used for synchronizing access to this collection.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoSelection.Primary">
            <summary>
            Gets the first object in this selection.
            </summary>
            <value>
            If this selection is empty, this value is null.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoSelection.HotSpot">
            <summary>
            Gets or sets the offset for where the mouse pointer should be,
            relative to the <see cref="P:Northwoods.GoWeb.GoObject.Position"/> of the <see cref="P:Northwoods.GoWeb.GoSelection.Primary"/> selection.
            </summary>
        </member>
        <member name="P:Northwoods.GoWeb.GoSelection.Focused">
            <summary>
            Gets whether this selection thinks its view has gotten focus.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoSelectionEventHandler">
            <summary>
            Represents methods that handle <see cref="T:Northwoods.GoWeb.GoSelectionEventArgs"/>.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoSelectionEventArgs">
            <summary>
            Holds information for the <see cref="T:Northwoods.GoWeb.GoView"/> events that involve
            a <see cref="P:Northwoods.GoWeb.GoSelectionEventArgs.GoObject"/> but are not associated with any input event.
            </summary>
            <remarks>
            <para>
            Although both this kind of event and <see cref="T:Northwoods.GoWeb.GoObjectEventArgs"/>
            are associated with a particular <see cref="P:Northwoods.GoWeb.GoSelectionEventArgs.GoObject"/>, this class is
            used when no particular mouse input event information is relevant.
            Such events include:
            <see cref="E:Northwoods.GoWeb.GoView.LinkCreated"/>, 
            <see cref="E:Northwoods.GoWeb.GoView.LinkRelinked"/>, 
            <see cref="E:Northwoods.GoWeb.GoView.ObjectGotSelection"/>, 
            <see cref="E:Northwoods.GoWeb.GoView.ObjectLostSelection"/>, 
            <see cref="E:Northwoods.GoWeb.GoView.ObjectResized"/>,
            <c>GoView.ObjectEdited</c> (in WinForms).
            With these events there is only a single object involved.
            The name of this class, <c>GoSelectionEventArgs</c> may be somewhat misleading,
            since not all events involve the view's <see cref="T:Northwoods.GoWeb.GoSelection"/>.  In the list
            above, most do, but <c>LinkCreated</c> and <c>ObjectEdited</c> might not involve
            selection.
            </para>
            <para>
            Additional <see cref="T:Northwoods.GoWeb.GoView"/> events are not even associated with one
            particular object--they use the <see cref="T:System.EventArgs"/> class instead of this class.
            Such events include:
            <see cref="E:Northwoods.GoWeb.GoView.ClipboardCopied"/>,
            <see cref="E:Northwoods.GoWeb.GoView.ClipboardPasted"/>,
            <see cref="E:Northwoods.GoWeb.GoView.SelectionCopied"/>, 
            <see cref="E:Northwoods.GoWeb.GoView.SelectionDeleting"/>, 
            <see cref="E:Northwoods.GoWeb.GoView.SelectionDeleted"/>, and
            <see cref="E:Northwoods.GoWeb.GoView.SelectionMoved"/>.
            These events implicitly use the <see cref="P:Northwoods.GoWeb.GoView.Selection"/> to identify
            the set of affected objects.
            </para>
            </remarks>
            <seealso cref="T:Northwoods.GoWeb.GoInputEventArgs"/>
            <seealso cref="T:Northwoods.GoWeb.GoObjectEventArgs"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoSelectionEventArgs.#ctor(Northwoods.GoWeb.GoObject)">
            <summary>
            This constructor creates an <c>EventArgs</c> that knows that a particular
            <see cref="P:Northwoods.GoWeb.GoSelectionEventArgs.GoObject"/> has just been added or removed from the selection,
            or is the principal object for another event.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="P:Northwoods.GoWeb.GoSelectionEventArgs.GoObject">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoSelectionEventArgs.GoObject"/> associated with this event.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:Northwoods.GoWeb.GoUndoManager">
            <summary>
            The GoUndoManager class observes and records document changes and supports
            undo and redo operations.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoUndoManager.CopySelectionName">
            <summary>
            The unlocalized name for a drag copy operation, "Copy Selection".
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoUndoManager.MoveSelectionName">
            <summary>
            The unlocalized name for a drag move operation, "Move Selection".
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoUndoManager.DeleteSelectionName">
            <summary>
            The unlocalized name for a delete operation, "Delete Selection".
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoUndoManager.NewLinkName">
            <summary>
            The unlocalized name for a linking operation, "New Link".
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoUndoManager.RelinkName">
            <summary>
            The unlocalized name for a relinking operation, "Relink".
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoUndoManager.ResizeName">
            <summary>
            The unlocalized name for a resize operation, "Resize".
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoUndoManager.CopyName">
            <summary>
            The unlocalized name for a clipboard copy operation, "Copy".
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoUndoManager.CutName">
            <summary>
            The unlocalized name for a clipboard cut operation, "Cut".
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoUndoManager.PasteName">
            <summary>
            The unlocalized name for a clipboard paste operation, "Paste".
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoUndoManager.DropName">
            <summary>
            The unlocalized name for a drag drop operation, "Drop".
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoUndoManager.TextEditName">
            <summary>
            The unlocalized name for a text edit operation, "Text Edit".
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoUndoManager.CollapsedSubGraphName">
            <summary>
            The unlocalized name for a SubGraph collapsing, "Collapsed SubGraph".
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoUndoManager.ExpandedSubGraphName">
            <summary>
            The unlocalized name for a SubGraph expansion, "Expanded SubGraph".
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoUndoManager.ExpandedAllSubGraphsName">
            <summary>
            The unlocalized name for a complete SubGraph expansion, "Expanded All SubGraphs".
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoUndoManager.CollapsedName">
            <summary>
            The unlocalized name for an IGoCollapsible collapse, "Collapsed".
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoUndoManager.ExpandedName">
            <summary>
            The unlocalized name for an IGoCollapsible expansion, "Expanded".
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoUndoManager.DragCreatedName">
            <summary>
            The unlocalized name for a GoToolCreating addition of an object, "Drag Created".
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoUndoManager.#ctor">
            <summary>
            Create a <see cref="T:Northwoods.GoWeb.GoUndoManager"/> that is ready to record document
            modifications, but that does not know about any documents yet.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoUndoManager.Clear">
            <summary>
            Clear all of the <see cref="T:Northwoods.GoWeb.GoUndoManagerCompoundEdit"/>s and reset all other state.
            </summary>
            <remarks>
            However, this does not forget the documents that this undo manager is
            managing, nor does it forget the assigned ResourceManager, if any.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoUndoManager.CanUndo">
            <summary>
            This predicate is true when one can call <see cref="M:Northwoods.GoWeb.GoUndoManager.Undo"/>.
            </summary>
            <returns></returns>
            <remarks>
            In order to be able to perform an undo, a transaction must not
            be in progress, nor an undo or a redo.
            Furthermore there must be an <see cref="P:Northwoods.GoWeb.GoUndoManager.EditToUndo"/> that itself
            is ready to be undone, because its <see cref="M:Northwoods.GoWeb.IGoUndoableEdit.CanUndo"/>
            predicate is true.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoUndoManager.Undo"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoUndoManager.Undo">
            <summary>
            Restore the state of some documents to before the current <see cref="T:Northwoods.GoWeb.IGoUndoableEdit"/>.
            </summary>
            <remarks>
            This calls <see cref="M:Northwoods.GoWeb.IGoUndoableEdit.Undo"/> on the current <see cref="P:Northwoods.GoWeb.GoUndoManager.EditToUndo"/>.
            This will raise a <see cref="E:Northwoods.GoWeb.GoDocument.Changed"/> event with a hint of
            <see cref="F:Northwoods.GoWeb.GoDocument.StartingUndo"/> before actually performing the undo, and will raise a
            Changed event with a hint of <see cref="F:Northwoods.GoWeb.GoDocument.FinishedUndo"/> afterwards.
            The <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/>.<see cref="P:Northwoods.GoWeb.GoChangedEventArgs.Object"/>
            is the <see cref="T:Northwoods.GoWeb.GoUndoManagerCompoundEdit"/> that was the value of
            <see cref="P:Northwoods.GoWeb.GoUndoManager.EditToUndo"/> before calling Undo.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoUndoManager.CanUndo"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoUndoManager.CanRedo">
            <summary>
            This predicate is true when one can call <see cref="M:Northwoods.GoWeb.GoUndoManager.Redo"/>.
            </summary>
            <returns></returns>
            <remarks>
            In order to be able to perform a redo, a transaction must not
            be in progress, nor an undo or a redo.
            Furthermore there must be an <see cref="P:Northwoods.GoWeb.GoUndoManager.EditToRedo"/> that itself
            is ready to be redone, because its <see cref="M:Northwoods.GoWeb.IGoUndoableEdit.CanRedo"/>
            predicate is true.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoUndoManager.Redo"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoUndoManager.Redo">
            <summary>
            Restore the state of some documents to after the current <see cref="T:Northwoods.GoWeb.IGoUndoableEdit"/>.
            </summary>
            <remarks>
            This calls <see cref="M:Northwoods.GoWeb.IGoUndoableEdit.Redo"/> on the current <see cref="P:Northwoods.GoWeb.GoUndoManager.EditToRedo"/>.
            This will raise a <see cref="E:Northwoods.GoWeb.GoDocument.Changed"/> event with a hint of
            <see cref="F:Northwoods.GoWeb.GoDocument.StartingRedo"/> before actually performing the redo, and will raise a
            Changed event with a hint of <see cref="F:Northwoods.GoWeb.GoDocument.FinishedRedo"/> afterwards.
            The <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/>.<see cref="P:Northwoods.GoWeb.GoChangedEventArgs.Object"/>
            is the <see cref="T:Northwoods.GoWeb.GoUndoManagerCompoundEdit"/> that was the value of
            <see cref="P:Northwoods.GoWeb.GoUndoManager.EditToRedo"/> before calling Redo.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoUndoManager.CanRedo"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoUndoManager.GetPresentationName(System.String)">
            <summary>
            Look up a string in a <c>ResourceManager</c>.
            </summary>
            <param name="tname">a transaction name, such as one of the <see cref="F:Northwoods.GoWeb.GoUndoManager.MoveSelectionName"/> constants</param>
            <returns>a user-visible presentation name</returns>
            <remarks>
            This method first tries the <see cref="P:Northwoods.GoWeb.GoUndoManager.ResourceManager"/> property.
            Otherwise it just returns <paramref name="tname"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoUndoManager.AddDocument(Northwoods.GoWeb.GoDocument)">
            <summary>
            Make sure this undo manager knows about a <see cref="T:Northwoods.GoWeb.GoDocument"/> for which
            it is receiving document Changed event notifications.
            </summary>
            <param name="doc"></param>
            <remarks>
            This just adds <paramref name="doc"/> to the list of <see cref="P:Northwoods.GoWeb.GoUndoManager.Documents"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoUndoManager.RemoveDocument(Northwoods.GoWeb.GoDocument)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoUndoManager.RemoveDocument(Northwoods.GoWeb.GoDocument)">
            <summary>
            Call this method to inform this undo manager that it no longer will be
            notified of document Changed events.
            </summary>
            <param name="doc"></param>
            <remarks>
            This just removes <paramref name="doc"/> from the list of <see cref="P:Northwoods.GoWeb.GoUndoManager.Documents"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoUndoManager.AddDocument(Northwoods.GoWeb.GoDocument)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoUndoManager.DocumentChanged(System.Object,Northwoods.GoWeb.GoChangedEventArgs)">
            <summary>
            Create an <see cref="T:Northwoods.GoWeb.IGoUndoableEdit"/> for a <see cref="T:Northwoods.GoWeb.GoDocument"/> Changed event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <remarks>
            This calls <see cref="M:Northwoods.GoWeb.GoUndoManager.SkipEvent(Northwoods.GoWeb.GoChangedEventArgs)"/> if for some reason we should ignore
            the <paramref name="evt"/>.
            This then creates a <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/> and adds it to the
            <see cref="P:Northwoods.GoWeb.GoUndoManager.CurrentEdit"/>, a <see cref="T:Northwoods.GoWeb.GoUndoManagerCompoundEdit"/> which it allocates
            if needed.
            This method always ignores all Changed events while we are performing an
            <see cref="M:Northwoods.GoWeb.GoUndoManager.Undo"/> or <see cref="M:Northwoods.GoWeb.GoUndoManager.Redo"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoUndoManager.SkipEvent(Northwoods.GoWeb.GoChangedEventArgs)">
            <summary>
            This predicate is responsible for deciding if a <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/>
            is not interesting enough to be recorded.
            </summary>
            <param name="evt"></param>
            <returns></returns>
            <remarks>
            This returns true:
            if the <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.Document"/>'s <see cref="P:Northwoods.GoWeb.GoDocument.SkipsUndoManager"/>
            property is true, or if the <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.Hint"/> is
            <see cref="F:Northwoods.GoWeb.GoDocument.RepaintAll"/>, or if it's describing a changed object, and
            the object's <see cref="P:Northwoods.GoWeb.GoObject.SkipsUndoManager"/> property is true or if
            the <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.SubHint"/> is <see cref="F:Northwoods.GoWeb.GoObject.RepaintAll"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoUndoManager.StartTransaction">
            <summary>
            Begin a transaction, where the changes are held by a <see cref="T:Northwoods.GoWeb.GoUndoManagerCompoundEdit"/>.
            </summary>
            <returns>true if starting a top-level transaction</returns>
            <remarks>
            Transactions can be nested:
            <list type="numbered">
            <item><c>StartTransaction</c> returns true</item>
            <item><c>StartTransaction</c> returns false</item>
            <item><c>FinishTransaction</c> returns false</item>
            <item><c>FinishTransaction</c> returns true</item>
            </list>
            Nested transactions will share the same compound edit as the top-level one.
            This will raise a <see cref="E:Northwoods.GoWeb.GoDocument.Changed"/> event for each of the <see cref="P:Northwoods.GoWeb.GoUndoManager.Documents"/>,
            with a hint of <see cref="F:Northwoods.GoWeb.GoDocument.StartedTransaction"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoWeb.GoUndoManager.EndTransaction(System.Boolean,System.String,System.String)"/>
        </member>
        <member name="M:Northwoods.GoWeb.GoUndoManager.AbortTransaction">
            <summary>
            Just call <see cref="M:Northwoods.GoWeb.GoUndoManager.EndTransaction(System.Boolean,System.String,System.String)"/>, aborting the current transaction.
            </summary>
            <returns>the value of the call to <see cref="M:Northwoods.GoWeb.GoUndoManager.EndTransaction(System.Boolean,System.String,System.String)"/></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoUndoManager.FinishTransaction(System.String)">
            <summary>
            Just call <see cref="M:Northwoods.GoWeb.GoUndoManager.EndTransaction(System.Boolean,System.String,System.String)"/>, committing the current transaction,
            with the presentation name for the given transaction name.
            </summary>
            <param name="tname">
            the transaction name;
            this value is passed to <see cref="M:Northwoods.GoWeb.GoUndoManager.GetPresentationName(System.String)"/> before being passed to <see cref="M:Northwoods.GoWeb.GoUndoManager.EndTransaction(System.Boolean,System.String,System.String)"/>
            </param>
            <returns>the value of the call to <see cref="M:Northwoods.GoWeb.GoUndoManager.EndTransaction(System.Boolean,System.String,System.String)"/></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoUndoManager.EndTransaction(System.Boolean,System.String,System.String)">
            <summary>
            Stop the current transaction, either aborting it or committing it.
            </summary>
            <param name="commit">true to terminate the transaction normally;
            false to abort it</param>
            <param name="tname">the internal locale-neutral name for the transaction</param>
            <param name="pname">a string describing the transaction,
            used for the <see cref="P:Northwoods.GoWeb.IGoUndoableEdit.PresentationName"/></param>
            <returns>true for a committed top-level transaction</returns>
            <remarks>
            <para>
            If this call stops a top-level transaction, a value of false for
            <paramref name="commit"/> just clears the information in the
            <see cref="P:Northwoods.GoWeb.GoUndoManager.CurrentEdit"/>.
            If <paramref name="commit"/> is true for a top-level transaction,
            we mark the <see cref="P:Northwoods.GoWeb.GoUndoManager.CurrentEdit"/> complete,
            call <see cref="M:Northwoods.GoWeb.GoUndoManager.CommitCompoundEdit(Northwoods.GoWeb.GoUndoManagerCompoundEdit)"/>,
            and add the resulting <see cref="T:Northwoods.GoWeb.GoUndoManagerCompoundEdit"/>
            to the list of compound edits that this undo manager is recording.
            </para>
            <para>
            Committing a transaction when there have been some undos without
            corresponding redos will throw away the compound edits holding
            changes that happened after the current state, before adding this
            new compound edit to the undo manager's list of edits.
            </para>
            <para>
            This method raises a <see cref="E:Northwoods.GoWeb.GoDocument.Changed"/> event
            for each of this undo manager's <see cref="P:Northwoods.GoWeb.GoUndoManager.Documents"/>,
            with a hint of <see cref="F:Northwoods.GoWeb.GoDocument.FinishedTransaction"/>,
            and with a <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/>.<see cref="P:Northwoods.GoWeb.GoChangedEventArgs.Object"/>
            that is the <see cref="T:Northwoods.GoWeb.GoUndoManagerCompoundEdit"/>
            that has been added to the list of <see cref="P:Northwoods.GoWeb.GoUndoManager.AllEdits"/>.
            Furthermore the <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/>.<see cref="P:Northwoods.GoWeb.GoChangedEventArgs.OldValue"/>
            will be the <paramref name="tname"/>, and the <see cref="P:Northwoods.GoWeb.GoChangedEventArgs.NewValue"/>
            will be the <paramref name="pname"/>.
            Similarly, if the transaction is aborted, either because <paramref name="commit"/>
            is false or because there is no <see cref="P:Northwoods.GoWeb.GoUndoManager.CurrentEdit"/> to commit,
            all of the <see cref="P:Northwoods.GoWeb.GoUndoManager.Documents"/> get a <see cref="F:Northwoods.GoWeb.GoDocument.AbortedTransaction"/>
            Changed event.  The values passed in the <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/>
            may all be null, however.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoUndoManager.CommitCompoundEdit(Northwoods.GoWeb.GoUndoManagerCompoundEdit)">
            <summary>
            This method is called by <see cref="M:Northwoods.GoWeb.GoUndoManager.EndTransaction(System.Boolean,System.String,System.String)"/> when committing a
            compound edit. 
            </summary>
            <param name="cedit">the <see cref="P:Northwoods.GoWeb.GoUndoManager.CurrentEdit"/></param>
            <returns>By default, the unmodified <paramref name="cedit"/>.</returns>
        </member>
        <member name="P:Northwoods.GoWeb.GoUndoManager.EditToUndo">
            <summary>
            Gets the current GoUndoManagerCompoundEdit to be undone, or null if there is none.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoUndoManager.CanUndo"/>
            <seealso cref="M:Northwoods.GoWeb.GoUndoManager.Undo"/>
            <seealso cref="P:Northwoods.GoWeb.GoUndoManager.AllEdits"/>
            <seealso cref="P:Northwoods.GoWeb.GoUndoManager.UndoEditIndex"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoUndoManager.IsUndoing">
            <summary>
            This predicate is true during a call to <see cref="M:Northwoods.GoWeb.GoUndoManager.Undo"/>.
            </summary>
            <remarks>
            When this property is true, <see cref="M:Northwoods.GoWeb.GoUndoManager.CanUndo"/> and
            <see cref="M:Northwoods.GoWeb.GoUndoManager.CanRedo"/> will be false.
            To avoid confusion, all document change events are ignored
            when this property is true.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoUndoManager.UndoPresentationName">
            <summary>
            Gets the user-visible string description of the next undo action.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.IGoUndoableEdit.PresentationName"/>.
        </member>
        <member name="P:Northwoods.GoWeb.GoUndoManager.EditToRedo">
            <summary>
            Gets the current GoUndoManagerCompoundEdit to be redone, or null if there is none.
            </summary>
            <seealso cref="M:Northwoods.GoWeb.GoUndoManager.CanRedo"/>
            <seealso cref="M:Northwoods.GoWeb.GoUndoManager.Redo"/>
            <seealso cref="P:Northwoods.GoWeb.GoUndoManager.AllEdits"/>
            <seealso cref="P:Northwoods.GoWeb.GoUndoManager.UndoEditIndex"/>
        </member>
        <member name="P:Northwoods.GoWeb.GoUndoManager.IsRedoing">
            <summary>
            This predicate is true during a call to <see cref="M:Northwoods.GoWeb.GoUndoManager.Redo"/>.
            </summary>
            <remarks>
            When this property is true, <see cref="M:Northwoods.GoWeb.GoUndoManager.CanUndo"/> and
            <see cref="M:Northwoods.GoWeb.GoUndoManager.CanRedo"/> will be false.
            To avoid confusion, all document change events are ignored
            when this property is true.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoUndoManager.RedoPresentationName">
            <summary>
            Gets the user-visible string description of the next redo action.
            </summary>
            <seealso cref="P:Northwoods.GoWeb.IGoUndoableEdit.PresentationName"/>.
        </member>
        <member name="P:Northwoods.GoWeb.GoUndoManager.ResourceManager">
            <summary>
             Gets or sets the ResourceManager used to get presentation names.
            </summary>
            <value>
            The default value is null, which means the standard presentation names
            are not replaced by any substitute strings from resource managers.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoUndoManager.AllEdits">
            <summary>
            Gets a list of all of the compound edits.
            </summary>
            <value>This will be an <c>ArrayList</c> of <see cref="T:Northwoods.GoWeb.GoUndoManagerCompoundEdit"/>s</value>
        </member>
        <member name="P:Northwoods.GoWeb.GoUndoManager.MaximumEditCount">
            <summary>
            Gets or sets the maximum number of compound edits that this undo manager will remember.
            </summary>
            <value>
            If the value is negative, no limit is assumed.
            A new value of zero is treated as if the new value were one.
            The initial value is -1.
            </value>
            <remarks>
            <para>
            This property is useful in helping limit the memory consumption of typical application usage.
            But note that this only limits the number of compound edits, not the size of any individual
            <see cref="T:Northwoods.GoWeb.GoUndoManagerCompoundEdit"/>, which may still have an unlimited number of
            <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/>s.
            </para>
            <para>
            Decreasing this value will not necessarily remove any existing edits
            if there currently exist more edits in <see cref="P:Northwoods.GoWeb.GoUndoManager.AllEdits"/> than the new value would allow.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoUndoManager.UndoEditIndex">
            <summary>
            Gets the index into AllEdits for the current undoable edit.
            </summary>
            <value>
            -1 if there's no undoable edit to be undone.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoUndoManager.CurrentEdit">
            <summary>
            Gets the current compound edit for recording additional document change events.
            </summary>
            <remarks>
            This is initialized and augmented by <see cref="M:Northwoods.GoWeb.GoUndoManager.DocumentChanged(System.Object,Northwoods.GoWeb.GoChangedEventArgs)"/>,
            before it is added to <see cref="P:Northwoods.GoWeb.GoUndoManager.AllEdits"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoUndoManager.Documents">
            <summary>
            Gets a list of documents for which this UndoManager is recording undo/redo
            information.
            </summary>
            <remarks>
            You can manipulate this list explicitly by calling
            <see cref="M:Northwoods.GoWeb.GoUndoManager.AddDocument(Northwoods.GoWeb.GoDocument)"/> and <see cref="M:Northwoods.GoWeb.GoUndoManager.RemoveDocument(Northwoods.GoWeb.GoDocument)"/>.
            Setting <see cref="P:Northwoods.GoWeb.GoDocument.UndoManager"/> automatically calls these methods.
            <see cref="M:Northwoods.GoWeb.GoUndoManager.Undo"/> and <see cref="M:Northwoods.GoWeb.GoUndoManager.Redo"/> use this list to call
            <see cref="M:Northwoods.GoWeb.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> with notices about starting and
            ending undo and redo actions, and about starting/finishing/aborting transactions.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoUndoManager.TransactionLevel">
            <summary>
            Gets the current transaction level.
            </summary>
            <value>
            This value is zero when no transaction is in progress.
            The initial value is zero.
            <see cref="M:Northwoods.GoWeb.GoUndoManager.StartTransaction"/> will increment this value;
            <see cref="M:Northwoods.GoWeb.GoUndoManager.EndTransaction(System.Boolean,System.String,System.String)"/> will decrement it.
            When this value is greater than zero, <see cref="M:Northwoods.GoWeb.GoUndoManager.CanUndo"/>
            and <see cref="M:Northwoods.GoWeb.GoUndoManager.CanRedo"/> will be false, because
            additional logically related document change events may occur.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoUndoManager.ChecksTransactionLevel">
            <summary>
             Gets or sets whether this undo manager will output warnings to Trace listeners
             when document changes occur outside of a transaction.
            </summary>
            <value>
            This defaults to false.
            </value>
        </member>
        <member name="T:Northwoods.GoWeb.GoUndoManagerCompoundEdit">
            <summary>
            This class is used to hold a list of <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/> that
            should be undone or redone altogether.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoUndoManagerCompoundEdit.#ctor">
            <summary>
            Construct an empty list of edits.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoUndoManagerCompoundEdit.Clear">
            <summary>
            Clear all of the <see cref="T:Northwoods.GoWeb.IGoUndoableEdit"/>s and forget all references to them.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoUndoManagerCompoundEdit.CanUndo">
            <summary>
            This predicate returns true if you can call <see cref="M:Northwoods.GoWeb.GoUndoManagerCompoundEdit.Undo"/>--
            namely when <see cref="P:Northwoods.GoWeb.GoUndoManagerCompoundEdit.IsComplete"/> is true.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoUndoManagerCompoundEdit.Undo">
            <summary>
            Undo all of the <see cref="T:Northwoods.GoWeb.IGoUndoableEdit"/>s, in reverse order.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoUndoManagerCompoundEdit.CanRedo">
            <summary>
            This predicate returns true if you can call <see cref="M:Northwoods.GoWeb.GoUndoManagerCompoundEdit.Redo"/>--
            namely when <see cref="P:Northwoods.GoWeb.GoUndoManagerCompoundEdit.IsComplete"/> is true.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoUndoManagerCompoundEdit.Redo">
            <summary>
            Redo all of the <see cref="T:Northwoods.GoWeb.IGoUndoableEdit"/>s, in forwards order.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoUndoManagerCompoundEdit.AddEdit(Northwoods.GoWeb.IGoUndoableEdit)">
            <summary>
            Add an <see cref="T:Northwoods.GoWeb.IGoUndoableEdit"/> to the end of the list.
            </summary>
            <param name="edit"></param>
        </member>
        <member name="P:Northwoods.GoWeb.GoUndoManagerCompoundEdit.PresentationName">
            <summary>
            Gets the user-visible string description of this compound edit.
            </summary>
            <remarks>
            This property is normally set to the value of
            <see cref="M:Northwoods.GoWeb.GoUndoManager.GetPresentationName(System.String)"/> as part of
            <see cref="M:Northwoods.GoWeb.GoUndoManager.EndTransaction(System.Boolean,System.String,System.String)"/>.
            This property is used by the normal implementations of
            <see cref="P:Northwoods.GoWeb.GoUndoManager.UndoPresentationName"/> and
            <see cref="P:Northwoods.GoWeb.GoUndoManager.RedoPresentationName"/>
            for generating undo and redo specific descriptions for this
            compound edit.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoUndoManagerCompoundEdit.AllEdits">
            <summary>
            Gets a list of all the <see cref="T:Northwoods.GoWeb.IGoUndoableEdit"/>s in this compound edit.
            </summary>
            <value>An <c>ArrayList</c> of <see cref="T:Northwoods.GoWeb.IGoUndoableEdit"/>s</value>
            <remarks>
            Each item is normally an instance of <see cref="T:Northwoods.GoWeb.GoChangedEventArgs"/>.
            However, you may add your own <see cref="T:Northwoods.GoWeb.IGoUndoableEdit"/> objects.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoUndoManagerCompoundEdit.IsComplete">
            <summary>
            Gets or sets whether we can add more undoable edits to this compound edit.
            </summary>
            <value>
            This is initially false.  It can only be set to true,
            which is what <see cref="M:Northwoods.GoWeb.GoUndoManager.EndTransaction(System.Boolean,System.String,System.String)"/> does.
            </value>
        </member>
        <member name="T:Northwoods.GoWeb.GoViewSheetStyle">
            <summary>
            Specifies values for <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="P:Northwoods.GoWeb.GoView.SheetStyle"/>,
            which affects the behavior of <see cref="M:Northwoods.GoWeb.GoView.UpdateExtent"/> to automatically
            scroll and scale the view as the view's size is changed, or (in WinForms) when
            the PrintScale is changed.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoViewSheetStyle.None">
            <summary>
            The GoView.Sheet is not visible, and the view does not rescale/scroll automatically as the view's size is changed.
            </summary>
            <remarks>
            Scrolling, i.e. setting the <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="P:Northwoods.GoWeb.GoView.DocPosition"/>,
            is limited to stay within the bounds of the <see cref="P:Northwoods.GoWeb.GoView.Document"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoViewSheetStyle.Sheet">
            <summary>
            The GoView.Sheet is visible, but do not rescale/scroll automatically as the view's size is changed.
            </summary>
            <remarks>
            Scrolling, i.e. setting the <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="P:Northwoods.GoWeb.GoView.DocPosition"/>,
            is not limited to stay within the bounds of the <see cref="P:Northwoods.GoWeb.GoView.Document"/>,
            but may also include anywhere within the <see cref="P:Northwoods.GoWeb.GoView.Sheet"/>.
            Printing is limited to the region defined by
            <see cref="P:Northwoods.GoWeb.GoView.Sheet"/>.<see cref="P:Northwoods.GoWeb.GoSheet.MarginBounds"/>. (WinForms only).
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoViewSheetStyle.WholeSheet">
            <summary>
            Keep the whole page visible as the view's size is changed.
            </summary>
            <remarks>
            Scrolling, i.e. setting the <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="P:Northwoods.GoWeb.GoView.DocPosition"/>,
            is not limited to stay within the bounds of the <see cref="P:Northwoods.GoWeb.GoView.Document"/>,
            but may also include anywhere within the <see cref="P:Northwoods.GoWeb.GoView.Sheet"/>.
            Printing is limited to the region defined by
            <see cref="P:Northwoods.GoWeb.GoView.Sheet"/>.<see cref="P:Northwoods.GoWeb.GoSheet.MarginBounds"/>. (WinForms only).
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoViewSheetStyle.SheetWidth">
            <summary>
            Keep the whole width of the page visible as the view's size is changed.
            </summary>
            <remarks>
            Scrolling, i.e. setting the <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="P:Northwoods.GoWeb.GoView.DocPosition"/>,
            is not limited to stay within the bounds of the <see cref="P:Northwoods.GoWeb.GoView.Document"/>,
            but may also include anywhere within the <see cref="P:Northwoods.GoWeb.GoView.Sheet"/>.
            Printing is limited to the region defined by
            <see cref="P:Northwoods.GoWeb.GoView.Sheet"/>.<see cref="P:Northwoods.GoWeb.GoSheet.MarginBounds"/>. (WinForms only).
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoViewSheetStyle.SheetHeight">
            <summary>
            Keep the whole height of the page visible as the view's size is changed.
            </summary>
            <remarks>
            Scrolling, i.e. setting the <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="P:Northwoods.GoWeb.GoView.DocPosition"/>,
            is not limited to stay within the bounds of the <see cref="P:Northwoods.GoWeb.GoView.Document"/>,
            but may also include anywhere within the <see cref="P:Northwoods.GoWeb.GoView.Sheet"/>.
            Printing is limited to the region defined by
            <see cref="P:Northwoods.GoWeb.GoView.Sheet"/>.<see cref="P:Northwoods.GoWeb.GoSheet.MarginBounds"/>. (WinForms only).
            </remarks>
        </member>
        <member name="T:Northwoods.GoWeb.GoViewDisableKeys">
            <summary>
            Controls the behavior of <see cref="T:Northwoods.GoWeb.GoToolManager"/>.<see cref="M:Northwoods.GoWeb.GoToolManager.DoKeyDown"/>
            via the <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="P:Northwoods.GoWeb.GoView.DisableKeys"/> property.
            </summary>
            <remarks>
            These flags can be combined bit-wise.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoViewDisableKeys.None">
            <summary>
            All keyboard behavior of <see cref="T:Northwoods.GoWeb.GoToolManager"/>.<see cref="M:Northwoods.GoWeb.GoToolManager.DoKeyDown"/> is enabled.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoViewDisableKeys.ArrowMove">
            <summary>
            Disable the arrow keys
            from calling <see cref="M:Northwoods.GoWeb.GoView.MoveSelection(Northwoods.GoWeb.GoSelection,System.Drawing.SizeF,System.Boolean)"/>
            in <see cref="T:Northwoods.GoWeb.GoToolManager"/>.<see cref="M:Northwoods.GoWeb.GoToolManager.DoKeyDown"/>.
            </summary>
            <remarks>
            Moving selected objects using the arrow keys is disabled by default.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoViewDisableKeys.CancelDeselects">
            <summary>
            Disable the <c>Escape</c> key
            from clearing the <see cref="P:Northwoods.GoWeb.GoView.Selection"/>
            in <see cref="T:Northwoods.GoWeb.GoToolManager"/>.<see cref="M:Northwoods.GoWeb.GoToolManager.DoKeyDown"/>.
            </summary>
            <remarks>
            However the <c>Escape</c> key will normally continue to stop the current <see cref="P:Northwoods.GoWeb.GoView.Tool"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.GoWeb.GoViewDisableKeys.SelectAll">
            <summary>
            Disable the <c>Ctrl-A</c> key
            from calling <see cref="M:Northwoods.GoWeb.GoView.SelectAll"/>
            in <see cref="T:Northwoods.GoWeb.GoToolManager"/>.<see cref="M:Northwoods.GoWeb.GoToolManager.DoKeyDown"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoViewDisableKeys.SelectsByFirstChar">
            <summary>
            Disable having letters and digits select the next <see cref="T:Northwoods.GoWeb.IGoLabeledPart"/>
            by not calling <see cref="M:Northwoods.GoWeb.GoView.SelectNextNode(System.Char)"/>
            in <see cref="T:Northwoods.GoWeb.GoToolManager"/>.<see cref="M:Northwoods.GoWeb.GoToolManager.DoKeyDown"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoViewDisableKeys.Delete">
            <summary>
            Disable the <c>Delete</c> key
            from calling <see cref="M:Northwoods.GoWeb.GoView.EditDelete"/>
            in <see cref="T:Northwoods.GoWeb.GoToolManager"/>.<see cref="M:Northwoods.GoWeb.GoToolManager.DoKeyDown"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoViewDisableKeys.Clipboard">
            <summary>
            Disable the <c>Ctrl-C</c> and <c>Ctrl-X</c> and <c>Ctrl-V</c> keys
            from calling <see cref="M:Northwoods.GoWeb.GoView.EditCopy"/> and <see cref="M:Northwoods.GoWeb.GoView.EditCut"/> and <see cref="M:Northwoods.GoWeb.GoView.EditPaste"/>
            in <see cref="T:Northwoods.GoWeb.GoToolManager"/>.<see cref="M:Northwoods.GoWeb.GoToolManager.DoKeyDown"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoViewDisableKeys.Edit">
            <summary>
            Disable the <c>F2</c> key
            from calling <see cref="M:Northwoods.GoWeb.GoView.EditEdit"/>
            in <see cref="T:Northwoods.GoWeb.GoToolManager"/>.<see cref="M:Northwoods.GoWeb.GoToolManager.DoKeyDown"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoViewDisableKeys.Page">
            <summary>
            Disable the <c>Page-Down</c> and <c>Page-Up</c> keys
            from calling <see cref="M:Northwoods.GoWeb.GoView.ScrollPage(System.Single,System.Single)"/>
            in <see cref="T:Northwoods.GoWeb.GoToolManager"/>.<see cref="M:Northwoods.GoWeb.GoToolManager.DoKeyDown"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoViewDisableKeys.Home">
            <summary>
            Disable the <c>Home</c> key
            from setting the <see cref="P:Northwoods.GoWeb.GoView.DocPosition"/>
            in <see cref="T:Northwoods.GoWeb.GoToolManager"/>.<see cref="M:Northwoods.GoWeb.GoToolManager.DoKeyDown"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoViewDisableKeys.End">
            <summary>
            Disable the <c>End</c> key
            from setting the <see cref="P:Northwoods.GoWeb.GoView.DocPosition"/>
            in <see cref="T:Northwoods.GoWeb.GoToolManager"/>.<see cref="M:Northwoods.GoWeb.GoToolManager.DoKeyDown"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoViewDisableKeys.Undo">
            <summary>
            Disable the <c>Ctrl-Z</c> and <c>Ctrl-Y</c> keys
            from calling <see cref="M:Northwoods.GoWeb.GoView.Undo"/> and <see cref="M:Northwoods.GoWeb.GoView.Redo"/>
            in <see cref="T:Northwoods.GoWeb.GoToolManager"/>.<see cref="M:Northwoods.GoWeb.GoToolManager.DoKeyDown"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoViewDisableKeys.ArrowScroll">
            <summary>
            Disable the arrow keys
            from calling <see cref="M:Northwoods.GoWeb.GoView.ScrollLine(System.Single,System.Single)"/>
            in <see cref="T:Northwoods.GoWeb.GoToolManager"/>.<see cref="M:Northwoods.GoWeb.GoToolManager.DoKeyDown"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoWeb.GoViewDisableKeys.All">
            <summary>
            Disable all standard operations for keys
            in <see cref="T:Northwoods.GoWeb.GoToolManager"/>.<see cref="M:Northwoods.GoWeb.GoToolManager.DoKeyDown"/>.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoViewLicenseProvider">
            <summary>
            This is an internal class used to implement licensing.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoViewLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
            <summary>
            This method implements licensing.
            </summary>
            <param name="context"></param>
            <param name="type"></param>
            <param name="instance"></param>
            <param name="allowExceptions"></param>
            <returns></returns>
        </member>
        <member name="T:Northwoods.GoWeb.GoWebImage">
            <summary>
            Produces an image displaying the current state of a <see cref="T:Northwoods.GoWeb.GoView"/>.
            </summary>
            <remarks>
            This page must be referred to by the <c>GoView.ImagePage</c> property for each <c>GoView</c>.
            The view is saved in session state by storing it in the <see cref="M:Northwoods.GoWeb.GoView.GetSessionViewsTable"/>
            hashtable.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoWebImage.OnLoad(System.EventArgs)">
            <summary>
            Process any query string commands and send an image of the specified view
            as the HTTP response.
            </summary>
            <param name="evt">(ignored)</param>
            <remarks>
            Assuming that the "GoView" <c>Request</c> parameter names a <see cref="T:Northwoods.GoWeb.GoView"/>
            that has been stored in the <c>Session</c> state, this method processes any
            other query string commands by calling <see cref="M:Northwoods.GoWeb.GoView.OnNoPostLoad"/>
            and <see cref="M:Northwoods.GoWeb.GoView.RaisePostBackEvent(System.String)"/>,
            and then produces an image of the view by calling <see cref="M:Northwoods.GoWeb.GoView.GetBitmap"/>.
            The image is streamed out to the <c>Response</c> in the format specified
            by <see cref="P:Northwoods.GoWeb.GoView.ImageFormat"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoWebImage.FindSessionView(System.String)">
            <summary>
            Return the <see cref="T:Northwoods.GoWeb.GoView"/> that is stored in the <c>Session</c>
            whose unique ID is <paramref name="id"/>.
            </summary>
            <param name="id"></param>
            <returns>
            If no <see cref="T:Northwoods.GoWeb.GoView"/> is stored in the <c>Session</c>,
            either because no such view was serialized, or because the session
            state was lost because the session timed-out, this will return null,
            causing no image to be streamed as a response.
            The table lookup key was generated by the view's <see cref="M:Northwoods.GoWeb.GoView.MakeSessionViewID"/>
            method.
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoWebImage.FindSessionViewData(System.String)">
            <summary>
            Return client-side JavaScript defining interactive data for a view
            identified in this <c>Session</c> by the given unique ID <paramref name="id"/>.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoWebImage.StoreSessionViewData(System.String,System.String)">
            <summary>
            Save the JavaScript used to supply client-side data for interactive behavior
            in the current <c>Session</c> for the view identified by <paramref name="id"/>.
            </summary>
            <param name="id"></param>
            <param name="data"></param>
        </member>
        <member name="T:Northwoods.GoWeb.GoWebImageHandler">
            <summary>
            Produces an image displaying the current state of a <see cref="T:Northwoods.GoWeb.GoView"/>.
            </summary>
            <remarks>
            This <c>IHttpHandler</c> must be referred to by the <c>GoView.ImagePage</c> property for each <c>GoView</c>.
            The view is saved in session state by storing it in the <see cref="M:Northwoods.GoWeb.GoView.GetSessionViewsTable"/>
            hashtable, so you must not disable session state for this HTTP handler.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoWebImageHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Process any query string commands and send an image of the specified view
            as the HTTP response.
            </summary>
            <param name="context"></param>
            <remarks>
            Assuming that the "GoView" <c>Request</c> parameter names a <see cref="T:Northwoods.GoWeb.GoView"/>
            that has been stored in the <c>Session</c> state, this method processes any
            other query string commands by calling <see cref="M:Northwoods.GoWeb.GoView.OnNoPostLoad"/>
            and <see cref="M:Northwoods.GoWeb.GoView.RaisePostBackEvent(System.String)"/>,
            and then produces an image of the view by calling <see cref="M:Northwoods.GoWeb.GoView.GetBitmap"/>.
            The image is streamed out to the <c>Response</c> in the format specified
            by <see cref="P:Northwoods.GoWeb.GoView.ImageFormat"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoWebImageHandler.FindSessionView(System.Web.HttpContext,System.String)">
            <summary>
            Return the <see cref="T:Northwoods.GoWeb.GoView"/> that is stored in the <c>Session</c>
            whose unique ID is <paramref name="id"/>.
            </summary>
            <param name="context"></param>
            <param name="id"></param>
            <returns>
            If no <see cref="T:Northwoods.GoWeb.GoView"/> is stored in the <c>Session</c>,
            either because no such view was serialized, or because the session
            state was lost because the session timed-out, this will return null,
            causing no image to be streamed as a response.
            The table lookup key was generated by the view's <see cref="M:Northwoods.GoWeb.GoView.MakeSessionViewID"/>
            method.
            </returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoWebImageHandler.FindSessionViewData(System.Web.HttpContext,System.String)">
            <summary>
            Return client-side JavaScript defining interactive data for a view
            identified in this <c>Session</c> by the given unique ID <paramref name="id"/>.
            </summary>
            <param name="context"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoWeb.GoWebImageHandler.StoreSessionViewData(System.Web.HttpContext,System.String,System.String)">
            <summary>
            Save the JavaScript used to supply client-side data for interactive behavior
            in the current <c>Session</c> for the view identified by <paramref name="id"/>.
            </summary>
            <param name="context"></param>
            <param name="id"></param>
            <param name="data"></param>
        </member>
        <member name="P:Northwoods.GoWeb.GoWebImageHandler.IsReusable">
            <summary>
            This class is reusable.
            </summary>
        </member>
        <member name="T:Northwoods.GoWeb.GoPrintView">
            <summary>
            This ASP.NET WebControl renders as multiple large images so that the
            user's browser can print a whole diagram.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoPrintView.#ctor">
            <summary>
            This constructor produces a <see cref="T:Northwoods.GoWeb.GoPrintView"/> that
            has no <see cref="P:Northwoods.GoWeb.GoPrintView.View"/> and default values for the other properties.
            </summary>
        </member>
        <member name="M:Northwoods.GoWeb.GoPrintView.ComputeDocumentBounds">
            <summary>
            Return the region of the document that should be rendered
            as separate images.
            </summary>
            <returns>
            By default this just returns the value of <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="M:Northwoods.GoWeb.GoView.ComputeDocumentBounds"/>.
            </returns>
            <remarks>
            You may wish to override this to return the rectangle extending
            from <see cref="P:Northwoods.GoWeb.GoView.DocumentTopLeft"/> for <see cref="P:Northwoods.GoWeb.GoView.DocumentSize"/>,
            or perhaps by inflating the value of <see cref="M:Northwoods.GoWeb.GoView.ComputeDocumentBounds"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoPrintView.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Generate a series of <c>IMG</c> elements that show a <see cref="T:Northwoods.GoWeb.GoView"/>'s
            whole document.
            </summary>
            <param name="writer"></param>
            <remarks>
            This generates enough <c>IMG</c> elements to cover the area computed by
            <see cref="M:Northwoods.GoWeb.GoPrintView.ComputeDocumentBounds"/>.
            The actual number of images/elements depends on the size of the document,
            the <see cref="P:Northwoods.GoWeb.GoPrintView.ImageWidth"/> and <see cref="P:Northwoods.GoWeb.GoPrintView.ImageHeight"/>, and the
            <see cref="P:Northwoods.GoWeb.GoPrintView.ViewScale"/> at which the view is painted.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoPrintView.RenderPage(System.Web.UI.HtmlTextWriter,System.Drawing.RectangleF,System.Single,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Generate the <c>IMG</c> HTML element for a part of a <see cref="T:Northwoods.GoWeb.GoView"/> occupying a single page.
            </summary>
            <param name="writer"></param>
            <param name="docExtent">the <c>RectangleF</c> describing what should be rendered, in document coordinates</param>
            <param name="scale">the scale at which to paint each image, this will be no larger than <see cref="P:Northwoods.GoWeb.GoPrintView.ViewScale"/></param>
            <param name="pageX">the zero-based horizontal page number</param>
            <param name="pageY">the zero-based vertical page number</param>
            <param name="pagesAcross">the number of horizontal pages required to display the whole view</param>
            <param name="pagesDown">the number of vertical pages required to display the whole view</param>
            <remarks>
            You might want to override this method to customize the HTML that is generated,
            for example: for headers and/or footers.
            </remarks>
        </member>
        <member name="M:Northwoods.GoWeb.GoPrintView.FindSessionView(System.String)">
            <summary>
            Return the <see cref="T:Northwoods.GoWeb.GoView"/> that is stored in the <c>Session</c>
            whose unique ID is <paramref name="id"/>.
            </summary>
            <param name="id"></param>
            <returns>
            If no <see cref="T:Northwoods.GoWeb.GoView"/> is stored in the <c>Session</c>,
            either because no such view was serialized, or because the session
            state was lost because the session timed-out, this will return null,
            causing no image to be streamed as a response.
            The table lookup key was generated by the view's <see cref="M:Northwoods.GoWeb.GoView.MakeSessionViewID"/>
            method.
            </returns>
        </member>
        <member name="P:Northwoods.GoWeb.GoPrintView.View">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoWeb.GoView"/> that this Control will render.
            </summary>
            <value>By default this is null, but the value must be non-null for this Control to do its job.</value>
        </member>
        <member name="P:Northwoods.GoWeb.GoPrintView.ViewID">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoWeb.GoPrintView.View"/> as identified by a unique ID.
            </summary>
            <value>If there is no <see cref="P:Northwoods.GoWeb.GoPrintView.View"/>, this returns an empty string</value>
            <remarks>
            The getter just returns the <see cref="P:Northwoods.GoWeb.GoPrintView.View"/>'s value for
            <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="M:Northwoods.GoWeb.GoView.MakeSessionViewID"/>.
            The setter just calls <see cref="M:Northwoods.GoWeb.GoPrintView.FindSessionView(System.String)"/> and if it finds
            a <see cref="T:Northwoods.GoWeb.GoView"/> with that ID, it sets <see cref="P:Northwoods.GoWeb.GoPrintView.View"/>.
            Server-side code is likely to have an actual <see cref="T:Northwoods.GoWeb.GoView"/>
            reference, so it can just set the <see cref="P:Northwoods.GoWeb.GoPrintView.View"/> property.
            Client-side code can't have a <see cref="T:Northwoods.GoWeb.GoView"/> reference, so it
            can only transmit the <c>IMG</c> element's unique GoView ID to the server
            which can then do the lookup by calling <see cref="M:Northwoods.GoWeb.GoPrintView.FindSessionView(System.String)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoPrintView.ImageWidth">
            <summary>
            Gets or sets the width in pixels for the image to be rendered.
            </summary>
            <value>
            This defaults to 640, which is likely to be narrow enough not to be
            clipped when printed.  If you know the user's chosen page is wide
            enough to support a larger value, you may want to increase this
            value accordingly, to reduce the number of pages that are printed.
            For example, if you know the printing will be in landscape mode,
            you may want to increase this value.
            The value must be larger than zero.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoPrintView.ImageHeight">
            <summary>
            Gets or sets the height in pixels for the image to be rendered.
            </summary>
            <value>
            This defaults to 640, which is likely to be short enough not to be
            clipped when printed.  If you know the user's chosen page is tall
            enough to support a larger value, you may want to increase this
            value accordingly, to reduce the number of pages that are printed.
            For example, if you know the printing will be in portrait mode,
            you may want to increase this value.
            The value must be larger than zero.
            </value>
        </member>
        <member name="P:Northwoods.GoWeb.GoPrintView.ViewScale">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoWeb.GoView"/>.<see cref="P:Northwoods.GoWeb.GoView.DocScale"/>
            at which the view is painted when rendering the image.
            </summary>
            <value>
            The default value is 0.8f.
            You might want to decrease this value if you want to reduce the
            number of pages that are printed.
            The value must be larger than zero.
            </value>
            <remarks>
            This value provides the maximum scale to be used when painting if
            either or both of the dimensions of the <see cref="P:Northwoods.GoWeb.GoPrintView.PageLimit"/> are positive.
            </remarks>
        </member>
        <member name="P:Northwoods.GoWeb.GoPrintView.PageLimit">
            <summary>
            Gets or sets the number of horizontal and the number of vertical images/pages to generate.
            </summary>
            <value>
            By default, this is <c>0</c>x<c>0</c>.  Use positive values for either <c>Width</c>,
            <c>Height</c>, or both <c>Width</c> and <c>Height</c> to specify the maximum number of pages
            to be generated in that direction.
            </value>
            <remarks>
            If both <c>Width</c> and <c>Height</c> are negative or zero,
            the number of images/pages is determined by the size of the document and the <see cref="P:Northwoods.GoWeb.GoPrintView.ViewScale"/>.
            If only one of <c>Width</c> and <c>Height</c> are positive, that number specifies
            the number of images/pages in that direction, and the number of images/pages in the other
            direction depends on the size of the document.  The scale is calculated to make the whole
            document fit, although it will not be larger than <see cref="P:Northwoods.GoWeb.GoPrintView.ViewScale"/>.
            If both <c>Width</c> and <c>Height</c> are positive, the maximum number of images/pages
            is just the product of the two numbers.
            </remarks>
        </member>
    </members>
</doc>

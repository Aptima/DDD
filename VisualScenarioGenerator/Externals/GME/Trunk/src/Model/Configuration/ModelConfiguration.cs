// Copyright 2004, Microsoft Corporation
// Sample Code - Use restricted to terms of use defined in the accompanying license agreement (EULA.doc)

//--------------------------------------------------------------
// Autogenerated by XSDObjectGen version 1.4.4.0
// Schema file: model.xsd
// Creation Date: 6/1/2009 12:15:28 PM
//--------------------------------------------------------------

using System;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;

namespace AME.Model.Configuration
{

	public struct Declarations
	{
		public const string SchemaVersion = "";
	}

	public delegate void DepthFirstTraversalDelegate(object instance, object parent, object context);




	[XmlType(TypeName="Directory"),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public partial class Directory
	{

		[XmlAttribute(AttributeName="relative",Form=XmlSchemaForm.Unqualified,DataType="boolean")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __relative;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __relativeSpecified;
		
		[XmlIgnore]
		public bool relative
		{ 
			get { return __relative; }
			set { __relative = value; __relativeSpecified = true; }
		}

		[XmlElement(ElementName="Path",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __Path;
		
		[XmlIgnore]
		public string Path
		{ 
			get { return __Path; }
			set { __Path = value; }
		}

		public Directory()
		{
			__relativeSpecified = true;
			Path = string.Empty;
		}

		public void MakeSchemaCompliant()
		{
		}

		public static event DepthFirstTraversalDelegate DepthFirstTraversalEvent;
		public void DepthFirstTraversal(object parent, object context)
		{
			if (DepthFirstTraversalEvent != null) DepthFirstTraversalEvent(this, parent, context);
		}
	}


	[XmlRoot(ElementName="Configuration",IsNullable=false),Serializable]
	public partial class Configuration
	{

		[XmlAttribute(AttributeName="name",Form=XmlSchemaForm.Unqualified,DataType="string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __name;
		
		[XmlIgnore]
		public string name
		{ 
			get { return __name; }
			set { __name = value; }
		}

		[XmlAttribute(AttributeName="configurationNamespace",Form=XmlSchemaForm.Unqualified,DataType="string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __configurationNamespace;
		
		[XmlIgnore]
		public string configurationNamespace
		{ 
			get { return __configurationNamespace; }
			set { __configurationNamespace = value; }
		}

		[XmlAttribute(AttributeName="xsdNamespace",Form=XmlSchemaForm.Unqualified,DataType="string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __xsdNamespace;
		
		[XmlIgnore]
		public string xsdNamespace
		{ 
			get { return __xsdNamespace; }
			set { __xsdNamespace = value; }
		}

		[XmlAttribute(AttributeName="xslNamespace",Form=XmlSchemaForm.Unqualified,DataType="string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __xslNamespace;
		
		[XmlIgnore]
		public string xslNamespace
		{ 
			get { return __xslNamespace; }
			set { __xslNamespace = value; }
		}

		[XmlAttribute(AttributeName="imgNamespace",Form=XmlSchemaForm.Unqualified,DataType="string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __imgNamespace;
		
		[XmlIgnore]
		public string imgNamespace
		{ 
			get { return __imgNamespace; }
			set { __imgNamespace = value; }
		}

		[XmlElement(Type=typeof(Directories),ElementName="Directories",IsNullable=false,Form=XmlSchemaForm.Qualified)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public Directories __Directories;
		
		[XmlIgnore]
		public Directories Directories
		{
			get
			{
				if (__Directories == null) __Directories = new Directories();		
				return __Directories;
			}
			set {__Directories = value;}
		}

		[XmlElement(Type=typeof(Database),ElementName="Database",IsNullable=false,Form=XmlSchemaForm.Qualified)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public Database __Database;
		
		[XmlIgnore]
		public Database Database
		{
			get
			{
				if (__Database == null) __Database = new Database();		
				return __Database;
			}
			set {__Database = value;}
		}

		public Configuration()
		{
			name = string.Empty;
			configurationNamespace = string.Empty;
			xsdNamespace = string.Empty;
			xslNamespace = string.Empty;
			imgNamespace = string.Empty;
		}

		public void MakeSchemaCompliant()
		{
			Directories.MakeSchemaCompliant();
			Database.MakeSchemaCompliant();
		}

		public static event DepthFirstTraversalDelegate DepthFirstTraversalEvent;
		public void DepthFirstTraversal(object parent, object context)
		{
			if (DepthFirstTraversalEvent != null) DepthFirstTraversalEvent(this, parent, context);
			if (__Directories != null) __Directories.DepthFirstTraversal(this, context);
			if (__Database != null) __Database.DepthFirstTraversal(this, context);
		}
	}


	[XmlType(TypeName="Directories"),Serializable]
	public partial class Directories
	{

		[XmlElement(Type=typeof(AME.Model.Configuration.Directory),ElementName="Model",IsNullable=false,Form=XmlSchemaForm.Qualified)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public AME.Model.Configuration.Directory __Model;
		
		[XmlIgnore]
		public AME.Model.Configuration.Directory Model
		{
			get
			{
				if (__Model == null) __Model = new AME.Model.Configuration.Directory();		
				return __Model;
			}
			set {__Model = value;}
		}

		[XmlElement(Type=typeof(AME.Model.Configuration.Directory),ElementName="Output",IsNullable=false,Form=XmlSchemaForm.Qualified)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public AME.Model.Configuration.Directory __Output;
		
		[XmlIgnore]
		public AME.Model.Configuration.Directory Output
		{
			get
			{
				if (__Output == null) __Output = new AME.Model.Configuration.Directory();		
				return __Output;
			}
			set {__Output = value;}
		}

		[XmlElement(Type=typeof(AME.Model.Configuration.Directory),ElementName="Data",IsNullable=false,Form=XmlSchemaForm.Qualified)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public AME.Model.Configuration.Directory __Data;
		
		[XmlIgnore]
		public AME.Model.Configuration.Directory Data
		{
			get
			{
				if (__Data == null) __Data = new AME.Model.Configuration.Directory();		
				return __Data;
			}
			set {__Data = value;}
		}

		[XmlElement(Type=typeof(AME.Model.Configuration.Directory),ElementName="Xml",IsNullable=false,Form=XmlSchemaForm.Qualified)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public AME.Model.Configuration.Directory __Xml;
		
		[XmlIgnore]
		public AME.Model.Configuration.Directory Xml
		{
			get
			{
				if (__Xml == null) __Xml = new AME.Model.Configuration.Directory();		
				return __Xml;
			}
			set {__Xml = value;}
		}

		[XmlElement(Type=typeof(AME.Model.Configuration.Directory),ElementName="Documentation",IsNullable=false,Form=XmlSchemaForm.Qualified)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public AME.Model.Configuration.Directory __Documentation;
		
		[XmlIgnore]
		public AME.Model.Configuration.Directory Documentation
		{
			get
			{
				if (__Documentation == null) __Documentation = new AME.Model.Configuration.Directory();		
				return __Documentation;
			}
			set {__Documentation = value;}
		}

		[XmlElement(Type=typeof(AME.Model.Configuration.Directory),ElementName="License",IsNullable=false,Form=XmlSchemaForm.Qualified)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public AME.Model.Configuration.Directory __License;
		
		[XmlIgnore]
		public AME.Model.Configuration.Directory License
		{
			get
			{
				if (__License == null) __License = new AME.Model.Configuration.Directory();		
				return __License;
			}
			set {__License = value;}
		}

		public Directories()
		{
		}

		public void MakeSchemaCompliant()
		{
			Model.MakeSchemaCompliant();
			Output.MakeSchemaCompliant();
			Data.MakeSchemaCompliant();
			Xml.MakeSchemaCompliant();
			Documentation.MakeSchemaCompliant();
			License.MakeSchemaCompliant();
		}

		public static event DepthFirstTraversalDelegate DepthFirstTraversalEvent;
		public void DepthFirstTraversal(object parent, object context)
		{
			if (DepthFirstTraversalEvent != null) DepthFirstTraversalEvent(this, parent, context);
			if (__Model != null) __Model.DepthFirstTraversal(this, context);
			if (__Output != null) __Output.DepthFirstTraversal(this, context);
			if (__Data != null) __Data.DepthFirstTraversal(this, context);
			if (__Xml != null) __Xml.DepthFirstTraversal(this, context);
			if (__Documentation != null) __Documentation.DepthFirstTraversal(this, context);
			if (__License != null) __License.DepthFirstTraversal(this, context);
		}
	}


	[XmlType(TypeName="Database"),Serializable]
	public partial class Database
	{

		[XmlElement(Type=typeof(AME.Model.Configuration.Directory),ElementName="Import",IsNullable=false,Form=XmlSchemaForm.Qualified)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public AME.Model.Configuration.Directory __Import;
		
		[XmlIgnore]
		public AME.Model.Configuration.Directory Import
		{
			get
			{
				if (__Import == null) __Import = new AME.Model.Configuration.Directory();		
				return __Import;
			}
			set {__Import = value;}
		}

		[XmlElement(Type=typeof(AME.Model.Configuration.Directory),ElementName="Format",IsNullable=false,Form=XmlSchemaForm.Qualified)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public AME.Model.Configuration.Directory __Format;
		
		[XmlIgnore]
		public AME.Model.Configuration.Directory Format
		{
			get
			{
				if (__Format == null) __Format = new AME.Model.Configuration.Directory();		
				return __Format;
			}
			set {__Format = value;}
		}

		public Database()
		{
		}

		public void MakeSchemaCompliant()
		{
			Import.MakeSchemaCompliant();
			Format.MakeSchemaCompliant();
		}

		public static event DepthFirstTraversalDelegate DepthFirstTraversalEvent;
		public void DepthFirstTraversal(object parent, object context)
		{
			if (DepthFirstTraversalEvent != null) DepthFirstTraversalEvent(this, parent, context);
			if (__Import != null) __Import.DepthFirstTraversal(this, context);
			if (__Format != null) __Format.DepthFirstTraversal(this, context);
		}
	}
}

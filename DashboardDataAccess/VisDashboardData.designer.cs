#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DashboardDataAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="VisDashboardDB")]
	public partial class VisDashboardDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUsersInExperiment(UsersInExperiment instance);
    partial void UpdateUsersInExperiment(UsersInExperiment instance);
    partial void DeleteUsersInExperiment(UsersInExperiment instance);
    partial void InsertUserInRole(UserInRole instance);
    partial void UpdateUserInRole(UserInRole instance);
    partial void DeleteUserInRole(UserInRole instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertConfig(Config instance);
    partial void UpdateConfig(Config instance);
    partial void DeleteConfig(Config instance);
    partial void InsertUsersInConfig(UsersInConfig instance);
    partial void UpdateUsersInConfig(UsersInConfig instance);
    partial void DeleteUsersInConfig(UsersInConfig instance);
    partial void InsertExperimentDisplay(ExperimentDisplay instance);
    partial void UpdateExperimentDisplay(ExperimentDisplay instance);
    partial void DeleteExperimentDisplay(ExperimentDisplay instance);
    partial void InsertDisplay(Display instance);
    partial void UpdateDisplay(Display instance);
    partial void DeleteDisplay(Display instance);
    partial void InsertDisplayFactorLabel(DisplayFactorLabel instance);
    partial void UpdateDisplayFactorLabel(DisplayFactorLabel instance);
    partial void DeleteDisplayFactorLabel(DisplayFactorLabel instance);
    partial void InsertDisplayFactor(DisplayFactor instance);
    partial void UpdateDisplayFactor(DisplayFactor instance);
    partial void DeleteDisplayFactor(DisplayFactor instance);
    partial void InsertDisplayBlockedFactor(DisplayBlockedFactor instance);
    partial void UpdateDisplayBlockedFactor(DisplayBlockedFactor instance);
    partial void DeleteDisplayBlockedFactor(DisplayBlockedFactor instance);
    partial void InsertMeasure(Measure instance);
    partial void UpdateMeasure(Measure instance);
    partial void DeleteMeasure(Measure instance);
    partial void InsertConfigDisplay(ConfigDisplay instance);
    partial void UpdateConfigDisplay(ConfigDisplay instance);
    partial void DeleteConfigDisplay(ConfigDisplay instance);
    partial void InsertExperimentMeasure(ExperimentMeasure instance);
    partial void UpdateExperimentMeasure(ExperimentMeasure instance);
    partial void DeleteExperimentMeasure(ExperimentMeasure instance);
    partial void InsertExperiment(Experiment instance);
    partial void UpdateExperiment(Experiment instance);
    partial void DeleteExperiment(Experiment instance);
    partial void InsertEntityType(EntityType instance);
    partial void UpdateEntityType(EntityType instance);
    partial void DeleteEntityType(EntityType instance);
    partial void InsertExperimentEntity(ExperimentEntity instance);
    partial void UpdateExperimentEntity(ExperimentEntity instance);
    partial void DeleteExperimentEntity(ExperimentEntity instance);
    #endregion
		
		public VisDashboardDataDataContext() : 
				base(global::DashboardDataAccess.Properties.Settings.Default.VisDashboardDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public VisDashboardDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VisDashboardDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VisDashboardDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VisDashboardDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UsersInExperiment> UsersInExperiments
		{
			get
			{
				return this.GetTable<UsersInExperiment>();
			}
		}
		
		public System.Data.Linq.Table<UserInRole> UserInRoles
		{
			get
			{
				return this.GetTable<UserInRole>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Config> Configs
		{
			get
			{
				return this.GetTable<Config>();
			}
		}
		
		public System.Data.Linq.Table<UsersInConfig> UsersInConfigs
		{
			get
			{
				return this.GetTable<UsersInConfig>();
			}
		}
		
		public System.Data.Linq.Table<ExperimentDisplay> ExperimentDisplays
		{
			get
			{
				return this.GetTable<ExperimentDisplay>();
			}
		}
		
		public System.Data.Linq.Table<Display> Displays
		{
			get
			{
				return this.GetTable<Display>();
			}
		}
		
		public System.Data.Linq.Table<DisplayFactorLabel> DisplayFactorLabels
		{
			get
			{
				return this.GetTable<DisplayFactorLabel>();
			}
		}
		
		public System.Data.Linq.Table<DisplayFactor> DisplayFactors
		{
			get
			{
				return this.GetTable<DisplayFactor>();
			}
		}
		
		public System.Data.Linq.Table<DisplayBlockedFactor> DisplayBlockedFactors
		{
			get
			{
				return this.GetTable<DisplayBlockedFactor>();
			}
		}
		
		public System.Data.Linq.Table<Measure> Measures
		{
			get
			{
				return this.GetTable<Measure>();
			}
		}
		
		public System.Data.Linq.Table<ConfigDisplay> ConfigDisplays
		{
			get
			{
				return this.GetTable<ConfigDisplay>();
			}
		}
		
		public System.Data.Linq.Table<ExperimentMeasure> ExperimentMeasures
		{
			get
			{
				return this.GetTable<ExperimentMeasure>();
			}
		}
		
		public System.Data.Linq.Table<Experiment> Experiments
		{
			get
			{
				return this.GetTable<Experiment>();
			}
		}
		
		public System.Data.Linq.Table<EntityType> EntityTypes
		{
			get
			{
				return this.GetTable<EntityType>();
			}
		}
		
		public System.Data.Linq.Table<ExperimentEntity> ExperimentEntities
		{
			get
			{
				return this.GetTable<ExperimentEntity>();
			}
		}
	}
	
	[Table(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _Username;
		
		private string _Password;
		
		private EntitySet<UsersInExperiment> _UsersInExperiments;
		
		private EntitySet<UserInRole> _UserInRoles;
		
		private EntitySet<UsersInConfig> _UsersInConfigs;
		
		private EntitySet<ExperimentDisplay> _ExperimentDisplays;
		
		private EntitySet<ExperimentMeasure> _ExperimentMeasures;
		
		private EntitySet<Experiment> _Experiments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public User()
		{
			this._UsersInExperiments = new EntitySet<UsersInExperiment>(new Action<UsersInExperiment>(this.attach_UsersInExperiments), new Action<UsersInExperiment>(this.detach_UsersInExperiments));
			this._UserInRoles = new EntitySet<UserInRole>(new Action<UserInRole>(this.attach_UserInRoles), new Action<UserInRole>(this.detach_UserInRoles));
			this._UsersInConfigs = new EntitySet<UsersInConfig>(new Action<UsersInConfig>(this.attach_UsersInConfigs), new Action<UsersInConfig>(this.detach_UsersInConfigs));
			this._ExperimentDisplays = new EntitySet<ExperimentDisplay>(new Action<ExperimentDisplay>(this.attach_ExperimentDisplays), new Action<ExperimentDisplay>(this.detach_ExperimentDisplays));
			this._ExperimentMeasures = new EntitySet<ExperimentMeasure>(new Action<ExperimentMeasure>(this.attach_ExperimentMeasures), new Action<ExperimentMeasure>(this.detach_ExperimentMeasures));
			this._Experiments = new EntitySet<Experiment>(new Action<Experiment>(this.attach_Experiments), new Action<Experiment>(this.detach_Experiments));
			OnCreated();
		}
		
		[Column(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Username", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Association(Name="User_UsersInExperiment", Storage="_UsersInExperiments", OtherKey="UserID")]
		public EntitySet<UsersInExperiment> UsersInExperiments
		{
			get
			{
				return this._UsersInExperiments;
			}
			set
			{
				this._UsersInExperiments.Assign(value);
			}
		}
		
		[Association(Name="User_UserInRole", Storage="_UserInRoles", OtherKey="UserID")]
		public EntitySet<UserInRole> UserInRoles
		{
			get
			{
				return this._UserInRoles;
			}
			set
			{
				this._UserInRoles.Assign(value);
			}
		}
		
		[Association(Name="User_UsersInConfig", Storage="_UsersInConfigs", OtherKey="UserID")]
		public EntitySet<UsersInConfig> UsersInConfigs
		{
			get
			{
				return this._UsersInConfigs;
			}
			set
			{
				this._UsersInConfigs.Assign(value);
			}
		}
		
		[Association(Name="User_ExperimentDisplay", Storage="_ExperimentDisplays", OtherKey="UserID")]
		public EntitySet<ExperimentDisplay> ExperimentDisplays
		{
			get
			{
				return this._ExperimentDisplays;
			}
			set
			{
				this._ExperimentDisplays.Assign(value);
			}
		}
		
		[Association(Name="User_ExperimentMeasure", Storage="_ExperimentMeasures", OtherKey="UserID")]
		public EntitySet<ExperimentMeasure> ExperimentMeasures
		{
			get
			{
				return this._ExperimentMeasures;
			}
			set
			{
				this._ExperimentMeasures.Assign(value);
			}
		}
		
		[Association(Name="User_Experiment", Storage="_Experiments", OtherKey="CreatorID")]
		public EntitySet<Experiment> Experiments
		{
			get
			{
				return this._Experiments;
			}
			set
			{
				this._Experiments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersInExperiments(UsersInExperiment entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UsersInExperiments(UsersInExperiment entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserInRoles(UserInRole entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserInRoles(UserInRole entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UsersInConfigs(UsersInConfig entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UsersInConfigs(UsersInConfig entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ExperimentDisplays(ExperimentDisplay entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ExperimentDisplays(ExperimentDisplay entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ExperimentMeasures(ExperimentMeasure entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ExperimentMeasures(ExperimentMeasure entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Experiments(Experiment entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Experiments(Experiment entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[Table(Name="dbo.UsersInExperiment")]
	public partial class UsersInExperiment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ExperimentID;
		
		private int _UserID;
		
		private bool _IsExperimentor;
		
		private System.Nullable<int> _ActiveConfig;
		
		private EntityRef<User> _User;
		
		private EntityRef<Experiment> _Experiment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnExperimentIDChanging(int value);
    partial void OnExperimentIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnIsExperimentorChanging(bool value);
    partial void OnIsExperimentorChanged();
    partial void OnActiveConfigChanging(System.Nullable<int> value);
    partial void OnActiveConfigChanged();
    #endregion
		
		public UsersInExperiment()
		{
			this._User = default(EntityRef<User>);
			this._Experiment = default(EntityRef<Experiment>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ExperimentID", DbType="Int NOT NULL")]
		public int ExperimentID
		{
			get
			{
				return this._ExperimentID;
			}
			set
			{
				if ((this._ExperimentID != value))
				{
					if (this._Experiment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExperimentIDChanging(value);
					this.SendPropertyChanging();
					this._ExperimentID = value;
					this.SendPropertyChanged("ExperimentID");
					this.OnExperimentIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsExperimentor", DbType="Bit NOT NULL")]
		public bool IsExperimentor
		{
			get
			{
				return this._IsExperimentor;
			}
			set
			{
				if ((this._IsExperimentor != value))
				{
					this.OnIsExperimentorChanging(value);
					this.SendPropertyChanging();
					this._IsExperimentor = value;
					this.SendPropertyChanged("IsExperimentor");
					this.OnIsExperimentorChanged();
				}
			}
		}
		
		[Column(Storage="_ActiveConfig", DbType="Int")]
		public System.Nullable<int> ActiveConfig
		{
			get
			{
				return this._ActiveConfig;
			}
			set
			{
				if ((this._ActiveConfig != value))
				{
					this.OnActiveConfigChanging(value);
					this.SendPropertyChanging();
					this._ActiveConfig = value;
					this.SendPropertyChanged("ActiveConfig");
					this.OnActiveConfigChanged();
				}
			}
		}
		
		[Association(Name="User_UsersInExperiment", Storage="_User", ThisKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UsersInExperiments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UsersInExperiments.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="Experiment_UsersInExperiment", Storage="_Experiment", ThisKey="ExperimentID", IsForeignKey=true)]
		public Experiment Experiment
		{
			get
			{
				return this._Experiment.Entity;
			}
			set
			{
				Experiment previousValue = this._Experiment.Entity;
				if (((previousValue != value) 
							|| (this._Experiment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Experiment.Entity = null;
						previousValue.UsersInExperiments.Remove(this);
					}
					this._Experiment.Entity = value;
					if ((value != null))
					{
						value.UsersInExperiments.Add(this);
						this._ExperimentID = value.ExperimentID;
					}
					else
					{
						this._ExperimentID = default(int);
					}
					this.SendPropertyChanged("Experiment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.UserInRole")]
	public partial class UserInRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private int _RoleID;
		
		private string _ApplicationName;
		
		private EntityRef<User> _User;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnApplicationNameChanging(string value);
    partial void OnApplicationNameChanged();
    #endregion
		
		public UserInRole()
		{
			this._User = default(EntityRef<User>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicationName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ApplicationName
		{
			get
			{
				return this._ApplicationName;
			}
			set
			{
				if ((this._ApplicationName != value))
				{
					this.OnApplicationNameChanging(value);
					this.SendPropertyChanging();
					this._ApplicationName = value;
					this.SendPropertyChanged("ApplicationName");
					this.OnApplicationNameChanged();
				}
			}
		}
		
		[Association(Name="User_UserInRole", Storage="_User", ThisKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserInRoles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserInRoles.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="Role_UserInRole", Storage="_Role", ThisKey="RoleID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UserInRoles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UserInRoles.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleID;
		
		private string _RoleName;
		
		private string _ApplicationName;
		
		private EntitySet<UserInRole> _UserInRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnApplicationNameChanging(string value);
    partial void OnApplicationNameChanged();
    #endregion
		
		public Role()
		{
			this._UserInRoles = new EntitySet<UserInRole>(new Action<UserInRole>(this.attach_UserInRoles), new Action<UserInRole>(this.detach_UserInRoles));
			OnCreated();
		}
		
		[Column(Storage="_RoleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoleName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicationName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ApplicationName
		{
			get
			{
				return this._ApplicationName;
			}
			set
			{
				if ((this._ApplicationName != value))
				{
					this.OnApplicationNameChanging(value);
					this.SendPropertyChanging();
					this._ApplicationName = value;
					this.SendPropertyChanged("ApplicationName");
					this.OnApplicationNameChanged();
				}
			}
		}
		
		[Association(Name="Role_UserInRole", Storage="_UserInRoles", OtherKey="RoleID")]
		public EntitySet<UserInRole> UserInRoles
		{
			get
			{
				return this._UserInRoles;
			}
			set
			{
				this._UserInRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserInRoles(UserInRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UserInRoles(UserInRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[Table(Name="dbo.Config")]
	public partial class Config : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ConfigID;
		
		private int _ExperimentID;
		
		private string _Name;
		
		private EntitySet<UsersInConfig> _UsersInConfigs;
		
		private EntitySet<ConfigDisplay> _ConfigDisplays;
		
		private EntityRef<Experiment> _Experiment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConfigIDChanging(int value);
    partial void OnConfigIDChanged();
    partial void OnExperimentIDChanging(int value);
    partial void OnExperimentIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Config()
		{
			this._UsersInConfigs = new EntitySet<UsersInConfig>(new Action<UsersInConfig>(this.attach_UsersInConfigs), new Action<UsersInConfig>(this.detach_UsersInConfigs));
			this._ConfigDisplays = new EntitySet<ConfigDisplay>(new Action<ConfigDisplay>(this.attach_ConfigDisplays), new Action<ConfigDisplay>(this.detach_ConfigDisplays));
			this._Experiment = default(EntityRef<Experiment>);
			OnCreated();
		}
		
		[Column(Storage="_ConfigID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ConfigID
		{
			get
			{
				return this._ConfigID;
			}
			set
			{
				if ((this._ConfigID != value))
				{
					this.OnConfigIDChanging(value);
					this.SendPropertyChanging();
					this._ConfigID = value;
					this.SendPropertyChanged("ConfigID");
					this.OnConfigIDChanged();
				}
			}
		}
		
		[Column(Storage="_ExperimentID", DbType="Int NOT NULL")]
		public int ExperimentID
		{
			get
			{
				return this._ExperimentID;
			}
			set
			{
				if ((this._ExperimentID != value))
				{
					if (this._Experiment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExperimentIDChanging(value);
					this.SendPropertyChanging();
					this._ExperimentID = value;
					this.SendPropertyChanged("ExperimentID");
					this.OnExperimentIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Config_UsersInConfig", Storage="_UsersInConfigs", OtherKey="ConfigID")]
		public EntitySet<UsersInConfig> UsersInConfigs
		{
			get
			{
				return this._UsersInConfigs;
			}
			set
			{
				this._UsersInConfigs.Assign(value);
			}
		}
		
		[Association(Name="Config_ConfigDisplay", Storage="_ConfigDisplays", OtherKey="ConfigID")]
		public EntitySet<ConfigDisplay> ConfigDisplays
		{
			get
			{
				return this._ConfigDisplays;
			}
			set
			{
				this._ConfigDisplays.Assign(value);
			}
		}
		
		[Association(Name="Experiment_Config", Storage="_Experiment", ThisKey="ExperimentID", IsForeignKey=true)]
		public Experiment Experiment
		{
			get
			{
				return this._Experiment.Entity;
			}
			set
			{
				Experiment previousValue = this._Experiment.Entity;
				if (((previousValue != value) 
							|| (this._Experiment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Experiment.Entity = null;
						previousValue.Configs.Remove(this);
					}
					this._Experiment.Entity = value;
					if ((value != null))
					{
						value.Configs.Add(this);
						this._ExperimentID = value.ExperimentID;
					}
					else
					{
						this._ExperimentID = default(int);
					}
					this.SendPropertyChanged("Experiment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersInConfigs(UsersInConfig entity)
		{
			this.SendPropertyChanging();
			entity.Config = this;
		}
		
		private void detach_UsersInConfigs(UsersInConfig entity)
		{
			this.SendPropertyChanging();
			entity.Config = null;
		}
		
		private void attach_ConfigDisplays(ConfigDisplay entity)
		{
			this.SendPropertyChanging();
			entity.Config = this;
		}
		
		private void detach_ConfigDisplays(ConfigDisplay entity)
		{
			this.SendPropertyChanging();
			entity.Config = null;
		}
	}
	
	[Table(Name="dbo.UsersInConfig")]
	public partial class UsersInConfig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ConfigID;
		
		private int _UserID;
		
		private EntityRef<Config> _Config;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnConfigIDChanging(int value);
    partial void OnConfigIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public UsersInConfig()
		{
			this._Config = default(EntityRef<Config>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ConfigID", DbType="Int NOT NULL")]
		public int ConfigID
		{
			get
			{
				return this._ConfigID;
			}
			set
			{
				if ((this._ConfigID != value))
				{
					if (this._Config.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConfigIDChanging(value);
					this.SendPropertyChanging();
					this._ConfigID = value;
					this.SendPropertyChanged("ConfigID");
					this.OnConfigIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Association(Name="Config_UsersInConfig", Storage="_Config", ThisKey="ConfigID", IsForeignKey=true)]
		public Config Config
		{
			get
			{
				return this._Config.Entity;
			}
			set
			{
				Config previousValue = this._Config.Entity;
				if (((previousValue != value) 
							|| (this._Config.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Config.Entity = null;
						previousValue.UsersInConfigs.Remove(this);
					}
					this._Config.Entity = value;
					if ((value != null))
					{
						value.UsersInConfigs.Add(this);
						this._ConfigID = value.ConfigID;
					}
					else
					{
						this._ConfigID = default(int);
					}
					this.SendPropertyChanged("Config");
				}
			}
		}
		
		[Association(Name="User_UsersInConfig", Storage="_User", ThisKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UsersInConfigs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UsersInConfigs.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ExperimentDisplay")]
	public partial class ExperimentDisplay : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ExperimentID;
		
		private int _DisplayID;
		
		private int _UserID;
		
		private EntityRef<User> _User;
		
		private EntityRef<Display> _Display;
		
		private EntityRef<Experiment> _Experiment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnExperimentIDChanging(int value);
    partial void OnExperimentIDChanged();
    partial void OnDisplayIDChanging(int value);
    partial void OnDisplayIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public ExperimentDisplay()
		{
			this._User = default(EntityRef<User>);
			this._Display = default(EntityRef<Display>);
			this._Experiment = default(EntityRef<Experiment>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ExperimentID", DbType="Int NOT NULL")]
		public int ExperimentID
		{
			get
			{
				return this._ExperimentID;
			}
			set
			{
				if ((this._ExperimentID != value))
				{
					if (this._Experiment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExperimentIDChanging(value);
					this.SendPropertyChanging();
					this._ExperimentID = value;
					this.SendPropertyChanged("ExperimentID");
					this.OnExperimentIDChanged();
				}
			}
		}
		
		[Column(Storage="_DisplayID", DbType="Int NOT NULL")]
		public int DisplayID
		{
			get
			{
				return this._DisplayID;
			}
			set
			{
				if ((this._DisplayID != value))
				{
					if (this._Display.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDisplayIDChanging(value);
					this.SendPropertyChanging();
					this._DisplayID = value;
					this.SendPropertyChanged("DisplayID");
					this.OnDisplayIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Association(Name="User_ExperimentDisplay", Storage="_User", ThisKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ExperimentDisplays.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ExperimentDisplays.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="Display_ExperimentDisplay", Storage="_Display", ThisKey="DisplayID", IsForeignKey=true)]
		public Display Display
		{
			get
			{
				return this._Display.Entity;
			}
			set
			{
				Display previousValue = this._Display.Entity;
				if (((previousValue != value) 
							|| (this._Display.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Display.Entity = null;
						previousValue.ExperimentDisplays.Remove(this);
					}
					this._Display.Entity = value;
					if ((value != null))
					{
						value.ExperimentDisplays.Add(this);
						this._DisplayID = value.DisplayID;
					}
					else
					{
						this._DisplayID = default(int);
					}
					this.SendPropertyChanged("Display");
				}
			}
		}
		
		[Association(Name="Experiment_ExperimentDisplay", Storage="_Experiment", ThisKey="ExperimentID", IsForeignKey=true)]
		public Experiment Experiment
		{
			get
			{
				return this._Experiment.Entity;
			}
			set
			{
				Experiment previousValue = this._Experiment.Entity;
				if (((previousValue != value) 
							|| (this._Experiment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Experiment.Entity = null;
						previousValue.ExperimentDisplays.Remove(this);
					}
					this._Experiment.Entity = value;
					if ((value != null))
					{
						value.ExperimentDisplays.Add(this);
						this._ExperimentID = value.ExperimentID;
					}
					else
					{
						this._ExperimentID = default(int);
					}
					this.SendPropertyChanged("Experiment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Display")]
	public partial class Display : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DisplayID;
		
		private string _Name;
		
		private string _ImageResourcePath;
		
		private EntitySet<ExperimentDisplay> _ExperimentDisplays;
		
		private EntitySet<DisplayFactorLabel> _DisplayFactorLabels;
		
		private EntitySet<ConfigDisplay> _ConfigDisplays;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDisplayIDChanging(int value);
    partial void OnDisplayIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnImageResourcePathChanging(string value);
    partial void OnImageResourcePathChanged();
    #endregion
		
		public Display()
		{
			this._ExperimentDisplays = new EntitySet<ExperimentDisplay>(new Action<ExperimentDisplay>(this.attach_ExperimentDisplays), new Action<ExperimentDisplay>(this.detach_ExperimentDisplays));
			this._DisplayFactorLabels = new EntitySet<DisplayFactorLabel>(new Action<DisplayFactorLabel>(this.attach_DisplayFactorLabels), new Action<DisplayFactorLabel>(this.detach_DisplayFactorLabels));
			this._ConfigDisplays = new EntitySet<ConfigDisplay>(new Action<ConfigDisplay>(this.attach_ConfigDisplays), new Action<ConfigDisplay>(this.detach_ConfigDisplays));
			OnCreated();
		}
		
		[Column(Storage="_DisplayID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DisplayID
		{
			get
			{
				return this._DisplayID;
			}
			set
			{
				if ((this._DisplayID != value))
				{
					this.OnDisplayIDChanging(value);
					this.SendPropertyChanging();
					this._DisplayID = value;
					this.SendPropertyChanged("DisplayID");
					this.OnDisplayIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_ImageResourcePath", DbType="NVarChar(200)")]
		public string ImageResourcePath
		{
			get
			{
				return this._ImageResourcePath;
			}
			set
			{
				if ((this._ImageResourcePath != value))
				{
					this.OnImageResourcePathChanging(value);
					this.SendPropertyChanging();
					this._ImageResourcePath = value;
					this.SendPropertyChanged("ImageResourcePath");
					this.OnImageResourcePathChanged();
				}
			}
		}
		
		[Association(Name="Display_ExperimentDisplay", Storage="_ExperimentDisplays", OtherKey="DisplayID")]
		public EntitySet<ExperimentDisplay> ExperimentDisplays
		{
			get
			{
				return this._ExperimentDisplays;
			}
			set
			{
				this._ExperimentDisplays.Assign(value);
			}
		}
		
		[Association(Name="Display_DisplayFactorLabel", Storage="_DisplayFactorLabels", OtherKey="DisplayID")]
		public EntitySet<DisplayFactorLabel> DisplayFactorLabels
		{
			get
			{
				return this._DisplayFactorLabels;
			}
			set
			{
				this._DisplayFactorLabels.Assign(value);
			}
		}
		
		[Association(Name="Display_ConfigDisplay", Storage="_ConfigDisplays", OtherKey="DisplayID")]
		public EntitySet<ConfigDisplay> ConfigDisplays
		{
			get
			{
				return this._ConfigDisplays;
			}
			set
			{
				this._ConfigDisplays.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExperimentDisplays(ExperimentDisplay entity)
		{
			this.SendPropertyChanging();
			entity.Display = this;
		}
		
		private void detach_ExperimentDisplays(ExperimentDisplay entity)
		{
			this.SendPropertyChanging();
			entity.Display = null;
		}
		
		private void attach_DisplayFactorLabels(DisplayFactorLabel entity)
		{
			this.SendPropertyChanging();
			entity.Display = this;
		}
		
		private void detach_DisplayFactorLabels(DisplayFactorLabel entity)
		{
			this.SendPropertyChanging();
			entity.Display = null;
		}
		
		private void attach_ConfigDisplays(ConfigDisplay entity)
		{
			this.SendPropertyChanging();
			entity.Display = this;
		}
		
		private void detach_ConfigDisplays(ConfigDisplay entity)
		{
			this.SendPropertyChanging();
			entity.Display = null;
		}
	}
	
	[Table(Name="dbo.DisplayFactorLabel")]
	public partial class DisplayFactorLabel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _DisplayID;
		
		private string _Label;
		
		private int _FactorPos;
		
		private EntityRef<Display> _Display;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDisplayIDChanging(int value);
    partial void OnDisplayIDChanged();
    partial void OnLabelChanging(string value);
    partial void OnLabelChanged();
    partial void OnFactorPosChanging(int value);
    partial void OnFactorPosChanged();
    #endregion
		
		public DisplayFactorLabel()
		{
			this._Display = default(EntityRef<Display>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_DisplayID", DbType="Int NOT NULL")]
		public int DisplayID
		{
			get
			{
				return this._DisplayID;
			}
			set
			{
				if ((this._DisplayID != value))
				{
					if (this._Display.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDisplayIDChanging(value);
					this.SendPropertyChanging();
					this._DisplayID = value;
					this.SendPropertyChanged("DisplayID");
					this.OnDisplayIDChanged();
				}
			}
		}
		
		[Column(Storage="_Label", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Label
		{
			get
			{
				return this._Label;
			}
			set
			{
				if ((this._Label != value))
				{
					this.OnLabelChanging(value);
					this.SendPropertyChanging();
					this._Label = value;
					this.SendPropertyChanged("Label");
					this.OnLabelChanged();
				}
			}
		}
		
		[Column(Storage="_FactorPos", DbType="Int NOT NULL")]
		public int FactorPos
		{
			get
			{
				return this._FactorPos;
			}
			set
			{
				if ((this._FactorPos != value))
				{
					this.OnFactorPosChanging(value);
					this.SendPropertyChanging();
					this._FactorPos = value;
					this.SendPropertyChanged("FactorPos");
					this.OnFactorPosChanged();
				}
			}
		}
		
		[Association(Name="Display_DisplayFactorLabel", Storage="_Display", ThisKey="DisplayID", IsForeignKey=true)]
		public Display Display
		{
			get
			{
				return this._Display.Entity;
			}
			set
			{
				Display previousValue = this._Display.Entity;
				if (((previousValue != value) 
							|| (this._Display.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Display.Entity = null;
						previousValue.DisplayFactorLabels.Remove(this);
					}
					this._Display.Entity = value;
					if ((value != null))
					{
						value.DisplayFactorLabels.Add(this);
						this._DisplayID = value.DisplayID;
					}
					else
					{
						this._DisplayID = default(int);
					}
					this.SendPropertyChanged("Display");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.DisplayFactor")]
	public partial class DisplayFactor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DisplayFactorID;
		
		private int _ConfigDisplayID;
		
		private string _FactorName;
		
		private int _FactorPos;
		
		private string _FactorLabel;
		
		private EntityRef<ConfigDisplay> _ConfigDisplay;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDisplayFactorIDChanging(int value);
    partial void OnDisplayFactorIDChanged();
    partial void OnConfigDisplayIDChanging(int value);
    partial void OnConfigDisplayIDChanged();
    partial void OnFactorNameChanging(string value);
    partial void OnFactorNameChanged();
    partial void OnFactorPosChanging(int value);
    partial void OnFactorPosChanged();
    partial void OnFactorLabelChanging(string value);
    partial void OnFactorLabelChanged();
    #endregion
		
		public DisplayFactor()
		{
			this._ConfigDisplay = default(EntityRef<ConfigDisplay>);
			OnCreated();
		}
		
		[Column(Storage="_DisplayFactorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DisplayFactorID
		{
			get
			{
				return this._DisplayFactorID;
			}
			set
			{
				if ((this._DisplayFactorID != value))
				{
					this.OnDisplayFactorIDChanging(value);
					this.SendPropertyChanging();
					this._DisplayFactorID = value;
					this.SendPropertyChanged("DisplayFactorID");
					this.OnDisplayFactorIDChanged();
				}
			}
		}
		
		[Column(Storage="_ConfigDisplayID", DbType="Int NOT NULL")]
		public int ConfigDisplayID
		{
			get
			{
				return this._ConfigDisplayID;
			}
			set
			{
				if ((this._ConfigDisplayID != value))
				{
					if (this._ConfigDisplay.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConfigDisplayIDChanging(value);
					this.SendPropertyChanging();
					this._ConfigDisplayID = value;
					this.SendPropertyChanged("ConfigDisplayID");
					this.OnConfigDisplayIDChanged();
				}
			}
		}
		
		[Column(Storage="_FactorName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string FactorName
		{
			get
			{
				return this._FactorName;
			}
			set
			{
				if ((this._FactorName != value))
				{
					this.OnFactorNameChanging(value);
					this.SendPropertyChanging();
					this._FactorName = value;
					this.SendPropertyChanged("FactorName");
					this.OnFactorNameChanged();
				}
			}
		}
		
		[Column(Storage="_FactorPos", DbType="Int NOT NULL")]
		public int FactorPos
		{
			get
			{
				return this._FactorPos;
			}
			set
			{
				if ((this._FactorPos != value))
				{
					this.OnFactorPosChanging(value);
					this.SendPropertyChanging();
					this._FactorPos = value;
					this.SendPropertyChanged("FactorPos");
					this.OnFactorPosChanged();
				}
			}
		}
		
		[Column(Storage="_FactorLabel", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string FactorLabel
		{
			get
			{
				return this._FactorLabel;
			}
			set
			{
				if ((this._FactorLabel != value))
				{
					this.OnFactorLabelChanging(value);
					this.SendPropertyChanging();
					this._FactorLabel = value;
					this.SendPropertyChanged("FactorLabel");
					this.OnFactorLabelChanged();
				}
			}
		}
		
		[Association(Name="ConfigDisplay_DisplayFactor", Storage="_ConfigDisplay", ThisKey="ConfigDisplayID", IsForeignKey=true)]
		public ConfigDisplay ConfigDisplay
		{
			get
			{
				return this._ConfigDisplay.Entity;
			}
			set
			{
				ConfigDisplay previousValue = this._ConfigDisplay.Entity;
				if (((previousValue != value) 
							|| (this._ConfigDisplay.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ConfigDisplay.Entity = null;
						previousValue.DisplayFactors.Remove(this);
					}
					this._ConfigDisplay.Entity = value;
					if ((value != null))
					{
						value.DisplayFactors.Add(this);
						this._ConfigDisplayID = value.ConfigDisplayID;
					}
					else
					{
						this._ConfigDisplayID = default(int);
					}
					this.SendPropertyChanged("ConfigDisplay");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.DisplayBlockedFactor")]
	public partial class DisplayBlockedFactor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DisplayBlockedFactorID;
		
		private int _ConfigDisplayID;
		
		private int _MeasureID;
		
		private string _LevelName;
		
		private EntityRef<Measure> _Measure;
		
		private EntityRef<ConfigDisplay> _ConfigDisplay;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDisplayBlockedFactorIDChanging(int value);
    partial void OnDisplayBlockedFactorIDChanged();
    partial void OnConfigDisplayIDChanging(int value);
    partial void OnConfigDisplayIDChanged();
    partial void OnMeasureIDChanging(int value);
    partial void OnMeasureIDChanged();
    partial void OnLevelNameChanging(string value);
    partial void OnLevelNameChanged();
    #endregion
		
		public DisplayBlockedFactor()
		{
			this._Measure = default(EntityRef<Measure>);
			this._ConfigDisplay = default(EntityRef<ConfigDisplay>);
			OnCreated();
		}
		
		[Column(Storage="_DisplayBlockedFactorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DisplayBlockedFactorID
		{
			get
			{
				return this._DisplayBlockedFactorID;
			}
			set
			{
				if ((this._DisplayBlockedFactorID != value))
				{
					this.OnDisplayBlockedFactorIDChanging(value);
					this.SendPropertyChanging();
					this._DisplayBlockedFactorID = value;
					this.SendPropertyChanged("DisplayBlockedFactorID");
					this.OnDisplayBlockedFactorIDChanged();
				}
			}
		}
		
		[Column(Storage="_ConfigDisplayID", DbType="Int NOT NULL")]
		public int ConfigDisplayID
		{
			get
			{
				return this._ConfigDisplayID;
			}
			set
			{
				if ((this._ConfigDisplayID != value))
				{
					if (this._ConfigDisplay.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConfigDisplayIDChanging(value);
					this.SendPropertyChanging();
					this._ConfigDisplayID = value;
					this.SendPropertyChanged("ConfigDisplayID");
					this.OnConfigDisplayIDChanged();
				}
			}
		}
		
		[Column(Storage="_MeasureID", DbType="Int NOT NULL")]
		public int MeasureID
		{
			get
			{
				return this._MeasureID;
			}
			set
			{
				if ((this._MeasureID != value))
				{
					if (this._Measure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._MeasureID = value;
					this.SendPropertyChanged("MeasureID");
					this.OnMeasureIDChanged();
				}
			}
		}
		
		[Column(Storage="_LevelName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string LevelName
		{
			get
			{
				return this._LevelName;
			}
			set
			{
				if ((this._LevelName != value))
				{
					this.OnLevelNameChanging(value);
					this.SendPropertyChanging();
					this._LevelName = value;
					this.SendPropertyChanged("LevelName");
					this.OnLevelNameChanged();
				}
			}
		}
		
		[Association(Name="Measure_DisplayBlockedFactor", Storage="_Measure", ThisKey="MeasureID", IsForeignKey=true)]
		public Measure Measure
		{
			get
			{
				return this._Measure.Entity;
			}
			set
			{
				Measure previousValue = this._Measure.Entity;
				if (((previousValue != value) 
							|| (this._Measure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Measure.Entity = null;
						previousValue.DisplayBlockedFactors.Remove(this);
					}
					this._Measure.Entity = value;
					if ((value != null))
					{
						value.DisplayBlockedFactors.Add(this);
						this._MeasureID = value.MeasureID;
					}
					else
					{
						this._MeasureID = default(int);
					}
					this.SendPropertyChanged("Measure");
				}
			}
		}
		
		[Association(Name="ConfigDisplay_DisplayBlockedFactor", Storage="_ConfigDisplay", ThisKey="ConfigDisplayID", IsForeignKey=true)]
		public ConfigDisplay ConfigDisplay
		{
			get
			{
				return this._ConfigDisplay.Entity;
			}
			set
			{
				ConfigDisplay previousValue = this._ConfigDisplay.Entity;
				if (((previousValue != value) 
							|| (this._ConfigDisplay.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ConfigDisplay.Entity = null;
						previousValue.DisplayBlockedFactors.Remove(this);
					}
					this._ConfigDisplay.Entity = value;
					if ((value != null))
					{
						value.DisplayBlockedFactors.Add(this);
						this._ConfigDisplayID = value.ConfigDisplayID;
					}
					else
					{
						this._ConfigDisplayID = default(int);
					}
					this.SendPropertyChanged("ConfigDisplay");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Measures")]
	public partial class Measure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MeasureID;
		
		private string _Name;
		
		private System.Xml.Linq.XElement _HPML;
		
		private string _Category;
		
		private string _SubCategory;
		
		private string _RTPMEngineType;
		
		private EntitySet<DisplayBlockedFactor> _DisplayBlockedFactors;
		
		private EntitySet<ExperimentMeasure> _ExperimentMeasures;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMeasureIDChanging(int value);
    partial void OnMeasureIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnHPMLChanging(System.Xml.Linq.XElement value);
    partial void OnHPMLChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnSubCategoryChanging(string value);
    partial void OnSubCategoryChanged();
    partial void OnRTPMEngineTypeChanging(string value);
    partial void OnRTPMEngineTypeChanged();
    #endregion
		
		public Measure()
		{
			this._DisplayBlockedFactors = new EntitySet<DisplayBlockedFactor>(new Action<DisplayBlockedFactor>(this.attach_DisplayBlockedFactors), new Action<DisplayBlockedFactor>(this.detach_DisplayBlockedFactors));
			this._ExperimentMeasures = new EntitySet<ExperimentMeasure>(new Action<ExperimentMeasure>(this.attach_ExperimentMeasures), new Action<ExperimentMeasure>(this.detach_ExperimentMeasures));
			OnCreated();
		}
		
		[Column(Storage="_MeasureID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MeasureID
		{
			get
			{
				return this._MeasureID;
			}
			set
			{
				if ((this._MeasureID != value))
				{
					this.OnMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._MeasureID = value;
					this.SendPropertyChanged("MeasureID");
					this.OnMeasureIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_HPML", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement HPML
		{
			get
			{
				return this._HPML;
			}
			set
			{
				if ((this._HPML != value))
				{
					this.OnHPMLChanging(value);
					this.SendPropertyChanging();
					this._HPML = value;
					this.SendPropertyChanged("HPML");
					this.OnHPMLChanged();
				}
			}
		}
		
		[Column(Storage="_Category", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_SubCategory", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string SubCategory
		{
			get
			{
				return this._SubCategory;
			}
			set
			{
				if ((this._SubCategory != value))
				{
					this.OnSubCategoryChanging(value);
					this.SendPropertyChanging();
					this._SubCategory = value;
					this.SendPropertyChanged("SubCategory");
					this.OnSubCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_RTPMEngineType", DbType="NVarChar(100)")]
		public string RTPMEngineType
		{
			get
			{
				return this._RTPMEngineType;
			}
			set
			{
				if ((this._RTPMEngineType != value))
				{
					this.OnRTPMEngineTypeChanging(value);
					this.SendPropertyChanging();
					this._RTPMEngineType = value;
					this.SendPropertyChanged("RTPMEngineType");
					this.OnRTPMEngineTypeChanged();
				}
			}
		}
		
		[Association(Name="Measure_DisplayBlockedFactor", Storage="_DisplayBlockedFactors", OtherKey="MeasureID")]
		public EntitySet<DisplayBlockedFactor> DisplayBlockedFactors
		{
			get
			{
				return this._DisplayBlockedFactors;
			}
			set
			{
				this._DisplayBlockedFactors.Assign(value);
			}
		}
		
		[Association(Name="Measure_ExperimentMeasure", Storage="_ExperimentMeasures", OtherKey="MeasureID")]
		public EntitySet<ExperimentMeasure> ExperimentMeasures
		{
			get
			{
				return this._ExperimentMeasures;
			}
			set
			{
				this._ExperimentMeasures.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DisplayBlockedFactors(DisplayBlockedFactor entity)
		{
			this.SendPropertyChanging();
			entity.Measure = this;
		}
		
		private void detach_DisplayBlockedFactors(DisplayBlockedFactor entity)
		{
			this.SendPropertyChanging();
			entity.Measure = null;
		}
		
		private void attach_ExperimentMeasures(ExperimentMeasure entity)
		{
			this.SendPropertyChanging();
			entity.Measure = this;
		}
		
		private void detach_ExperimentMeasures(ExperimentMeasure entity)
		{
			this.SendPropertyChanging();
			entity.Measure = null;
		}
	}
	
	[Table(Name="dbo.ConfigDisplay")]
	public partial class ConfigDisplay : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ConfigDisplayID;
		
		private string _Name;
		
		private int _ConfigID;
		
		private string _MeasureName;
		
		private int _DisplayID;
		
		private string _MetricName;
		
		private int _NumFactors;
		
		private int _NumBlockedFactors;
		
		private int _Width;
		
		private int _Height;
		
		private EntitySet<DisplayFactor> _DisplayFactors;
		
		private EntitySet<DisplayBlockedFactor> _DisplayBlockedFactors;
		
		private EntityRef<Config> _Config;
		
		private EntityRef<Display> _Display;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConfigDisplayIDChanging(int value);
    partial void OnConfigDisplayIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnConfigIDChanging(int value);
    partial void OnConfigIDChanged();
    partial void OnMeasureNameChanging(string value);
    partial void OnMeasureNameChanged();
    partial void OnDisplayIDChanging(int value);
    partial void OnDisplayIDChanged();
    partial void OnMetricNameChanging(string value);
    partial void OnMetricNameChanged();
    partial void OnNumFactorsChanging(int value);
    partial void OnNumFactorsChanged();
    partial void OnNumBlockedFactorsChanging(int value);
    partial void OnNumBlockedFactorsChanged();
    partial void OnWidthChanging(int value);
    partial void OnWidthChanged();
    partial void OnHeightChanging(int value);
    partial void OnHeightChanged();
    #endregion
		
		public ConfigDisplay()
		{
			this._DisplayFactors = new EntitySet<DisplayFactor>(new Action<DisplayFactor>(this.attach_DisplayFactors), new Action<DisplayFactor>(this.detach_DisplayFactors));
			this._DisplayBlockedFactors = new EntitySet<DisplayBlockedFactor>(new Action<DisplayBlockedFactor>(this.attach_DisplayBlockedFactors), new Action<DisplayBlockedFactor>(this.detach_DisplayBlockedFactors));
			this._Config = default(EntityRef<Config>);
			this._Display = default(EntityRef<Display>);
			OnCreated();
		}
		
		[Column(Storage="_ConfigDisplayID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ConfigDisplayID
		{
			get
			{
				return this._ConfigDisplayID;
			}
			set
			{
				if ((this._ConfigDisplayID != value))
				{
					this.OnConfigDisplayIDChanging(value);
					this.SendPropertyChanging();
					this._ConfigDisplayID = value;
					this.SendPropertyChanged("ConfigDisplayID");
					this.OnConfigDisplayIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_ConfigID", DbType="Int NOT NULL")]
		public int ConfigID
		{
			get
			{
				return this._ConfigID;
			}
			set
			{
				if ((this._ConfigID != value))
				{
					if (this._Config.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConfigIDChanging(value);
					this.SendPropertyChanging();
					this._ConfigID = value;
					this.SendPropertyChanged("ConfigID");
					this.OnConfigIDChanged();
				}
			}
		}
		
		[Column(Storage="_MeasureName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string MeasureName
		{
			get
			{
				return this._MeasureName;
			}
			set
			{
				if ((this._MeasureName != value))
				{
					this.OnMeasureNameChanging(value);
					this.SendPropertyChanging();
					this._MeasureName = value;
					this.SendPropertyChanged("MeasureName");
					this.OnMeasureNameChanged();
				}
			}
		}
		
		[Column(Storage="_DisplayID", DbType="Int NOT NULL")]
		public int DisplayID
		{
			get
			{
				return this._DisplayID;
			}
			set
			{
				if ((this._DisplayID != value))
				{
					if (this._Display.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDisplayIDChanging(value);
					this.SendPropertyChanging();
					this._DisplayID = value;
					this.SendPropertyChanged("DisplayID");
					this.OnDisplayIDChanged();
				}
			}
		}
		
		[Column(Storage="_MetricName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string MetricName
		{
			get
			{
				return this._MetricName;
			}
			set
			{
				if ((this._MetricName != value))
				{
					this.OnMetricNameChanging(value);
					this.SendPropertyChanging();
					this._MetricName = value;
					this.SendPropertyChanged("MetricName");
					this.OnMetricNameChanged();
				}
			}
		}
		
		[Column(Storage="_NumFactors", DbType="Int NOT NULL")]
		public int NumFactors
		{
			get
			{
				return this._NumFactors;
			}
			set
			{
				if ((this._NumFactors != value))
				{
					this.OnNumFactorsChanging(value);
					this.SendPropertyChanging();
					this._NumFactors = value;
					this.SendPropertyChanged("NumFactors");
					this.OnNumFactorsChanged();
				}
			}
		}
		
		[Column(Storage="_NumBlockedFactors", DbType="Int NOT NULL")]
		public int NumBlockedFactors
		{
			get
			{
				return this._NumBlockedFactors;
			}
			set
			{
				if ((this._NumBlockedFactors != value))
				{
					this.OnNumBlockedFactorsChanging(value);
					this.SendPropertyChanging();
					this._NumBlockedFactors = value;
					this.SendPropertyChanged("NumBlockedFactors");
					this.OnNumBlockedFactorsChanged();
				}
			}
		}
		
		[Column(Storage="_Width", DbType="Int NOT NULL")]
		public int Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[Column(Storage="_Height", DbType="Int NOT NULL")]
		public int Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[Association(Name="ConfigDisplay_DisplayFactor", Storage="_DisplayFactors", OtherKey="ConfigDisplayID")]
		public EntitySet<DisplayFactor> DisplayFactors
		{
			get
			{
				return this._DisplayFactors;
			}
			set
			{
				this._DisplayFactors.Assign(value);
			}
		}
		
		[Association(Name="ConfigDisplay_DisplayBlockedFactor", Storage="_DisplayBlockedFactors", OtherKey="ConfigDisplayID")]
		public EntitySet<DisplayBlockedFactor> DisplayBlockedFactors
		{
			get
			{
				return this._DisplayBlockedFactors;
			}
			set
			{
				this._DisplayBlockedFactors.Assign(value);
			}
		}
		
		[Association(Name="Config_ConfigDisplay", Storage="_Config", ThisKey="ConfigID", IsForeignKey=true)]
		public Config Config
		{
			get
			{
				return this._Config.Entity;
			}
			set
			{
				Config previousValue = this._Config.Entity;
				if (((previousValue != value) 
							|| (this._Config.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Config.Entity = null;
						previousValue.ConfigDisplays.Remove(this);
					}
					this._Config.Entity = value;
					if ((value != null))
					{
						value.ConfigDisplays.Add(this);
						this._ConfigID = value.ConfigID;
					}
					else
					{
						this._ConfigID = default(int);
					}
					this.SendPropertyChanged("Config");
				}
			}
		}
		
		[Association(Name="Display_ConfigDisplay", Storage="_Display", ThisKey="DisplayID", IsForeignKey=true)]
		public Display Display
		{
			get
			{
				return this._Display.Entity;
			}
			set
			{
				Display previousValue = this._Display.Entity;
				if (((previousValue != value) 
							|| (this._Display.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Display.Entity = null;
						previousValue.ConfigDisplays.Remove(this);
					}
					this._Display.Entity = value;
					if ((value != null))
					{
						value.ConfigDisplays.Add(this);
						this._DisplayID = value.DisplayID;
					}
					else
					{
						this._DisplayID = default(int);
					}
					this.SendPropertyChanged("Display");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DisplayFactors(DisplayFactor entity)
		{
			this.SendPropertyChanging();
			entity.ConfigDisplay = this;
		}
		
		private void detach_DisplayFactors(DisplayFactor entity)
		{
			this.SendPropertyChanging();
			entity.ConfigDisplay = null;
		}
		
		private void attach_DisplayBlockedFactors(DisplayBlockedFactor entity)
		{
			this.SendPropertyChanging();
			entity.ConfigDisplay = this;
		}
		
		private void detach_DisplayBlockedFactors(DisplayBlockedFactor entity)
		{
			this.SendPropertyChanging();
			entity.ConfigDisplay = null;
		}
	}
	
	[Table(Name="dbo.ExperimentMeasures")]
	public partial class ExperimentMeasure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ExperimentID;
		
		private int _MeasureID;
		
		private int _UserID;
		
		private System.Nullable<int> _ExperimentEntityID;
		
		private System.Nullable<bool> _Allowed;
		
		private EntityRef<Measure> _Measure;
		
		private EntityRef<User> _User;
		
		private EntityRef<Experiment> _Experiment;
		
		private EntityRef<ExperimentEntity> _ExperimentEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnExperimentIDChanging(int value);
    partial void OnExperimentIDChanged();
    partial void OnMeasureIDChanging(int value);
    partial void OnMeasureIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnExperimentEntityIDChanging(System.Nullable<int> value);
    partial void OnExperimentEntityIDChanged();
    partial void OnAllowedChanging(System.Nullable<bool> value);
    partial void OnAllowedChanged();
    #endregion
		
		public ExperimentMeasure()
		{
			this._Measure = default(EntityRef<Measure>);
			this._User = default(EntityRef<User>);
			this._Experiment = default(EntityRef<Experiment>);
			this._ExperimentEntity = default(EntityRef<ExperimentEntity>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ExperimentID", DbType="Int NOT NULL")]
		public int ExperimentID
		{
			get
			{
				return this._ExperimentID;
			}
			set
			{
				if ((this._ExperimentID != value))
				{
					if (this._Experiment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExperimentIDChanging(value);
					this.SendPropertyChanging();
					this._ExperimentID = value;
					this.SendPropertyChanged("ExperimentID");
					this.OnExperimentIDChanged();
				}
			}
		}
		
		[Column(Storage="_MeasureID", DbType="Int NOT NULL")]
		public int MeasureID
		{
			get
			{
				return this._MeasureID;
			}
			set
			{
				if ((this._MeasureID != value))
				{
					if (this._Measure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._MeasureID = value;
					this.SendPropertyChanged("MeasureID");
					this.OnMeasureIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_ExperimentEntityID", DbType="Int")]
		public System.Nullable<int> ExperimentEntityID
		{
			get
			{
				return this._ExperimentEntityID;
			}
			set
			{
				if ((this._ExperimentEntityID != value))
				{
					if (this._ExperimentEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExperimentEntityIDChanging(value);
					this.SendPropertyChanging();
					this._ExperimentEntityID = value;
					this.SendPropertyChanged("ExperimentEntityID");
					this.OnExperimentEntityIDChanged();
				}
			}
		}
		
		[Column(Storage="_Allowed", DbType="Bit")]
		public System.Nullable<bool> Allowed
		{
			get
			{
				return this._Allowed;
			}
			set
			{
				if ((this._Allowed != value))
				{
					this.OnAllowedChanging(value);
					this.SendPropertyChanging();
					this._Allowed = value;
					this.SendPropertyChanged("Allowed");
					this.OnAllowedChanged();
				}
			}
		}
		
		[Association(Name="Measure_ExperimentMeasure", Storage="_Measure", ThisKey="MeasureID", IsForeignKey=true)]
		public Measure Measure
		{
			get
			{
				return this._Measure.Entity;
			}
			set
			{
				Measure previousValue = this._Measure.Entity;
				if (((previousValue != value) 
							|| (this._Measure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Measure.Entity = null;
						previousValue.ExperimentMeasures.Remove(this);
					}
					this._Measure.Entity = value;
					if ((value != null))
					{
						value.ExperimentMeasures.Add(this);
						this._MeasureID = value.MeasureID;
					}
					else
					{
						this._MeasureID = default(int);
					}
					this.SendPropertyChanged("Measure");
				}
			}
		}
		
		[Association(Name="User_ExperimentMeasure", Storage="_User", ThisKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ExperimentMeasures.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ExperimentMeasures.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="Experiment_ExperimentMeasure", Storage="_Experiment", ThisKey="ExperimentID", IsForeignKey=true)]
		public Experiment Experiment
		{
			get
			{
				return this._Experiment.Entity;
			}
			set
			{
				Experiment previousValue = this._Experiment.Entity;
				if (((previousValue != value) 
							|| (this._Experiment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Experiment.Entity = null;
						previousValue.ExperimentMeasures.Remove(this);
					}
					this._Experiment.Entity = value;
					if ((value != null))
					{
						value.ExperimentMeasures.Add(this);
						this._ExperimentID = value.ExperimentID;
					}
					else
					{
						this._ExperimentID = default(int);
					}
					this.SendPropertyChanged("Experiment");
				}
			}
		}
		
		[Association(Name="ExperimentEntity_ExperimentMeasure", Storage="_ExperimentEntity", ThisKey="ExperimentEntityID", IsForeignKey=true)]
		public ExperimentEntity ExperimentEntity
		{
			get
			{
				return this._ExperimentEntity.Entity;
			}
			set
			{
				ExperimentEntity previousValue = this._ExperimentEntity.Entity;
				if (((previousValue != value) 
							|| (this._ExperimentEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExperimentEntity.Entity = null;
						previousValue.ExperimentMeasures.Remove(this);
					}
					this._ExperimentEntity.Entity = value;
					if ((value != null))
					{
						value.ExperimentMeasures.Add(this);
						this._ExperimentEntityID = value.ExperimentEntityID;
					}
					else
					{
						this._ExperimentEntityID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ExperimentEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Experiment")]
	public partial class Experiment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ExperimentID;
		
		private string _Name;
		
		private int _CreatorID;
		
		private string _Other;
		
		private string _ScenarioFilePath;
		
		private string _ScenarioFileType;
		
		private EntitySet<UsersInExperiment> _UsersInExperiments;
		
		private EntitySet<Config> _Configs;
		
		private EntitySet<ExperimentDisplay> _ExperimentDisplays;
		
		private EntitySet<ExperimentMeasure> _ExperimentMeasures;
		
		private EntitySet<ExperimentEntity> _ExperimentEntities;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExperimentIDChanging(int value);
    partial void OnExperimentIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCreatorIDChanging(int value);
    partial void OnCreatorIDChanged();
    partial void OnOtherChanging(string value);
    partial void OnOtherChanged();
    partial void OnScenarioFilePathChanging(string value);
    partial void OnScenarioFilePathChanged();
    partial void OnScenarioFileTypeChanging(string value);
    partial void OnScenarioFileTypeChanged();
    #endregion
		
		public Experiment()
		{
			this._UsersInExperiments = new EntitySet<UsersInExperiment>(new Action<UsersInExperiment>(this.attach_UsersInExperiments), new Action<UsersInExperiment>(this.detach_UsersInExperiments));
			this._Configs = new EntitySet<Config>(new Action<Config>(this.attach_Configs), new Action<Config>(this.detach_Configs));
			this._ExperimentDisplays = new EntitySet<ExperimentDisplay>(new Action<ExperimentDisplay>(this.attach_ExperimentDisplays), new Action<ExperimentDisplay>(this.detach_ExperimentDisplays));
			this._ExperimentMeasures = new EntitySet<ExperimentMeasure>(new Action<ExperimentMeasure>(this.attach_ExperimentMeasures), new Action<ExperimentMeasure>(this.detach_ExperimentMeasures));
			this._ExperimentEntities = new EntitySet<ExperimentEntity>(new Action<ExperimentEntity>(this.attach_ExperimentEntities), new Action<ExperimentEntity>(this.detach_ExperimentEntities));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_ExperimentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ExperimentID
		{
			get
			{
				return this._ExperimentID;
			}
			set
			{
				if ((this._ExperimentID != value))
				{
					this.OnExperimentIDChanging(value);
					this.SendPropertyChanging();
					this._ExperimentID = value;
					this.SendPropertyChanged("ExperimentID");
					this.OnExperimentIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_CreatorID", DbType="Int NOT NULL")]
		public int CreatorID
		{
			get
			{
				return this._CreatorID;
			}
			set
			{
				if ((this._CreatorID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorIDChanging(value);
					this.SendPropertyChanging();
					this._CreatorID = value;
					this.SendPropertyChanged("CreatorID");
					this.OnCreatorIDChanged();
				}
			}
		}
		
		[Column(Storage="_Other", DbType="NVarChar(100)")]
		public string Other
		{
			get
			{
				return this._Other;
			}
			set
			{
				if ((this._Other != value))
				{
					this.OnOtherChanging(value);
					this.SendPropertyChanging();
					this._Other = value;
					this.SendPropertyChanged("Other");
					this.OnOtherChanged();
				}
			}
		}
		
		[Column(Storage="_ScenarioFilePath", DbType="NVarChar(100)")]
		public string ScenarioFilePath
		{
			get
			{
				return this._ScenarioFilePath;
			}
			set
			{
				if ((this._ScenarioFilePath != value))
				{
					this.OnScenarioFilePathChanging(value);
					this.SendPropertyChanging();
					this._ScenarioFilePath = value;
					this.SendPropertyChanged("ScenarioFilePath");
					this.OnScenarioFilePathChanged();
				}
			}
		}
		
		[Column(Storage="_ScenarioFileType", DbType="NVarChar(100)")]
		public string ScenarioFileType
		{
			get
			{
				return this._ScenarioFileType;
			}
			set
			{
				if ((this._ScenarioFileType != value))
				{
					this.OnScenarioFileTypeChanging(value);
					this.SendPropertyChanging();
					this._ScenarioFileType = value;
					this.SendPropertyChanged("ScenarioFileType");
					this.OnScenarioFileTypeChanged();
				}
			}
		}
		
		[Association(Name="Experiment_UsersInExperiment", Storage="_UsersInExperiments", OtherKey="ExperimentID")]
		public EntitySet<UsersInExperiment> UsersInExperiments
		{
			get
			{
				return this._UsersInExperiments;
			}
			set
			{
				this._UsersInExperiments.Assign(value);
			}
		}
		
		[Association(Name="Experiment_Config", Storage="_Configs", OtherKey="ExperimentID")]
		public EntitySet<Config> Configs
		{
			get
			{
				return this._Configs;
			}
			set
			{
				this._Configs.Assign(value);
			}
		}
		
		[Association(Name="Experiment_ExperimentDisplay", Storage="_ExperimentDisplays", OtherKey="ExperimentID")]
		public EntitySet<ExperimentDisplay> ExperimentDisplays
		{
			get
			{
				return this._ExperimentDisplays;
			}
			set
			{
				this._ExperimentDisplays.Assign(value);
			}
		}
		
		[Association(Name="Experiment_ExperimentMeasure", Storage="_ExperimentMeasures", OtherKey="ExperimentID")]
		public EntitySet<ExperimentMeasure> ExperimentMeasures
		{
			get
			{
				return this._ExperimentMeasures;
			}
			set
			{
				this._ExperimentMeasures.Assign(value);
			}
		}
		
		[Association(Name="Experiment_ExperimentEntity", Storage="_ExperimentEntities", OtherKey="ExperimentID")]
		public EntitySet<ExperimentEntity> ExperimentEntities
		{
			get
			{
				return this._ExperimentEntities;
			}
			set
			{
				this._ExperimentEntities.Assign(value);
			}
		}
		
		[Association(Name="User_Experiment", Storage="_User", ThisKey="CreatorID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Experiments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Experiments.Add(this);
						this._CreatorID = value.UserID;
					}
					else
					{
						this._CreatorID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersInExperiments(UsersInExperiment entity)
		{
			this.SendPropertyChanging();
			entity.Experiment = this;
		}
		
		private void detach_UsersInExperiments(UsersInExperiment entity)
		{
			this.SendPropertyChanging();
			entity.Experiment = null;
		}
		
		private void attach_Configs(Config entity)
		{
			this.SendPropertyChanging();
			entity.Experiment = this;
		}
		
		private void detach_Configs(Config entity)
		{
			this.SendPropertyChanging();
			entity.Experiment = null;
		}
		
		private void attach_ExperimentDisplays(ExperimentDisplay entity)
		{
			this.SendPropertyChanging();
			entity.Experiment = this;
		}
		
		private void detach_ExperimentDisplays(ExperimentDisplay entity)
		{
			this.SendPropertyChanging();
			entity.Experiment = null;
		}
		
		private void attach_ExperimentMeasures(ExperimentMeasure entity)
		{
			this.SendPropertyChanging();
			entity.Experiment = this;
		}
		
		private void detach_ExperimentMeasures(ExperimentMeasure entity)
		{
			this.SendPropertyChanging();
			entity.Experiment = null;
		}
		
		private void attach_ExperimentEntities(ExperimentEntity entity)
		{
			this.SendPropertyChanging();
			entity.Experiment = this;
		}
		
		private void detach_ExperimentEntities(ExperimentEntity entity)
		{
			this.SendPropertyChanging();
			entity.Experiment = null;
		}
	}
	
	[Table(Name="dbo.EntityType")]
	public partial class EntityType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EntityTypeID;
		
		private string _Name;
		
		private EntitySet<ExperimentEntity> _ExperimentEntities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntityTypeIDChanging(int value);
    partial void OnEntityTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public EntityType()
		{
			this._ExperimentEntities = new EntitySet<ExperimentEntity>(new Action<ExperimentEntity>(this.attach_ExperimentEntities), new Action<ExperimentEntity>(this.detach_ExperimentEntities));
			OnCreated();
		}
		
		[Column(Storage="_EntityTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EntityTypeID
		{
			get
			{
				return this._EntityTypeID;
			}
			set
			{
				if ((this._EntityTypeID != value))
				{
					this.OnEntityTypeIDChanging(value);
					this.SendPropertyChanging();
					this._EntityTypeID = value;
					this.SendPropertyChanged("EntityTypeID");
					this.OnEntityTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="EntityType_ExperimentEntity", Storage="_ExperimentEntities", OtherKey="EntityTypeID")]
		public EntitySet<ExperimentEntity> ExperimentEntities
		{
			get
			{
				return this._ExperimentEntities;
			}
			set
			{
				this._ExperimentEntities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExperimentEntities(ExperimentEntity entity)
		{
			this.SendPropertyChanging();
			entity.EntityType = this;
		}
		
		private void detach_ExperimentEntities(ExperimentEntity entity)
		{
			this.SendPropertyChanging();
			entity.EntityType = null;
		}
	}
	
	[Table(Name="dbo.ExperimentEntity")]
	public partial class ExperimentEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ExperimentEntityID;
		
		private int _EntityTypeID;
		
		private string _Name;
		
		private int _ExperimentID;
		
		private System.Nullable<int> _OwnerExperimentEntityID;
		
		private EntitySet<ExperimentMeasure> _ExperimentMeasures;
		
		private EntitySet<ExperimentEntity> _ExperimentEntities;
		
		private EntityRef<EntityType> _EntityType;
		
		private EntityRef<Experiment> _Experiment;
		
		private EntityRef<ExperimentEntity> _ExperimentEntity1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExperimentEntityIDChanging(int value);
    partial void OnExperimentEntityIDChanged();
    partial void OnEntityTypeIDChanging(int value);
    partial void OnEntityTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnExperimentIDChanging(int value);
    partial void OnExperimentIDChanged();
    partial void OnOwnerExperimentEntityIDChanging(System.Nullable<int> value);
    partial void OnOwnerExperimentEntityIDChanged();
    #endregion
		
		public ExperimentEntity()
		{
			this._ExperimentMeasures = new EntitySet<ExperimentMeasure>(new Action<ExperimentMeasure>(this.attach_ExperimentMeasures), new Action<ExperimentMeasure>(this.detach_ExperimentMeasures));
			this._ExperimentEntities = new EntitySet<ExperimentEntity>(new Action<ExperimentEntity>(this.attach_ExperimentEntities), new Action<ExperimentEntity>(this.detach_ExperimentEntities));
			this._EntityType = default(EntityRef<EntityType>);
			this._Experiment = default(EntityRef<Experiment>);
			this._ExperimentEntity1 = default(EntityRef<ExperimentEntity>);
			OnCreated();
		}
		
		[Column(Storage="_ExperimentEntityID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ExperimentEntityID
		{
			get
			{
				return this._ExperimentEntityID;
			}
			set
			{
				if ((this._ExperimentEntityID != value))
				{
					this.OnExperimentEntityIDChanging(value);
					this.SendPropertyChanging();
					this._ExperimentEntityID = value;
					this.SendPropertyChanged("ExperimentEntityID");
					this.OnExperimentEntityIDChanged();
				}
			}
		}
		
		[Column(Storage="_EntityTypeID", DbType="Int NOT NULL")]
		public int EntityTypeID
		{
			get
			{
				return this._EntityTypeID;
			}
			set
			{
				if ((this._EntityTypeID != value))
				{
					if (this._EntityType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityTypeIDChanging(value);
					this.SendPropertyChanging();
					this._EntityTypeID = value;
					this.SendPropertyChanged("EntityTypeID");
					this.OnEntityTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_ExperimentID", DbType="Int NOT NULL")]
		public int ExperimentID
		{
			get
			{
				return this._ExperimentID;
			}
			set
			{
				if ((this._ExperimentID != value))
				{
					if (this._Experiment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExperimentIDChanging(value);
					this.SendPropertyChanging();
					this._ExperimentID = value;
					this.SendPropertyChanged("ExperimentID");
					this.OnExperimentIDChanged();
				}
			}
		}
		
		[Column(Storage="_OwnerExperimentEntityID", DbType="Int")]
		public System.Nullable<int> OwnerExperimentEntityID
		{
			get
			{
				return this._OwnerExperimentEntityID;
			}
			set
			{
				if ((this._OwnerExperimentEntityID != value))
				{
					if (this._ExperimentEntity1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerExperimentEntityIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerExperimentEntityID = value;
					this.SendPropertyChanged("OwnerExperimentEntityID");
					this.OnOwnerExperimentEntityIDChanged();
				}
			}
		}
		
		[Association(Name="ExperimentEntity_ExperimentMeasure", Storage="_ExperimentMeasures", OtherKey="ExperimentEntityID")]
		public EntitySet<ExperimentMeasure> ExperimentMeasures
		{
			get
			{
				return this._ExperimentMeasures;
			}
			set
			{
				this._ExperimentMeasures.Assign(value);
			}
		}
		
		[Association(Name="ExperimentEntity_ExperimentEntity", Storage="_ExperimentEntities", OtherKey="OwnerExperimentEntityID")]
		public EntitySet<ExperimentEntity> ExperimentEntities
		{
			get
			{
				return this._ExperimentEntities;
			}
			set
			{
				this._ExperimentEntities.Assign(value);
			}
		}
		
		[Association(Name="EntityType_ExperimentEntity", Storage="_EntityType", ThisKey="EntityTypeID", IsForeignKey=true)]
		public EntityType EntityType
		{
			get
			{
				return this._EntityType.Entity;
			}
			set
			{
				EntityType previousValue = this._EntityType.Entity;
				if (((previousValue != value) 
							|| (this._EntityType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EntityType.Entity = null;
						previousValue.ExperimentEntities.Remove(this);
					}
					this._EntityType.Entity = value;
					if ((value != null))
					{
						value.ExperimentEntities.Add(this);
						this._EntityTypeID = value.EntityTypeID;
					}
					else
					{
						this._EntityTypeID = default(int);
					}
					this.SendPropertyChanged("EntityType");
				}
			}
		}
		
		[Association(Name="Experiment_ExperimentEntity", Storage="_Experiment", ThisKey="ExperimentID", IsForeignKey=true)]
		public Experiment Experiment
		{
			get
			{
				return this._Experiment.Entity;
			}
			set
			{
				Experiment previousValue = this._Experiment.Entity;
				if (((previousValue != value) 
							|| (this._Experiment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Experiment.Entity = null;
						previousValue.ExperimentEntities.Remove(this);
					}
					this._Experiment.Entity = value;
					if ((value != null))
					{
						value.ExperimentEntities.Add(this);
						this._ExperimentID = value.ExperimentID;
					}
					else
					{
						this._ExperimentID = default(int);
					}
					this.SendPropertyChanged("Experiment");
				}
			}
		}
		
		[Association(Name="ExperimentEntity_ExperimentEntity", Storage="_ExperimentEntity1", ThisKey="OwnerExperimentEntityID", IsForeignKey=true)]
		public ExperimentEntity ExperimentEntity1
		{
			get
			{
				return this._ExperimentEntity1.Entity;
			}
			set
			{
				ExperimentEntity previousValue = this._ExperimentEntity1.Entity;
				if (((previousValue != value) 
							|| (this._ExperimentEntity1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExperimentEntity1.Entity = null;
						previousValue.ExperimentEntities.Remove(this);
					}
					this._ExperimentEntity1.Entity = value;
					if ((value != null))
					{
						value.ExperimentEntities.Add(this);
						this._OwnerExperimentEntityID = value.ExperimentEntityID;
					}
					else
					{
						this._OwnerExperimentEntityID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ExperimentEntity1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExperimentMeasures(ExperimentMeasure entity)
		{
			this.SendPropertyChanging();
			entity.ExperimentEntity = this;
		}
		
		private void detach_ExperimentMeasures(ExperimentMeasure entity)
		{
			this.SendPropertyChanging();
			entity.ExperimentEntity = null;
		}
		
		private void attach_ExperimentEntities(ExperimentEntity entity)
		{
			this.SendPropertyChanging();
			entity.ExperimentEntity1 = this;
		}
		
		private void detach_ExperimentEntities(ExperimentEntity entity)
		{
			this.SendPropertyChanging();
			entity.ExperimentEntity1 = null;
		}
	}
}
#pragma warning restore 1591

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VisualizationDashboard.RTPMEServiceRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MeasureResult", Namespace="http://Aptima.RTPMEngine")]
    [System.SerializableAttribute()]
    public partial class MeasureResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MeasurementIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private VisualizationDashboard.RTPMEServiceRef.MeasureStatus MeasurementStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MeasurementTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MeasurementTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MeasurementValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MeasurementID {
            get {
                return this.MeasurementIDField;
            }
            set {
                if ((object.ReferenceEquals(this.MeasurementIDField, value) != true)) {
                    this.MeasurementIDField = value;
                    this.RaisePropertyChanged("MeasurementID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public VisualizationDashboard.RTPMEServiceRef.MeasureStatus MeasurementStatus {
            get {
                return this.MeasurementStatusField;
            }
            set {
                if ((this.MeasurementStatusField.Equals(value) != true)) {
                    this.MeasurementStatusField = value;
                    this.RaisePropertyChanged("MeasurementStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MeasurementTime {
            get {
                return this.MeasurementTimeField;
            }
            set {
                if ((this.MeasurementTimeField.Equals(value) != true)) {
                    this.MeasurementTimeField = value;
                    this.RaisePropertyChanged("MeasurementTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MeasurementType {
            get {
                return this.MeasurementTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.MeasurementTypeField, value) != true)) {
                    this.MeasurementTypeField = value;
                    this.RaisePropertyChanged("MeasurementType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MeasurementValue {
            get {
                return this.MeasurementValueField;
            }
            set {
                if ((object.ReferenceEquals(this.MeasurementValueField, value) != true)) {
                    this.MeasurementValueField = value;
                    this.RaisePropertyChanged("MeasurementValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MeasureStatus", Namespace="http://schemas.datacontract.org/2004/07/Aptima.PMEngine.Services")]
    public enum MeasureStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        On = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Off = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://Aptima.RTPMEngine", ConfigurationName="RTPMEServiceRef.IPMEService", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IPMEService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Aptima.RTPMEngine/IPMEService/InitializeSession", ReplyAction="http://Aptima.RTPMEngine/IPMEService/InitializeSessionResponse")]
        void InitializeSession();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, IsInitiating=false, Action="http://Aptima.RTPMEngine/IPMEService/TerminateSession")]
        void TerminateSession();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://Aptima.RTPMEngine/IPMEService/LoadMeasurementFile", ReplyAction="http://Aptima.RTPMEngine/IPMEService/LoadMeasurementFileResponse")]
        bool LoadMeasurementFile(string measurementLibrary);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://Aptima.RTPMEngine/IPMEService/LoadMeasureInstance", ReplyAction="http://Aptima.RTPMEngine/IPMEService/LoadMeasureInstanceResponse")]
        bool LoadMeasureInstance(string measureInstance);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://Aptima.RTPMEngine/IPMEService/GetResults", ReplyAction="http://Aptima.RTPMEngine/IPMEService/GetResultsResponse")]
        System.Collections.Generic.Dictionary<string, VisualizationDashboard.RTPMEServiceRef.MeasureResult[]> GetResults();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://Aptima.RTPMEngine/IPMEService/SubscribeToData", ReplyAction="http://Aptima.RTPMEngine/IPMEService/SubscribeToDataResponse")]
        void SubscribeToData();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPMEServiceChannel : VisualizationDashboard.RTPMEServiceRef.IPMEService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PMEServiceClient : System.ServiceModel.ClientBase<VisualizationDashboard.RTPMEServiceRef.IPMEService>, VisualizationDashboard.RTPMEServiceRef.IPMEService {
        
        public PMEServiceClient() {
        }
        
        public PMEServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PMEServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PMEServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PMEServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void InitializeSession() {
            base.Channel.InitializeSession();
        }
        
        public void TerminateSession() {
            base.Channel.TerminateSession();
        }
        
        public bool LoadMeasurementFile(string measurementLibrary) {
            return base.Channel.LoadMeasurementFile(measurementLibrary);
        }
        
        public bool LoadMeasureInstance(string measureInstance) {
            return base.Channel.LoadMeasureInstance(measureInstance);
        }
        
        public System.Collections.Generic.Dictionary<string, VisualizationDashboard.RTPMEServiceRef.MeasureResult[]> GetResults() {
            return base.Channel.GetResults();
        }
        
        public void SubscribeToData() {
            base.Channel.SubscribeToData();
        }
    }
}

//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.ConfigDisplaySampleData
{
	using System; 

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class ConfigDisplaySampleData { }
#else

	public class ConfigDisplaySampleData : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		public ConfigDisplaySampleData()
		{
			try
			{
				System.Uri resourceUri = new System.Uri("/VisualizationDashboard;component/SampleData/ConfigDisplaySampleData/ConfigDisplaySampleData.xaml", System.UriKind.Relative);
				if (System.Windows.Application.GetResourceStream(resourceUri) != null)
				{
					System.Windows.Application.LoadComponent(this, resourceUri);
				}
			}
			catch (System.Exception)
			{
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private string _MeasureName = string.Empty;

		public string MeasureName
		{
			get
			{
				return this._MeasureName;
			}

			set
			{
				if (this._MeasureName != value)
				{
					this._MeasureName = value;
					this.OnPropertyChanged("MeasureName");
				}
			}
		}

		private string _MetricName = string.Empty;

		public string MetricName
		{
			get
			{
				return this._MetricName;
			}

			set
			{
				if (this._MetricName != value)
				{
					this._MetricName = value;
					this.OnPropertyChanged("MetricName");
				}
			}
		}

		private double _NumBlockedFactors = 0;

		public double NumBlockedFactors
		{
			get
			{
				return this._NumBlockedFactors;
			}

			set
			{
				if (this._NumBlockedFactors != value)
				{
					this._NumBlockedFactors = value;
					this.OnPropertyChanged("NumBlockedFactors");
				}
			}
		}

		private double _NumFactors = 0;

		public double NumFactors
		{
			get
			{
				return this._NumFactors;
			}

			set
			{
				if (this._NumFactors != value)
				{
					this._NumFactors = value;
					this.OnPropertyChanged("NumFactors");
				}
			}
		}

		private Display _Display = new Display();

		public Display Display
		{
			get
			{
				return this._Display;
			}

			set
			{
				if (this._Display != value)
				{
					this._Display = value;
					this.OnPropertyChanged("Display");
				}
			}
		}

		private DisplayFactors _DisplayFactors = new DisplayFactors();

		public DisplayFactors DisplayFactors
		{
			get
			{
				return this._DisplayFactors;
			}
		}

		private DisplayBlockedFactors _DisplayBlockedFactors = new DisplayBlockedFactors();

		public DisplayBlockedFactors DisplayBlockedFactors
		{
			get
			{
				return this._DisplayBlockedFactors;
			}
		}

		private double _Width = 0;

		public double Width
		{
			get
			{
				return this._Width;
			}

			set
			{
				if (this._Width != value)
				{
					this._Width = value;
					this.OnPropertyChanged("Width");
				}
			}
		}

		private double _Height = 0;

		public double Height
		{
			get
			{
				return this._Height;
			}

			set
			{
				if (this._Height != value)
				{
					this._Height = value;
					this.OnPropertyChanged("Height");
				}
			}
		}
	}

	public class Display : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _ImageResourcePath = string.Empty;

		public string ImageResourcePath
		{
			get
			{
				return this._ImageResourcePath;
			}

			set
			{
				if (this._ImageResourcePath != value)
				{
					this._ImageResourcePath = value;
					this.OnPropertyChanged("ImageResourcePath");
				}
			}
		}
	}

	public class DisplayFactorsItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _FactorName = string.Empty;

		public string FactorName
		{
			get
			{
				return this._FactorName;
			}

			set
			{
				if (this._FactorName != value)
				{
					this._FactorName = value;
					this.OnPropertyChanged("FactorName");
				}
			}
		}

		private double _FactorPos = 0;

		public double FactorPos
		{
			get
			{
				return this._FactorPos;
			}

			set
			{
				if (this._FactorPos != value)
				{
					this._FactorPos = value;
					this.OnPropertyChanged("FactorPos");
				}
			}
		}

		private string _FactorLabel = string.Empty;

		public string FactorLabel
		{
			get
			{
				return this._FactorLabel;
			}

			set
			{
				if (this._FactorLabel != value)
				{
					this._FactorLabel = value;
					this.OnPropertyChanged("FactorLabel");
				}
			}
		}
	}

	public class DisplayFactors : System.Collections.ObjectModel.ObservableCollection<DisplayFactorsItem>
	{ 
	}

	public class DisplayBlockedFactorsItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _LevelName = string.Empty;

		public string LevelName
		{
			get
			{
				return this._LevelName;
			}

			set
			{
				if (this._LevelName != value)
				{
					this._LevelName = value;
					this.OnPropertyChanged("LevelName");
				}
			}
		}
	}

	public class DisplayBlockedFactors : System.Collections.ObjectModel.ObservableCollection<DisplayBlockedFactorsItem>
	{ 
	}
#endif
}
